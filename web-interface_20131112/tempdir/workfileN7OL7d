role alice (Ui, Sj   : agent,
            SKuisj : symmetric_key,
            %Hc is the chaotic hash function
            % H is the  BioHashing function
            Hc: hash_func,
            H : hash_func,
            Snd, Rcv: channel(dy))
% Player by the initiator: the user Ui
played_by Ui
def=
 local State  : nat,
       RPWi, PWi, RBi, Bi, Xs, K, N, IDi, NIDi,
       TDi, Di, Fi, Tu, Ts, RNu, RNs:  text,
       M1, M2, M3, M4, M5, M6, M7, M8,
       M9: message
       
 const alice_bob_tu,  bob_alice_ts, 
       alice_bob_rnu,  bob_alice_rns,
       subs1, subs2, subs3 : protocol_id

init  State := 0

transition
%Registration phase
 1. State = 0   /\ Rcv(start) =|>
    State' := 1 /\ N' := new()
                /\ RPWi' := xor(Hc(PWi), N')
                /\ RBi'  := xor(H(Bi), N')
% Send the registration request message to Sj
                /\ Snd({IDi.RPWi'.RBi'}_SKuisj)
		/\ secret({Xs}, subs1, Sj)
                /\ secret({PWi, Bi, K}, subs2, Ui)
                /\ secret({IDi}, subs3, {Ui,Sj})
% Receive the registration acknowledgement message from Sj
 2. State = 1 /\ Rcv({xor(NIDi',Hc(IDi)). xor(NIDi',Hc(IDi)).
                 Hc(Hc(xor(IDi,Xs))).xor(Hc(xor(IDi,Xs)),
                 Hc(xor(xor(Hc(PWi),H(Bi)),IDi))).
                 Hc.H}_SKuisj) =|>
%Login phase
    State' := 2 /\ Tu' := new()
                /\ RNu' := new()
                /\ TDi' := xor(NIDi',Hc(IDi))
                /\ M1' := Hc(xor(IDi,Xs))
                /\ M2' := xor(xor(M1',RNu'),Tu')
                /\ M3' := Hc(M1'.RNu'.Tu'.IDi)
% Send the login request message to Sj
                /\ Snd(xor(Hc(IDi),TDi').M2'.M3')
% Ui has freshly generated the timestamp Tu for Sj
                /\ witness(Ui, Sj, alice_bob_tu, Tu')
% Ui has freshly generated the value RNu for Sj
                /\ witness(Ui, Sj, alice_bob_rnu, RNu')

%Authentication and session key agreement phase
% Receive the authentication request message from Sj
3. State = 2  /\ Rcv(xor(xor(Hc(xor(IDi, Xs)), RNs'),Ts').
                  Hc(Hc(xor(IDi, Xs)).RNs'.Ts'.RNu'.Tu'.IDi.NIDi').
                  xor(NIDi',Hc(Hc(xor(IDi, Xs)).RNs'.Ts'.IDi)).
                  Ts')  =|> 
% Ui's acceptance of the value Ts generated for Ui by Sj 
   State' := 3 /\ request(Sj, Ui, bob_alice_ts, Ts')
% Ui's acceptance of the value RNs generated for Ui by Sj 
              /\ request(Sj, Ui, bob_alice_rns, RNs')                
end role


%%%%%%%%%%%%%%%%%%%%% 
role  bob ( Ui, Sj   : agent,
            SKuisj : symmetric_key,
            %Hc is the chaotic hash function
            % H is the  BioHashing function
            Hc: hash_func,
            H : hash_func,
            Snd, Rcv: channel(dy))
% Player by the responder: the server Sj
played_by Ui
def=
 local State  : nat,
       RPWi, PWi, RBi, Bi, Xs, K, N, IDi, NIDi,
       TDi, Di, Fi, Tu, Ts, RNu, RNs:  text,
       M1, M2, M3, M4, M5, M6, M7, M8,
       M9: message
       
 const alice_bob_tu,  bob_alice_ts, 
       alice_bob_rnu,  bob_alice_rns,
       subs1, subs2, subs3 : protocol_id

init  State := 0
 transition
%Registration phase
% Receive the registration request message from Ui
1. State  = 0 /\ Rcv(({IDi.xor(Hc(PWi), N').
                 xor(H(Bi), N')}_SKuisj))  =|>  
  State' := 1 /\ secret({Xs}, subs1, Sj)
              /\ secret({PWi, Bi, K}, subs2, Ui)
              /\ secret({IDi}, subs3, {Ui,Sj})
              /\ NIDi' := new()
% Send the registration acknowledgement message to Ui
              /\ Snd({xor(NIDi',Hc(IDi)). xor(NIDi',Hc(IDi)).
                 Hc(Hc(xor(IDi,Xs))).xor(Hc(xor(IDi,Xs)),
                 Hc(xor(xor(Hc(PWi),H(Bi)),IDi))).
                 Hc.H}_SKuisj)
%Login phase
%Receive the login request message from Ui
2. State = 1 /\ Rcv(xor(Hc(IDi),xor(NIDi',Hc(IDi))).
                xor(xor(Hc(xor(IDi,Xs)),RNu'),Tu').
                Hc(Hc(xor(IDi,Xs)).RNu'.Tu'.IDi)) =|> 
%Authentication and session key agreement phase
 State' := 2 /\ M1' := Hc(xor(IDi,Xs))
             /\ M2' := xor(xor(M1',RNu'),Tu')
             /\ M4' := Hc(xor(IDi, Xs))
             /\ M5' := xor(xor(M2',Tu'), M4')
             /\ Ts' := new()
             /\ RNs':= new()
             /\ M7' := xor(xor(M4', RNs'),Ts')
             /\ M8' := Hc(M4'.RNs'.Ts'.M5'.Tu'.IDi.NIDi')
             /\ M9' := xor(NIDi',Hc(M4'.RNs'.Ts'.IDi))
% Send the authentication request message to Ui
             /\ Snd (M7'.M8'.M9'.Ts')
% Sj has freshly generated the timestamp Ts for Ui
             /\ witness(Sj, Ui, bob_alice_ts, Ts')
% Sj has freshly generated the value RNs for Ui
             /\ witness(Sj, Ui, bob_alice_rns, RNs')
% Sj's acceptance of the value Tu generated for Sj by Ui 
             /\ request(Ui, Sj, alice_bob_tu, Tu')
% Sj's acceptance of the value RNu generated for Sj by Ui 
            /\ request(Ui, Sj, alice_bob_rnu, RNu')
end role

%%%%%%%%%%%%%%%%%%%%%%%%%

role session(Ui, Sj: agent,
             SKuisj : symmetric_key,
             Hc : hash_func,
             H : hash_func)
def=

  local  SI, SJ, RI, RJ: channel (dy)
  
  composition
            alice(Ui, Sj, SKuisj, Hc, H, SI, RI)
        /\  bob(Ui, Sj, SKuisj, Hc, H, SJ, RJ)
end role 

%%%%%%%%%%%%%%%%%%%%%%%%%%%


role environment()
def=

  const ui, sj: agent,
        skuisj : symmetric_key,
        hc   : hash_func,
        h    : hash_func,
        pwi, bi, xs, k, idi, nidi, tu, ts,
        rnu, rns:  text,
        alice_bob_tu,  bob_alice_ts, 
        alice_bob_rnu,  bob_alice_rns,
        subs1, subs2, subs3 : protocol_id


  intruder_knowledge = {ui, sj, hc, h, tu, ts}

  composition
	   session(ui, sj, skuisj, hc, h) 
	/\ session(ui, sj, skuisj, hc, h) 
end role

goal
  secrecy_of subs1
  secrecy_of subs2
  secrecy_of subs3
  authentication_on alice_bob_tu
  authentication_on alice_bob_rnu
  authentication_on bob_alice_ts 
  authentication_on bob_alice_rns   
end goal
environment()


%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileoJeAFN

section signature:

state_server: agent * agent * agent * text * text * text * text * hash_func * nat * text * text * text * text * text * text * text * text * text * text * text * set(agent) * set(agent) * nat -> fact
state_registrationCenter: agent * agent * agent * text * text * text * text * text * hash_func * nat * text * text * text * text * text * text * text * text * text * text * text * text * set(agent) * set(agent) * nat -> fact
state_user: agent * agent * agent * text * text * text * text * text * text * hash_func * nat * text * text * text * text * text * text * text * text * text * text * set(agent) * set(agent) * nat -> fact


section types:

set_200, set_199, set_198, set_197, set_195, set_194, set_192, set_191, set_189, set_188, set_187, set_186, set_179, set_178, set_164, set_163, set_149, set_148: set
ns, rc_s_beta2, nr, sk, rc_u_alpha2, nu: protocol_id
MGoal, start: message
9, 13, 7, 5, 11, 8, State, SID, 3, 4, Dummy_State, SID2, SID1, 2, 1, 0: nat
H, h: hash_func
Betasec, Beta2, Alpha, Beta, SK, Beta1, Alpha1, Alpha2, Gammau, Ns, Gammas, Dummy_Betasec, Dummy_TID, ID, Sid, TID, KRS, Dummy_Gammas, Dummy_Beta, Dummy_Nr, Dummy_Ns, Dummy_Nu, Dummy_Beta2, Dummy_Beta1, Dummy_Alpha2, Dummy_Alpha1, Nu, Dummy_Alphasec, Dummy_Gammau, Nr, Dummy_Alpha, Dummy_SK, Dummy_NU, Dummy_A2, Dummy_A1, dummy_nonce, H1, H2, id, sid, tid, n1, n2, s1, pw, pwi, h1, h2, ner, A1, krs, A2, NU, Alphau, Betau, Alphasec, N1, S1, Pw: text
U, S, RC, A2Goal, A1Goal, u, rc, s, i: agent
Set_99, Dummy_Set_101, Dummy_Set_99, Dummy_Set_68, Dummy_Set_66, Set_68, Set_66, Dummy_Set_39, Dummy_Set_33, ASGoal, Set_39, Set_33, Set_101: set(agent)


section inits:

initial_state init1 := 
 iknows(start).
 iknows(u).
 iknows(rc).
 iknows(s).
 iknows(pwi).
 iknows(i).
 state_user(u,rc,s,id,sid,tid,n1,s1,pw,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_148,set_149,3).
 state_registrationCenter(s,u,rc,id,sid,tid,h1,h2,h,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_163,set_164,4).
 state_server(rc,u,s,id,sid,tid,krs,h,5,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_178,set_179,5).
 state_registrationCenter(s,i,rc,id,sid,tid,h1,h2,h,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_188,set_189,8).
 state_server(rc,i,s,id,sid,tid,krs,h,5,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_191,set_192,9).
 state_user(u,rc,i,id,sid,tid,n1,s1,pw,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_194,set_195,11).
 state_server(rc,u,i,id,sid,tid,krs,h,5,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_199,set_200,13)


section rules:

step step_0 (U,S,RC,ID,Sid,TID,N1,S1,Pw,H,Dummy_A1,Dummy_A2,SK,Dummy_NU,Alphau,Alpha,Betau,Gammau,Alphasec,Betasec,Dummy_Set_33,Set_39,SID,NU) :=
 state_user(U,S,RC,ID,Sid,TID,N1,S1,Pw,H,0,Dummy_A1,Dummy_A2,SK,Dummy_NU,Alphau,Alpha,Betau,Gammau,Alphasec,Betasec,Dummy_Set_33,Set_39,SID).
 iknows(start)
=[exists NU]=>
 state_user(U,S,RC,ID,Sid,TID,N1,S1,Pw,H,2,xor(apply(H,xor(pair(ID,Pw),N1)),xor(S1,Dummy_NU)),apply(H,xor(Dummy_NU,pair(TID,Sid))),SK,NU,Alphau,Alpha,Betau,Gammau,Alphasec,Betasec,Dummy_Set_33,Set_39,SID).
 iknows(pair(TID,pair(xor(apply(H,xor(pair(ID,Pw),N1)),xor(S1,Dummy_NU)),apply(H,xor(Dummy_NU,pair(TID,Sid)))))).
 secret(NU,nu,Dummy_Set_33).
 witness(U,RC,rc_u_alpha2,apply(H,xor(Dummy_NU,pair(TID,Sid)))).
 contains(U,Dummy_Set_33)

step step_1 (U,S,RC,ID,Sid,TID,N1,S1,Pw,H,A1,A2,Dummy_SK,NU,Alphau,Dummy_Alpha,Betau,Dummy_Gammau,Dummy_Alphasec,Betasec,Set_33,Dummy_Set_39,SID,Alpha) :=
 state_user(U,S,RC,ID,Sid,TID,N1,S1,Pw,H,2,A1,A2,Dummy_SK,NU,Alphau,Dummy_Alpha,Betau,Dummy_Gammau,Dummy_Alphasec,Betasec,Set_33,Dummy_Set_39,SID).
 iknows(Alpha)
 =>
 state_user(U,S,RC,ID,Sid,TID,N1,S1,Pw,H,4,A1,A2,apply(H,xor(xor(Alpha,apply(H,NU)),NU)),NU,Alphau,Alpha,Betau,Dummy_Gammau,xor(Alpha,apply(H,NU)),Betasec,Set_33,Dummy_Set_39,SID).
 secret(apply(H,xor(xor(Alpha,apply(H,NU)),NU)),sk,Dummy_Set_39).
 contains(U,Dummy_Set_39).
 contains(S,Dummy_Set_39).
 contains(RC,Dummy_Set_39)

step step_2 (RC,U,S,ID,Sid,TID,H1,H2,H,Dummy_Alpha1,Dummy_Alpha2,Dummy_Beta1,Dummy_Beta2,Dummy_Nu,Dummy_Ns,Dummy_Nr,Dummy_SK,Dummy_Alpha,Dummy_Beta,Dummy_Gammas,Dummy_Gammau,Dummy_Set_66,Dummy_Set_68,SID,Alpha1,Alpha2,Beta1,Beta2,Nr) :=
 state_registrationCenter(RC,U,S,ID,Sid,TID,H1,H2,H,1,Dummy_Alpha1,Dummy_Alpha2,Dummy_Beta1,Dummy_Beta2,Dummy_Nu,Dummy_Ns,Dummy_Nr,Dummy_SK,Dummy_Alpha,Dummy_Beta,Dummy_Gammas,Dummy_Gammau,Dummy_Set_66,Dummy_Set_68,SID).
 iknows(pair(TID,pair(Alpha1,pair(Alpha2,pair(Sid,pair(Beta1,Beta2))))))
=[exists Nr]=>
 state_registrationCenter(RC,U,S,ID,Sid,TID,H1,H2,H,3,Alpha1,Alpha2,Beta1,Beta2,xor(Alpha1,H1),xor(Beta1,H2),Nr,apply(H,xor(xor(Alpha1,H1),xor(Nr,xor(Beta1,H2)))),xor(apply(H,xor(Alpha1,H1)),xor(xor(Beta1,H2),Nr)),xor(apply(H,xor(Beta1,H2)),xor(xor(Alpha1,H1),Nr)),apply(H,xor(H2,apply(H,xor(xor(Alpha1,H1),xor(Nr,xor(Beta1,H2)))))),apply(H,xor(apply(H,xor(xor(Alpha1,H1),xor(Nr,xor(Beta1,H2)))),H1)),Dummy_Set_66,Dummy_Set_68,SID).
 iknows(pair(xor(apply(H,xor(Alpha1,H1)),xor(xor(Beta1,H2),Nr)),pair(apply(H,xor(apply(H,xor(xor(Alpha1,H1),xor(Nr,xor(Beta1,H2)))),H1)),pair(xor(apply(H,xor(Beta1,H2)),xor(xor(Alpha1,H1),Nr)),apply(H,xor(H2,apply(H,xor(xor(Alpha1,H1),xor(Nr,xor(Beta1,H2)))))))))).
 secret(apply(H,xor(xor(Alpha1,H1),xor(Nr,xor(Beta1,H2)))),sk,Dummy_Set_66).
 secret(Nr,nr,Dummy_Set_68).
 request(RC,U,rc_u_alpha2,Alpha2,SID).
 request(RC,S,rc_s_beta2,Beta2,SID).
 contains(S,Dummy_Set_66).
 contains(U,Dummy_Set_66).
 contains(RC,Dummy_Set_66).
 contains(RC,Dummy_Set_68)

step step_3 (S,U,RC,ID,Sid,Dummy_TID,KRS,H,Betasec,Dummy_Beta2,Alpha,Beta,SK,Dummy_Beta1,Dummy_Alpha1,Dummy_Alpha2,Gammau,Dummy_Ns,Gammas,Dummy_Set_99,Set_101,SID,TID,Alpha1,Alpha2,Ns) :=
 state_server(S,U,RC,ID,Sid,Dummy_TID,KRS,H,5,Betasec,Dummy_Beta2,Alpha,Beta,SK,Dummy_Beta1,Dummy_Alpha1,Dummy_Alpha2,Gammau,Dummy_Ns,Gammas,Dummy_Set_99,Set_101,SID).
 iknows(pair(TID,pair(Alpha1,Alpha2)))
=[exists Ns]=>
 state_server(S,U,RC,ID,Sid,TID,KRS,H,7,Betasec,apply(H,xor(Ns,pair(Sid,Dummy_TID))),Alpha,Beta,SK,xor(KRS,Ns),Alpha1,Alpha2,Gammau,Ns,Gammas,Dummy_Set_99,Set_101,SID).
 iknows(pair(Dummy_TID,pair(Dummy_Alpha1,pair(Dummy_Alpha2,pair(Sid,pair(xor(KRS,Ns),apply(H,xor(Ns,pair(Sid,Dummy_TID))))))))).
 witness(S,RC,rc_s_beta2,apply(H,xor(Ns,pair(Sid,Dummy_TID)))).
 secret(Ns,ns,Dummy_Set_99).
 contains(S,Dummy_Set_99)

step step_4 (S,U,RC,ID,Sid,TID,KRS,H,Dummy_Betasec,Beta2,Dummy_Alpha,Dummy_Beta,Dummy_SK,Beta1,Alpha1,Alpha2,Dummy_Gammau,Ns,Dummy_Gammas,Set_99,Dummy_Set_101,SID,Alpha) :=
 state_server(S,U,RC,ID,Sid,TID,KRS,H,7,Dummy_Betasec,Beta2,Dummy_Alpha,Dummy_Beta,Dummy_SK,Beta1,Alpha1,Alpha2,Dummy_Gammau,Ns,Dummy_Gammas,Set_99,Dummy_Set_101,SID).
 iknows(Alpha)
 =>
 state_server(S,U,RC,ID,Sid,TID,KRS,H,9,xor(Beta,apply(H,Ns)),Beta2,Alpha,Dummy_Beta,apply(H,xor(Dummy_Betasec,Ns)),Beta1,Alpha1,Alpha2,Dummy_Gammau,Ns,Dummy_Gammas,Set_99,Dummy_Set_101,SID).
 iknows(Dummy_Alpha).
 secret(apply(H,xor(Dummy_Betasec,Ns)),sk,Dummy_Set_101).
 contains(S,Dummy_Set_101).
 contains(RC,Dummy_Set_101).
 contains(U,Dummy_Set_101)


section properties:

property secrecy_of_nr (MGoal,ASGoal) :=
 [] ((secret(MGoal,nr,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_ns (MGoal,ASGoal) :=
 [] ((secret(MGoal,ns,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_nu (MGoal,ASGoal) :=
 [] ((secret(MGoal,nu,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sk (MGoal,ASGoal) :=
 [] ((secret(MGoal,sk,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_rc_u_alpha2 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,rc_u_alpha2,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,rc_u_alpha2,MGoal))
     /\ ((request(A1Goal,A2Goal,rc_u_alpha2,MGoal,SID1)
           /\ request(A1Goal,A2Goal,rc_u_alpha2,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_rc_s_beta2 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,rc_s_beta2,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,rc_s_beta2,MGoal))
     /\ ((request(A1Goal,A2Goal,rc_s_beta2,MGoal,SID1)
           /\ request(A1Goal,A2Goal,rc_s_beta2,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_nr (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,nr,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_ns (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,ns,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_nu (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,nu,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sk (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sk,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_rc_u_alpha2 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,rc_u_alpha2,MGoal,SID) &
 not(witness(A2Goal,A1Goal,rc_u_alpha2,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_rc_u_alpha2 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,rc_u_alpha2,MGoal,SID1).
 request(A1Goal,A2Goal,rc_u_alpha2,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_rc_s_beta2 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,rc_s_beta2,MGoal,SID) &
 not(witness(A2Goal,A1Goal,rc_s_beta2,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_rc_s_beta2 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,rc_s_beta2,MGoal,SID1).
 request(A1Goal,A2Goal,rc_s_beta2,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


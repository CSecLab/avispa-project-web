role server (RC, U, S             : agent,
             Kj                   : symmetric_key,
             SKij                 : symmetric_key,
             Xu                   : public_key,
             Ij,Zs,ID,SID         : nat,
             H                    : hash_func,
             SND_SRC, RCV_SRC, SND_US, RCV_US: channel(dy))
played_by S
def=

  local State               : nat,
        D                   : nat, 
        Ri,Rj,Vi,Vj         : message, 
        Ns,Nu,Pi            : text 
const user_server_ki, server_user_kj,
      user_server_skij, server_user_skij,
      server_user_skij ,ki ,kj : protocol_id
  init State := 0
  transition
  1.State  = 0 /\ RCV_SRC(start)  =|>
    State':= 2 /\ SND_SRC(SID)

  2.State  = 2 /\ RCV_SRC(H,Ij,Xu,Zs)   =|>   %21
    State':= 4 /\ D' := new()
               /\ Pi' := exp(H(ID.Xu),H(exp(Zs,Xu)))
               /\ Kj' := exp(Ij,Pi)
               /\ Nu' := xor(H(Kj),Ri) 
               /\ Ns' := exp(D,Kj)
               /\ Rj' := xor(H(Kj),Ns)
               /\ Vj' := H(Kj.Ns)
               /\ SKij' := H(exp(D,Nu))
               /\ SND_US(SID,Rj,Vj)                                

end role 

role registrationcenter  (RC,U,S               : agent,  
                          X,Xs,Xu              : public_key,
                          Z,Zs,Zu,PWu,ID,SID   : nat,
                          H                    : hash_func,
                          SND_SRC, RCV_SRC, SND_URC, RCV_URC: channel(dy))
played_by RC
def=

  local State, Ii, Ij, Ti     : nat%,
const user_server_Ij, user_server_Ii :protocol_id

  init State := 1
  transition
  1.State  = 1 /\ RCV_SRC(SID)     =|>
    State':= 3 /\ Ij' := exp(H(SID.Xs),X)
               /\ secret(Ij,user_server_Ij,{RC,S})
               /\ SND_SRC(H,Ij,Xu,Zs)  %51
  2.State  = 3 /\ RCV_URC(ID,PWu)  =|>
    State':= 5 /\ Ii' := exp(H(ID.Xu),X)
               /\ Ti' := xor(H(ID.Zu.PWu),Ii)
               /\ secret (Ii,user_server_Ii,{RC,U})
               /\ SND_URC(H,Ti,Xs,Zu)

end role


role user (RC,U,S                            : agent,    %60
           Ki                                : symmetric_key,
          SKij                              : symmetric_key, 
           Xs                                : public_key,
           Ii,Zu,Ti,PW,ID,SID                : nat,
           H                                 : hash_func,
           SND_URC, RCV_URC, SND_US, RCV_US: channel(dy))
played_by U
def=

  local State               : nat,  
        B ,PWu                  : nat,
        Pj,Ns,Nu        : text,
        Ri,Rj,Vi,Vj         : message
const user_server_ki, server_user_kj,
      user_server_skij, server_user_skij,
      server_user_skij ,ki ,kj : protocol_id
       
  init State := 5
  transition
  1.State  = 5 /\ SND_URC(ID,PWu)  =|>  
    State':= 7 /\ RCV_URC(H,Ti,Xs,Zu)
  2.State  = 9 /\ RCV_US(SID,Rj,Vj)   %80
               /\ Ns = xor(H(Ki),Rj)
               /\ SKij= H(exp(B,Ns))  =|>
    State':= 7 /\ Ii':= xor(H(ID.Zu.PWu),Ti)  
               /\ Pj':= exp(H(SID.Xs),H(exp(Zu,Xs)))
               /\ Ki':= exp(Ii,Pj)
               /\ B':= new()
               /\ Nu':= exp(Ki,B')
               /\ Ri':= xor(H(Ki),Nu)
               /\ Vi':= H(Ki.Nu)
               /\ SND_US(ID,Ri,Vi)  %90
end role


role session(RC,U,S      : agent,
%%%            Ki,Kj,SKij  : symmetric_key,
             X,Xu,Xs     : public_key,
%%             Z,Zu,Zs,PWu,ID,SID,Ij,Ii,Ti,PW     : text,
		H:hash_func)
def=
 local
   Ki,Kj,SKij  : symmetric_key,
   Z,Zu,Zs,PWu,ID,SID,Ij,Ii,Ti,PW     : nat,
   SSRC, RSRC,
   SURC, RURC,
   SRCS, RRCS,
   SRCU, RRCU,
   SSU, RSU,
   SUS, RUS:channel (dy)

  composition

  
      registrationcenter (RC, U, S, X, Xu, Xs,Z,Zu,Zs,PWu,ID,SID,H, SRCS, RRCS, SRCU, RRCU)  %115
	/\ user (RC,U,S,Ki,SKij, Xs, Ii,Zu,Ti,PW,ID,SID, H,SURC, RURC, SUS, RUS)
	/\ server (RC, U, S,Kj,SKij,Xu,Ij,Zs,ID,SID, H, SSRC, RSRC, SSU, RSU)

end role


role environment()     
def=
  const rc,u,s,i                 : agent,
        server_user_skij, user_server_Ii, server_user_Ij,ki ,kj  : protocol_id,  %125
        x, xs,xu, xi            : public_key,
	skij  : symmetric_key,
        z,zu,zs,zi,pwu,id,sid,ij,ii,ti,pw: nat, 
	h:hash_func
        
%%ki,kj
  intruder_knowledge = {rc, s, u, x, xs, xu, zi, xi, h}

  composition   

     session(rc,u,s,x,xu,xs,h)
     /\ session(i,u,s,xi,xu,xs,h)
     /\ session(rc,i,s,x,xi,xs,h)
     /\ session(rc,u,i,x,xu,xi,h)

end role

goal 

  secrecy_of user_server_Ii, user_server_Ij,ki ,kj  
  authentication_on user_server_skij
end goal    

environment()
role client(A, B, S: agent,
			Ka:symmetric_key,
			SND_SA, RCV_SA, SND_BA, RCV_BA: channel(dy)) played_by A def=
			
	local
		State:nat,
		Na,Ns:text,
		Kbs, Kas:symmetric_key
		
	init
		State:=0
	
	transition
	1. State =0 /\ RCV_BA(start) =|>
	   State':= 2 /\ Na' := new()
				  /\ SND_SA(A.B.{Na'}_Ka)
				   
	2. State = 5 /\ RCV_SA({Na.Kab.B.{Kab.Nb'}_Kbs}_Kas) =|>
	   State':=6 /\ SND_BA({Kab, Nb'}_Kbs)
	   
	3. State':7 /\ RCV_BA({Nb'}_Kab)   
	            /\ SND_AB({Nb}_Kab)

end role

role server(A, S, B: agent,
			Ka,Kb: symmetric_key,
			SND_AS, RCV_AS: channel(dy)) played_by S def=
			
	local
		State:nat,
		Na,Na:text,
		Ka,Kbs,Kas:symmetric_key
		
	init
		State:=1
		
	transition
	1. State = 1 /\ RCV_AS(A.B.{Na'}_Ka)
				
	2. State':=3 /\ SND_BS({A.Ns.Na}_Kbs)	=|>
	   State = 4 /\ RCV_SB({A.Na.Ns.Nb}_Kbs)
					SND_SA({Na.Kab.B.{Kab.Nb'}_Kbs}_Kas)
		
end role

rold service(A, S, B: agent,
			 Kb:symmetric_key,
			 SND_AB, RCV_AB: channel(dy)) played_by B def=
			 
	local
		State:nat,
		Ns, Na: text,
		Kbs, Kas: symmetric_key
		
	init
		State:=3
		
	transition
	1. State = 3 /\ RCV_BS({A.Ns.Na}_Kbs)
				 /\ SND_BS({A.Na.Ns.Nb}_Kbs)

	2. State = 7 /\ RCV_BA({Kab.Nb'}_Kbs)
				 /\ SND_BA({Nb'}_Kab)
		
	3. State':=8 /\ RCV_BA({Nb}_Kab)	
end role
		
		
role session(A, S, B: agent,
			 Ka, Kb: symmetric_key) def=
			 
	local
		SSA, RSA,
		SBA, RBA,
		SAS, RAS,
		SAB, RAB : channel(dy)
		
	composition
		client(A, S, B, Ka, Kab, SSA, RSA, SBA, RBA)
	/\  server(A, S, B, Ka, Kb, Kab, SAS, RAS)
	/\  service(A, S, B, Kb, Kab, SAB, RAB)
end role

role environment() def=

	const a, b, s : agent,
		  ka, kb, ki :symmetric_key,
		  client_service_na, k : protocol_id
		  
	intruder_knowledge = {a, b, s, ki}

	composition
	
	   session(a,s,b,ka,kb)
	/\ session(a,s,i,ka,ki)
	/\ session(i,s,b,ki,kb)
	
end role

goal
	secrecy_of k
	authentication_on client_service_na
end goal

environment()		
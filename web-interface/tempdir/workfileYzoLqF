role alice(
		A, B 	: agent,
		Ka, Kb 	: public_key,
		SND, RCV: channel(dy))
played_by A def=
	
	local
		State	: nat,
		Na, Nb	: text
	init
		State	:= 0
	transition
		1. State = 0 /\ RCV(start) =|>
			State' := 2 /\ Na' := new() 
						/\ SND({A.Na'}_Kb)
						/\ witness(A,B,bob_alice_na,Na')
		2. State = 2 /\ RCV({B.Na.Nb'}_Ka) =|>
			State' := 4 /\ SND ({A.Nb'}_Kb)
						/\ request(A,B,alice_bob_nb,Nb')
end role

role bob(
		A, B	: agent,
		Ka, Kb	: public_key,
		SND, RCV: channel(dy))
played_by B def=
	
	local
		State	: nat,
		Na, Nb	: text
	init
		State	:= 1
	transition
		1. State = 1 /\ RCV({A.Na'}_Kb) =|>
			State' := 3 /\ Nb' := new()
						/\ SND({B.Na'.Nb'}_Ka)
						/\ witness(A,B,alice_bob_nb,Nb')
		2. State = 3 /\ RCV({A.Nb'}_Kb) =|>
			State' := 5 /\ request(B,A,bob_alice_na,Na)
end role

role session(
		A, B	: agent,
		Ka, Kb	: public_key)	
def=

	local
		SA, SB, RA , RB	: channel (dy)
	composition
		alice(A,B,Ka,Kb,SA,RA) /\ bob(A,B,Ka,Kb,SB,RB)
end role

role environment() def=
	const
		alice_bob_na, bob_alice_nb : protocol_id,
		a,b : agent,
		ka,kb,ki : public_key
	
	intruder_knowledge = {a,b,ka,kb,ki,inv(ki)}
	
	composition
		session(a,b,ka,kb) /\ session(a,i,ka,ki)
						   /\ session(i,b,ki,kb)
end role

goal
	authentication_on alice_bob_na
	authentication_on bob_alice_nb
end goal
environment()	
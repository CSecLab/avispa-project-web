%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfile4Y8Mwh

section signature:

state_base_station: agent * agent * public_key * symmetric_key * nat * text * text * nat -> fact
state_subscriber_station: agent * agent * public_key * symmetric_key * nat * text * text * set(agent) * nat -> fact


section types:

nb, na: protocol_id
Na, Nb, Dummy_Nb, Dummy_Na, dummy_nonce: text
set_73, set_71, set_60: set
ka, ki, Ka: public_key
State, 10, 3, 6, 4, SID, 2, 1, 0, Dummy_State, SID2, SID1: nat
Set_21, Dummy_Set_21, ASGoal: set(agent)
start, MGoal: message
a, b, B, A, Dummy_A, A2Goal, A1Goal, i: agent
S, sab, sai, sbi: symmetric_key


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(ka).
 iknows(ki).
 iknows(sai).
 iknows(sbi).
 iknows(i).
 state_subscriber_station(a,b,ka,sab,0,dummy_nonce,dummy_nonce,set_60,3).
 state_base_station(b,a,ka,sab,0,dummy_nonce,dummy_nonce,4).
 state_subscriber_station(a,i,ka,sai,0,dummy_nonce,dummy_nonce,set_71,6).
 state_base_station(b,i,ki,sbi,0,dummy_nonce,dummy_nonce,10)


section rules:

step step_0 (A,B,Ka,S,Na,Nb,Set_21,SID) :=
 state_subscriber_station(A,B,Ka,S,0,Na,Nb,Set_21,SID).
 iknows(start)
 =>
 state_subscriber_station(A,B,Ka,S,1,Na,Nb,Set_21,SID).
 iknows(A)

step step_1 (A,B,Ka,S,Dummy_Na,Dummy_Nb,Dummy_Set_21,SID,Na,Nb) :=
 state_subscriber_station(A,B,Ka,S,1,Dummy_Na,Dummy_Nb,Dummy_Set_21,SID).
 iknows(Nb)
=[exists Na]=>
 state_subscriber_station(A,B,Ka,S,2,Na,Nb,Dummy_Set_21,SID).
 iknows(crypt(Ka,pair(Na,pair(Nb,pair(S,A))))).
 witness(A,B,na,Na).
 secret(S,sec_sab1,Dummy_Set_21).
 contains(A,Dummy_Set_21).
 contains(B,Dummy_Set_21)

step step_2 (A,B,Ka,S,Na,Nb,Set_21,SID) :=
 state_subscriber_station(A,B,Ka,S,2,Na,Nb,Set_21,SID).
 iknows(Na)
 =>
 state_subscriber_station(A,B,Ka,S,3,Na,Nb,Set_21,SID).
 request(A,B,nb,Nb,SID)

step step_3 (B,Dummy_A,Ka,S,Na,Dummy_Nb,SID,A,Nb) :=
 state_base_station(B,Dummy_A,Ka,S,0,Na,Dummy_Nb,SID).
 iknows(A)
=[exists Nb]=>
 state_base_station(B,A,Ka,S,1,Na,Nb,SID).
 iknows(Nb).
 witness(B,Dummy_A,nb,Nb)

step step_4 (B,A,Ka,S,Dummy_Na,Nb,SID,Na) :=
 state_base_station(B,A,Ka,S,1,Dummy_Na,Nb,SID).
 iknows(crypt(Ka,pair(Na,pair(Nb,pair(S,A)))))
 =>
 state_base_station(B,A,Ka,S,2,Na,Nb,SID).
 iknows(Na).
 request(B,A,na,Na,SID)


section properties:

property secrecy_of_sec_sab1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_sab1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_nb (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,nb,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,nb,MGoal))
     /\ ((request(A1Goal,A2Goal,nb,MGoal,SID1)
           /\ request(A1Goal,A2Goal,nb,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_na (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,na,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,na,MGoal))
     /\ ((request(A1Goal,A2Goal,na,MGoal,SID1)
           /\ request(A1Goal,A2Goal,na,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sec_sab1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_sab1,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_nb (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,nb,MGoal,SID) &
 not(witness(A2Goal,A1Goal,nb,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_nb (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,nb,MGoal,SID1).
 request(A1Goal,A2Goal,nb,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_na (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,na,MGoal,SID) &
 not(witness(A2Goal,A1Goal,na,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_na (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,na,MGoal,SID1).
 request(A1Goal,A2Goal,na,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


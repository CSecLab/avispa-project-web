%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileM1XyX1

section signature:

state_reader: agent * agent * text * hash_func * hash_func * public_key * nat * text * text * text * apply(hash_func,text) * crypt(public_key,pair(text,text)) * crypt(public_key,pair(text,text)) * set(crypt(public_key,pair(text,text))) * set(agent) * nat -> fact
state_tag: agent * agent * crypt(public_key,pair(text,text)) * hash_func * hash_func * nat * text * text * text * apply(hash_func,text) * crypt(public_key,pair(text,text)) * set(crypt(public_key,pair(text,text))) * set(agent) * nat -> fact


section types:

Dummy_Set_26, Dummy_Set_46, Set_46, Set_26: set(crypt(public_key,pair(text,text)))
sec_did1, aut_tag, sec_did2, aut_reader: protocol_id
dummy_msg, MGoal, start: message
Dummy_DNew, Dummy_DID, DNew, DID: crypt(public_key,pair(text,text))
Dummy_E, E: apply(hash_func,text)
dummy_pk, kG, kGi, KG: public_key
g, phi, Fg, Phi: hash_func
Dummy_RNew, Dummy_X, Dummy_Nr, dummy_nonce, id, rinit, idit, idri, Nr, X, RNew, ID: text
4, SID, Dummy_State, 3, SID2, SID1, State, 2, 1, 0, 13, 9, 7, 6: nat
A2Goal, A1Goal, t, r, T, R, i: agent
set_96, set_95, set_81, set_80, set_116, set_115, set_114, set_113, set_112, set_111, set_109, set_108, set_106, set_105, set_103, set_102: set
Dummy_Set_48, ASGoal, Set_48, Set_28, Dummy_Set_28: set(agent)


section inits:

initial_state init1 := 
 iknows(start).
 iknows(t).
 iknows(r).
 iknows(g).
 iknows(kG).
 iknows(phi).
 iknows(kgi).
 iknows(idit).
 iknows(idri).
 iknows(i).
 state_tag(t,r,crypt(kG,pair(id,rinit)),g,phi,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,crypt(dummy_pk,pair(dummy_nonce,dummy_nonce)),set_80,set_81,3).
 state_reader(r,t,id,g,phi,kG,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,crypt(dummy_pk,pair(dummy_nonce,dummy_nonce)),crypt(dummy_pk,pair(dummy_nonce,dummy_nonce)),set_95,set_96,4).
 state_tag(t,r,crypt(kG,pair(id,rinit)),g,phi,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,crypt(dummy_pk,pair(dummy_nonce,dummy_nonce)),set_102,set_103,6).
 state_reader(r,t,id,g,phi,kG,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,crypt(dummy_pk,pair(dummy_nonce,dummy_nonce)),crypt(dummy_pk,pair(dummy_nonce,dummy_nonce)),set_105,set_106,7).
 state_tag(t,i,crypt(kGi,pair(idit,rinit)),g,phi,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,crypt(dummy_pk,pair(dummy_nonce,dummy_nonce)),set_108,set_109,9).
 state_reader(r,i,idri,g,phi,kG,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,crypt(dummy_pk,pair(dummy_nonce,dummy_nonce)),crypt(dummy_pk,pair(dummy_nonce,dummy_nonce)),set_115,set_116,13)


section rules:

step step_0 (T,R,DID,Fg,Phi,Dummy_Nr,Dummy_X,RNew,Dummy_E,DNew,Dummy_Set_46,Dummy_Set_48,SID,Nr,X) :=
 state_tag(T,R,DID,Fg,Phi,0,Dummy_Nr,Dummy_X,RNew,Dummy_E,DNew,Dummy_Set_46,Dummy_Set_48,SID).
 iknows(Nr)
=[exists X]=>
 state_tag(T,R,DID,Fg,Phi,1,Nr,X,RNew,apply(Phi,X),DNew,Dummy_Set_46,Dummy_Set_48,SID).
 iknows(pair(scrypt(apply(Phi,X),DID),apply(Fg,pair(Nr,pair(X,DID))))).
 witness(T,R,aut_tag,X).
 secret(Dummy_Set_46,sec_did1,Dummy_Set_48).
 contains(DID,Dummy_Set_46).
 contains(T,Dummy_Set_48).
 contains(R,Dummy_Set_48)

step step_1 (T,R,Dummy_DID,Fg,Phi,Nr,Dummy_X,RNew,E,Dummy_DNew,Set_46,Set_48,SID,DNew,X) :=
 state_tag(T,R,Dummy_DID,Fg,Phi,1,Nr,Dummy_X,RNew,E,Dummy_DNew,Set_46,Set_48,SID).
 iknows(pair(xor(DNew,E),apply(Fg,pair(Nr,pair(DNew,X)))))
 =>
 state_tag(T,R,DNew,Fg,Phi,2,Nr,X,RNew,E,DNew,Set_46,Set_48,SID).
 request(T,R,aut_reader,Nr,SID)

step step_2 (R,T,ID,Fg,Phi,KG,Dummy_Nr,X,RNew,E,DID,DNew,Set_26,Set_28,SID,Nr) :=
 state_reader(R,T,ID,Fg,Phi,KG,0,Dummy_Nr,X,RNew,E,DID,DNew,Set_26,Set_28,SID).
 iknows(start)
=[exists Nr]=>
 state_reader(R,T,ID,Fg,Phi,KG,1,Nr,X,RNew,E,DID,DNew,Set_26,Set_28,SID).
 iknows(Nr).
 witness(R,T,aut_reader,Nr)

step step_3 (R,T,ID,Fg,Phi,KG,Nr,Dummy_X,Dummy_RNew,Dummy_E,Dummy_DID,Dummy_DNew,Dummy_Set_26,Dummy_Set_28,SID,X,RNew,E) :=
 state_reader(R,T,ID,Fg,Phi,KG,1,Nr,Dummy_X,Dummy_RNew,Dummy_E,Dummy_DID,Dummy_DNew,Dummy_Set_26,Dummy_Set_28,SID).
 iknows(pair(scrypt(E,Dummy_DID),apply(Fg,pair(Nr,pair(X,Dummy_DID)))))
=[exists RNew]=>
 state_reader(R,T,ID,Fg,Phi,KG,2,Nr,X,RNew,E,crypt(KG,pair(ID,RNew)),crypt(KG,pair(ID,RNew)),Dummy_Set_26,Dummy_Set_28,SID).
 iknows(pair(xor(crypt(KG,pair(ID,RNew)),E),apply(Fg,pair(Nr,pair(crypt(KG,pair(ID,RNew)),X))))).
 secret(Dummy_Set_26,sec_did2,Dummy_Set_28).
 request(R,T,aut_tag,X,SID).
 contains(crypt(KG,pair(ID,RNew)),Dummy_Set_26).
 contains(R,Dummy_Set_28).
 contains(T,Dummy_Set_28)


section properties:

property secrecy_of_sec_did1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_did1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_did2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_did2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_aut_reader (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,aut_reader,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,aut_reader,MGoal))
     /\ ((request(A1Goal,A2Goal,aut_reader,MGoal,SID1)
           /\ request(A1Goal,A2Goal,aut_reader,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_aut_tag (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,aut_tag,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,aut_tag,MGoal))
     /\ ((request(A1Goal,A2Goal,aut_tag,MGoal,SID1)
           /\ request(A1Goal,A2Goal,aut_tag,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sec_did1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_did1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_did2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_did2,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_aut_reader (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,aut_reader,MGoal,SID) &
 not(witness(A2Goal,A1Goal,aut_reader,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_aut_reader (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,aut_reader,MGoal,SID1).
 request(A1Goal,A2Goal,aut_reader,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_aut_tag (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,aut_tag,MGoal,SID) &
 not(witness(A2Goal,A1Goal,aut_tag,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_aut_tag (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,aut_tag,MGoal,SID1).
 request(A1Goal,A2Goal,aut_tag,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


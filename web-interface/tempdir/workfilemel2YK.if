%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilemel2YK

section signature:

state_server: agent * agent * hash_func * hash_func * hash_func * hash_func * symmetric_key * public_key * public_key * text * text * text * text * text * text * pair(text,pair(text,text)) * pair(text,text) * nat * message * message * apply(hash_func,pair(symmetric_key,pair(text,apply(hash_func,pair(symmetric_key,pair(text,text)))))) * apply(hash_func,pair(symmetric_key,pair(text,apply(hash_func,pair(symmetric_key,pair(text,text)))))) * apply(hash_func,pair(apply(hash_func,pair(text,pair(text,text))),pair(agent,pair(agent,pair(text,pair(text,pair(text,text))))))) * apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text))))))) * apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text))))))) * public_key * nat -> fact
state_client: agent * agent * hash_func * hash_func * hash_func * hash_func * symmetric_key * public_key * public_key * text * text * text * text * text * pair(text,pair(text,text)) * pair(text,text) * text * nat * message * message * apply(hash_func,pair(symmetric_key,pair(text,apply(hash_func,pair(symmetric_key,pair(text,text)))))) * apply(hash_func,pair(symmetric_key,pair(text,apply(hash_func,pair(symmetric_key,pair(text,text)))))) * apply(hash_func,pair(apply(hash_func,pair(text,pair(text,text))),pair(agent,pair(agent,pair(text,pair(text,pair(text,text))))))) * apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text))))))) * apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text))))))) * public_key * apply(hash_func,pair(text,pair(text,text))) * set(agent) * set(agent) * nat -> fact


section types:

na_nb2, totp_id, hotp_id, na_nb1, sec_clientk, sec_serverk: protocol_id
Dummy_M, M: apply(hash_func,pair(text,pair(text,text)))
set_168, set_167, set_165, set_164, set_135, set_134: set
ClientK, ServerK, Dummy_ServerK, Dummy_ClientK: apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text)))))))
Finished, Dummy_Finished: apply(hash_func,pair(apply(hash_func,pair(text,pair(text,text))),pair(agent,pair(agent,pair(text,pair(text,pair(text,text)))))))
Totp, Hotp, Dummy_Totp, Dummy_Hotp: apply(hash_func,pair(symmetric_key,pair(text,apply(hash_func,pair(symmetric_key,pair(text,text))))))
Set_61, Set_59, Dummy_Set_61, Dummy_Set_59, ASGoal: set(agent)
State, 10, 6, 4, SID, 3, 36, 2, 1, Dummy_State, 0, SID2, SID1: nat
Challenge, Time, Dummy_Time, Dummy_Challenge, start, dummy_msg, MGoal: message
UserId, Dummy_UserId: pair(text,text)
MethAuth, Dummy_MethAuth: pair(text,pair(text,text))
choiceMethode, Na, Nb, Sid, Pa, Xt, PMS, Dummy_PMS, Dummy_Nb, hotp, totp, Dummy_Xt, certificat, Dummy_Pa, null, Dummy_Sid, error_message, Dummy_Na, opad, ipad, dummy_nonce: text
Ka, Kb, Ks, Dummy_Ka, Dummy_Kb, dummy_pk, ka, kb, ki, ks: public_key
SharedKey, sharedKey: symmetric_key
H, PRF, KeyGen, SHA_1, h, prf, keygen, sha_1: hash_func
A, B, A2Goal, A1Goal, a, b, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(ka).
 iknows(kb).
 iknows(ks).
 iknows(ki).
 iknows(inv(ki)).
 iknows(crypt(inv(ks),pair(i,ki))).
 iknows(i).
 state_client(a,b,h,prf,keygen,sha_1,sharedKey,ka,ks,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,pair(dummy_nonce,pair(dummy_nonce,dummy_nonce)),pair(dummy_nonce,dummy_nonce),dummy_nonce,0,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_pk,dummy_msg,set_134,set_135,3).
 state_server(b,a,h,prf,keygen,sha_1,sharedKey,kb,ks,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,pair(dummy_nonce,pair(dummy_nonce,dummy_nonce)),pair(dummy_nonce,dummy_nonce),1,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_pk,4).
 state_client(a,i,h,prf,keygen,sha_1,sharedKey,ka,ks,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,pair(dummy_nonce,pair(dummy_nonce,dummy_nonce)),pair(dummy_nonce,dummy_nonce),dummy_nonce,0,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_pk,dummy_msg,set_164,set_165,6).
 state_server(b,i,h,prf,keygen,sha_1,sharedKey,kb,ks,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,pair(dummy_nonce,pair(dummy_nonce,dummy_nonce)),pair(dummy_nonce,dummy_nonce),1,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_pk,10)


section rules:

step step_0 (A,B,H,PRF,KeyGen,SHA_1,SharedKey,Ka,Ks,Dummy_Na,Dummy_Sid,Dummy_Pa,Dummy_Xt,PMS,Dummy_MethAuth,Dummy_UserId,Nb,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Kb,M,Set_59,Set_61,SID,Na,Sid,Pa,MethAuth,UserId) :=
 state_client(A,B,H,PRF,KeyGen,SHA_1,SharedKey,Ka,Ks,Dummy_Na,Dummy_Sid,Dummy_Pa,Dummy_Xt,PMS,Dummy_MethAuth,Dummy_UserId,Nb,0,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Kb,M,Set_59,Set_61,SID).
 iknows(start)
=[exists Sid,UserId,MethAuth,Pa,Na]=>
 state_client(A,B,H,PRF,KeyGen,SHA_1,SharedKey,Ka,Ks,Na,Sid,Pa,36,PMS,MethAuth,UserId,Nb,2,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Kb,M,Set_59,Set_61,SID).
 iknows(pair(A,pair(Na,pair(Sid,pair(Pa,pair(36,pair(MethAuth,UserId)))))))

step step_1 (A,B,H,PRF,KeyGen,SHA_1,SharedKey,Ka,Ks,Na,Sid,Pa,Dummy_Xt,PMS,Dummy_MethAuth,UserId,Dummy_Nb,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Dummy_Kb,M,Set_59,Set_61,SID,MethAuth,Nb,Kb) :=
 state_client(A,B,H,PRF,KeyGen,SHA_1,SharedKey,Ka,Ks,Na,Sid,Pa,Dummy_Xt,PMS,Dummy_MethAuth,UserId,Dummy_Nb,2,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Dummy_Kb,M,Set_59,Set_61,SID).
 iknows(pair(Nb,pair(Sid,pair(Pa,pair(error_message,pair(MethAuth,crypt(inv(Ks),pair(B,Kb))))))))
 =>
 state_client(A,B,H,PRF,KeyGen,SHA_1,SharedKey,Ka,Ks,Na,Sid,Pa,error_message,PMS,MethAuth,UserId,Nb,6,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Kb,M,Set_59,Set_61,SID)

step step_2 (A,B,H,PRF,KeyGen,SHA_1,SharedKey,Ka,Ks,Na,Sid,Pa,Dummy_Xt,Dummy_PMS,Dummy_MethAuth,UserId,Dummy_Nb,Dummy_Challenge,Dummy_Time,Dummy_Hotp,Totp,Dummy_Finished,Dummy_ClientK,Dummy_ServerK,Dummy_Kb,Dummy_M,Set_59,Set_61,SID,Xt,PMS,Nb,Challenge,Time,Kb) :=
 state_client(A,B,H,PRF,KeyGen,SHA_1,SharedKey,Ka,Ks,Na,Sid,Pa,Dummy_Xt,Dummy_PMS,Dummy_MethAuth,UserId,Dummy_Nb,2,Dummy_Challenge,Dummy_Time,Dummy_Hotp,Totp,Dummy_Finished,Dummy_ClientK,Dummy_ServerK,Dummy_Kb,Dummy_M,Set_59,Set_61,SID).
 iknows(pair(Nb,pair(Sid,pair(Pa,pair(Xt,pair(pair(hotp,pair(null,null)),crypt(inv(Ks),pair(B,Kb)))))))).
 iknows(pair(Challenge,Time))
=[exists PMS]=>
 state_client(A,B,H,PRF,KeyGen,SHA_1,SharedKey,Ka,Ks,Na,Sid,Pa,Xt,PMS,pair(hotp,pair(null,null)),UserId,Nb,4,Challenge,Time,apply(SHA_1,pair(SharedKey,pair(opad,apply(SHA_1,pair(SharedKey,pair(ipad,Challenge)))))),Totp,apply(H,pair(apply(PRF,pair(PMS,pair(Na,Nb))),pair(A,pair(B,pair(Na,pair(Pa,pair(Sid,Dummy_Xt))))))),apply(KeyGen,pair(A,pair(Na,pair(Nb,apply(PRF,pair(PMS,pair(Na,Nb))))))),apply(KeyGen,pair(B,pair(Na,pair(Nb,apply(PRF,pair(PMS,pair(Na,Nb))))))),Kb,apply(PRF,pair(PMS,pair(Na,Nb))),Set_59,Set_61,SID).
 iknows(pair(crypt(Kb,PMS),pair(crypt(Kb,pair(A,apply(SHA_1,pair(SharedKey,pair(opad,apply(SHA_1,pair(SharedKey,pair(ipad,Challenge)))))))),pair(crypt(inv(Ka),apply(H,pair(Nb,pair(B,PMS)))),scrypt(apply(KeyGen,pair(A,pair(Na,pair(Nb,apply(PRF,pair(PMS,pair(Na,Nb))))))),apply(H,pair(apply(PRF,pair(PMS,pair(Na,Nb))),pair(A,pair(B,pair(Na,pair(Pa,pair(Sid,Dummy_Xt)))))))))))).
 witness(B,A,na_nb1,pair(Na,Nb)).
 request(B,A,hotp_id,apply(SHA_1,pair(SharedKey,pair(opad,apply(SHA_1,pair(SharedKey,pair(ipad,Challenge)))))),SID)

step step_3 (A,B,H,PRF,KeyGen,SHA_1,SharedKey,Ka,Ks,Na,Sid,Pa,Dummy_Xt,Dummy_PMS,Dummy_MethAuth,UserId,Dummy_Nb,Dummy_Challenge,Dummy_Time,Hotp,Dummy_Totp,Dummy_Finished,Dummy_ClientK,Dummy_ServerK,Dummy_Kb,Dummy_M,Set_59,Set_61,SID,Xt,PMS,Nb,Challenge,Time,Kb) :=
 state_client(A,B,H,PRF,KeyGen,SHA_1,SharedKey,Ka,Ks,Na,Sid,Pa,Dummy_Xt,Dummy_PMS,Dummy_MethAuth,UserId,Dummy_Nb,2,Dummy_Challenge,Dummy_Time,Hotp,Dummy_Totp,Dummy_Finished,Dummy_ClientK,Dummy_ServerK,Dummy_Kb,Dummy_M,Set_59,Set_61,SID).
 iknows(pair(Nb,pair(Sid,pair(Pa,pair(Xt,pair(pair(null,pair(totp,null)),crypt(inv(Ks),pair(B,Kb)))))))).
 iknows(pair(Challenge,Time))
=[exists PMS]=>
 state_client(A,B,H,PRF,KeyGen,SHA_1,SharedKey,Ka,Ks,Na,Sid,Pa,Xt,PMS,pair(null,pair(totp,null)),UserId,Nb,4,Challenge,Time,Hotp,apply(SHA_1,pair(SharedKey,pair(opad,apply(SHA_1,pair(SharedKey,pair(ipad,Time)))))),apply(H,pair(apply(PRF,pair(PMS,pair(Na,Nb))),pair(A,pair(B,pair(Na,pair(Pa,pair(Sid,Dummy_Xt))))))),apply(KeyGen,pair(A,pair(Na,pair(Nb,apply(PRF,pair(PMS,pair(Na,Nb))))))),apply(KeyGen,pair(B,pair(Na,pair(Nb,apply(PRF,pair(PMS,pair(Na,Nb))))))),Kb,apply(PRF,pair(PMS,pair(Na,Nb))),Set_59,Set_61,SID).
 iknows(pair(crypt(Kb,PMS),pair(crypt(Kb,pair(A,apply(SHA_1,pair(SharedKey,pair(opad,apply(SHA_1,pair(SharedKey,pair(ipad,Time)))))))),pair(crypt(inv(Ka),apply(H,pair(Nb,pair(B,PMS)))),scrypt(apply(KeyGen,pair(A,pair(Na,pair(Nb,apply(PRF,pair(PMS,pair(Na,Nb))))))),apply(H,pair(apply(PRF,pair(PMS,pair(Na,Nb))),pair(A,pair(B,pair(Na,pair(Pa,pair(Sid,Dummy_Xt)))))))))))).
 witness(B,A,na_nb1,pair(Na,Nb)).
 request(B,A,totp_id,Dummy_Totp,SID)

step step_4 (A,B,H,PRF,KeyGen,SHA_1,SharedKey,Ka,Ks,Na,Sid,Pa,Dummy_Xt,Dummy_PMS,UserId,Dummy_Nb,Challenge,Time,Hotp,Totp,Dummy_Finished,Dummy_ClientK,Dummy_ServerK,Dummy_Kb,Dummy_M,Set_59,Set_61,SID,Xt,PMS,MethAuth,Nb,Kb) :=
 state_client(A,B,H,PRF,KeyGen,SHA_1,SharedKey,Ka,Ks,Na,Sid,Pa,Dummy_Xt,Dummy_PMS,pair(null,pair(null,certificat)),UserId,Dummy_Nb,2,Challenge,Time,Hotp,Totp,Dummy_Finished,Dummy_ClientK,Dummy_ServerK,Dummy_Kb,Dummy_M,Set_59,Set_61,SID).
 iknows(pair(Nb,pair(Sid,pair(Pa,pair(Xt,pair(MethAuth,crypt(inv(Ks),pair(B,Kb))))))))
=[exists PMS]=>
 state_client(A,B,H,PRF,KeyGen,SHA_1,SharedKey,Ka,Ks,Na,Sid,Pa,Xt,PMS,MethAuth,UserId,Nb,4,Challenge,Time,Hotp,Totp,apply(H,pair(apply(PRF,pair(PMS,pair(Na,Nb))),pair(A,pair(B,pair(Na,pair(Pa,pair(Sid,Dummy_Xt))))))),apply(KeyGen,pair(A,pair(Na,pair(Nb,apply(PRF,pair(PMS,pair(Na,Nb))))))),apply(KeyGen,pair(B,pair(Na,pair(Nb,apply(PRF,pair(PMS,pair(Na,Nb))))))),Kb,apply(PRF,pair(PMS,pair(Na,Nb))),Set_59,Set_61,SID).
 iknows(pair(crypt(Kb,PMS),pair(crypt(inv(Ks),pair(A,Ka)),pair(crypt(inv(Ka),apply(H,pair(Nb,pair(B,PMS)))),scrypt(apply(KeyGen,pair(A,pair(Na,pair(Nb,apply(PRF,pair(PMS,pair(Na,Nb))))))),apply(H,pair(apply(PRF,pair(PMS,pair(Na,Nb))),pair(A,pair(B,pair(Na,pair(Pa,pair(Sid,Dummy_Xt)))))))))))).
 witness(B,A,na_nb1,pair(Na,Nb))

step step_5 (A,B,H,PRF,KeyGen,SHA_1,SharedKey,Ka,Ks,Na,Sid,Pa,Xt,PMS,MethAuth,UserId,Nb,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Kb,M,Dummy_Set_59,Dummy_Set_61,SID) :=
 state_client(A,B,H,PRF,KeyGen,SHA_1,SharedKey,Ka,Ks,Na,Sid,Pa,Xt,PMS,MethAuth,UserId,Nb,4,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Kb,M,Dummy_Set_59,Dummy_Set_61,SID).
 iknows(scrypt(ServerK,Finished))
 =>
 state_client(A,B,H,PRF,KeyGen,SHA_1,SharedKey,Ka,Ks,Na,Sid,Pa,Xt,PMS,MethAuth,UserId,Nb,4,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Kb,M,Dummy_Set_59,Dummy_Set_61,SID).
 secret(ClientK,sec_clientk,Dummy_Set_59).
 secret(ServerK,sec_serverk,Dummy_Set_61).
 contains(A,Dummy_Set_59).
 contains(B,Dummy_Set_59).
 contains(A,Dummy_Set_61).
 contains(B,Dummy_Set_61)

step step_6 (B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Dummy_Na,Nb,Dummy_Sid,Dummy_Pa,Dummy_Xt,PMS,Dummy_MethAuth,Dummy_UserId,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Ka,SID,Na,Sid,Pa,Xt,MethAuth,UserId) :=
 state_server(B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Dummy_Na,Nb,Dummy_Sid,Dummy_Pa,Dummy_Xt,PMS,Dummy_MethAuth,Dummy_UserId,1,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Ka,SID).
 iknows(pair(A,pair(Na,pair(Sid,pair(Pa,pair(Xt,pair(MethAuth,UserId))))))) &
 not(equal(Xt,36))
 =>
 state_server(B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Na,Nb,Sid,Pa,Xt,PMS,MethAuth,UserId,6,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Ka,SID)

step step_7 (B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Dummy_Na,Dummy_Nb,Dummy_Sid,Dummy_Pa,Dummy_Xt,PMS,Dummy_MethAuth,Dummy_UserId,Dummy_Challenge,Dummy_Time,Hotp,Totp,Finished,ClientK,ServerK,Ka,SID,Na,Nb,Sid,Pa,UserId,Challenge,Time) :=
 state_server(B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Dummy_Na,Dummy_Nb,Dummy_Sid,Dummy_Pa,Dummy_Xt,PMS,Dummy_MethAuth,Dummy_UserId,1,Dummy_Challenge,Dummy_Time,Hotp,Totp,Finished,ClientK,ServerK,Ka,SID).
 iknows(pair(A,pair(Na,pair(Sid,pair(Pa,pair(36,pair(MethAuth,UserId)))))))
=[exists Time,Challenge,Nb]=>
 state_server(B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Na,Nb,Sid,Pa,36,PMS,choiceMethode,UserId,3,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Ka,SID).
 iknows(pair(Nb,pair(Sid,pair(Pa,pair(36,pair(choiceMethode,crypt(inv(Ks),pair(B,Kb)))))))).
 iknows(B)

step step_8 (B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Na,Nb,Sid,Pa,Dummy_Xt,Dummy_PMS,MethAuth,UserId,Challenge,Time,Dummy_Hotp,Totp,Finished,ClientK,ServerK,Dummy_Ka,SID,PMS,Hotp,Ka) :=
 state_server(B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Na,Nb,Sid,Pa,Dummy_Xt,Dummy_PMS,MethAuth,UserId,3,Challenge,Time,Dummy_Hotp,Totp,Finished,ClientK,ServerK,Dummy_Ka,SID).
 iknows(pair(crypt(Kb,PMS),pair(crypt(Kb,pair(A,Hotp)),pair(crypt(inv(Ka),apply(H,pair(Nb,pair(B,PMS)))),scrypt(apply(KeyGen,pair(A,pair(Na,pair(Nb,apply(PRF,pair(PMS,pair(Na,Nb))))))),apply(H,pair(apply(PRF,pair(PMS,pair(Na,Nb))),pair(A,pair(B,pair(Na,pair(Pa,pair(Sid,Xt)))))))))))) &
 not(equal(Hotp,apply(SHA_1,pair(SharedKey,pair(opad,apply(SHA_1,pair(SharedKey,pair(ipad,Challenge))))))))
 =>
 state_server(B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Na,Nb,Sid,Pa,error_message,PMS,MethAuth,UserId,6,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Ka,SID).
 iknows(pair(Nb,pair(Sid,pair(Pa,pair(error_message,6)))))

step step_9 (B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Na,Nb,Sid,Pa,Dummy_Xt,Dummy_PMS,MethAuth,UserId,Challenge,Time,Dummy_Hotp,Totp,Finished,ClientK,ServerK,Dummy_Ka,SID,Xt,PMS,Ka) :=
 state_server(B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Na,Nb,Sid,Pa,Dummy_Xt,Dummy_PMS,MethAuth,UserId,3,Challenge,Time,Dummy_Hotp,Totp,Finished,ClientK,ServerK,Dummy_Ka,SID).
 iknows(pair(crypt(Kb,PMS),pair(crypt(Kb,pair(A,apply(SHA_1,pair(SharedKey,pair(opad,apply(SHA_1,pair(SharedKey,pair(ipad,Challenge)))))))),pair(crypt(inv(Ka),apply(H,pair(Nb,pair(B,PMS)))),scrypt(apply(KeyGen,pair(A,pair(Na,pair(Nb,apply(PRF,pair(PMS,pair(Na,Nb))))))),apply(H,pair(apply(PRF,pair(PMS,pair(Na,Nb))),pair(A,pair(B,pair(Na,pair(Pa,pair(Sid,Xt))))))))))))
 =>
 state_server(B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Na,Nb,Sid,Pa,Xt,PMS,MethAuth,UserId,3,Challenge,Time,apply(SHA_1,pair(SharedKey,pair(opad,apply(SHA_1,pair(SharedKey,pair(ipad,Challenge)))))),Totp,Finished,ClientK,ServerK,Ka,SID).
 witness(A,B,hotp_id,Dummy_Hotp).
 iknows(scrypt(ServerK,Finished))

step step_10 (B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Na,Nb,Sid,Pa,Dummy_Xt,Dummy_PMS,MethAuth,UserId,Challenge,Time,Hotp,Dummy_Totp,Finished,ClientK,ServerK,Dummy_Ka,SID,PMS,Totp,Ka) :=
 state_server(B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Na,Nb,Sid,Pa,Dummy_Xt,Dummy_PMS,MethAuth,UserId,3,Challenge,Time,Hotp,Dummy_Totp,Finished,ClientK,ServerK,Dummy_Ka,SID).
 iknows(pair(crypt(Kb,PMS),pair(crypt(Kb,pair(A,Totp)),pair(crypt(inv(Ka),apply(H,pair(Nb,pair(B,PMS)))),scrypt(apply(KeyGen,pair(A,pair(Na,pair(Nb,apply(PRF,pair(PMS,pair(Na,Nb))))))),apply(H,pair(apply(PRF,pair(PMS,pair(Na,Nb))),pair(A,pair(B,pair(Na,pair(Pa,pair(Sid,Xt)))))))))))) &
 not(equal(Totp,apply(SHA_1,pair(SharedKey,pair(opad,apply(SHA_1,pair(SharedKey,pair(ipad,Time))))))))
 =>
 state_server(B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Na,Nb,Sid,Pa,error_message,PMS,MethAuth,UserId,6,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Ka,SID).
 iknows(pair(Nb,pair(Sid,pair(Pa,pair(error_message,6)))))

step step_11 (B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Na,Nb,Sid,Pa,Dummy_Xt,Dummy_PMS,MethAuth,UserId,Challenge,Time,Hotp,Dummy_Totp,Finished,ClientK,ServerK,Dummy_Ka,SID,Xt,PMS,Ka) :=
 state_server(B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Na,Nb,Sid,Pa,Dummy_Xt,Dummy_PMS,MethAuth,UserId,3,Challenge,Time,Hotp,Dummy_Totp,Finished,ClientK,ServerK,Dummy_Ka,SID).
 iknows(pair(crypt(Kb,PMS),pair(crypt(Kb,pair(A,apply(SHA_1,pair(SharedKey,pair(opad,apply(SHA_1,pair(SharedKey,pair(ipad,Time)))))))),pair(crypt(inv(Ka),apply(H,pair(Nb,pair(B,PMS)))),scrypt(apply(KeyGen,pair(A,pair(Na,pair(Nb,apply(PRF,pair(PMS,pair(Na,Nb))))))),apply(H,pair(apply(PRF,pair(PMS,pair(Na,Nb))),pair(A,pair(B,pair(Na,pair(Pa,pair(Sid,Xt))))))))))))
 =>
 state_server(B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Na,Nb,Sid,Pa,Xt,PMS,MethAuth,UserId,3,Challenge,Time,Hotp,apply(SHA_1,pair(SharedKey,pair(opad,apply(SHA_1,pair(SharedKey,pair(ipad,Time)))))),Finished,ClientK,ServerK,Ka,SID).
 witness(A,B,totp_id,Dummy_Totp).
 iknows(scrypt(ServerK,Finished))

step step_12 (B,A,H,PRF,KeyGen,SHA_1,SharedKey,Dummy_Kb,Ks,Na,Nb,Sid,Pa,Xt,Dummy_PMS,MethAuth,UserId,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Ka,SID,Kb,PMS) :=
 state_server(B,A,H,PRF,KeyGen,SHA_1,SharedKey,Dummy_Kb,Ks,Na,Nb,Sid,Pa,Xt,Dummy_PMS,MethAuth,UserId,3,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Ka,SID).
 iknows(pair(crypt(Kb,PMS),pair(crypt(inv(Ks),pair(A,Ka)),pair(crypt(inv(Ka),apply(H,pair(Nb,pair(B,PMS)))),scrypt(apply(KeyGen,pair(A,pair(Na,pair(Nb,apply(PRF,pair(PMS,pair(Na,Nb))))))),apply(H,pair(apply(PRF,pair(PMS,pair(Na,Nb))),pair(A,pair(B,pair(Na,pair(Pa,pair(Sid,Xt))))))))))))
 =>
 state_server(B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Na,Nb,Sid,Pa,Xt,PMS,MethAuth,UserId,3,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Ka,SID).
 witness(A,B,na_nb2,pair(Na,Nb)).
 iknows(scrypt(ServerK,Finished))


section properties:

property secrecy_of_sec_clientk (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_clientk,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_serverk (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_serverk,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_na_nb1 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,na_nb1,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,na_nb1,MGoal))
     /\ ((request(A1Goal,A2Goal,na_nb1,MGoal,SID1)
           /\ request(A1Goal,A2Goal,na_nb1,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_na_nb2 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,na_nb2,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,na_nb2,MGoal))
     /\ ((request(A1Goal,A2Goal,na_nb2,MGoal,SID1)
           /\ request(A1Goal,A2Goal,na_nb2,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_hotp_id (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,hotp_id,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,hotp_id,MGoal))
     /\ ((request(A1Goal,A2Goal,hotp_id,MGoal,SID1)
           /\ request(A1Goal,A2Goal,hotp_id,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_totp_id (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,totp_id,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,totp_id,MGoal))
     /\ ((request(A1Goal,A2Goal,totp_id,MGoal,SID1)
           /\ request(A1Goal,A2Goal,totp_id,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sec_clientk (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_clientk,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_serverk (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_serverk,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_na_nb1 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,na_nb1,MGoal,SID) &
 not(witness(A2Goal,A1Goal,na_nb1,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_na_nb1 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,na_nb1,MGoal,SID1).
 request(A1Goal,A2Goal,na_nb1,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_na_nb2 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,na_nb2,MGoal,SID) &
 not(witness(A2Goal,A1Goal,na_nb2,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_na_nb2 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,na_nb2,MGoal,SID1).
 request(A1Goal,A2Goal,na_nb2,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_hotp_id (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,hotp_id,MGoal,SID) &
 not(witness(A2Goal,A1Goal,hotp_id,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_hotp_id (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,hotp_id,MGoal,SID1).
 request(A1Goal,A2Goal,hotp_id,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_totp_id (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,totp_id,MGoal,SID) &
 not(witness(A2Goal,A1Goal,totp_id,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_totp_id (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,totp_id,MGoal,SID1).
 request(A1Goal,A2Goal,totp_id,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


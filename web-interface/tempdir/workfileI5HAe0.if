%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileI5HAe0

section signature:

state_reader: agent * agent * text * message * message * hash_func * hash_func * public_key * nat * text * text * text * message * message * message * set(message) * set(agent) * nat -> fact
state_tag: agent * agent * message * hash_func * hash_func * nat * text * text * text * message * message * set(message) * set(agent) * nat -> fact


section types:

sec_did1, aut_tag, sec_did2, aut_reader: protocol_id
kG1, kG2, KG1: public_key
g, phi, Fg, Phi: hash_func
Dummy_CR, Dummy_DNew, Dummy_DID, Dummy_E, dummy_msg, MGoal, did, E, DNew, DID, start, CR, CID: message
4, SID, Dummy_State, 3, SID2, SID1, State, 2, 1, 0, 7, 6: nat
set_97, set_96, set_83, set_82, set_108, set_107, set_105, set_104: set
Dummy_Set_50, ASGoal, Set_50, Set_30, Dummy_Set_30: set(agent)
A2Goal, A1Goal, t, r, T, R, i: agent
Dummy_Set_48, Set_48, Set_28, Dummy_Set_28: set(message)
Dummy_X, Dummy_Nr, dummy_nonce, id, rinit, Nr, X, RNew, ID, Dummy_RNew: text


section inits:

initial_state init1 := 
 iknows(start).
 iknows(t).
 iknows(r).
 iknows(g).
 iknows(kG1).
 iknows(kG2).
 iknows(phi).
 iknows(i).
 state_tag(t,r,did,g,phi,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_82,set_83,3).
 state_reader(r,t,id,crypt(kG1,rinit),crypt(kG2,id),g,phi,kG1,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,set_96,set_97,4).
 state_tag(t,r,did,g,phi,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_104,set_105,6).
 state_reader(r,t,id,crypt(kG1,rinit),crypt(kG2,id),g,phi,kG1,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,set_107,set_108,7)


section rules:

step step_0 (T,R,DID,Fg,Phi,Dummy_Nr,Dummy_X,RNew,Dummy_E,DNew,Dummy_Set_48,Dummy_Set_50,SID,Nr,X) :=
 state_tag(T,R,DID,Fg,Phi,0,Dummy_Nr,Dummy_X,RNew,Dummy_E,DNew,Dummy_Set_48,Dummy_Set_50,SID).
 iknows(Nr)
=[exists X]=>
 state_tag(T,R,DID,Fg,Phi,1,Nr,X,RNew,apply(Phi,X),DNew,Dummy_Set_48,Dummy_Set_50,SID).
 iknows(pair(scrypt(apply(Phi,X),DID),apply(Fg,pair(Nr,pair(X,DID))))).
 witness(T,R,aut_tag,X).
 secret(Dummy_Set_48,sec_did1,Dummy_Set_50).
 contains(DID,Dummy_Set_48).
 contains(T,Dummy_Set_50).
 contains(R,Dummy_Set_50)

step step_1 (T,R,Dummy_DID,Fg,Phi,Nr,Dummy_X,RNew,E,Dummy_DNew,Set_48,Set_50,SID,DNew,X) :=
 state_tag(T,R,Dummy_DID,Fg,Phi,1,Nr,Dummy_X,RNew,E,Dummy_DNew,Set_48,Set_50,SID).
 iknows(pair(xor(DNew,E),apply(Fg,pair(Nr,pair(DNew,X)))))
 =>
 state_tag(T,R,DNew,Fg,Phi,2,Nr,X,RNew,E,DNew,Set_48,Set_50,SID).
 request(T,R,aut_reader,Nr,SID)

step step_2 (R,T,ID,CR,CID,Fg,Phi,KG1,Dummy_Nr,X,RNew,DID,DNew,E,Set_28,Set_30,SID,Nr) :=
 state_reader(R,T,ID,CR,CID,Fg,Phi,KG1,0,Dummy_Nr,X,RNew,DID,DNew,E,Set_28,Set_30,SID).
 iknows(start)
=[exists Nr]=>
 state_reader(R,T,ID,CR,CID,Fg,Phi,KG1,1,Nr,X,RNew,DID,DNew,E,Set_28,Set_30,SID).
 iknows(Nr).
 witness(R,T,aut_reader,Nr)

step step_3 (R,T,ID,Dummy_CR,CID,Fg,Phi,KG1,Nr,Dummy_X,Dummy_RNew,Dummy_DID,Dummy_DNew,Dummy_E,Dummy_Set_28,Dummy_Set_30,SID,X,RNew,E) :=
 state_reader(R,T,ID,Dummy_CR,CID,Fg,Phi,KG1,1,Nr,Dummy_X,Dummy_RNew,Dummy_DID,Dummy_DNew,Dummy_E,Dummy_Set_28,Dummy_Set_30,SID).
 iknows(pair(scrypt(E,Dummy_DID),apply(Fg,pair(Nr,pair(X,Dummy_DID)))))
=[exists RNew]=>
 state_reader(R,T,ID,crypt(KG1,RNew),CID,Fg,Phi,KG1,2,Nr,X,RNew,xor(crypt(KG1,RNew),CID),xor(crypt(KG1,RNew),CID),E,Dummy_Set_28,Dummy_Set_30,SID).
 iknows(pair(xor(xor(crypt(KG1,RNew),CID),E),apply(Fg,pair(Nr,pair(xor(crypt(KG1,RNew),CID),X))))).
 secret(Dummy_Set_28,sec_did2,Dummy_Set_30).
 request(R,T,aut_tag,X,SID).
 contains(xor(crypt(KG1,RNew),CID),Dummy_Set_28).
 contains(R,Dummy_Set_30).
 contains(T,Dummy_Set_30)


section properties:

property secrecy_of_sec_did1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_did1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_did2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_did2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_aut_reader (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,aut_reader,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,aut_reader,MGoal))
     /\ ((request(A1Goal,A2Goal,aut_reader,MGoal,SID1)
           /\ request(A1Goal,A2Goal,aut_reader,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_aut_tag (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,aut_tag,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,aut_tag,MGoal))
     /\ ((request(A1Goal,A2Goal,aut_tag,MGoal,SID1)
           /\ request(A1Goal,A2Goal,aut_tag,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sec_did1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_did1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_did2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_did2,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_aut_reader (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,aut_reader,MGoal,SID) &
 not(witness(A2Goal,A1Goal,aut_reader,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_aut_reader (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,aut_reader,MGoal,SID1).
 request(A1Goal,A2Goal,aut_reader,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_aut_tag (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,aut_tag,MGoal,SID) &
 not(witness(A2Goal,A1Goal,aut_tag,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_aut_tag (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,aut_tag,MGoal,SID1).
 request(A1Goal,A2Goal,aut_tag,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


 %The user role of the OpenID protocol
 role user( U, R, O, L : agent,
 SND_RU, SND_OU, RCV_RU, RCV_OU : channel(dy),
 K : symmetric_key, %Key used in the authentication
 Hash : hash_func)
 played_by U
 def=
 local State : nat,
 Na : text, % Nonce used by the OpenID protocol
 X : message, % Message containing variables unknown to the user role
 Nb : text, % Nonce for the authentication part
 Nc : text, % Nonce for the authentication part
 Ks : message % New key for the authentication part
 init State := 0

 transition
 1. State = 0 /\ RCV_RU(start) =|>
 % Contact the relying party
 State' := 2 /\ SND_RU(U.R.L)
 % Receives the redirect to the OpenID provider
 2. State = 2 /\ RCV_RU(U.O.R.L) /\ RCV_OU(start) =|>
 % Send the redirect message to the OpenID provider with authentication
 % information included
 State' := 4 /\ Nb' := new() /\ SND_OU(O.U.R.L.{Nb'}_K)
 % Transition 3 is used for the authentication of the user to the OpenID provider
 3. State = 4 /\ RCV_OU({Nc'}_K) =|>
 State' := 6 /\ Ks' := Hash(Nb.Nc') /\ SND_OU({Nc'}_Ks') /\
 witness(U,O,op_user_authentication, Nc')
 % Send the redirect information from the OpenID provider to the Relying Party
 4. State = 6/\ RCV_OU(U.O.R.L.Na'.X') =|>
 State' := 8/\ SND_RU(U.O.R.L.Na'.X')

 end role

 %The Relying Party role of the OpenID protocol
 role relying_party(R : agent,
 SND_UR, SND_OR, SND_L, RCV_UR, RCV_OR,
 RCV_L : channel(dy))
 played_by R
 def=
 local State : nat,
 U,O,L : agent,
 Na : text, % The nonce variable in the OpenID protocol.
 X : message %Signature of the OpenID protocol, unknown to the Relying Party
 init State := 1
 transition
 % Relying Party receives the authentication request from the user
 1. State = 1 /\ RCV_UR(U'.R.L') =|>
 % Relying Party ask for the users OpenID provider to the discovery process
 State' := 3 /\ SND_L(R.L')
 % Relying Party receives the OpenID provider
 2. State = 3 /\ RCV_L(R.L.O') =|>
 % Send the authentication request to the user for redirection to the OpenID provider
 State' := 5 /\ SND_UR(U.O'.R.L)
 % Receives the positive assertion message from the OpenID provider redirected from the user
 3. State = 5 /\ RCV_UR(U.O.R.L.Na'.X') =|>
 % Sends the positive assertion message back to the OpenID provider for verification
 State' := 7 /\ SND_OR(O.R.L.Na'.X')
 /\ request(U,R,o_r_signautre,X')


 end role
 %The OpenID provider role
 role openid_provider(O, U, L: agent,
 SND_UO, SND_PO, RCV_UO, RCV_PO : channel(dy),
 K : symmetric_key,
 Hash : hash_func)
 played_by O
 def=
 local State : nat,
 R : agent,
 H : hash_func,
 Ko : symmetric_key,
 Na : text,
 X : message,
 Nb : text,
 Nc : text,
 Ks : message
 init State := 11
 transition
 % Receives the authentication request from the User with the authentication information included
 1. State = 11 /\ RCV_UO(O.U.R'.L. {Nb'}_K) =|>
 % Send the authentication information back to the User
 State' := 13 /\ Nc' := new() /\SND_UO({Nc'}_K) /\ Ks' :=
 Hash(Nb'.Nc') /\ secret(Ks',user_session_key,{U,O})
 % Receives the authentication information from the User
 2. State = 13 /\ RCV_UO({Nc}_Ks) =|>
 % Send the positive assertion response back to the user.
 % The request is set to the authentication process between the user and the OpenIDprovider
 State' := 15 /\ Na' := new() /\ Ko' := new() /\
 SND_UO(U.O.R.L.Na'.H(O.R.L.Na'.Ko')) /\
 request(O,U,op_user_authentication,Nc)
 %Receives the verification message from the Relying Party
 3. State = 15 /\ RCV_PO(O.R.L.Na.H(O.R.L.Na.Ko)) =|>
 % Witness the signature generated by the OpenID provider
 State' := 17 /\ witness(U,O,o_r_signautre, H(O.R.L.Na.Ko))
 end role

 %This role symbolizes the discovery of the OpenID provider.
 role url (L, O : agent,
 SND_PL, RCV_PL : channel(dy))
 played_by L
 def=
 local State : nat,
 R : agent
 init State := 19
 transition
 % Receive the request from the Relying Party
 1. State = 19 /\ RCV_PL(R'.L) =|>
 % Respond to the Relying Party
 State' := 21 /\ SND_PL(R'.L.O)

 end role

 %The session role binds the different parts of the OpenID protocol together
 role session(O, R, U, L : agent,
 K : symmetric_key,
 H : hash_func)
 def=
 local SND_RU, SND_OU, RCV_RU, RCV_OU,
 SND_UR, SND_OR, SND_L, RCV_UR,
 RCV_OR, RCV_L, SND_UO, SND_PO,
 RCV_UO, RCV_PO, SND_PL, RCV_PL : channel(dy)

 composition
 %The different roles binds together.
 user(U, R, O, L, SND_RU, SND_OU, RCV_RU, RCV_OU, K, H)
 /\openid_provider(O, U, L, SND_UO, SND_PO, RCV_UO, RCV_PO, K, H)
 /\relying_party(R, SND_UR, SND_OR, SND_L, RCV_UR, RCV_OR, RCV_L)
 /\url(L, O, SND_PL, RCV_PL)
 end role

 role environment()
 def=
 const o,r,u,l : agent,
 o_r_signautre, user_session_key, op_user_authentication :
 protocol_id,
 kuo, kio, kui : symmetric_key,
 h : hash_func
 intruder_knowledge = {o,r,u,l, kio, kui, h,i}
 composition
 session(o,r,u,l, kuo, h)
 /\ session(o,r,u,i, kuo, h)
 /\ session(o,r,i,l, kio, h)
 /\ session(o,i,u,l, kuo, h)
 /\ session(i,r,u,l, kui, h)
 end role

 goal
 % The secrecy goal of the authentication procedure
 secrecy_of user_session_key
 % The authentication goal of the authentication procedure
 authentication_on op_user_authentication
 % The authentication goal of the OpenID protocol
 authentication_on o_r_signautre

 end goal

 environment()
role mn(MN,HA,CN: agent, 
	MNPUK,CNPUK,HAPUK: public_key,	
	MNPK: symmetric_key,
	 HASH: hash_func,                 
               SND,RCV: channel(dy)) 
	played_by MN def= 
	local MNN,CNN,CNTS,MNHOA,MNCOA,CNADDR,HAADDR,TSMN,MOD: text , State: nat  
	init State :=0 
	transition   
    	0.State = 0 /\ RCV(start)
     	  =|>State' := 3 /\ MNN' :=new() /\ MNHOA' :=new() /\ MNCOA' :=new() /\ CNADDR' :=new() /\ HAADDR' :=new() /\ TSMN' :=new() /\ MOD' :=new() /\ SND({{HASH(MNN'.MNHOA'.MNCOA'.HAADDR'.CNADDR').TSMN'.MOD'}_MNPK}_HAPUK) /\ secret(MNCOA',coa,{MN,HA,CN})  /\ secret(MNN',mnn,{MN,HA}) 
	3.State = 3 /\ RCV({MNN'.MNHOA'.MNCOA'.CNADDR'.CNN'}_MNPUK)  =|>State' :=  6
	 
end role 

role ha(MN,HA,CN:agent,
	MNPUK,HAPUK,CNPUK: public_key, 
	MNPK: symmetric_key,
	 HASH: hash_func,
                SND,RCV: channel(dy)) 
	
	played_by HA def= 
	local MNN,HAN,MNHOA,MNCOA,CNADDR,HAADDR,TSMN,MOD,HATS: text, State: nat
	init State := 1 
	transition 
	1.State = 1 /\ RCV({{HASH(MNN'.MNHOA'.MNCOA'.HAADDR'.CNADDR').TSMN'.MOD'}_MNPK}_HAPUK)
	    =|>State' := 4 /\ HATS' :=new()   /\ HAN' :=new() /\ SND({(HASH(HAN'.MNHOA'.MNCOA'.HAADDR'.CNADDR').HATS'.MOD')} _HAPUK) /\ secret(HAN',han,{HA,CN}) 

end role 

role cn(MN,HA,CN:agent,
	MNPUK,HAPUK,CNPUK: public_key,
	HASH: hash_func, 
                 SND,RCV: channel(dy))
	played_by CN def= 
	local MNN,CNN,HAN,MNHOA,MNCOA,HAADDR,CNADDR,HATS,MOD,CNTS: text , State: nat 
	init State := 2 
	transition
	2.State = 2 /\ RCV({HASH(HAN'.MNHOA'.MNCOA'.HAADDR'.CNADDR').HATS'.MOD'} _HAPUK)
	    =|>State':=  5 /\ CNTS' :=new()  /\ CNN' :=new() /\ MNN':=new() /\ SND({MNN'.MNHOA'.MNCOA'.CNADDR'.CNN'}_MNPUK) /\ secret(CNN',cnn,{CN,MN})  /\  secret(MNCOA',coa,{CN,MN}) 
	    
end role

role session( MN,HA,CN: agent,MNPUK,CNPUK,HAPUK: public_key, MNPK: symmetric_key, HASH: hash_func)
	 
def= 

	local SENMN,RCVMN,SENHA,RCVHA,SENCN,RCVCN: channel(dy) 

	composition 
	mn( MN,HA,CN,MNPUK,HAPUK,CNPUK,MNPK,HASH, SENMN,RCVMN)
 /\ ha(   MN,HA,CN,MNPUK,HAPUK,CNPUK,MNPK,HASH, SENHA,RCVHA)
 /\cn(  MN,HA,CN,MNPUK,HAPUK,CNPUK,HASH, SENCN,RCVCN) 
	 
end role 


role environment() 
def= 

const  mn1,ha1,cn1: agent,
mnpuk,cnpuk,hapuk: public_key,
mnpk: symmetric_key,
has: hash_func,
coa,cnn,mnn,han: protocol_id
       
   composition 
	session(mn1,ha1,cn1,mnpuk,cnpuk,hapuk,mnpk,has) 

end role 
goal

secrecy_of coa
secrecy_of mnn
secrecy_of cnn
secrecy_of han



end goal
environment() 

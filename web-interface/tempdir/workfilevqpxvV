role alice(A, B : agent,  
           H, PRF, KeyGen: hash_func,
           Ka, Ks: public_key, 
           SND, RCV: channel (dy))
played_by A
def=

   local Na, Sid, Pa, PMS: text,
         Nb: text,
         State: nat,
         Finished: hash(hash(text.text.text).agent.agent.text.text.text),
         ClientK, ServerK: hash(agent.text.text.hash(text.text.text)),
         Kb: public_key,
         M: hash(text.text.text)

   const sec_clientk, sec_serverk : protocol_id

   init  State := 0

   transition

   1.  State = 0
       /\ RCV(start)
       =|>
       State' := 2
       /\ Na' := new()
       /\ Pa' := new()
       /\ Sid' := new()
       /\ SND(A.Na'.Sid'.Pa')

   2.  State = 2
       /\ RCV(Nb'.Sid.Pa.{B.Kb'}_(inv(Ks)))
       =|>
       State' := 3
       /\ PMS' := new()
       /\ M' := PRF(PMS'.Na.Nb')
       /\ Finished' := H(PRF(PMS'.Na.Nb').A.B.Na.Pa.Sid)
       /\ ClientK' := KeyGen(A.Na.Nb'.PRF(PMS'.Na.Nb'))
       /\ ServerK' := KeyGen(B.Na.Nb'.PRF(PMS'.Na.Nb'))
       /\ SND({PMS'}_Kb'.
              {A.Ka}_(inv(Ks)).
              {H(Nb'.B.PMS')}_(inv(Ka)).
              {H(PRF(PMS'.Na.Nb').
               A.B.Na.Pa.Sid)
              }_KeyGen(A.Na.Nb'.PRF(PMS'.Na.Nb')))
       /\ witness(A,B,na_nb2,Na.Nb')

   4.  State = 3
       /\ RCV({Finished}_ServerK)
       =|>
       State' := 5
       /\ request(A,B,na_nb1,Na.Nb)
       /\ secret(ClientK,sec_clientk,{A,B})
       /\ secret(ServerK,sec_serverk,{A,B})

end role

role bob(A, B : agent,
         H, PRF, KeyGen: hash_func,
         Kb, Ks: public_key,
         SND, RCV: channel (dy))
played_by B
def=

   local Na, Nb, Sid, Pa, PMS: text,
         State: nat,
         Ka: public_key

   init  State := 1

   transition

   1.  State = 1
       /\ RCV(A.Na'.Sid'.Pa')
       =|>
       State' := 3
       /\ Nb' := new()
       /\ SND(Nb'.Sid'.Pa'.{B.Kb}_(inv(Ks)))
       /\ witness(B,A,na_nb1,Na'.Nb')

   2.  State = 3
       /\ RCV({PMS'}_Kb.{A.Ka'}_(inv(Ks)).
              {H(Nb.B.PMS')}_(inv(Ka')).
              {H(PRF(PMS'.Na.Nb).
               A.B.Na.Pa.Sid)
              }_KeyGen(A.Na.Nb.PRF(PMS'.Na.Nb)))
       =|>
       State' := 5
       /\ SND({H(PRF(PMS'.Na.Nb).
               A.B.Na.Pa.Sid)
              }_KeyGen(B.Na.Nb.PRF(PMS'.Na.Nb)))
       /\ request(B,A,na_nb2,Na.Nb)

end role
role auth (P, A, S                          : agent,
           Kas                              : symmetric_key,               % to protect Keying-Material
           SND, RCV                         : channel(dy))
played_by A def=

  local
    Emskname     : hash(hash(hash(hash(text.text.text)))),          % hash(EMSK)
    Dsrk         : hash(hash(hash(hash(text.text.text))).agent),    % hash(EMSK.agent)  
    UserId       : text,
    State           : nat
            
  const
    respond_id   : text,
    dsrk_req     : text,
    success      : text
    
    init State := 1
    
  transition
    
  1. State  = 1
       /\ RCV(respond_id.UserId')
     =|>
     State' := 2
       /\ SND(respond_id.dsrk_req.UserId')                % Visited RADIUS server requests DSRK

  2. State  = 2
       /\ RCV(Emskname'.success.{Dsrk'}_Kas)      % Visited RADIUS server receivs EMSKName and DSRK
     =|>
     State':= 3
     /\ SND(success)     


end role
role server (P, A, S                         : agent,
             Ks, Kca, Kidp                   : public_key,
             Kas                             : symmetric_key,
             H : hash_func,
             PRF : hash_func,
             CHAP_PRF : hash_func,
             Tranc : hash_func,
             KeyGen : hash_func,
             SND, RCV                        : channel (dy)) 
played_by S def=

  local
    UserId       : text,          % should not reveal user
    Version      : text,          % version of TLS protocol, presently v1.0
    SeID         : text,          % session id
    Np           : text,          % nonce from client
    Ns           : text,          % nonce from server
    CipherSuite  : text,          % TLS ciphersuites supplied by the peer
    Cipher       : text,          % TLS ciphersuite selected by server

    Shd          : text,          % server-hello-done 
    Ccs          : text,          % change-cipher-spec 
 
    PMS          : text,          % pre-master-secret
    MS : hash(text.text.text),    % master-secret

    Finished : hash(hash(text.text.text).agent.agent.text.text.text),
    ClientK : hash(agent.text.text.hash(text.text.text)),  % client session key for encryption
    ServerK : hash(agent.text.text.hash(text.text.text)),  % server session key for encryption

    Txt          : text,          % string init. with "ttls challenge"

    UName        : text,          % NAI of client e.g. andy@realm

    ChapRs       : text,          % CHAP response

    Edutoken     : text,                                            % Edutoken
    Msk          : hash(hash(text.text.text)),                      % hash(MS)
    Emsk         : hash(hash(hash(text.text.text))),                % hash(MSK)
    Emskname     : hash(hash(hash(hash(text.text.text)))),          % hash(EMSK)
    Dsrk         : hash(hash(hash(hash(text.text.text))).agent),    % hash(EMSK.agent)  

    State        : nat

  const
    request_id   : text,
    respond_id   : text,
    dsrk_req     : text,
    start_ttls   : text,
    success      : text,
    np, ns              : protocol_id,
    sec_emsk, sec_dsrk  : protocol_id

  init State := 0

  transition

  0. State   = 0
       /\ RCV(start)
     =|>
     State' := 1
       /\ SND(request_id)

  1. State   = 1
       /\ RCV(respond_id.dsrk_req.UserId')
     =|>
     State' := 2
       /\ SND(start_ttls)

  2. State   = 2
       /\ RCV(Version'.SeID'.Np'.CipherSuite')  % client_hello
     =|>
     State' := 3
       /\ Ns' := new()
       /\ Shd' := new()
       /\ Cipher' := new()
       /\ SND(Version'.SeID'.Ns'.Cipher'.       % server_hello
              {S.Ks}_inv(Kca).                  % server_certificate
              Shd')                             % server_hello_done
       /\ witness(S,P,ns,Ns')
        
  3. State    = 3
       /\ RCV({PMS'}_Ks.                        % client_key_exchange
              Ccs'.                             % client_change_cipher_spec
              {Finished'}_ClientK')             % finished
       /\ MS' = PRF(PMS'.Np.Ns)                 % master secret
       /\ Finished' = H(MS'.P.S.Np.Cipher'.SeID)
       /\ ClientK'  = KeyGen(P.Np.Ns.MS')
     =|>
     State' := 4
       /\ ServerK'  := KeyGen(S.Np.Ns.MS')
       /\ SND(Ccs'.                             % server_change_cipher_spec
              {Finished'}_ServerK')             % finished

  4. State  = 4
       /\ RCV({UName'.
               Tranc(CHAP_PRF(MS.Txt'.Np.Ns).1.16).
               Tranc(CHAP_PRF(MS.Txt'.Np.Ns).17.17).
               ChapRs'
              }_ClientK)
     =|>
     State':= 5
       /\ SND({{authn_req.UName'}_inv(Ks)}_Kidp)
       /\ request(S,P,np,Np)

  5. State  = 5
       /\ RCV({{Edutoken'}_inv(Kidp)}_Ks)
     =|>
     State':= 6
       /\ Msk'      := KeyGen(MS)  
       /\ Emsk'      := KeyGen(Msk')  
       /\ Dsrk'      := KeyGen(Emsk'.A)  
       /\ Emskname'  := H(Emsk')
       /\ SND({{Edutoken'}_inv(Kidp)}_ServerK)                  % Edutoken (to the EU)
       /\ SND(Emskname'.success.{Dsrk'}_Kas)      % Success + EMSKName + DSRK (to the visited RADIUS)
       /\ secret(Emsk',sec_emsk,{P,S})
       /\ secret(Dsrk',sec_dsrk,{P,S,A})

end role

role session(A,B: agent,
             Ka, Kb, Ks: public_key,
             H, PRF, KeyGen: hash_func)
def=

   local  SA, SB, RA, RB: channel (dy)

   composition
                alice(A,B,H,PRF,KeyGen,Ka,Ks,SA,RA)
           /\   bob(A,B,H,PRF,KeyGen,Kb,Ks,SB,RB)

end role

role environment()
def=

   const na_nb1, na_nb2 : protocol_id,
         h, prf, keygen : hash_func,
         a, b           : agent,
         ka, kb, ki, ks : public_key

   intruder_knowledge = { a, b, ka, kb, ks, ki, inv(ki),
                          {i.ki}_(inv(ks)) }  

   composition
        session(a,b,ka,kb,ks,h,prf,keygen)
    /\  session(a,i,ka,ki,ks,h,prf,keygen)
    /\  session(i,b,ki,kb,ks,h,prf,keygen)

end role

goal

  secrecy_of sec_clientk,sec_serverk 
  authentication_on na_nb1  
  authentication_on na_nb2 

end goal

environment()

%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfile8b5Hga

section signature:

state_xdreceiver: agent * agent * agent * agent * public_key * nat * pair(symmetric_key,pair(text,pair(text,pair(text,apply(hash_func,pair(text,pair(text,pair(symmetric_key,pair(text,symmetric_key))))))))) * nat -> fact
state_identityProvider: agent * agent * agent * agent * text * text * symmetric_key * set(symmetric_key) * public_key * hash_func * nat * text * text * text * symmetric_key * symmetric_key * apply(hash_func,pair(text,pair(text,pair(symmetric_key,pair(text,symmetric_key))))) * pair(symmetric_key,pair(text,pair(text,pair(text,apply(hash_func,pair(text,pair(text,pair(symmetric_key,pair(text,symmetric_key))))))))) * nat -> fact
state_serviceProvider: agent * agent * agent * agent * text * symmetric_key * hash_func * nat * text * text * text * symmetric_key * apply(hash_func,pair(text,pair(text,pair(symmetric_key,pair(text,symmetric_key))))) * pair(symmetric_key,pair(text,pair(text,pair(text,apply(hash_func,pair(text,pair(text,pair(symmetric_key,pair(text,symmetric_key))))))))) * set(agent) * nat -> fact
state_client: agent * agent * agent * agent * set(symmetric_key) * nat * text * text * crypt(public_key,message) * symmetric_key * pair(symmetric_key,pair(text,pair(text,pair(text,apply(hash_func,pair(text,pair(text,pair(symmetric_key,pair(text,symmetric_key))))))))) * nat -> fact


section types:

otherresourceid, sp_idp_sig: protocol_id
Sig, Dummy_Sig: apply(hash_func,pair(text,pair(text,pair(symmetric_key,pair(text,symmetric_key)))))
set_155, set_141, set_127: set
Set_55, Dummy_Set_55, ASGoal: set(agent)
otherresource, otherresourcereq, resource, dummy_msg, credentials, sessionreq, notloggedin, MGoal, statusreq, resourcereq, start: message
Session, Dummy_Session: pair(symmetric_key,pair(text,pair(text,pair(text,apply(hash_func,pair(text,pair(text,pair(symmetric_key,pair(text,symmetric_key)))))))))
Hash, h: hash_func
XDRKey, dummy_pk, xdrkey: public_key
Dummy_Message, Message: crypt(public_key,message)
CIDPKey, Key, APISecret, Dummy_Key, Dummy_CIDPKey, dummy_sk, apisecret: symmetric_key
Lsd, Expires, Ss, APIKey, Uid, Dummy_Ss, Dummy_Expires, Dummy_Uid, Dummy_Lsd, Dummy_APIKey, dummy_nonce, apikey, uid: text
State, 11, 10, 9, 8, 6, SID, 5, 4, Dummy_State, 3, 7, SID2, 2, SID1, 1, 0: nat
SSLKey, Dummy_SSLKey: set(symmetric_key)
C, SP, IDP, XDR, A2Goal, A1Goal, c, sp, idp, xdr, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(otherresourcereq).
 iknows(i).
 state_client(c,sp,idp,xdr,set_127,0,dummy_nonce,dummy_nonce,crypt(dummy_pk,dummy_msg),dummy_sk,pair(dummy_sk,pair(dummy_nonce,pair(dummy_nonce,pair(dummy_nonce,dummy_msg)))),3).
 state_serviceProvider(sp,c,idp,xdr,apikey,apisecret,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,dummy_msg,pair(dummy_sk,pair(dummy_nonce,pair(dummy_nonce,pair(dummy_nonce,dummy_msg)))),set_141,4).
 state_identityProvider(idp,c,sp,xdr,apikey,uid,apisecret,set_127,xdrkey,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,dummy_sk,dummy_msg,pair(dummy_sk,pair(dummy_nonce,pair(dummy_nonce,pair(dummy_nonce,dummy_msg)))),5).
 state_xdreceiver(xdr,c,sp,idp,xdrkey,0,pair(dummy_sk,pair(dummy_nonce,pair(dummy_nonce,pair(dummy_nonce,dummy_msg)))),6).
 state_client(c,sp,idp,xdr,set_127,0,dummy_nonce,dummy_nonce,crypt(dummy_pk,dummy_msg),dummy_sk,pair(dummy_sk,pair(dummy_nonce,pair(dummy_nonce,pair(dummy_nonce,dummy_msg)))),8).
 state_serviceProvider(sp,c,idp,xdr,apikey,apisecret,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,dummy_msg,pair(dummy_sk,pair(dummy_nonce,pair(dummy_nonce,pair(dummy_nonce,dummy_msg)))),set_155,9).
 state_identityProvider(idp,c,sp,xdr,apikey,uid,apisecret,set_127,xdrkey,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,dummy_sk,dummy_msg,pair(dummy_sk,pair(dummy_nonce,pair(dummy_nonce,pair(dummy_nonce,dummy_msg)))),10).
 state_xdreceiver(xdr,c,sp,idp,xdrkey,0,pair(dummy_sk,pair(dummy_nonce,pair(dummy_nonce,pair(dummy_nonce,dummy_msg)))),11)


section rules:

step step_0 (C,SP,IDP,XDR,SSLKey,APIKey,Lsd,Message,CIDPKey,Session,SID) :=
 state_client(C,SP,IDP,XDR,SSLKey,0,APIKey,Lsd,Message,CIDPKey,Session,SID).
 iknows(start)
 =>
 state_client(C,SP,IDP,XDR,SSLKey,1,APIKey,Lsd,Message,CIDPKey,Session,SID).
 iknows(resourcereq)

step step_1 (C,SP,IDP,XDR,SSLKey,Dummy_APIKey,Lsd,Message,CIDPKey,Session,SID,APIKey) :=
 state_client(C,SP,IDP,XDR,SSLKey,1,Dummy_APIKey,Lsd,Message,CIDPKey,Session,SID).
 iknows(pair(IDP,APIKey))
 =>
 state_client(C,SP,IDP,XDR,SSLKey,2,APIKey,Lsd,Message,CIDPKey,Session,SID).
 iknows(statusreq)

step step_2 (C,SP,IDP,XDR,SSLKey,APIKey,Lsd,Message,CIDPKey,Session,SID) :=
 state_client(C,SP,IDP,XDR,SSLKey,2,APIKey,Lsd,Message,CIDPKey,Session,SID).
 iknows(notloggedin)
 =>
 state_client(C,SP,IDP,XDR,SSLKey,3,APIKey,Lsd,Message,CIDPKey,Session,SID).
 iknows(pair(sessionreq,APIKey))

step step_3 (C,SP,IDP,XDR,Dummy_SSLKey,APIKey,Dummy_Lsd,Message,Dummy_CIDPKey,Session,SID,Lsd,CIDPKey) :=
 state_client(C,SP,IDP,XDR,Dummy_SSLKey,3,APIKey,Dummy_Lsd,Message,Dummy_CIDPKey,Session,SID).
 iknows(Lsd)
=[exists CIDPKey]=>
 state_client(C,SP,IDP,XDR,Dummy_SSLKey,4,APIKey,Lsd,Message,CIDPKey,Session,SID).
 iknows(scrypt(CIDPKey,pair(APIKey,pair(credentials,Lsd)))).
 contains(CIDPKey,Dummy_SSLKey)

step step_4 (C,SP,IDP,XDR,SSLKey,APIKey,Lsd,Dummy_Message,CIDPKey,Session,SID,Message) :=
 state_client(C,SP,IDP,XDR,SSLKey,4,APIKey,Lsd,Dummy_Message,CIDPKey,Session,SID).
 iknows(scrypt(CIDPKey,pair(XDR,Message)))
 =>
 state_client(C,SP,IDP,XDR,SSLKey,5,APIKey,Lsd,Message,CIDPKey,Session,SID).
 iknows(Message)

step step_5 (C,SP,IDP,XDR,SSLKey,APIKey,Lsd,Message,CIDPKey,Dummy_Session,SID,Session) :=
 state_client(C,SP,IDP,XDR,SSLKey,5,APIKey,Lsd,Message,CIDPKey,Dummy_Session,SID).
 iknows(Session)
 =>
 state_client(C,SP,IDP,XDR,SSLKey,6,APIKey,Lsd,Message,CIDPKey,Session,SID).
 iknows(pair(resourcereq,Session))

step step_6 (C,SP,IDP,XDR,SSLKey,APIKey,Lsd,Message,CIDPKey,Session,SID) :=
 state_client(C,SP,IDP,XDR,SSLKey,6,APIKey,Lsd,Message,CIDPKey,Session,SID).
 iknows(resource)
 =>
 state_client(C,SP,IDP,XDR,SSLKey,7,APIKey,Lsd,Message,CIDPKey,Session,SID)

step step_7 (SP,C,IDP,XDR,APIKey,APISecret,Hash,Uid,Expires,Ss,Key,Sig,Session,Set_55,SID) :=
 state_serviceProvider(SP,C,IDP,XDR,APIKey,APISecret,Hash,0,Uid,Expires,Ss,Key,Sig,Session,Set_55,SID).
 iknows(resourcereq)
 =>
 state_serviceProvider(SP,C,IDP,XDR,APIKey,APISecret,Hash,1,Uid,Expires,Ss,Key,Sig,Session,Set_55,SID).
 iknows(pair(IDP,APIKey))

step step_8 (SP,C,IDP,XDR,APIKey,APISecret,Hash,Dummy_Uid,Dummy_Expires,Dummy_Ss,Dummy_Key,Sig,Session,Set_55,SID,Uid,Expires,Ss,Key) :=
 state_serviceProvider(SP,C,IDP,XDR,APIKey,APISecret,Hash,1,Dummy_Uid,Dummy_Expires,Dummy_Ss,Dummy_Key,Sig,Session,Set_55,SID).
 iknows(pair(resourcereq,pair(Key,pair(Uid,pair(Expires,pair(Ss,apply(Hash,pair(Expires,pair(Ss,pair(Key,pair(Uid,APISecret)))))))))))
 =>
 state_serviceProvider(SP,C,IDP,XDR,APIKey,APISecret,Hash,2,Uid,Expires,Ss,Key,Sig,Session,Set_55,SID).
 iknows(resource).
 request(SP,IDP,sp_idp_sig,apply(Hash,pair(Expires,pair(Ss,pair(Key,pair(Uid,APISecret))))),SID)

step step_9 (SP,C,IDP,XDR,APIKey,APISecret,Hash,Dummy_Uid,Dummy_Expires,Dummy_Ss,Dummy_Key,Sig,Session,Dummy_Set_55,SID,Uid,Expires,Ss,Key) :=
 state_serviceProvider(SP,C,IDP,XDR,APIKey,APISecret,Hash,1,Dummy_Uid,Dummy_Expires,Dummy_Ss,Dummy_Key,Sig,Session,Dummy_Set_55,SID).
 iknows(pair(otherresourcereq,pair(Key,pair(Uid,pair(Expires,pair(Ss,apply(Hash,pair(Expires,pair(Ss,pair(Key,pair(Uid,APISecret)))))))))))
 =>
 state_serviceProvider(SP,C,IDP,XDR,APIKey,APISecret,Hash,2,Uid,Expires,Ss,Key,Sig,Session,Dummy_Set_55,SID).
 iknows(otherresource).
 secret(otherresource,otherresourceid,Dummy_Set_55).
 request(SP,IDP,sp_idp_sig,apply(Hash,pair(Expires,pair(Ss,pair(Key,pair(Uid,APISecret))))),SID).
 contains(SP,Dummy_Set_55)

step step_10 (IDP,C,SP,XDR,APIKey,Uid,APISecret,SSLKey,XDRKey,Hash,Lsd,Expires,Ss,CIDPKey,Key,Sig,Session,SID) :=
 state_identityProvider(IDP,C,SP,XDR,APIKey,Uid,APISecret,SSLKey,XDRKey,Hash,0,Lsd,Expires,Ss,CIDPKey,Key,Sig,Session,SID).
 iknows(statusreq)
 =>
 state_identityProvider(IDP,C,SP,XDR,APIKey,Uid,APISecret,SSLKey,XDRKey,Hash,1,Lsd,Expires,Ss,CIDPKey,Key,Sig,Session,SID).
 iknows(notloggedin)

step step_11 (IDP,C,SP,XDR,APIKey,Uid,APISecret,SSLKey,XDRKey,Hash,Dummy_Lsd,Expires,Ss,CIDPKey,Key,Sig,Session,SID,Lsd) :=
 state_identityProvider(IDP,C,SP,XDR,APIKey,Uid,APISecret,SSLKey,XDRKey,Hash,1,Dummy_Lsd,Expires,Ss,CIDPKey,Key,Sig,Session,SID).
 iknows(pair(sessionreq,APIKey))
=[exists Lsd]=>
 state_identityProvider(IDP,C,SP,XDR,APIKey,Uid,APISecret,SSLKey,XDRKey,Hash,2,Lsd,Expires,Ss,CIDPKey,Key,Sig,Session,SID).
 iknows(Lsd)

step step_12 (IDP,C,SP,XDR,APIKey,Uid,APISecret,Dummy_SSLKey,XDRKey,Hash,Lsd,Dummy_Expires,Dummy_Ss,Dummy_CIDPKey,Dummy_Key,Dummy_Sig,Dummy_Session,SID,Expires,Ss,CIDPKey,Key) :=
 state_identityProvider(IDP,C,SP,XDR,APIKey,Uid,APISecret,Dummy_SSLKey,XDRKey,Hash,2,Lsd,Dummy_Expires,Dummy_Ss,Dummy_CIDPKey,Dummy_Key,Dummy_Sig,Dummy_Session,SID).
 iknows(scrypt(CIDPKey,pair(APIKey,pair(credentials,Lsd)))).
 contains(CIDPKey,Dummy_SSLKey)
=[exists Ss,Expires,Key]=>
 state_identityProvider(IDP,C,SP,XDR,APIKey,Uid,APISecret,Dummy_SSLKey,XDRKey,Hash,3,Lsd,Expires,Ss,CIDPKey,Key,apply(Hash,pair(Expires,pair(Ss,pair(Key,pair(Uid,APISecret))))),pair(Key,pair(Uid,pair(Expires,pair(Ss,apply(Hash,pair(Expires,pair(Ss,pair(Key,pair(Uid,APISecret))))))))),SID).
 iknows(scrypt(CIDPKey,pair(XDR,crypt(XDRKey,pair(Key,pair(Uid,pair(Expires,pair(Ss,apply(Hash,pair(Expires,pair(Ss,pair(Key,pair(Uid,APISecret))))))))))))).
 witness(IDP,SP,sp_idp_sig,apply(Hash,pair(Expires,pair(Ss,pair(Key,pair(Uid,APISecret))))))

step step_13 (XDR,C,SP,IDP,XDRKey,Dummy_Session,SID,Session) :=
 state_xdreceiver(XDR,C,SP,IDP,XDRKey,0,Dummy_Session,SID).
 iknows(crypt(XDRKey,Session))
 =>
 state_xdreceiver(XDR,C,SP,IDP,XDRKey,1,Session,SID).
 iknows(Session)


section properties:

property authentication_on_sp_idp_sig (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,sp_idp_sig,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,sp_idp_sig,MGoal))
     /\ ((request(A1Goal,A2Goal,sp_idp_sig,MGoal,SID1)
           /\ request(A1Goal,A2Goal,sp_idp_sig,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property secrecy_of_otherresourceid (MGoal,ASGoal) :=
 [] ((secret(MGoal,otherresourceid,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state authentication_on_sp_idp_sig (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,sp_idp_sig,MGoal,SID) &
 not(witness(A2Goal,A1Goal,sp_idp_sig,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_sp_idp_sig (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,sp_idp_sig,MGoal,SID1).
 request(A1Goal,A2Goal,sp_idp_sig,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state secrecy_of_otherresourceid (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,otherresourceid,ASGoal) &
 not(contains(i,ASGoal))


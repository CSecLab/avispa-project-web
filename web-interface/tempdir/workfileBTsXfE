role alice (Ui, SNj, GWS : agent,
SKubs : symmetric_key,
H : hash_func,
Snd, Rcv: channel(dy))
played_by Ui
def=
local State : nat,
IDi, SIDi, Ni, PWi, TS1, TS2, TS3, TS4, TS5, TS6 : text,
Jgwns, D, B,TCi, Ki,TCj, Kj : text,
RPWi, M, Aj, Hi, F, PKSj, Cj : text
const alice_server, server_bob, subs1,
subs2, subs3, subs4, subs5 : protocol_id
init State := 0
transition
1. State = 0 /\ Rcv(start) =|>

% Registration phase

State' := 1/\ Ni' := new()
/\ RPWi' := H(IDi.Ni.PWi)
/\ Snd(Ui.GWS.{IDi.RPWi'}_SKubs)
/\ secret({D}, subs1, GWS)
/\ secret({PWi}, subs2, Ui)
/\ secret({Jgwns}, subs3, {GWS,SNj})
/\ secret({SKubs}, subs4, {Ui,GWS})
/\ secret({D,Ni}, subs5, {Ui,GWS})

% Receive the master key from the registration server Sj

2. State = 1 /\ Rcv({xor(H(IDi.D),H(IDi.Ni.PWi)).H(H(H(IDi.Ni.PWi).H(IDi.D).IDi)).xor(Ni,H(PWi.IDi))}_SKubs) =|>

% Login phase

State' := 2 /\ TS1' := new()
/\ Ki' := new()
/\ Hi' := H(TS1.Ki.IDi)
/\ Snd(Ui.GWS.
{IDi.Ki'.TS1'.H(TS1.Ki.IDi)}_({IDi.D}_SKubs))
/\ witness(Ui, GWS, alice_server, TS1')

% Authentication phase
% Receive the authentication request message

3. State = 2 /\ Rcv(xor(SIDi,H(Ki.Kj)).H(SIDi.IDi.Kj.TS5).xor(Kj,H(Ki.TS1)).TS5) =|>
State' := 3
end role

role bob (Ui, GWN, SNj : agent,
H : hash_func,
SKubs : symmetric_key,
Snd, Rcv: channel(dy))
played_by SNj
def=
local State : nat,
IDi, SIDi, Ni, PWi, TS1, TS2, TS3, TS4, TS5, TS6 : text,
Jgwns, D, B, TCi, Ki, Kj, TCj : text,
X1, RPWi, M, Vi, Aj, Yi, F, PKSj, Cj : text

const server_bob_ts2, bob_alice_ts5, alice_server_ts1,
subs1, subs2, subs3, subs4, subs5 : protocol_id
init State := 0
transition

1. State = 0 /\ Rcv(start) =|>

% Registration phase

State' := 1/\ Yi' := new()
/\ Vi' := H(SIDi.Yi')
/\ Snd(Ui.GWN.{SIDi.Vi'}_SKubs)
/\ secret({D}, subs1, GWN)
/\ secret({Vi}, subs2, SNj)
/\ secret({Jgwns}, subs3, {GWN,SNj})
/\ secret({SKubs}, subs4, {SNj,GWN})
/\ secret({D,Yi'}, subs5, {SNj,GWN})

% Authentication and key agreement phase
% Receive the message from the GWN
1. State = 0 /\ Rcv({IDi.SIDi.Ki.TS1.H(Ki.SIDi.IDi.TS3.TS1)}_(h(h(D.SIDi).Vi'))) =|>
State' := 1
/\ TS4' := new()
/\ TS5' := new()
/\ Kj' := new()
/\ secret({PWi,Ki},subs1,Ui)
/\ secret({IDi},subs2,{Ui,GWN})
/\ secret({Jgwns,D},subs3,GWN)
/\ secret(Ki',subs4,{GWN,Ui,SNj})
/\ secret(Kj,subs5,{GWN,Ui,SNj})
% Send the message to the Ui
/\ Snd(xor(SIDi,H(Ki.Kj)).H(SIDi.IDi.Kj.TS5).xor(Kj,H(Ki.TS1)).TS5)
% SNj has freshly generated the value TS5 for GWN
/\ witness(SNj,ui, bob_alice_Ts5, TS5')
% SNj’s acceptance of the value Ts3 generated for SNj by GWN
/\ request(GWN, SNj, server_bob_ts2, TS2')
end role

role server (Ui, GWN, SNj : agent,
H : hash_func,
SKubs : symmetric_key,
Snd, Rcv: channel(dy))
played_by GWN
def=
local State : nat,
IDi,IDg, SIDi, Ni, PWi, TS1, TS2, TS3, TS4, TS5, TS6 : text,
Jgwns, D, B,Vi,TCi, Ki, Kj,Yi, TCj : text,
X1, RPWi, H1,H2, M, Aj, F, PKSj, Cj : text
const server_bob_ts3, bob_server_ts3, alice_server_ts1,
server_alice_ts4, server_alice_tidinew,
subs1, subs2, subs3, subs4, subs5 : protocol_id
init State := 0
transition
% Registration phase of user
1. State = 0 /\ Rcv({IDi.H(IDi.Ni.PWi)}_SKubs) =|>
State' := 1 /\ secret({IDi.Ni.PWi},subs1,Ui)
/\ B' := new()
/\ Snd({xor(H(IDi.D),H(IDi.Ni.PWi)).H(H(H(IDi.Ni.PWi).H(IDi.D).IDi))}_SKubs)
% Registration phase of sensor
2. State = 1 /\ Rcv (SIDi.H(SIDi.Yi))=|>
State' := 2 /\ secret({SIDi.Yi},subs1,SNj)
/\Snd({xor(H(D.SIDi),H(SIDi.Yi))}_SKubs)


% Login phase: receive the login request message from Ui
2. State = 1 /\ Rcv({IDi.Ki'.TS1'.H(TS1.Ki.IDi)}_({IDi.D}_SKubs))=|>
State' := 2 /\ TS3' := new()
/\ secret({IDi},subs2,{Ui,GWN})
/\ secret({Jgwns},subs3,GWN)
/\ secret(Ki,subs4,{GWN,Ui,SNj})
/\ secret(Kj,subs5,{GWN,Ui,SNj})
/\ H1' := H(TS1.Ki.IDi)
/\ Jgwns' := H(H(D.SIDi).Vi)
/\ H2' := H(Ki.IDg.IDi.TS3.TS1)

% Authentication and key agreement phase
/\ Snd(TS3.{IDi.IDg.Ki.TS1.H2'}_Jgwns')

% GWN has freshly generated the value TS3 for SNj
/\ witness(GWN,SNj,server_bob_ts3, TS3')

end role

role session(Ui, SNj, GWN: agent,
Jgwns : symmetric_key,
SKubs : symmetric_key,
H : hash_func
def=
local US, UR, SS, SR, VS, VR: channel (dy)
composition
alice(Ui, GWN, SNj, H, SKubs, US, UR)
/\ server(Ui, GWN, SNj, H, SKubs, SS, SR)
/\ bob(Ui, GWN, SNj, H, SKubs, VS, VR)
end role

role environment()
def=
const ui, gwn, snj : agent,
h : hash_func,
skubs: symmetric_key,
alice_server_ts1, server_bob_ts3,
bob_alice_Ts5,

subs1, subs2, subs3, subs4, subs5 : protocol_id
intruder_knowledge ={ui, snj, gwn, h}
composition
session(ui, gwn, snj, h, skubs)
/\session(ui, gwn, snj, h, skubs)
/\ session(ui, gwn, snj, h, skubs)
end role
environment()
%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilecbkkAP

section signature:

state_client: agent * agent * agent * hash_func * nat * symmetric_key * symmetric_key * text * text * text * text * text * text * text * text * text * text * text * text * set(agent) * set(agent) * nat -> fact


section types:

set_152, set_151, set_149, set_148, set_147, set_146, set_144, set_143, set_142, set_141, set_139, set_138, set_136, set_135, set_121, set_120: set
Set_99, Set_98, Set_71, Set_70, Set_36, Set_35, Dummy_Set_36, Dummy_Set_35, ASGoal: set(agent)
Constant, dummy_msg, start, MGoal: message
M1, M2, M4, M6, M7, M8, M9, T1, T2, T3, ESIDj, SIDj, M3, M5, M10, T4, Kj, Kas, Dummy_Kas, Dummy_M3, Dummy_M2, Dummy_M1, Dummy_Ki, Dummy_T1, Ki, IDi, dummy_nonce, Gi, Ri: text
Di, Xj, Xsg, dummy_sk, PWi: symmetric_key
State, 3, 12, 9, 6, 2, 1, 0, Dummy_State, SID: nat
sec_sg2, sec_d2, sec_kas2, sec_sg1, sec_k, sec_kas1, sec_a, sec_pw, sec_d1, na, ns, ng: protocol_id
H, h: hash_func
S, G, A, a, s, g, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(g).
 iknows(s).
 iknows(h).
 iknows(i).
 state_client(a,i,s,h,0,dummy_sk,dummy_sk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_120,set_121,3).
 state_client(s,i,g,h,0,dummy_sk,dummy_sk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_138,set_139,6).
 state_client(g,i,s,h,0,dummy_sk,dummy_sk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_143,set_144,9).
 state_client(s,i,a,h,0,dummy_sk,dummy_sk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_148,set_149,12)


section rules:

step step_0 (A,G,S,H,PWi,Di,Dummy_T1,Dummy_Ki,IDi,Gi,Ri,Dummy_M1,Dummy_M2,Dummy_M3,M6,T3,T4,Kas,Set_35,Set_36,SID,T1,Ki) :=
 state_client(A,G,S,H,0,PWi,Di,Dummy_T1,Dummy_Ki,IDi,Gi,Ri,Dummy_M1,Dummy_M2,Dummy_M3,M6,T3,T4,Kas,Set_35,Set_36,SID).
 iknows(start)
=[exists Ki,T1]=>
 state_client(A,G,S,H,1,PWi,Di,T1,Ki,IDi,Gi,Ri,xor(IDi,apply(H,pair(xor(Gi,apply(H,pair(apply(H,pair(Ri,PWi)),Di))),Dummy_T1))),xor(Dummy_Ki,apply(H,pair(Di,Dummy_T1))),apply(H,pair(Dummy_M1,pair(Dummy_M2,pair(Dummy_Ki,Dummy_T1)))),M6,T3,T4,Kas,Set_35,Set_36,SID).
 iknows(xor(IDi,apply(H,pair(xor(Gi,apply(H,pair(apply(H,pair(Ri,PWi)),Di))),Dummy_T1)))).
 secret(Ki,sec_a,A).
 secret(PWi,sec_pw,A)

step step_1 (A,G,S,H,PWi,Di,T1,Ki,IDi,Gi,Ri,M1,M2,M3,M6,T3,T4,Dummy_Kas,Dummy_Set_35,Dummy_Set_36,SID) :=
 state_client(A,G,S,H,1,PWi,Di,T1,Ki,IDi,Gi,Ri,M1,M2,M3,M6,T3,T4,Dummy_Kas,Dummy_Set_35,Dummy_Set_36,SID).
 iknows(pair(M6,pair(apply(H,pair(M6,pair(Di,T3))),pair(apply(H,pair(apply(H,xor(Ki,xor(M6,apply(H,pair(Di,T3))))),pair(M6,pair(apply(H,pair(M6,pair(Di,T3))),pair(T3,T4))))),pair(T3,T4)))))
 =>
 state_client(A,G,S,H,2,PWi,Di,T1,Ki,IDi,Gi,Ri,M1,M2,M3,M6,T3,T4,apply(H,xor(Ki,xor(M6,apply(H,pair(Di,T3))))),Dummy_Set_35,Dummy_Set_36,SID).
 secret(apply(H,xor(Ki,xor(M6,apply(H,pair(Di,T3))))),sec_kas1,Dummy_Set_35).
 secret(Di,sec_d1,Dummy_Set_36).
 contains(A,Dummy_Set_35).
 contains(S,Dummy_Set_35).
 contains(A,Dummy_Set_36).
 contains(G,Dummy_Set_36)


section properties:

property secrecy_of_sec_kas1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_kas1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_kas2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_kas2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_a (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_a,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_sg1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_sg1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_sg2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_sg2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_pw (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_pw,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_d1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_d1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_d2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_d2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_k (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_k,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state secrecy_of_sec_kas1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_kas1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_kas2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_kas2,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_a (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_a,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_sg1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_sg1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_sg2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_sg2,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_pw (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_pw,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_d1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_d1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_d2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_d2,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_k (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_k,ASGoal) &
 not(contains(i,ASGoal))


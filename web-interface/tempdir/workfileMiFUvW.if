%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileMiFUvW

section signature:

state_idp: agent * agent * agent * agent * public_key * public_key * text * text * nat * set(agent) * nat -> fact
state_server: agent * agent * agent * public_key * public_key * public_key * symmetric_key * hash_func * hash_func * hash_func * hash_func * hash_func * text * text * text * text * text * text * text * text * text * text * apply(hash_func,pair(text,pair(text,text))) * apply(hash_func,pair(apply(hash_func,pair(text,pair(text,text))),pair(agent,pair(agent,pair(text,pair(text,text)))))) * apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text))))))) * apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text))))))) * text * text * text * text * apply(hash_func,apply(hash_func,pair(text,pair(text,text)))) * apply(hash_func,apply(hash_func,apply(hash_func,pair(text,pair(text,text))))) * apply(hash_func,apply(hash_func,apply(hash_func,apply(hash_func,pair(text,pair(text,text)))))) * apply(hash_func,pair(apply(hash_func,apply(hash_func,apply(hash_func,pair(text,pair(text,text))))),agent)) * nat * set(agent) * set(agent) * nat -> fact
state_auth: agent * agent * agent * symmetric_key * apply(hash_func,apply(hash_func,apply(hash_func,apply(hash_func,pair(text,pair(text,text)))))) * apply(hash_func,pair(apply(hash_func,apply(hash_func,apply(hash_func,pair(text,pair(text,text))))),agent)) * text * nat * nat -> fact
state_peer: agent * agent * agent * agent * public_key * public_key * hash_func * hash_func * hash_func * hash_func * hash_func * text * text * text * text * text * text * text * public_key * text * text * text * apply(hash_func,pair(text,pair(text,text))) * apply(hash_func,pair(apply(hash_func,pair(text,pair(text,text))),pair(agent,pair(agent,pair(text,pair(text,text)))))) * apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text))))))) * apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text))))))) * text * text * text * text * apply(hash_func,apply(hash_func,pair(text,pair(text,text)))) * apply(hash_func,apply(hash_func,apply(hash_func,pair(text,pair(text,text))))) * apply(hash_func,apply(hash_func,apply(hash_func,apply(hash_func,pair(text,pair(text,text)))))) * apply(hash_func,pair(apply(hash_func,apply(hash_func,apply(hash_func,pair(text,pair(text,text))))),agent)) * nat * set(agent) * set(agent) * set(agent) * nat -> fact


section types:

dummy_msg, MGoal, start: message
kas, kis, Kas: symmetric_key
sec_edutoken, sec_emsk, sec_dsrk, sec_clientK, sec_serverK, sec_uname, np, ns: protocol_id
Dummy_ServerK, Dummy_ClientK, ServerK, ClientK: apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text)))))))
Dummy_Finished, Finished: apply(hash_func,pair(apply(hash_func,pair(text,pair(text,text))),pair(agent,pair(agent,pair(text,pair(text,text))))))
Dummy_MS, MS: apply(hash_func,pair(text,pair(text,text)))
set_181, set_180, set_179, set_234, set_232, set_231, set_228, set_227, set_226, set_222, set_217, set_216: set
tranc, keygen, h, prf, chapprf, KeyGen, Tranc, CHAP_PRF, PRF, H: hash_func
Dummy_State, 3, SID, SID2, SID1, State, 6, 5, 17, 16, 4, 2, 1, 0, 11, 10, 9, 8: nat
Dummy_Ks, dummy_pk, ks, kca, kidp, Ks, Kidp, Kca: public_key
Dsrk, Dummy_Dsrk: apply(hash_func,pair(apply(hash_func,apply(hash_func,apply(hash_func,pair(text,pair(text,text))))),agent))
Emskname, Dummy_Emskname: apply(hash_func,apply(hash_func,apply(hash_func,apply(hash_func,pair(text,pair(text,text))))))
Emsk, Dummy_Emsk: apply(hash_func,apply(hash_func,apply(hash_func,pair(text,pair(text,text)))))
Msk, Dummy_Msk: apply(hash_func,apply(hash_func,pair(text,pair(text,text))))
Dummy_PMS, Dummy_Ccs, Dummy_Shd, Dummy_Cipher, Dummy_Ns, Dummy_CipherSuite, Dummy_Np, Dummy_SeID, Dummy_Version, Dummy_UserId, dummy_nonce, UName, Edutoken, authn_req, ChapRs, Txt, PMS, Ccs, Shd, Cipher, CipherSuite, Ns, Np, SeID, Version, UserId, dsrk_req, success, start_ttls, respond_id, request_id, Dummy_Edutoken, Dummy_ChapRs, Dummy_UName, Dummy_Txt: text
A2Goal, A1Goal, p, a, s, P, A, S, D, idp, i: agent
ASGoal, Set_135, Set_121, Set_120, Set_62, Set_58, Set_56, Dummy_Set_135, Dummy_Set_121, Dummy_Set_120, Dummy_Set_62, Dummy_Set_58, Dummy_Set_56: set(agent)


section inits:

initial_state init1 := 
 iknows(start).
 iknows(p).
 iknows(a).
 iknows(s).
 iknows(idp).
 iknows(ks).
 iknows(kidp).
 iknows(h).
 iknows(prf).
 iknows(chapprf).
 iknows(tranc).
 iknows(keygen).
 iknows(kca).
 iknows(kis).
 iknows(i).
 state_peer(p,a,s,idp,kca,kidp,h,prf,chapprf,tranc,keygen,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_pk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,0,set_179,set_180,set_181,3).
 state_auth(a,p,s,kas,dummy_msg,dummy_msg,dummy_nonce,1,4).
 state_server(s,p,a,ks,kca,kidp,kas,h,prf,chapprf,tranc,keygen,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,0,set_216,set_217,5).
 state_idp(idp,p,a,s,ks,kidp,dummy_nonce,dummy_nonce,1,set_222,6).
 state_peer(p,a,s,idp,kca,kidp,h,prf,chapprf,tranc,keygen,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_pk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,0,set_226,set_227,set_228,8).
 state_auth(a,p,s,kas,dummy_msg,dummy_msg,dummy_nonce,1,9).
 state_server(s,p,a,ks,kca,kidp,kas,h,prf,chapprf,tranc,keygen,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,0,set_231,set_232,10).
 state_idp(idp,p,a,s,ks,kidp,dummy_nonce,dummy_nonce,1,set_234,11)


section rules:

step step_0 (P,A,S,D,Kca,Kidp,H,PRF,CHAP_PRF,Tranc,KeyGen,Dummy_UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Ks,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,Set_56,Set_58,Set_62,SID,UserId) :=
 state_peer(P,A,S,D,Kca,Kidp,H,PRF,CHAP_PRF,Tranc,KeyGen,Dummy_UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Ks,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,0,Set_56,Set_58,Set_62,SID).
 iknows(request_id)
=[exists UserId]=>
 state_peer(P,A,S,D,Kca,Kidp,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Ks,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,1,Set_56,Set_58,Set_62,SID).
 iknows(pair(respond_id,UserId))

step step_1 (P,A,S,D,Kca,Kidp,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Dummy_Version,Dummy_SeID,Dummy_Np,Ns,Dummy_CipherSuite,Cipher,Ks,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,Set_56,Set_58,Set_62,SID,Version,SeID,Np,CipherSuite) :=
 state_peer(P,A,S,D,Kca,Kidp,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Dummy_Version,Dummy_SeID,Dummy_Np,Ns,Dummy_CipherSuite,Cipher,Ks,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,1,Set_56,Set_58,Set_62,SID).
 iknows(start_ttls)
=[exists Version,SeID,CipherSuite,Np]=>
 state_peer(P,A,S,D,Kca,Kidp,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Ks,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,2,Set_56,Set_58,Set_62,SID).
 iknows(pair(Version,pair(SeID,pair(Np,CipherSuite)))).
 witness(P,S,np,Np)

step step_2 (P,A,S,D,Kca,Kidp,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,Dummy_SeID,Np,Dummy_Ns,CipherSuite,Dummy_Cipher,Dummy_Ks,Dummy_Shd,Dummy_Ccs,Dummy_PMS,Dummy_MS,Dummy_Finished,Dummy_ClientK,Dummy_ServerK,Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,Dummy_Set_56,Dummy_Set_58,Set_62,SID,SeID,Ns,Cipher,Ks,Shd,Ccs,PMS) :=
 state_peer(P,A,S,D,Kca,Kidp,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,Dummy_SeID,Np,Dummy_Ns,CipherSuite,Dummy_Cipher,Dummy_Ks,Dummy_Shd,Dummy_Ccs,Dummy_PMS,Dummy_MS,Dummy_Finished,Dummy_ClientK,Dummy_ServerK,Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,2,Dummy_Set_56,Dummy_Set_58,Set_62,SID).
 iknows(pair(Version,pair(SeID,pair(Ns,pair(Cipher,pair(crypt(inv(Kca),pair(S,Ks)),Shd))))))
=[exists Ccs,PMS]=>
 state_peer(P,A,S,D,Kca,Kidp,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Ks,Shd,Ccs,PMS,apply(PRF,pair(PMS,pair(Np,Ns))),apply(H,pair(apply(PRF,pair(PMS,pair(Np,Ns))),pair(P,pair(S,pair(Np,pair(Cipher,Dummy_SeID)))))),apply(KeyGen,pair(P,pair(Np,pair(Ns,apply(PRF,pair(PMS,pair(Np,Ns))))))),apply(KeyGen,pair(S,pair(Np,pair(Ns,apply(PRF,pair(PMS,pair(Np,Ns))))))),Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,3,Dummy_Set_56,Dummy_Set_58,Set_62,SID).
 iknows(pair(crypt(Ks,PMS),pair(Ccs,scrypt(apply(KeyGen,pair(P,pair(Np,pair(Ns,apply(PRF,pair(PMS,pair(Np,Ns))))))),apply(H,pair(apply(PRF,pair(PMS,pair(Np,Ns))),pair(P,pair(S,pair(Np,pair(Cipher,Dummy_SeID)))))))))).
 secret(apply(KeyGen,pair(P,pair(Np,pair(Ns,apply(PRF,pair(PMS,pair(Np,Ns))))))),sec_clientK,Dummy_Set_56).
 secret(apply(KeyGen,pair(S,pair(Np,pair(Ns,apply(PRF,pair(PMS,pair(Np,Ns))))))),sec_serverK,Dummy_Set_58).
 contains(P,Dummy_Set_56).
 contains(S,Dummy_Set_56).
 contains(P,Dummy_Set_58).
 contains(S,Dummy_Set_58)

step step_3 (P,A,S,D,Kca,Kidp,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Ks,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Dummy_Txt,Dummy_UName,Dummy_ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,Set_56,Set_58,Dummy_Set_62,SID,Txt,UName,ChapRs) :=
 state_peer(P,A,S,D,Kca,Kidp,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Ks,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Dummy_Txt,Dummy_UName,Dummy_ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,3,Set_56,Set_58,Dummy_Set_62,SID).
 iknows(pair(Ccs,scrypt(ServerK,Finished)))
=[exists UName,ChapRs,Txt]=>
 state_peer(P,A,S,D,Kca,Kidp,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Ks,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,4,Set_56,Set_58,Dummy_Set_62,SID).
 iknows(scrypt(ClientK,pair(UName,pair(apply(Tranc,pair(apply(CHAP_PRF,pair(MS,pair(Txt,pair(Np,Ns)))),pair(1,16))),pair(apply(Tranc,pair(apply(CHAP_PRF,pair(MS,pair(Txt,pair(Np,Ns)))),pair(17,17))),ChapRs))))).
 secret(UName,sec_uname,Dummy_Set_62).
 request(P,S,ns,Ns,SID).
 contains(P,Dummy_Set_62).
 contains(S,Dummy_Set_62)

step step_4 (P,A,S,D,Kca,Kidp,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Ks,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Edutoken,Dummy_Msk,Dummy_Emsk,Dummy_Emskname,Dummy_Dsrk,Set_56,Set_58,Set_62,SID) :=
 state_peer(P,A,S,D,Kca,Kidp,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Ks,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Edutoken,Dummy_Msk,Dummy_Emsk,Dummy_Emskname,Dummy_Dsrk,4,Set_56,Set_58,Set_62,SID).
 iknows(success)
 =>
 state_peer(P,A,S,D,Kca,Kidp,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Ks,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Edutoken,apply(KeyGen,MS),apply(KeyGen,apply(KeyGen,MS)),apply(KeyGen,apply(KeyGen,apply(KeyGen,MS))),apply(KeyGen,pair(apply(KeyGen,apply(KeyGen,MS)),A)),5,Set_56,Set_58,Set_62,SID)

step step_5 (P,A,S,D,Kca,Kidp,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Ks,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Dummy_Edutoken,Msk,Emsk,Emskname,Dsrk,Set_56,Set_58,Set_62,SID,Edutoken) :=
 state_peer(P,A,S,D,Kca,Kidp,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Ks,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Dummy_Edutoken,Msk,Emsk,Emskname,Dsrk,5,Set_56,Set_58,Set_62,SID).
 iknows(scrypt(ServerK,crypt(inv(Kidp),Edutoken)))
 =>
 state_peer(P,A,S,D,Kca,Kidp,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Ks,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,6,Set_56,Set_58,Set_62,SID)

step step_6 (A,P,S,Kas,Emskname,Dsrk,Dummy_UserId,SID,UserId) :=
 state_auth(A,P,S,Kas,Emskname,Dsrk,Dummy_UserId,1,SID).
 iknows(pair(respond_id,UserId))
 =>
 state_auth(A,P,S,Kas,Emskname,Dsrk,UserId,2,SID).
 iknows(pair(respond_id,pair(dsrk_req,UserId)))

step step_7 (A,P,S,Kas,Dummy_Emskname,Dummy_Dsrk,UserId,SID,Emskname,Dsrk) :=
 state_auth(A,P,S,Kas,Dummy_Emskname,Dummy_Dsrk,UserId,2,SID).
 iknows(pair(Emskname,pair(success,scrypt(Kas,Dsrk))))
 =>
 state_auth(A,P,S,Kas,Emskname,Dsrk,UserId,3,SID).
 iknows(success)

step step_8 (S,P,A,Ks,Kca,Kidp,Kas,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,Set_120,Set_121,SID) :=
 state_server(S,P,A,Ks,Kca,Kidp,Kas,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,0,Set_120,Set_121,SID).
 iknows(start)
 =>
 state_server(S,P,A,Ks,Kca,Kidp,Kas,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,1,Set_120,Set_121,SID).
 iknows(request_id)

step step_9 (S,P,A,Ks,Kca,Kidp,Kas,H,PRF,CHAP_PRF,Tranc,KeyGen,Dummy_UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,Set_120,Set_121,SID,UserId) :=
 state_server(S,P,A,Ks,Kca,Kidp,Kas,H,PRF,CHAP_PRF,Tranc,KeyGen,Dummy_UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,1,Set_120,Set_121,SID).
 iknows(pair(respond_id,pair(dsrk_req,UserId)))
 =>
 state_server(S,P,A,Ks,Kca,Kidp,Kas,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,2,Set_120,Set_121,SID).
 iknows(start_ttls)

step step_10 (S,P,A,Ks,Kca,Kidp,Kas,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Dummy_Version,Dummy_SeID,Dummy_Np,Dummy_Ns,Dummy_CipherSuite,Dummy_Cipher,Dummy_Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,Set_120,Set_121,SID,Version,SeID,Np,Ns,CipherSuite,Cipher,Shd) :=
 state_server(S,P,A,Ks,Kca,Kidp,Kas,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Dummy_Version,Dummy_SeID,Dummy_Np,Dummy_Ns,Dummy_CipherSuite,Dummy_Cipher,Dummy_Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,2,Set_120,Set_121,SID).
 iknows(pair(Version,pair(SeID,pair(Np,CipherSuite))))
=[exists Cipher,Shd,Ns]=>
 state_server(S,P,A,Ks,Kca,Kidp,Kas,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,3,Set_120,Set_121,SID).
 iknows(pair(Version,pair(SeID,pair(Ns,pair(Cipher,pair(crypt(inv(Kca),pair(S,Ks)),Shd)))))).
 witness(S,P,ns,Ns)

step step_11 (S,P,A,Ks,Kca,Kidp,Kas,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Dummy_Cipher,Shd,Dummy_Ccs,Dummy_PMS,Dummy_MS,Dummy_Finished,Dummy_ClientK,Dummy_ServerK,Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,Set_120,Set_121,SID,Cipher,Ccs,PMS) :=
 state_server(S,P,A,Ks,Kca,Kidp,Kas,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Dummy_Cipher,Shd,Dummy_Ccs,Dummy_PMS,Dummy_MS,Dummy_Finished,Dummy_ClientK,Dummy_ServerK,Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,3,Set_120,Set_121,SID).
 iknows(pair(crypt(Ks,PMS),pair(Ccs,scrypt(apply(KeyGen,pair(P,pair(Np,pair(Ns,apply(PRF,pair(PMS,pair(Np,Ns))))))),apply(H,pair(apply(PRF,pair(PMS,pair(Np,Ns))),pair(P,pair(S,pair(Np,pair(Cipher,SeID))))))))))
 =>
 state_server(S,P,A,Ks,Kca,Kidp,Kas,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Shd,Ccs,PMS,apply(PRF,pair(PMS,pair(Np,Ns))),apply(H,pair(apply(PRF,pair(PMS,pair(Np,Ns))),pair(P,pair(S,pair(Np,pair(Cipher,SeID)))))),apply(KeyGen,pair(P,pair(Np,pair(Ns,apply(PRF,pair(PMS,pair(Np,Ns))))))),apply(KeyGen,pair(S,pair(Np,pair(Ns,apply(PRF,pair(PMS,pair(Np,Ns))))))),Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,4,Set_120,Set_121,SID).
 iknows(pair(Ccs,scrypt(apply(KeyGen,pair(S,pair(Np,pair(Ns,apply(PRF,pair(PMS,pair(Np,Ns))))))),apply(H,pair(apply(PRF,pair(PMS,pair(Np,Ns))),pair(P,pair(S,pair(Np,pair(Cipher,SeID)))))))))

step step_12 (S,P,A,Ks,Kca,Kidp,Kas,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Dummy_Txt,Dummy_UName,Dummy_ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,Set_120,Set_121,SID,Txt,UName,ChapRs) :=
 state_server(S,P,A,Ks,Kca,Kidp,Kas,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Dummy_Txt,Dummy_UName,Dummy_ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,4,Set_120,Set_121,SID).
 iknows(scrypt(ClientK,pair(UName,pair(apply(Tranc,pair(apply(CHAP_PRF,pair(MS,pair(Txt,pair(Np,Ns)))),pair(1,16))),pair(apply(Tranc,pair(apply(CHAP_PRF,pair(MS,pair(Txt,pair(Np,Ns)))),pair(17,17))),ChapRs)))))
 =>
 state_server(S,P,A,Ks,Kca,Kidp,Kas,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Edutoken,Msk,Emsk,Emskname,Dsrk,5,Set_120,Set_121,SID).
 iknows(crypt(Kidp,crypt(inv(Ks),pair(authn_req,UName)))).
 request(S,P,np,Np,SID)

step step_13 (S,P,A,Ks,Kca,Kidp,Kas,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Dummy_Edutoken,Dummy_Msk,Dummy_Emsk,Dummy_Emskname,Dummy_Dsrk,Dummy_Set_120,Dummy_Set_121,SID,Edutoken) :=
 state_server(S,P,A,Ks,Kca,Kidp,Kas,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Dummy_Edutoken,Dummy_Msk,Dummy_Emsk,Dummy_Emskname,Dummy_Dsrk,5,Dummy_Set_120,Dummy_Set_121,SID).
 iknows(crypt(Ks,crypt(inv(Kidp),Edutoken)))
 =>
 state_server(S,P,A,Ks,Kca,Kidp,Kas,H,PRF,CHAP_PRF,Tranc,KeyGen,UserId,Version,SeID,Np,Ns,CipherSuite,Cipher,Shd,Ccs,PMS,MS,Finished,ClientK,ServerK,Txt,UName,ChapRs,Edutoken,apply(KeyGen,MS),apply(KeyGen,apply(KeyGen,MS)),apply(H,apply(KeyGen,apply(KeyGen,MS))),apply(KeyGen,pair(apply(KeyGen,apply(KeyGen,MS)),A)),6,Dummy_Set_120,Dummy_Set_121,SID).
 iknows(scrypt(ServerK,crypt(inv(Kidp),Edutoken))).
 iknows(pair(apply(H,apply(KeyGen,apply(KeyGen,MS))),pair(success,scrypt(Kas,apply(KeyGen,pair(apply(KeyGen,apply(KeyGen,MS)),A)))))).
 secret(apply(KeyGen,apply(KeyGen,MS)),sec_emsk,Dummy_Set_120).
 secret(apply(KeyGen,pair(apply(KeyGen,apply(KeyGen,MS)),A)),sec_dsrk,Dummy_Set_121).
 contains(P,Dummy_Set_120).
 contains(S,Dummy_Set_120).
 contains(P,Dummy_Set_121).
 contains(S,Dummy_Set_121).
 contains(A,Dummy_Set_121)

step step_14 (D,P,A,S,Ks,Kidp,Dummy_Edutoken,Dummy_UName,Dummy_Set_135,SID,Edutoken,UName) :=
 state_idp(D,P,A,S,Ks,Kidp,Dummy_Edutoken,Dummy_UName,1,Dummy_Set_135,SID).
 iknows(crypt(Kidp,crypt(inv(Ks),pair(authn_req,UName))))
=[exists Edutoken]=>
 state_idp(D,P,A,S,Ks,Kidp,Edutoken,UName,2,Dummy_Set_135,SID).
 iknows(crypt(Ks,crypt(inv(Kidp),Edutoken))).
 secret(Edutoken,sec_edutoken,Dummy_Set_135).
 contains(D,Dummy_Set_135).
 contains(P,Dummy_Set_135)


section properties:

property secrecy_of_sec_clientK (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_clientK,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_serverK (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_serverK,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_uname (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_uname,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_dsrk (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_dsrk,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_emsk (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_emsk,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_edutoken (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_edutoken,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_ns (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,ns,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,ns,MGoal))
     /\ ((request(A1Goal,A2Goal,ns,MGoal,SID1)
           /\ request(A1Goal,A2Goal,ns,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_np (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,np,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,np,MGoal))
     /\ ((request(A1Goal,A2Goal,np,MGoal,SID1)
           /\ request(A1Goal,A2Goal,np,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sec_clientK (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_clientK,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_serverK (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_serverK,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_uname (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_uname,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_dsrk (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_dsrk,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_emsk (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_emsk,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_edutoken (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_edutoken,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_ns (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,ns,MGoal,SID) &
 not(witness(A2Goal,A1Goal,ns,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_ns (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,ns,MGoal,SID1).
 request(A1Goal,A2Goal,ns,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_np (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,np,MGoal,SID) &
 not(witness(A2Goal,A1Goal,np,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_np (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,np,MGoal,SID1).
 request(A1Goal,A2Goal,np,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


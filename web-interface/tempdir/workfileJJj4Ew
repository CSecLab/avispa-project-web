role Tag(T, S: agent,
               h: hash,
                L: text set,
               Snd,Rcv: channel(dy))
played_by T
def=

  local State   : nat,
        
        R1,R2 : text(fresh)
        ID,k:text

  const sec_k1 : protocol_id

  init  State := 0

  transition

   1. State = 0
      /\ Rcv(R1')
      =|> 
      State' := 1
      /\ R2' := new()
      /\ Snd(h(k,R1',R2').xor(R2',ID)) 
      /\ witness( T, S, tag_reader_ID,ID')
      /\ witness( T, S, tag_reader-key, k')
      /\ secret(ID',id, {T,  S})
      /\ secret (R2', id2, {T, S})
      /\ secret(k'',id5, {T, S})
   2. State = 1
      /\ Rcv(h(ID',R1',R2'))
      request(S, T, tag_reader_ID, ID')
      
end role




role Server(S, T: agent,
             
            h:hash,
            SND_ST, RCV_TS: channel(dy))
played by S

def=

  local State: nat,
        R1:text(fresh),
        ID', ID, K', K:text,

init state=0

transition

1. State = 0 /\ R1’ := new() /\ SND_ST(R1')

2. State = 1   /\ Rcv_TS(h(k',R1,R2).xor(R2,ID'))
               /\ request(S,T,id3,ID)

               /\ request(S,T.id4,K)

3. State=2 /\ SND_ST(h(ID',R1,R2))
           /\ witness(T, S, tag_reader_ID, ID')
        


end role

role session(
T,S : agent,

Hash : hash)
def=
local ST, SS, RT, RS : channel (dy)
composition
Tag(T,S,Hash,ST,RT)
/\ Server (S,T,Hash,SS,RS)
end role

role environment()
def=
const
id, id2, id3, id4, id5,tag_reader_ID, tag_reader_key: protocol_id,

t,s: agent,
h : hash
intruder_knowledge = {t,s,h}
composition
session(t,s,h)
/\ session(t,i,h)
/\ session(i,s,h)
end role




goal

secrecy_of id
secrecy_of id2
authentication_on tag_reader_ID
authentication_on id4
authentication_on id3
authentication_on id5
authentication_on tag_reader_key

end goal
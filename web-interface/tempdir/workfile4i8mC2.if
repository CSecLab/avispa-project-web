%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfile4i8mC2

section signature:

state_client: agent * agent * agent * hash_func * symmetric_key * public_key * public_key * public_key * nat * text * text * text * text * text * set(agent) * nat -> fact
state_server: agent * agent * agent * public_key * public_key * hash_func * nat * text * text * text * text * public_key * nat -> fact
state_authenticationserver: agent * agent * agent * symmetric_key * public_key * public_key * public_key * nat * text * text * text * text * text * nat -> fact


section types:

private_key, nonce, client_server, nonce2: protocol_id
input, Input: symmetric_key
succ, Succ: hash_func
Nonce3, Life, Timestamp, Nonce2, Nonce1, Nonce, Dummy_Life, Dummy_Timestamp, Dummy_Nonce2, Dummy_Nonce3, Dummy_Nonce1, dummy_nonce: text
set_130, set_127, set_122, set_109: set
State, 17, 16, 3, 15, 12, 11, 2, 9, 1, 0, 7, SID, 5, Dummy_State, 4, SID2, SID1: nat
Set_28, Dummy_Set_28, ASGoal: set(agent)
c, as, s, C, As, S, A2Goal, A1Goal, i: agent
start, MGoal: message
pk_as, pk_s, pk_i, PK_c, PK_s, PK_as, dummy_pk, pk_c: public_key


section inits:

initial_state init1 := 
 iknows(start).
 iknows(c).
 iknows(as).
 iknows(s).
 iknows(succ).
 iknows(pk_i).
 iknows(pk_s).
 iknows(pk_as).
 iknows(pk_c).
 iknows(inv(pk_i)).
 iknows(i).
 state_authenticationserver(as,i,s,input,pk_i,pk_as,pk_s,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,4).
 state_server(s,i,as,pk_as,pk_s,succ,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_pk,5).
 state_client(c,i,s,succ,input,pk_c,pk_i,pk_s,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_122,7).
 state_server(s,c,i,pk_i,pk_s,succ,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_pk,9).
 state_client(c,as,i,succ,input,pk_c,pk_as,pk_i,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_127,11).
 state_authenticationserver(as,c,i,input,pk_c,pk_as,pk_i,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,12).
 state_client(c,as,s,succ,input,pk_c,pk_as,pk_s,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_130,15).
 state_authenticationserver(as,c,s,input,pk_c,pk_as,pk_s,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,16).
 state_server(s,c,as,pk_as,pk_s,succ,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_pk,17)


section rules:

step step_0 (As,C,S,Input,PK_c,PK_as,PK_s,Nonce,Dummy_Nonce1,Nonce3,Life,Timestamp,SID,Nonce1) :=
 state_authenticationserver(As,C,S,Input,PK_c,PK_as,PK_s,0,Nonce,Dummy_Nonce1,Nonce3,Life,Timestamp,SID).
 iknows(pair(C,pair(S,Nonce1)))
 =>
 state_authenticationserver(As,C,S,Input,PK_c,PK_as,PK_s,1,Nonce,Nonce1,Nonce3,Life,Timestamp,SID).
 iknows(pair(As,crypt(inv(PK_as),pair(As,pair(C,pair(Nonce1,PK_s))))))

step step_1 (As,C,S,Input,PK_c,PK_as,PK_s,Nonce,Nonce1,Dummy_Nonce3,Life,Timestamp,SID,Nonce3) :=
 state_authenticationserver(As,C,S,Input,PK_c,PK_as,PK_s,1,Nonce,Nonce1,Dummy_Nonce3,Life,Timestamp,SID).
 iknows(pair(S,pair(C,Nonce3)))
 =>
 state_authenticationserver(As,C,S,Input,PK_c,PK_as,PK_s,2,Nonce,Nonce1,Nonce3,Life,Timestamp,SID).
 iknows(pair(As,crypt(inv(PK_as),pair(As,pair(S,pair(Nonce3,PK_c))))))

step step_2 (S,C,As,PK_as,PK_s,Succ,Dummy_Nonce2,Dummy_Timestamp,Dummy_Life,Dummy_Nonce3,PK_c,SID,Nonce2,Timestamp,Life,Nonce3) :=
 state_server(S,C,As,PK_as,PK_s,Succ,0,Dummy_Nonce2,Dummy_Timestamp,Dummy_Life,Dummy_Nonce3,PK_c,SID).
 iknows(pair(C,pair(S,crypt(inv(PK_as),pair(C,pair(Timestamp,pair(Life,crypt(PK_s,Nonce2))))))))
=[exists Nonce3]=>
 state_server(S,C,As,PK_as,PK_s,Succ,1,Nonce2,Timestamp,Life,Nonce3,PK_c,SID).
 iknows(pair(S,pair(C,Nonce3)))

step step_3 (S,C,As,PK_as,PK_s,Succ,Nonce2,Timestamp,Life,Nonce3,PK_c,SID) :=
 state_server(S,C,As,PK_as,PK_s,Succ,1,Nonce2,Timestamp,Life,Nonce3,PK_c,SID).
 iknows(pair(As,crypt(inv(PK_as),pair(As,pair(S,pair(Nonce3,PK_c))))))
 =>
 state_server(S,C,As,PK_as,PK_s,Succ,2,Nonce2,Timestamp,Life,Nonce3,PK_c,SID).
 iknows(pair(S,pair(C,crypt(PK_c,pair(S,apply(Succ,Nonce2)))))).
 witness(S,C,client_server,Nonce2)

step step_4 (C,As,S,Succ,Input,PK_c,PK_as,PK_s,Nonce,Dummy_Nonce1,Nonce2,Timestamp,Life,Set_28,SID,Nonce1) :=
 state_client(C,As,S,Succ,Input,PK_c,PK_as,PK_s,0,Nonce,Dummy_Nonce1,Nonce2,Timestamp,Life,Set_28,SID).
 iknows(start)
=[exists Nonce1]=>
 state_client(C,As,S,Succ,Input,PK_c,PK_as,PK_s,1,Nonce,Nonce1,Nonce2,Timestamp,Life,Set_28,SID).
 iknows(pair(C,pair(S,Nonce1)))

step step_5 (C,As,S,Succ,Input,PK_c,PK_as,PK_s,Nonce,Nonce1,Dummy_Nonce2,Dummy_Timestamp,Dummy_Life,Dummy_Set_28,SID,Nonce2,Timestamp,Life) :=
 state_client(C,As,S,Succ,Input,PK_c,PK_as,PK_s,1,Nonce,Nonce1,Dummy_Nonce2,Dummy_Timestamp,Dummy_Life,Dummy_Set_28,SID).
 iknows(pair(As,crypt(inv(PK_as),pair(As,pair(C,pair(Nonce1,PK_s))))))
=[exists Life,Timestamp,Nonce2]=>
 state_client(C,As,S,Succ,Input,PK_c,PK_as,PK_s,2,Nonce,Nonce1,Nonce2,Timestamp,Life,Dummy_Set_28,SID).
 iknows(pair(C,pair(S,crypt(inv(PK_as),crypt(PK_s,pair(C,pair(Timestamp,pair(Life,Nonce2)))))))).
 secret(Dummy_Nonce2,nonce2,Dummy_Set_28).
 contains(C,Dummy_Set_28).
 contains(S,Dummy_Set_28)

step step_6 (C,As,S,Succ,Input,PK_c,PK_as,PK_s,Nonce,Nonce1,Nonce2,Timestamp,Life,Set_28,SID) :=
 state_client(C,As,S,Succ,Input,PK_c,PK_as,PK_s,2,Nonce,Nonce1,Nonce2,Timestamp,Life,Set_28,SID).
 iknows(pair(S,pair(C,crypt(PK_c,pair(S,apply(Succ,Nonce2))))))
 =>
 state_client(C,As,S,Succ,Input,PK_c,PK_as,PK_s,3,Nonce,Nonce1,Nonce2,Timestamp,Life,Set_28,SID).
 request(C,S,client_server,Nonce2,SID)


section properties:

property secrecy_of_nonce (MGoal,ASGoal) :=
 [] ((secret(MGoal,nonce,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_nonce2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,nonce2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_private_key (MGoal,ASGoal) :=
 [] ((secret(MGoal,private_key,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_client_server (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,client_server,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,client_server,MGoal))
     /\ ((request(A1Goal,A2Goal,client_server,MGoal,SID1)
           /\ request(A1Goal,A2Goal,client_server,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_nonce (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,nonce,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_nonce2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,nonce2,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_private_key (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,private_key,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_client_server (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,client_server,MGoal,SID) &
 not(witness(A2Goal,A1Goal,client_server,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_client_server (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,client_server,MGoal,SID1).
 request(A1Goal,A2Goal,client_server,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


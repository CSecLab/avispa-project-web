%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileC14143

section signature:

state_bob: agent * agent * public_key * public_key * hash_func * text * nat * text * text * text * text * message * message * nat -> fact
state_alice: agent * agent * public_key * public_key * hash_func * text * nat * text * text * text * text * message * message * set(agent) * nat -> fact


section types:

Dummy_Set_26, Set_26, ASGoal: set(agent)
alice_bob_nb, sk1, na, nb, bob_alice_na, sec_a_SK, nb1: protocol_id
Dummy_KEi, KEi, SK, Dummy_KEr, Dummy_SK, dummy_msg, MGoal, start, KEr: message
Dummy_Y, PCR, Y, Na, Nb, Dummy_PCR, Dummy_Nb, Dummy_X, Dummy_Na, G, dummy_nonce, g, X: text
H, h: hash_func
kb, Ka, Kb, ka, ki: public_key
A, B, A2Goal, A1Goal, a, b, i: agent
set_99, set_82, set_101: set
3, 1, 4, SID, State, Dummy_State, SID2, SID1, 6, 2, 0, 10, 5: nat


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(ka).
 iknows(kb).
 iknows(ki).
 iknows(inv(ki)).
 iknows(g).
 iknows(h).
 iknows(i).
 state_alice(a,b,ka,kb,h,g,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_82,3).
 state_bob(b,a,ka,kb,h,g,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,4).
 state_alice(a,i,ka,ki,h,g,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_99,6).
 state_bob(b,i,ki,kb,h,g,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,10)


section rules:

step step_0 (A,B,Ka,Kb,H,G,Dummy_Na,Nb,Dummy_X,PCR,SK,KEr,Set_26,SID,Na,X) :=
 state_alice(A,B,Ka,Kb,H,G,0,Dummy_Na,Nb,Dummy_X,PCR,SK,KEr,Set_26,SID).
 iknows(start)
=[exists X,Na]=>
 state_alice(A,B,Ka,Kb,H,G,2,Na,Nb,X,PCR,SK,KEr,Set_26,SID).
 iknows(pair(Na,exp(G,X)))

step step_1 (A,B,Ka,Kb,H,G,Na,Dummy_Nb,X,Dummy_PCR,Dummy_SK,Dummy_KEr,Set_26,SID,Nb,PCR,KEr) :=
 state_alice(A,B,Ka,Kb,H,G,2,Na,Dummy_Nb,X,Dummy_PCR,Dummy_SK,Dummy_KEr,Set_26,SID).
 iknows(crypt(inv(Kb),pair(Na,pair(KEr,PCR))))
=[exists Nb]=>
 state_alice(A,B,Ka,Kb,H,G,4,Na,Nb,X,PCR,apply(H,exp(KEr,X)),KEr,Set_26,SID).
 iknows(scrypt(apply(H,exp(KEr,X)),Nb))

step step_2 (A,B,Ka,Kb,H,G,Na,Dummy_Nb,X,PCR,SK,KEr,Dummy_Set_26,SID,Nb) :=
 state_alice(A,B,Ka,Kb,H,G,4,Na,Dummy_Nb,X,PCR,SK,KEr,Dummy_Set_26,SID).
 iknows(Nb)
 =>
 state_alice(A,B,Ka,Kb,H,G,6,Na,Nb,X,PCR,SK,KEr,Dummy_Set_26,SID).
 secret(SK,sk1,Dummy_Set_26).
 request(A,B,alice_bob_na,Na,SID).
 request(A,B,alice_bob_nb,Nb,SID).
 request(A,B,sk1,SK,SID).
 contains(A,Dummy_Set_26).
 contains(B,Dummy_Set_26)

step step_3 (B,A,Ka,Kb,H,G,Dummy_Na,Nb,Dummy_Y,Dummy_PCR,Dummy_SK,Dummy_KEi,SID,Na,Y,PCR,KEi) :=
 state_bob(B,A,Ka,Kb,H,G,1,Dummy_Na,Nb,Dummy_Y,Dummy_PCR,Dummy_SK,Dummy_KEi,SID).
 iknows(pair(Na,KEi))
=[exists PCR,Y]=>
 state_bob(B,A,Ka,Kb,H,G,3,Na,Nb,Y,PCR,apply(H,exp(Dummy_KEi,Y)),KEi,SID).
 iknows(crypt(inv(kb),pair(Na,pair(exp(G,Y),PCR)))).
 witness(B,A,alice_bob_na,Na)

step step_4 (B,A,Ka,Kb,H,G,Na,Dummy_Nb,Y,PCR,SK,KEi,SID,Nb) :=
 state_bob(B,A,Ka,Kb,H,G,3,Na,Dummy_Nb,Y,PCR,SK,KEi,SID).
 iknows(scrypt(SK,Nb))
 =>
 state_bob(B,A,Ka,Kb,H,G,5,Na,Nb,Y,PCR,SK,KEi,SID).
 iknows(Nb).
 witness(B,A,sk1,SK).
 witness(B,A,alice_bob_nb,Nb)


section properties:

property secrecy_of_sk1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sk1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_sk1 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,sk1,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,sk1,MGoal))
     /\ ((request(A1Goal,A2Goal,sk1,MGoal,SID1)
           /\ request(A1Goal,A2Goal,sk1,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_alice_bob_na (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,alice_bob_na,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,alice_bob_na,MGoal))
     /\ ((request(A1Goal,A2Goal,alice_bob_na,MGoal,SID1)
           /\ request(A1Goal,A2Goal,alice_bob_na,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_alice_bob_nb (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,alice_bob_nb,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,alice_bob_nb,MGoal))
     /\ ((request(A1Goal,A2Goal,alice_bob_nb,MGoal,SID1)
           /\ request(A1Goal,A2Goal,alice_bob_nb,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sk1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sk1,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_sk1 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,sk1,MGoal,SID) &
 not(witness(A2Goal,A1Goal,sk1,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_sk1 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,sk1,MGoal,SID1).
 request(A1Goal,A2Goal,sk1,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_alice_bob_na (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,alice_bob_na,MGoal,SID) &
 not(witness(A2Goal,A1Goal,alice_bob_na,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_alice_bob_na (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,alice_bob_na,MGoal,SID1).
 request(A1Goal,A2Goal,alice_bob_na,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_alice_bob_nb (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,alice_bob_nb,MGoal,SID) &
 not(witness(A2Goal,A1Goal,alice_bob_nb,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_alice_bob_nb (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,alice_bob_nb,MGoal,SID1).
 request(A1Goal,A2Goal,alice_bob_nb,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


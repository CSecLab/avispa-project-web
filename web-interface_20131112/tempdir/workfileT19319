role handy(
	A,B,H: agent,
	Khb, Kha: symmetric_key,
	SNDtoA, RCVfromB: channel(dy))
played_by H def=
local	Transaktionsdaten : message,
	Tan : text
transition
	1. RCVfromB({Transaktionsdaten'.Tan'}_Khb) =|> SNDtoA({Transaktionsdaten'.Tan'}_Kha)
end role


role anwender(
	A,B,H : agent,
	Kha : symmetric_key,
	SNDtoB,RCVfromH,RCVfromB : channel(dy))
played_by A def=
local	State : nat,
	Transaktionsdaten,Egal : message,
	Tan : text
init	State := 0
	
	transition
	1. State = 0 /\ RCVfromB(start) =|> State':= 2 /\ Transaktionsdaten' := new() /\ SNDtoB(Transaktionsdaten')
	2. State = 2 /\ RCVfromH({Egal'.Tan'}_Kha) =|> State':= 4 /\ SNDtoB(Tan') /\ witness(A,B,bank_anwender_T,Transaktionsdaten)
end role

role bank(
	A,B,H : agent,
	Khb : symmetric_key,
	SNDtoH,RCVfromA : channel(dy))
played_by B def=
local	State : nat,
	Transaktionsdaten : message,
	Tan : text
init	State := 1

transition
	1. State = 1 /\ RCVfromA(Transaktionsdaten') =|> State':= 3 /\ Tan' := new() /\ SNDtoH({Transaktionsdaten'.Tan'}_Khb)
	2. State = 3 /\ RCVfromA(Tan) =|> State':= 5 /\ request(A,B,bank_anwender_T,Transaktionsdaten)
end role

role session(
	A,B,H : agent,
	Khb,Kha : symmetric_key)
	def=
local	SA, RAfB, SB, RB, RH, RAfH, SH: channel (dy)

composition
	anwender (A, B, H, Kha, SA, RAfH, RAfB) /\ bank (A, B, H, Khb, SB, RB) /\ handy(A, B, H, Khb, Kha, SH, RH)
end role

role environment()
	def=
	const
		bank_anwender_T : protocol_id,
		khb,kha : symmetric_key,
		a,b,h,i : agent
	intruder_knowledge = {a,b,h}

composition
	session(a,b,h,khb,kha) /\ session(a,b,i,khb,kha) /\ session(a,i,h,khb,kha) /\ session(i,b,h,khb,kha)
end role

goal
	authentication_on bank_anwender_T
end goal

environment()

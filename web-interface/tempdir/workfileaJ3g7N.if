%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileaJ3g7N

section signature:

state_tokenendpoint: agent * agent * agent * text * symmetric_key * symmetric_key * nat * text * text * set(agent) * set(agent) * nat -> fact
state_openidprovider: agent * agent * agent * text * text * symmetric_key * nat * text * text * set(agent) * set(agent) * nat -> fact
state_relyingparty: agent * agent * agent * text * text * symmetric_key * symmetric_key * symmetric_key * nat * text * text * text * set(agent) * set(agent) * set(agent) * set(agent) * nat -> fact


section types:

auth_2, sec_3, auth_3, sec_2, auth_1, sec_1: protocol_id
MGoal, start: message
set_100, set_99, set_98, set_97, set_133, set_132, set_130, set_129, set_127, set_126, set_125, set_124, set_119, set_118, set_113, set_112: set
rokey, rtkey, rikey, cskey, RTKey, CSKey, ROKey: symmetric_key
ASGoal, Set_63, Set_62, Set_48, Set_47, Set_34, Set_30, Set_28, Set_23, Dummy_Set_63, Dummy_Set_62, Dummy_Set_48, Dummy_Set_47, Dummy_Set_34, Dummy_Set_30, Dummy_Set_28, Dummy_Set_23: set(agent)
A2Goal, A1Goal, rp, op, te, TE, RP, OP, i: agent
SID2, SID1, SID, State, 9, 3, 8, 2, 7, 1, 5, 0, 4, Dummy_State: nat
clientid, uri, Code, IdToken, URI, Stat, ClientId, Dummy_IdToken, Dummy_Code, Dummy_Stat, dummy_nonce: text


section inits:

initial_state init1 := 
 iknows(start).
 iknows(rp).
 iknows(op).
 iknows(te).
 iknows(rikey).
 iknows(i).
 state_relyingparty(rp,op,te,clientid,uri,rokey,rtkey,cskey,0,dummy_nonce,dummy_nonce,dummy_nonce,set_97,set_98,set_99,set_100,3).
 state_openidprovider(op,rp,te,clientid,uri,rokey,0,dummy_nonce,dummy_nonce,set_112,set_113,4).
 state_tokenendpoint(te,rp,op,uri,rtkey,cskey,0,dummy_nonce,dummy_nonce,set_118,set_119,5).
 state_relyingparty(rp,op,te,clientid,uri,rokey,rtkey,cskey,0,dummy_nonce,dummy_nonce,dummy_nonce,set_124,set_125,set_126,set_127,7).
 state_openidprovider(op,rp,te,clientid,uri,rokey,0,dummy_nonce,dummy_nonce,set_129,set_130,8).
 state_tokenendpoint(te,rp,op,uri,rtkey,cskey,0,dummy_nonce,dummy_nonce,set_132,set_133,9)


section rules:

step step_0 (RP,OP,TE,ClientId,URI,ROKey,RTKey,CSKey,Dummy_Stat,Code,IdToken,Dummy_Set_23,Set_28,Set_30,Set_34,SID,Stat) :=
 state_relyingparty(RP,OP,TE,ClientId,URI,ROKey,RTKey,CSKey,0,Dummy_Stat,Code,IdToken,Dummy_Set_23,Set_28,Set_30,Set_34,SID).
 iknows(start)
=[exists Stat]=>
 state_relyingparty(RP,OP,TE,ClientId,URI,ROKey,RTKey,CSKey,1,Stat,Code,IdToken,Dummy_Set_23,Set_28,Set_30,Set_34,SID).
 iknows(scrypt(ROKey,pair(ClientId,pair(Stat,URI)))).
 secret(Stat,sec_1,Dummy_Set_23).
 witness(RP,OP,auth_1,Stat).
 contains(RP,Dummy_Set_23).
 contains(OP,Dummy_Set_23)

step step_1 (RP,OP,TE,ClientId,URI,ROKey,RTKey,CSKey,Dummy_Stat,Dummy_Code,IdToken,Set_23,Dummy_Set_28,Dummy_Set_30,Set_34,SID,Stat,Code) :=
 state_relyingparty(RP,OP,TE,ClientId,URI,ROKey,RTKey,CSKey,1,Dummy_Stat,Dummy_Code,IdToken,Set_23,Dummy_Set_28,Dummy_Set_30,Set_34,SID).
 iknows(scrypt(ROKey,pair(Code,Stat)))
 =>
 state_relyingparty(RP,OP,TE,ClientId,URI,ROKey,RTKey,CSKey,2,Stat,Code,IdToken,Set_23,Dummy_Set_28,Dummy_Set_30,Set_34,SID).
 iknows(scrypt(RTKey,pair(Code,URI))).
 secret(Stat,sec_1,Dummy_Set_28).
 secret(Code,sec_2,Dummy_Set_30).
 witness(RP,TE,auth_3,Code).
 contains(RP,Dummy_Set_28).
 contains(OP,Dummy_Set_28).
 contains(RP,Dummy_Set_30).
 contains(OP,Dummy_Set_30)

step step_2 (RP,OP,TE,ClientId,URI,ROKey,RTKey,CSKey,Stat,Code,Dummy_IdToken,Set_23,Set_28,Set_30,Dummy_Set_34,SID,IdToken) :=
 state_relyingparty(RP,OP,TE,ClientId,URI,ROKey,RTKey,CSKey,2,Stat,Code,Dummy_IdToken,Set_23,Set_28,Set_30,Dummy_Set_34,SID).
 iknows(scrypt(RTKey,scrypt(CSKey,IdToken)))
 =>
 state_relyingparty(RP,OP,TE,ClientId,URI,ROKey,RTKey,CSKey,3,Stat,Code,IdToken,Set_23,Set_28,Set_30,Dummy_Set_34,SID).
 secret(IdToken,sec_3,Dummy_Set_34).
 contains(RP,Dummy_Set_34).
 contains(TE,Dummy_Set_34)

step step_3 (OP,RP,TE,ClientId,URI,ROKey,Dummy_Code,Dummy_Stat,Dummy_Set_47,Dummy_Set_48,SID,Code,Stat) :=
 state_openidprovider(OP,RP,TE,ClientId,URI,ROKey,0,Dummy_Code,Dummy_Stat,Dummy_Set_47,Dummy_Set_48,SID).
 iknows(scrypt(ROKey,pair(ClientId,pair(Stat,URI))))
=[exists Code]=>
 state_openidprovider(OP,RP,TE,ClientId,URI,ROKey,1,Code,Stat,Dummy_Set_47,Dummy_Set_48,SID).
 iknows(scrypt(ROKey,pair(Code,Stat))).
 secret(Stat,sec_1,Dummy_Set_47).
 secret(Code,sec_2,Dummy_Set_48).
 request(OP,RP,auth_1,Dummy_Stat,SID).
 contains(RP,Dummy_Set_47).
 contains(OP,Dummy_Set_47).
 contains(RP,Dummy_Set_48).
 contains(OP,Dummy_Set_48)

step step_4 (TE,RP,OP,URI,RTKey,CSKey,Dummy_Code,Dummy_IdToken,Dummy_Set_62,Dummy_Set_63,SID,Code,IdToken) :=
 state_tokenendpoint(TE,RP,OP,URI,RTKey,CSKey,0,Dummy_Code,Dummy_IdToken,Dummy_Set_62,Dummy_Set_63,SID).
 iknows(scrypt(RTKey,pair(Code,URI)))
=[exists IdToken]=>
 state_tokenendpoint(TE,RP,OP,URI,RTKey,CSKey,1,Code,IdToken,Dummy_Set_62,Dummy_Set_63,SID).
 iknows(scrypt(RTKey,scrypt(CSKey,IdToken))).
 secret(Code,sec_2,Dummy_Set_62).
 secret(IdToken,sec_3,Dummy_Set_63).
 request(TE,RP,auth_3,Code,SID).
 contains(RP,Dummy_Set_62).
 contains(OP,Dummy_Set_62).
 contains(RP,Dummy_Set_63).
 contains(TE,Dummy_Set_63)


section properties:

property authentication_on_auth_1 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth_1,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth_1,MGoal))
     /\ ((request(A1Goal,A2Goal,auth_1,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth_1,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_auth_3 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth_3,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth_3,MGoal))
     /\ ((request(A1Goal,A2Goal,auth_3,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth_3,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property secrecy_of_sec_1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_3 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_3,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state authentication_on_auth_1 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth_1,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_1,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth_1 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth_1,MGoal,SID1).
 request(A1Goal,A2Goal,auth_1,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_auth_3 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth_3,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_3,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth_3 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth_3,MGoal,SID1).
 request(A1Goal,A2Goal,auth_3,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state secrecy_of_sec_1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_2,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_3 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_3,ASGoal) &
 not(contains(i,ASGoal))


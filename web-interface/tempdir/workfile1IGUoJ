role alice (A, B: agent, Ka, Kb: public_key, SND, RCV: channel (dy))
played_by A def=
local State : nat, Na, Nb: text
init State := 0
transition
    0.  State  = 0 / RCV(start) =|>
        State’:= 2 / Na’ := new() / SND({Na’.A}_Kb)
    2.  State  = 2 / RCV({Na.Nb’}_Ka) =|>
        State’:= 4 / SND({Nb’}_Kb)
end role

role bob(A, B: agent, Ka, Kb: public_key, SND, RCV: channel (dy))
played_by B def=
local State : nat, Na, Nb: text
init State := 1
transition
    1.  State  = 1 / RCV({Na’.A}_Kb) =|>
        State’:= 3 / Nb’ := new() / SND({Na’.Nb’}_Ka)
    3.  State  = 3 / RCV({Nb}_Kb) =|> State’:= 5
end role

role session(A, B: agent, Ka, Kb: public_key) def=
local SA, RA, SB, RB: channel (dy)
composition
        alice(A,B,Ka,Kb,SA,RA) / bob(A,B,Ka,Kb,SB,RB)
end role

role environment() def=
const a, b, c, d  : agent,
ka, kb, ki, kc, kd : public_key,
intruder_knowledge = {a, b, ka, kb, kc, kd, ki, inv(ki)}
composition
        session(a,b,ka,kb) / session(c,d,kc,kd) / session(a,i,ka,ki)
end role 
% --- Authentication ---

role ps(    PS, PT, S, T : agent,
            TLSsps, TLStps, Air : symmetric_key,
            SND, RCV : channel(dy))
    played_by PS def=
    local
        Step : nat,
        Protocol, Hpt, Ns, Hs, Nt : text,
        IDs, IDps, IDt, IDpt : text,
        X, Y : message,
        Hash : hash_func
    init Step := 1
    transition
        % Recevie a message from S
        1. Step = 1 /\ RCV({Protocol.Step.IDs.Hpt'.Ns'}_TLSsps)
            =|>
            % Make sure that Ns was authentic
            request(PS,S,ns_s_ps,Ns')
            % Hash Ns and IDs to get Hs
            /\ Hs' := Hash(Ns'.IDs)
            % Make sure that Hs is authentic
            /\ witness(PS,T,hs_ps_t,Hs')
            /\ Step' := 2
            % Send Hpt and Hs to T
            /\ SND({Protocol.Step'.IDps.Hpt'.Hs'}_TLStps)
            /\ Step' := 3
        % Receive message X from T
        3. Step = 3 /\ RCV({X'}_TLStps)
            =|>
            Step' := 4
            % Make sure that Ns, IDs and the message X are authentic
            /\ witness(PS,PT,ns_ps_pt,Ns)
            /\ witness(PS,PT,ids_ps_pt,IDs)
            /\ witness(PS,PT,x_ps_pt,X')
            % Send X, IDs and Ns over the air to PT
            /\ SND({Protocol.Step'.IDps.X'.IDs.Ns}_Air)
            /\ Step' := 6
        % Receive Y from T and check if Hs and Hpt are correct
        6. Step = 6 /\ RCV({Y'}_TLStps) /\ Hs = Y'(Hs) /\ Hpt = Y'(Hpt)
            =|>
            Step' := 7
            % Send Y to S
            /\ SND({Protocol.Step'.IDps.Y'}_TLSsps)
            /\ Step' := 8
end role

role pt(    PS, PT, S, T : agent,
            TLStpt, Air, Initsend : symmetric_key,
            SND, RCV : channel(dy))
    played_by PT def=
    local
        Step : nat,
        Protocol, Hpt, Ns, Hs, Nt : text,
        IDs, IDps, IDt, IDpt : text,
        X, Y : message
    init Step := 1
    transition
        % Receive initial informations from S to simmulate user interaction and
        % a registered PT
        1. Step = 1 /\ RCV({IDs'.Ns'.Hpt'}_Initsend)
            =|>
            Step' := 4
        % Receive a message from PS over the air and check if IDs, Ns and Hpt are correct
        4. Step = 4 /\ RCV({Protocol.Step'.IDps.X'.IDs'.Ns'}_Air) /\ IDs = IDs' /\ Ns = Ns'
            /\ Hpt = X'(Hpt)
            =|>
            % Make sure that Ns, IDs, X and Nt were authentic (a second check)
            request(PT,PS,ns_ps_pt,Ns)
            /\ request(PT,PS,ids_ps_pt,IDs)
            /\ request(PT,PS,x_ps_pt,X')
            /\ request(PT,T,nt_t_pt,X'(Nt))
            /\ Step' := 5
            % Send X back to T
            /\ SND({{Protocol.Step'.IDpt.X'}_PT}_TLStpt)
            /\ Step' := 8
end role

role s(     PS, PT, S, T : agent,
            TLSsps, Initsend : symmetric_key,
            SND, RCV : channel(dy))
    played_by S def=
    local
        Step : nat,
        Protocol, Hpt, Ns, Hs, Nt : text,
        IDs, IDps, IDt, IDpt : text,
        X, Y : message,
        Hash : hash_func
    init Step := 1
    transition
        1. Step = 1 /\ RCV(start)
            =|>
            % Build a new nonce Ns and simmulate an IDs and an Hpt
            Ns' := new()
            /\ IDs' := new()
            /\ Hpt' := new()
            % Hash Ns and IDs to get the Hs
            /\ Hs' := Hash(Ns'.IDs')
            % Make sure that the new Ns is authentic
            /\ witness(S,PS,ns_s_ps,Ns')
            % Send Hpt and Ns to PS
            /\ SND({Protocol.Step.IDs.Hpt'.Ns'}_TLSsps)
            % Send IDs and Ns to PT to simmulate user interaction with a registered Hpt
            /\ SND({IDs'.Ns'.Hpt'}_Initsend)
            /\ Step' := 7
        % Receive Y and check Hpt and Hs
        7. Step = 7 /\ RCV({Protocol.Step'.IDps.Y'}_TLSsps) /\ Hpt = Y'(Hpt)
        /\ Hs = Y'(Hs)
            =|>
            % Protocol is successfull
            SND(success)
            /\ Step' := 8
end role

role t(     PS, PT, S, T : agent,
            TLStpt, TLStps : symmetric_key,
            SND, RCV : channel(dy))
    played_by T def=
    local
        Step : nat,
        Protocol, Hpt, Ns, Hs, Nt : text,
        IDs, IDps, IDt, IDpt : text,
        X, Y : message
    init Step := 2
    transition
        % Receive a message from PS
        2. Step = 2 /\ RCV({Protocol.Step'.IDps.Hpt'.Hs'}_TLStps)
            =|>
            % Make sure that Hs was authentic
            request(T,PS,hs_ps_t,Hs')
            % Build a new nonce Nt
            /\ Nt' := new()
            % Make sure that Nt is authentic
            /\ witness(T,PT,nt_t_pt,Nt')
            /\ Step' := 3
            % Build message X with Hpt, Hs and Nt
            /\ X' := {Protocol.Step'.IDt.Hpt'.Hs'.Nt'}_T
            % Send message X to PS
            /\ SND({X'}_TLStps)
            /\ Step' := 5
        % Receive X from PT and check if Nt, Hs and Hpt are correct
        5. Step = 5 /\ RCV({{Protocol.Step'.IDpt.X'}_PT}_TLStpt)
            /\ Nt = X'(Nt)
            /\ Hs = X'(Hs)
            /\ Hpt = X'(Hpt)
            =|>
            Step' := 6
            % Build a message Y with Hpt and Hs
            /\ Y' := {Protocol.Step'.IDt.Hpt.Hs}_T
            % Send Y to PS
            /\ SND({Y'}_TLStps)
            /\ Step' := 8
end role

role session(   S, PS, T, PT : agent,
                TLSsps, TLStps, TLStpt, Air, Initsend : symmetric_key)
    def=
    local
        SS, RS, SPS, RPS, ST, RT, SPT, RPT : channel(dy)
    composition
    % instantiate all roles
    s(PS, PT, S, T, TLSsps, Initsend, SS, RS)
    /\ ps(PS, PT, S, T, TLSsps, TLStps, Air, SPS, RPS)
    /\ t(PS, PT, S, T,TLStpt, TLStps, ST, RT)
    /\ pt(PS, PT, S, T, TLStpt, Air, Initsend, SPT, RPT)
end role

role enviroment()
    def=
    const
        ns_s_ps, 
        hs_ps_t, 
        ns_ps_pt,
        ids_ps_pt, 
        x_ps_pt,
        nt_t_pt 
            : protocol_id,
        tlssps, tlstps, tlstpt, air, initsend : symmetric_key,
        s, ps, t, pt : agent
    % Intruder only has knowledge of the involved roles
    intruder_knowledge = {s, ps, t, pt}
    composition
        session(s,ps,t,pt,tlssps,tlstps,tlstpt,air,initsend)
        % Intruder fakes to be S
        /\ session(i,ps,t,pt,tlssps,tlstps,tlstpt,air,initsend)
end role


goal
    % Check the authenticy of Ns, Hs, IDs, X and Nt
    authentication_on ns_s_ps
    authentication_on hs_ps_t
    authentication_on ns_ps_pt
    authentication_on ids_ps_pt
    authentication_on x_ps_pt
    authentication_on nt_t_pt
end goal

enviroment()

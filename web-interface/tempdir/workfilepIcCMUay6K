role alice (A, H	: agent,
		G	: text,
		Hsh	: hash_func,
		Snd,Rcv	: channel(dy),
		Pwd	: symmetric_key)

played_by A
def=

	local State	: nat,
	Ra		: text,
	Tkah		: symmetric_key,
	Xah		: message,
	Kh		: message

const sec_K_AH		: protocol_ud

init State := 0
transition

1.	State = 0	/ Rcv(start) =|>
	State' :=1	/ Ra' :=new()
			/ Xah' :=exp(G,Ra')
			/ TKah' :=Has(A.Pwd.H)
			/ Snd(A.{Xah'}_Tkah'.H)

2. 	State = 1	/ Rcv(H.{Yh'}_Tkah.A) = |>

	State' =2	/ Xha' :=exp(Yh', Ra)
			/ Kh' := Hsh(Xha.Tkah.Tkab.Xah)
			/ witness(A,H,k_ah,kh')
			/ secret (Kh', sec_K_AH, {A,H})
			/ request (A,H,k_ha,Kh')

end role



role bob (H,A		: agent,
		G	: text,
		Hsh	: hash_func,
		Kha	: symmetric_key)

played_by H

def=

local State		: nat,
Rh			: text,
Tkah			: symmetric_key,
Xah			: message,
Temp1			: message,
Kh			: message

const sec_K_HA		: protocol_id

init State := 0

transition

1.	State = 0 / Rcv(A.Temp1'.H) =|>
	
	State' := 1	/ TKah' := Hsh(A.Pwd.H)
			/ Xah' := {Temp1'}_TKah'
			/ Rh' := new()
			/ Snd(H.{TKah'}_Kha.A)

2.	State = 1 	/ Rcv(A.{Ya'}_Kha.H}
	STate' :=2	/ Yh' :=exp(G,Rh)
			/ Snd(H.{Yh'}_TKah.A)
			/ Kh' := Hsh(Xha.TKah.Xah)
			/ witness(H,A,k_ha, Kh')
			/ secret(Kh', sec_K_HA, {H 
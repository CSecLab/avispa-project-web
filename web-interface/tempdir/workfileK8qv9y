role alice (Ui, RSj: agent,
SKas : symmetric_key,
H,Mul,Add,Sub: hash_func,
Snd, Rcv: channel(dy))
played_by Ui
def=
local State : nat,
IDi, PWi, P, Pubrs, TIDi, S, Ri, Ti, TSi, Regidi: text,
Di, DIDi, Ai, Bi, Zi, Fi, Gi, Li, M2, SKu, Qi, M1  : message,
Inc : hash_func
const alice_server, server_alice, subs1, subs2, subs3, subs4, subs5, subs6: protocol_id
init State :=0
transition
1. State = 0 /\ Rcv(start) =|>
State' := 1 /\ IDi' := new()
/\ Snd({IDi'}_SKas)
/\ secret({IDi}, subs1, {Ui,RSj})
2. State = 1 /\ Rcv({TIDi'. Regidi'. TSi'. Pubrs'}_SKas) =|>
State' := 2 /\ Ri' := new()
/\ Ti' := new()
/\ DIDi' := Add(Regidi, H(PWi))
/\ Di' := xor(TSi, H(IDi.PWi))
/\ Ai' := H(IDi.Regidi.H(PWi))
/\ Bi' := xor(PWi, H(IDi))
/\ Zi' := xor(Di', H(IDi.PWi))
/\ Fi' := xor(IDi,H(Zi.Ri))
/\ Gi' := Add(Mul(Ti.Pubrs),Regidi)
/\ Li' := H(Ti.Pubrs.IDi)
/\ Snd(TIDi.Fi'.Gi'.Ri'.Li')
/\ secret({PWi}, subs2, {Ui})
/\ secret({Ti}, subs3, {Ui})
/\ witness(Ui, RSj, alice_server, Ti')
3. State = 2 /\ Rcv(Qi'.M2') =|>
State' := 3 /\ M1' := Add(M2,Regidi)
/\ SKu' := H(Regidi.M1'.Mul(Ti.Pubrs))
end role

role server (RSj, Ui: agent,
SKas : symmetric_key,
H, Mul, Add, Sub : hash_func,
Snd, Rcv: channel(dy) )
played_by RSj
def=
local State : nat,
IDi, P, Pubrs, TIDi, S, Ri, Rs, TSi, Regidi: text,
Yi, M1, DIDi, Ai, AL, Bi, Zi, Fi, Gi, Li, M2, SKrs, Qi: message,
Inc : hash_func
const alice_server, server_alice, subs1, subs2, subs3, subs4, subs5, subs6: protocol_id
init State :=0
transition
1. State = 0 /\ Rcv(IDi') =|>
State' := 1 /\ TIDi' := new()
/\ Pubrs' := Mul(S,P)
/\ AL' := Mul(Pubrs',P)
/\ Regidi' := Mul(S,H(IDi))
/\ TSi' := H(TIDi'.S)
/\ Snd({TIDi'. Regidi'. TSi'. Pubrs'}_SKas)   
/\ secret({S}, subs5, {RSj})
2. State = 1 /\ Rcv(TIDi. Fi'. Gi'. Ri'. Li') =|>
State' := 2 /\ Rs' := new()
/\ Yi' := Sub(Gi,Regidi)
/\ M1' := Mul(Rs.P)
/\ M2' := Add(M1,Regidi)
/\ SKrs' := H(Regidi.M1'.Yi')
/\ Qi' := H(IDi. SKrs.M1)
/\ witness(RSj, Ui, server_alice, Rs')
/\request(Ui, RSj, server_alice, Rs')
/\secret({Rs'},subs6,{RSj})
/\ Snd(Qi'.M2')
end role

role session(Ui, RSj: agent,
SKas : symmetric_key,
H, Mul, Add, Sub: hash_func)
def=
local SI, SJ, RI, RJ: channel (dy)
composition
alice(Ui, RSj, SKas, H, Mul, Add, Sub, SI, RI) 
/\ server(Ui, RSj, SKas, H, Mul, Add, Sub, SJ, RJ)
end role
role environment()
def=
const ui, rsj: agent,
skas : symmetric_key,
h, mul, add, sub: hash_func,
idi, p, didi, di, pubrs, tidi, s, ri, ti, rs, tsi, regidi, m1, m2, qi, ai, bi,zi, fi, gi, li: text,
alice_server_ti, server_alice_rs, subs1,
subs2, subs3, subs4, subs5, subs6: protocol_id
intruder_knowledge = {ui, rsj, h, mul, add, sub, fi, gi, ri, li, qi, m2, didi, ai, bi, di}
composition
session( ui, rsj, skas, h, mul, add, sub)
/\ session(rsj, ui, skas, h, mul, add, sub)
end role
goal
secrecy_of subs1
secrecy_of subs2
secrecy_of subs3
secrecy_of subs4
secrecy_of subs5
secrecy_of subs6
authentication_on alice_server_ti
authentication_on server_alice_rs
end goal
environment()

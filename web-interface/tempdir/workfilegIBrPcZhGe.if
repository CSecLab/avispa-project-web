%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilegIBrPcZhGe

section signature:

state_gateway: agent * agent * agent * text * text * text * text * symmetric_key * symmetric_key * hash_func * hash_func * nat * text * text * text * text * text * text * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * message * message * message * message * message * set(agent) * nat -> fact
state_sensor: agent * agent * agent * symmetric_key * text * hash_func * nat * text * text * symmetric_key * symmetric_key * symmetric_key * message * message * message * nat -> fact
state_user: agent * agent * agent * symmetric_key * symmetric_key * text * text * text * text * hash_func * nat * text * text * text * text * message * message * message * symmetric_key * symmetric_key * symmetric_key * nat -> fact


section types:

set_144, set_138: set
Set_69, Dummy_Set_69, ASGoal: set(agent)
V3, V2, AIDu, V4, V1, start, dummy_msg, MGoal: message
6, State, 7, 3, 9, 8, 5, SID, 4, 2, 1, 0, Dummy_State: nat
sk, user_gateway_kug, gateway_sensor_kgs, user_sensor_sk: protocol_id
Hash, Add, hashh, addh: hash_func
T, T2, SNid, TSugnew, TS, Nx, Nu, TSug, M, Dummy_T, IDu, Dummy_T2, Dummy_Nx, Dummy_Nu, dummy_nonce, PSWu: text
SK, SK2, Kgsnew, Kgs, SK3, Kugnew, Kug, Dummy_SK2, Dummy_Kgs, Dummy_SK3, Dummy_SK, dummy_sk, kug, kgs, Kug2: symmetric_key
SENSOR, USER, GATEWAY, sensor, gateway, user, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(i).
 state_user(user,sensor,gateway,kug,dummy_sk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,hashh,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_sk,dummy_sk,dummy_sk,3).
 state_sensor(sensor,user,gateway,kgs,dummy_nonce,hashh,2,dummy_nonce,dummy_nonce,dummy_sk,dummy_sk,dummy_sk,dummy_msg,dummy_msg,dummy_msg,4).
 state_gateway(gateway,user,sensor,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,kug,kgs,addh,hashh,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_138,5).
 state_sensor(sensor,i,gateway,kgs,dummy_nonce,hashh,2,dummy_nonce,dummy_nonce,dummy_sk,dummy_sk,dummy_sk,dummy_msg,dummy_msg,dummy_msg,8).
 state_gateway(gateway,i,sensor,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,kug,kgs,addh,hashh,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_144,9)


section rules:

step step_0 (USER,SENSOR,GATEWAY,Kug,Kug2,IDu,SNid,TSug,PSWu,Hash,Dummy_Nu,Dummy_Nx,TSugnew,TS,AIDu,V1,V4,Kugnew,SK,SK3,SID,Nu) :=
 state_user(USER,SENSOR,GATEWAY,Kug,Kug2,IDu,SNid,TSug,PSWu,Hash,0,Dummy_Nu,Dummy_Nx,TSugnew,TS,AIDu,V1,V4,Kugnew,SK,SK3,SID).
 iknows(start)
=[exists Nu]=>
 state_user(USER,SENSOR,GATEWAY,Kug,Kug2,IDu,SNid,TSug,PSWu,Hash,4,Nu,xor(Kug,Nu),TSugnew,TS,AIDu,V1,V4,Kugnew,SK,SK3,SID).
 iknows(xor(Kug,Nu))

step step_1 (USER,SENSOR,GATEWAY,Kug,Kug2,IDu,SNid,TSug,PSWu,Hash,Nu,Nx,TSugnew,TS,AIDu,V1,V4,Kugnew,Dummy_SK,Dummy_SK3,SID,SK3) :=
 state_user(USER,SENSOR,GATEWAY,Kug,Kug2,IDu,SNid,TSug,PSWu,Hash,4,Nu,Nx,TSugnew,TS,AIDu,V1,V4,Kugnew,Dummy_SK,Dummy_SK3,SID).
 iknows(SK3)
 =>
 state_user(USER,SENSOR,GATEWAY,Kug,Kug2,IDu,SNid,TSug,PSWu,Hash,5,Nu,Nx,TSugnew,TS,AIDu,V1,V4,Kugnew,xor(apply(Hash,pair(Kug,pair(IDu,Nu))),SK3),SK3,SID)

step step_2 (SENSOR,USER,GATEWAY,Dummy_Kgs,SNid,Hash,T,Dummy_T2,Dummy_SK,Dummy_SK2,Kgsnew,V3,V2,AIDu,SID,T2,SK2) :=
 state_sensor(SENSOR,USER,GATEWAY,Dummy_Kgs,SNid,Hash,2,T,Dummy_T2,Dummy_SK,Dummy_SK2,Kgsnew,V3,V2,AIDu,SID).
 iknows(SK2)
=[exists T2]=>
 state_sensor(SENSOR,USER,GATEWAY,apply(Hash,pair(Dummy_Kgs,SNid)),SNid,Hash,6,T,T2,xor(apply(Hash,Dummy_Kgs),SK2),SK2,Kgsnew,V3,V2,AIDu,SID).
 iknows(SNid)

step step_3 (GATEWAY,USER,SENSOR,TSug,M,IDu,SNid,Kug,Kgs,Add,Hash,TSugnew,TS,Dummy_Nx,Dummy_Nu,Dummy_T,T2,Dummy_SK,Dummy_SK2,SK3,Kugnew,Kgsnew,V4,V1,V2,V3,AIDu,Dummy_Set_69,SID,Nx,T,SK) :=
 state_gateway(GATEWAY,USER,SENSOR,TSug,M,IDu,SNid,Kug,Kgs,Add,Hash,1,TSugnew,TS,Dummy_Nx,Dummy_Nu,Dummy_T,T2,Dummy_SK,Dummy_SK2,SK3,Kugnew,Kgsnew,V4,V1,V2,V3,AIDu,Dummy_Set_69,SID).
 iknows(Nx)
=[exists T,SK]=>
 state_gateway(GATEWAY,USER,SENSOR,TSug,M,IDu,SNid,Kug,Kgs,Add,Hash,3,TSugnew,TS,Nx,xor(Kug,Nx),T,T2,SK,xor(apply(Hash,Kgs),SK),SK3,Kugnew,Kgsnew,V4,V1,V2,V3,AIDu,Dummy_Set_69,SID).
 iknows(xor(apply(Hash,Kgs),SK)).
 secret(SK,sk,Dummy_Set_69).
 contains(USER,Dummy_Set_69).
 contains(GATEWAY,Dummy_Set_69).
 contains(SENSOR,Dummy_Set_69)

step step_4 (GATEWAY,USER,SENSOR,TSug,M,IDu,SNid,Kug,Kgs,Add,Hash,TSugnew,TS,Nx,Nu,T,T2,SK,SK2,Dummy_SK3,Kugnew,Kgsnew,V4,V1,V2,V3,AIDu,Set_69,SID) :=
 state_gateway(GATEWAY,USER,SENSOR,TSug,M,IDu,SNid,Kug,Kgs,Add,Hash,3,TSugnew,TS,Nx,Nu,T,T2,SK,SK2,Dummy_SK3,Kugnew,Kgsnew,V4,V1,V2,V3,AIDu,Set_69,SID).
 iknows(SNid)
 =>
 state_gateway(GATEWAY,USER,SENSOR,TSug,M,IDu,SNid,Kug,Kgs,Add,Hash,7,TSugnew,TS,Nx,Nu,T,T2,SK,SK2,xor(apply(Hash,pair(Kug,pair(IDu,Nu))),SK),Kugnew,Kgsnew,V4,V1,V2,V3,AIDu,Set_69,SID).
 iknows(xor(apply(Hash,pair(Kug,pair(IDu,Nu))),SK))


section properties:

property secrecy_of_sk (MGoal,ASGoal) :=
 [] ((secret(MGoal,sk,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state secrecy_of_sk (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sk,ASGoal) &
 not(contains(i,ASGoal))


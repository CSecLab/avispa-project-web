role client (
    C,SP,IDP,XDR    : agent,
    SSLKey          : (symmetric_key) set,
    SND,RCV         : channel(dy) )
played_by C
def=
    local
        State       : nat,
        APIKey,Lsd  : text,
        Message     : {message}_public_key,
        CIDPKey     : symmetric_key,
        Session     : symmetric_key.text.text.text.hash(text.text.symmetric_key.text.symmetric_key)
    init
        State:=0
    transition
    1. State=0 /\ RCV(start) =|> State':=1 /\ SND(resourcereq)
    2. State=1 /\ RCV(IDP.APIKey') =|> State':=2 /\ SND(statusreq)
    3. State=2 /\ RCV(notloggedin) =|> State':=3 /\ SND(sessionreq.APIKey)
    4. State=3 /\ RCV(Lsd') =|> State':=4 /\ CIDPKey':=new() /\ SND({APIKey.credentials.Lsd'}_CIDPKey') /\ SSLKey':=cons(CIDPKey',SSLKey)
    5. State=4 /\ RCV({XDR.Message'}_CIDPKey) =|> State':=5 /\ SND(Message')
    6. State=5 /\ RCV(Session') =|> State':=6 /\ SND(resourcereq.Session')
    7. State=6 /\ RCV(resource) =|> State':=7
end role

role serviceProvider (
    C,SP,IDP,XDR    : agent,
    APIKey          : text,
    APISecret       : symmetric_key,
    Hash            : hash_func,
    SND,RCV         : channel(dy) )
played_by SP
def=
    local
        State           : nat,
        Uid,Expires,Ss  : text,
        Key             : symmetric_key,
        Sig             : hash(text.text.symmetric_key.text.symmetric_key),
        Session         : symmetric_key.text.text.text.hash(text.text.symmetric_key.text.symmetric_key)
    init
        State:=0
    transition
    1. State=0 /\ RCV(resourcereq) =|> State':=1 /\ SND(IDP.APIKey)
    2. State=1 /\ RCV(resourcereq.Key'.Uid'.Expires'.Ss'.Hash(Expires'.Ss'.Key'.Uid'.APISecret)) =|>
       State':=2 /\ SND(resource) /\ request(SP,IDP,sp_idp_sig,Hash(Expires'.Ss'.Key'.Uid'.APISecret))
    3. State=1 /\ RCV(otherresourcereq.Key'.Uid'.Expires'.Ss'.Hash(Expires'.Ss'.Key'.Uid'.APISecret)) =|>
       State':=2 /\ SND(otherresource) /\ secret(otherresource,otherresourceid,{SP})
       /\ request(SP,IDP,sp_idp_sig,Hash(Expires'.Ss'.Key'.Uid'.APISecret))
end role

role identityProvider (
    C,SP,IDP,XDR    : agent,
    APIKey,Uid      : text,
    APISecret       : symmetric_key,
    SSLKey          : (symmetric_key) set,
    XDRKey          : public_key,
    Hash            : hash_func,
    SND,RCV         : channel(dy) )
played_by IDP
def=
    local
        State            : nat,
        Lsd,Expires,Ss   : text,
        CIDPKey,Key      : symmetric_key,
        Sig              : hash(text.text.symmetric_key.text.symmetric_key),
        Session          : symmetric_key.text.text.text.hash(text.text.symmetric_key.text.symmetric_key)
    init
        State:=0
    transition
    1. State=0 /\ RCV(statusreq) =|> State':=1 /\ SND(notloggedin)
    2. State=1 /\ RCV(sessionreq.APIKey) =|> State':=2 /\ Lsd':=new() /\ SND(Lsd')
    3. State=2 /\ in(CIDPKey',SSLKey) /\ RCV({APIKey.credentials.Lsd}_CIDPKey') =|> State':=3 /\ SSLKey':=delete(CIDPKey',SSLKey)
       /\ Key':=new() /\ Expires':=new() /\ Ss':=new() /\ Sig':=Hash(Expires'.Ss'.Key'.Uid.APISecret)
       /\ Session':=(Key'.Uid.Expires'.Ss'.Sig') /\ SND({XDR.{Session'}_XDRKey}_CIDPKey') /\ witness(IDP,SP,sp_idp_sig,Sig')
end role

role xdreceiver (
    C,SP,IDP,XDR    : agent,
    XDRKey          : public_key,
    SND,RCV         : channel(dy) )
played_by XDR
def=
    local
        State       : nat,
        Session     : symmetric_key.text.text.text.hash(text.text.symmetric_key.text.symmetric_key)
    init
        State:=0
    transition
    1. State=0 /\ RCV({Session'}_XDRKey) =|> State':=1 /\ SND(Session')
end role

role session (
    C,SP,IDP,XDR    : agent,
    APIKey,Uid      : text,
    APISecret       : symmetric_key,
    SSLKey          : (symmetric_key) set,
    XDRKey          : public_key,
    Hash            : hash_func )
def=
    local
        SC,RC,SSP,RSP,SIDP,RIDP,SXDR,RXDR   : channel(dy)
    composition
        client(C,SP,IDP,XDR,SSLKey,SC,RC)
        /\ serviceProvider(C,SP,IDP,XDR,APIKey,APISecret,Hash,SSP,RSP) 
        /\ identityProvider(C,SP,IDP,XDR,APIKey,Uid,APISecret,SSLKey,XDRKey,Hash,SIDP,RIDP)
        /\ xdreceiver(C,SP,IDP,XDR,XDRKey,SXDR,RXDR)
end role

role enviroment()
def=
    local
        Sslkey                                                                                              : (symmetric_key) set
    const
        c,sp,idp,xdr                                                                                        : agent,
        apikey,uid                                                                                          : text,
        resourcereq,statusreq,notloggedin,sessionreq,credentials,resource,otherresourcereq,otherresource    : message,
        apisecret                                                                                           : symmetric_key,
        xdrkey                                                                                              : public_key,
        sp_idp_sig,otherresourceid                                                                          : protocol_id,
        h                                                                                                   : hash_func
    init
        Sslkey:={}
    intruder_knowledge = {otherresourcereq}
        composition
        session(c,sp,idp,xdr,apikey,uid,apisecret,Sslkey,xdrkey,h)
        /\ session(c,sp,idp,xdr,apikey,uid,apisecret,Sslkey,xdrkey,h)
end role

goal
    authentication_on sp_idp_sig
    secrecy_of otherresourceid
end goal

enviroment()
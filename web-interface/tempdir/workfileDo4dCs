role peer(P, A, S, D                      : agent,
          Kca, Kidp                       : public_key,
          H : hash_func,
          PRF : hash_func,
          CHAP_PRF : hash_func,
          Tranc : hash_func,
          KeyGen : hash_func,
          SND, RCV                        : channel (dy))
played_by P def=

  local
    UserId       : text,          
    Version      : text,          
    SeID         : text,          
    Np           : text,          
    Ns           : text,          
    CipherSuite  : text,          
    Cipher       : text,          

    Ks           : public_key,    

    Shd          : text,          
    Ccs          : text,          
 
    PMS          : text,          
    MS : hash(text.text.text),    

    Finished : hash(hash(text.text.text).agent.agent.text.text.text),
    ClientK : hash(agent.text.text.hash(text.text.text)),  
    ServerK : hash(agent.text.text.hash(text.text.text)),  

    Txt          : text,          

    UName        : text,          

    ChapRs       : text,          

    
    Edutoken     : text,    
    Msk          : hash(hash(text.text.text)),                      
    Emsk         : hash(hash(hash(text.text.text))),                
    Emskname     : hash(hash(hash(hash(text.text.text)))),          
    Dsrk         : hash(hash(hash(hash(text.text.text))).agent),    
    
    State        : nat

  const
    request_id   : text,
    respond_id   : text,
    start_ttls   : text,
    success      : text,
    sec_clientK,
    sec_serverK,
    sec_uname,
    np, ns       : protocol_id

  init State := 0

  transition

  0. State   = 0
       /\ RCV(request_id)
     =|>
     State' := 1
       /\ UserId':= new()
       /\ SND(respond_id.UserId')
        
  1. State   = 1
       /\ RCV(start_ttls)
     =|>
     State' := 2
       /\ Np' := new()
       /\ CipherSuite' := new()
       /\ SeID' := new()
       /\ Version' := new()
       /\ SND(Version'.SeID'.Np'.CipherSuite') 
       /\ witness(P,S,np,Np')


  2. State   = 2
       /\ RCV(Version.SeID'.Ns'.Cipher'.       
              {S.Ks'}_inv(Kca).                
              Shd')                            
     =|>
     State' := 3
       /\ PMS' := new() 
       /\ Ccs' := new()
       /\ MS'  := PRF(PMS'.Np.Ns')             
       /\ Finished' := H(MS'.P.S.Np.Cipher'.SeID)
       /\ ClientK'  := KeyGen(P.Np.Ns'.MS')
       /\ ServerK'  := KeyGen(S.Np.Ns'.MS')
       /\ SND({PMS'}_Ks'.                  
                 Ccs'.                     
                 {Finished'}_ClientK')     
       /\ secret(ClientK',sec_clientK,{P,S})
       /\ secret(ServerK',sec_serverK,{P,S})

  3. State   = 3
       /\ RCV(Ccs.{Finished}_ServerK)
     =|>
     State' := 4
       /\ Txt' := new()
       /\ ChapRs' := new()
       /\ UName' := new()
       /\ SND({UName'.
               Tranc(CHAP_PRF(MS.Txt'.Np.Ns).1.16).
               Tranc(CHAP_PRF(MS.Txt'.Np.Ns).17.17).
               ChapRs'
              }_ClientK)
       /\ secret(UName',sec_uname,{P,S})
       /\ request(P,S,ns,Ns)

  4. State   = 4
       /\ RCV(success)
     =|>
     State' := 5
       /\ Msk'      := KeyGen(MS)           
       /\ Emsk'     := KeyGen(Msk')
       /\ Emskname' := KeyGen(Emsk')
       /\ Dsrk'     := KeyGen(Emsk'.A)

  5. State   = 5
       /\ RCV({{Edutoken'}_inv(Kidp)}_ServerK)
     =|>
     State' := 6

end role

role auth (P, A, S                          : agent,
           Kas                              : symmetric_key,               
           SND, RCV                         : channel(dy))
played_by A def=

  local
    Emskname     : hash(hash(hash(hash(text.text.text)))),          
    Dsrk         : hash(hash(hash(hash(text.text.text))).agent),    
    UserId       : text,
    State           : nat
            
  const
    respond_id   : text,
    dsrk_req     : text,
    success      : text
    
    init State := 1
    
  transition
    
  1. State  = 1
       /\ RCV(respond_id.UserId')
     =|>
     State' := 2
       /\ SND(respond_id.dsrk_req.UserId')                

  2. State  = 2
       /\ RCV(Emskname'.success.{Dsrk'}_Kas)      
     =|>
     State':= 3
     /\ SND(success)     


end role




role server (P, A, S                         : agent,
             Ks, Kca, Kidp                   : public_key,
             Kas                             : symmetric_key,
             H : hash_func,
             PRF : hash_func,
             CHAP_PRF : hash_func,
             Tranc : hash_func,
             KeyGen : hash_func,
             SND, RCV                        : channel (dy)) 
played_by S def=

  local
    UserId       : text,          
    Version      : text,          
    SeID         : text,          
    Np           : text,          
    Ns           : text,          
    CipherSuite  : text,          
    Cipher       : text,          

    Shd          : text,          
    Ccs          : text,          
 
    PMS          : text,          
    MS : hash(text.text.text),    

    Finished : hash(hash(text.text.text).agent.agent.text.text.text),
    ClientK : hash(agent.text.text.hash(text.text.text)),  
    ServerK : hash(agent.text.text.hash(text.text.text)),  

    Txt          : text,          

    UName        : text,          

    ChapRs       : text,          

    Edutoken     : text,                                            
    Msk          : hash(hash(text.text.text)),                      
    Emsk         : hash(hash(hash(text.text.text))),                
    Emskname     : hash(hash(hash(hash(text.text.text)))),          
    Dsrk         : hash(hash(hash(hash(text.text.text))).agent),    

    State        : nat

  const
    request_id   : text,
    respond_id   : text,
    dsrk_req     : text,
    start_ttls   : text,
    success      : text,
    np, ns              : protocol_id,
    sec_emsk, sec_dsrk  : protocol_id

  init State := 0

  transition

  0. State   = 0
       /\ RCV(start)
     =|>
     State' := 1
       /\ SND(request_id)

  1. State   = 1
       /\ RCV(respond_id.dsrk_req.UserId')
     =|>
     State' := 2
       /\ SND(start_ttls)

  2. State   = 2
       /\ RCV(Version'.SeID'.Np'.CipherSuite')  
     =|>
     State' := 3
       /\ Ns' := new()
       /\ Shd' := new()
       /\ Cipher' := new()
       /\ SND(Version'.SeID'.Ns'.Cipher'.       
              {S.Ks}_inv(Kca).                  
              Shd')                             
       /\ witness(S,P,ns,Ns')
        
  3. State    = 3
       /\ RCV({PMS'}_Ks.                        
              Ccs'.                             
              {Finished'}_ClientK')             
       /\ MS' = PRF(PMS'.Np.Ns)                 
       /\ Finished' = H(MS'.P.S.Np.Cipher'.SeID)
       /\ ClientK'  = KeyGen(P.Np.Ns.MS')
     =|>
     State' := 4
       /\ ServerK'  := KeyGen(S.Np.Ns.MS')
       /\ SND(Ccs'.                             
              {Finished'}_ServerK')             

  4. State  = 4
       /\ RCV({UName'.
               Tranc(CHAP_PRF(MS.Txt'.Np.Ns).1.16).
               Tranc(CHAP_PRF(MS.Txt'.Np.Ns).17.17).
               ChapRs'
              }_ClientK)
     =|>
     State':= 5
       /\ SND({{authn_req.UName'}_inv(Ks)}_Kidp)
       /\ request(S,P,np,Np)

  5. State  = 5
       /\ RCV({{Edutoken'}_inv(Kidp)}_Ks)
     =|>
     State':= 6
       /\ Msk'      := KeyGen(MS)  
       /\ Emsk'      := KeyGen(Msk')  
       /\ Dsrk'      := KeyGen(Emsk'.A)  
       /\ Emskname'  := H(Emsk')
       /\ SND({{Edutoken'}_inv(Kidp)}_ServerK)                  
       /\ SND(Emskname'.success.{Dsrk'}_Kas)      
       /\ secret(Emsk',sec_emsk,{P,S})
       /\ secret(Dsrk',sec_dsrk,{P,S,A})

end role

role idp (P, A, S, D           : agent,
             Ks, Kidp          : public_key,
             SND, RCV          : channel (dy)) 
played_by D def=

  local
    Edutoken        : text,          
    UName           : text,          
    State           : nat

  const
    authn_req       : text,
    sec_edutoken    : protocol_id    

  init State := 1

  transition

  1. State   = 1
       /\ RCV({{authn_req.UName'}_inv(Ks)}_Kidp)    
     =|>
     State' := 2
       /\ Edutoken' := new()
       /\ SND({{Edutoken'}_inv(Kidp)}_Ks)           
       /\ secret(Edutoken',sec_edutoken,{D,P})       

end role


role session(P, A, S, D                      : agent,
             Ks, Kca, Kidp                   : public_key,
             Kas                             : symmetric_key,
             H : hash_func,
             PRF : hash_func,
             CHAP_PRF : hash_func,
             Tranc : hash_func,
             KeyGen : hash_func)
def=

  local
    SNDP, RCVP, SNDA, RCVA, SNDS, RCVS, SNDI, RCVI  : channel (dy)

  composition
           peer(P,A,S,D,Kca,Kidp,H,PRF,CHAP_PRF,Tranc,KeyGen,SNDP,RCVP)
        /\ auth(P,A,S,Kas,SNDA,RCVA)
        /\ server(P,A,S,Ks,Kca,Kidp,Kas,H,PRF,CHAP_PRF,Tranc,KeyGen,SNDS,RCVS)
        /\ idp(P,A,S,D,Ks,Kidp,SNDI,RCVI)
end role



role environment() def=

   const p, a, s, idp           : agent,
         ks, kca, kidp          : public_key,
         kas, kis               : symmetric_key,               
         h, prf, chapprf        : hash_func,
         tranc, keygen          : hash_func

   intruder_knowledge = {p, a, s, idp, ks, kca, kidp,
                         h, prf, chapprf, tranc, keygen,
                         kca, kis    
                        }

   composition
        session(p,a,s,idp,ks,kca,kidp,kas,h,prf,chapprf,tranc,keygen)
     /\ session(p,a,s,idp,ks,kca,kidp,kas,h,prf,chapprf,tranc,keygen)
%    /\ session(i,a,s,idp,ks,kca,kidp,kas,h,prf,chapprf,tranc,keygen)
%    /\ session(p,i,s,idp,ks,kca,kidp,kis,h,prf,chapprf,tranc,keygen)

end role



goal


        secrecy_of sec_clientK, sec_serverK, sec_uname, sec_dsrk, sec_emsk, sec_edutoken


        authentication_on ns

        authentication_on np

end goal



environment()
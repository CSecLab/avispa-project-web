role reader (
A, S, B				: agent,
SND_BA,SND_SA,RCV_BA,RCV_SA	: channel(dy)
)





played_by A

def=

	local State				: nat,
	R1					: text,
	A1,A2,A3,A4				: text

init State := 0

transition

	1. State = 0 /\ RCV_BA(start) =|>
		   State' := 1 /\ R1' := new() /\ SND_BA(R1')


	2. State = 1 /\ RCV_BA(A1'.A2'.A3') =|> 
		   State' := 2 /\ SND_SA(R1.A1'.A2'.A3') 	       
		       
	3. State = 2 /\ RCV_SA(A4') =|>
		   State' := 3 /\ SND_BA(A4')
		       

end role







role server (
S, A, B			: agent,
Ksb			: symmetric_Key,
Hash			: hash_func,
TID			: text,
SND_AS,RCV_AS		: channel(dy)
)





played_by S

def=

	local State				: nat,
	R1,R2					: text,
	A1,A2,A3,A4				: text

const sec_tid1, sec_ksb1			: protocol_id
init State := 0

transition


	1. State = 0 /\ RCV_AS(R1.A1'.A2'.A3') =|>
		   State' := 1 /\ R2' := xor(A1',Hash(xor(Ksb,R1)))
		       /\ TID' := xor(A2',xor(Ksb,R2'))
		       /\ A3' := Hash(TID'.R1.R2'.Ksb)
		       /\ request(S,B,r2,R2')  
		       /\ A4' := Hash(xor(TID,xor(R1,xor(R2,Ksb))))  
		       /\SND_AS(A4')
		        

	2. State = 1 /\ witness(S,B,r1,R1) =|>
		   State' := 2  
		      /\ secret(TID,sec_tid1,{S,B})
		      /\ secret(Ksb,sec_ksb1,{S,B})
end role






role tag(
	B, A, S				: agent,
	Ksb				: symmetric_Key,
	Hash				: hash_func,
	TID				: text,
	SND_AB,RCV_AB			: channel(dy)
	)
	


played_by B

def=

	local State						: nat,
	R1,R2			 	     			: text,
	A1,A2,A3,A4						: text			      

const sec_tid2, sec_ksb2					: protocol_id
	      
init State := 0
	
transition
	 
	1. State = 0 /\ RCV_AB(R1') =|>  
	   	State' := 1 /\ R2' := new()
		     /\ A1' := xor(Hash(xor(Ksb,R1')),R2')
		     /\ A2' := xor(Ksb,xor(R2',TID))
		     /\ A3' := Hash(TID.R1.R2'.Ksb)	  
		     /\ SND_AB(A1'.A2'.A3')
		     /\ witness(B,S,r2,R2')
		       
	
	2. State = 1 /\ RCV_AB(A4') =|>
		State' := 2 /\ A4' := Hash(xor(TID,xor(R1,xor(R2,Ksb))))  
			 /\ request(B,S,r1,R1)
		         /\ secret(TID,sec_tid2,{S,B})
		         /\ secret(Ksb,sec_ksb2,{S,B})

end role



 

role session(

	A, S, B		: agent,
	Ksb		: symmetric_Key,
	Hash		: hash_func,
	TID		: text
	)
	
def=

	local SSA,SBA,SAS,SAB,RAS,RSA,RBA,RAB : channel(dy)

	
composition
		reader(A,S,B,SBA,SSA,RBA,RSA)
		/\ server(S,A,B,Ksb,Hash,TID,SAS,RAS)
		/\ tag(B,A,S,Ksb,Hash,TID,SAB,RAB)


end role






role environment()


def=

	const	a,s,b						: agent,
		ksb,ksi						: symmetric_Key,
		h						: hash_func,
		tid,tidi					: text,
		r1,r2						: protocol_id
		
	intruder_Knowledge = {a,s,b,h,ksi,tidi}
	
composition

		session(a,s,b,ksb,h,tid)
		/\ session(a,s,b,ksb,h,tid)
		/\ session(a,s,i,ksi,h,tidi)
		/\ session(i,s,b,ksi,h,tidi)
		
end role





goal
	secrecy_of sec_tid1, sec_ksb1, sec_tid2, sec_ksb2
	authentication_on r1
	authentication_on r2

end goal



environment()
  
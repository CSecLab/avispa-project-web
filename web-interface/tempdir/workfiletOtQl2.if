%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfiletOtQl2

section signature:

state_serviceprovider: agent * agent * hash_func * nat * symmetric_key * text * nat * nat * text * text * text * set(agent) * nat -> fact
state_sensor: agent * agent * hash_func * nat * symmetric_key * text * text * nat * nat * text * text * set(agent) * set(agent) * nat -> fact


section types:

s_sp_nonce, sk, pw: protocol_id
set_80, set_68, set_67: set
Passwd, Msg, Username, Hello, dummy_nonce: text
Sk, Dummy_Sk, dummy_sk: symmetric_key
Set_46, Dummy_Set_46, Set_29, Dummy_Set_29, Dummy_Set_26, Set_26, ASGoal: set(agent)
6, 4, Rp, Rs, State, SID, 3, Dummy_Rs, Dummy_Rp, Dummy_State, 2, 1, dummy_nat, 0, SID2, SID1: nat
start, MGoal: message
H, h: hash_func
SP, S, A2Goal, A1Goal, s, sp, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(s).
 iknows(sp).
 iknows(i).
 state_sensor(s,sp,h,0,dummy_sk,dummy_nonce,dummy_nonce,dummy_nat,dummy_nat,dummy_nonce,dummy_nonce,set_67,set_68,3).
 state_serviceprovider(sp,s,h,0,dummy_sk,dummy_nonce,dummy_nat,dummy_nat,dummy_nonce,dummy_nonce,dummy_nonce,set_80,4)


section rules:

step step_0 (S,SP,H,Sk,Username,Hello,Rp,Rs,Msg,Passwd,Set_26,Set_29,SID) :=
 state_sensor(S,SP,H,0,Sk,Username,Hello,Rp,Rs,Msg,Passwd,Set_26,Set_29,SID).
 iknows(start)
 =>
 state_sensor(S,SP,H,1,Sk,Username,Hello,Rp,Rs,Msg,Passwd,Set_26,Set_29,SID).
 iknows(Hello)

step step_1 (S,SP,H,Sk,Username,Hello,Dummy_Rp,Dummy_Rs,Msg,Passwd,Dummy_Set_26,Set_29,SID,Rp,Rs) :=
 state_sensor(S,SP,H,1,Sk,Username,Hello,Dummy_Rp,Dummy_Rs,Msg,Passwd,Dummy_Set_26,Set_29,SID).
 iknows(Rp)
=[exists Rs]=>
 state_sensor(S,SP,H,2,Sk,Username,Hello,Rp,Rs,Msg,Passwd,Dummy_Set_26,Set_29,SID).
 iknows(pair(Username,pair(Rs,scrypt(Passwd,apply(H,pair(Rs,Rp)))))).
 witness(S,SP,s_sp_nonce,apply(H,pair(Rs,Rp))).
 secret(Passwd,pw,Dummy_Set_26).
 contains(S,Dummy_Set_26).
 contains(SP,Dummy_Set_26)

step step_2 (S,SP,H,Dummy_Sk,Username,Hello,Rp,Rs,Msg,Passwd,Set_26,Dummy_Set_29,SID,Sk) :=
 state_sensor(S,SP,H,2,Dummy_Sk,Username,Hello,Rp,Rs,Msg,Passwd,Set_26,Dummy_Set_29,SID).
 iknows(scrypt(Passwd,Sk))
 =>
 state_sensor(S,SP,H,3,Sk,Username,Hello,Rp,Rs,Msg,Passwd,Set_26,Dummy_Set_29,SID).
 iknows(scrypt(Sk,pair(Msg,apply(H,Msg)))).
 secret(Sk,sk,Dummy_Set_29).
 contains(S,Dummy_Set_29).
 contains(SP,Dummy_Set_29)

step step_3 (SP,S,H,Sk,Hello,Dummy_Rp,Rs,Username,Msg,Passwd,Set_46,SID,Rp) :=
 state_serviceprovider(SP,S,H,0,Sk,Hello,Dummy_Rp,Rs,Username,Msg,Passwd,Set_46,SID).
 iknows(Hello)
=[exists Rp]=>
 state_serviceprovider(SP,S,H,2,Sk,Hello,Rp,Rs,Username,Msg,Passwd,Set_46,SID).
 iknows(Rp)

step step_4 (SP,S,H,Dummy_Sk,Hello,Dummy_Rp,Dummy_Rs,Username,Msg,Passwd,Dummy_Set_46,SID,Sk,Rp,Rs) :=
 state_serviceprovider(SP,S,H,2,Dummy_Sk,Hello,Dummy_Rp,Dummy_Rs,Username,Msg,Passwd,Dummy_Set_46,SID).
 iknows(pair(Username,pair(Rs,scrypt(Passwd,apply(H,pair(Rs,Rp))))))
=[exists Sk]=>
 state_serviceprovider(SP,S,H,4,Sk,Hello,Rp,Rs,Username,Msg,Passwd,Dummy_Set_46,SID).
 iknows(scrypt(Passwd,Sk)).
 request(S,SP,s_sp_nonce,apply(H,pair(Rs,Rp)),SID).
 secret(Sk,pw,Dummy_Set_46).
 contains(SP,Dummy_Set_46).
 contains(S,Dummy_Set_46)

step step_5 (SP,S,H,Dummy_Sk,Hello,Rp,Rs,Username,Msg,Passwd,Set_46,SID,Sk) :=
 state_serviceprovider(SP,S,H,4,Dummy_Sk,Hello,Rp,Rs,Username,Msg,Passwd,Set_46,SID).
 iknows(scrypt(Sk,pair(Msg,apply(H,Msg))))
 =>
 state_serviceprovider(SP,S,H,6,Sk,Hello,Rp,Rs,Username,Msg,Passwd,Set_46,SID)


section properties:

property secrecy_of_sk (MGoal,ASGoal) :=
 [] ((secret(MGoal,sk,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_pw (MGoal,ASGoal) :=
 [] ((secret(MGoal,pw,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_s_sp_nonce (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,s_sp_nonce,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,s_sp_nonce,MGoal))
     /\ ((request(A1Goal,A2Goal,s_sp_nonce,MGoal,SID1)
           /\ request(A1Goal,A2Goal,s_sp_nonce,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sk (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sk,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_pw (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,pw,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_s_sp_nonce (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,s_sp_nonce,MGoal,SID) &
 not(witness(A2Goal,A1Goal,s_sp_nonce,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_s_sp_nonce (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,s_sp_nonce,MGoal,SID1).
 request(A1Goal,A2Goal,s_sp_nonce,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


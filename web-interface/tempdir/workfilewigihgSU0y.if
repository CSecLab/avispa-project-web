%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilewigihgSU0y

section signature:

state_sensor: agent * agent * symmetric_key * text * text * hash_func * hash_func * hash_func * nat * text * symmetric_key * set(agent) * nat -> fact
state_gateway: agent * agent * agent * symmetric_key * symmetric_key * text * text * text * text * hash_func * hash_func * hash_func * nat * text * text * text * set(agent) * nat -> fact
state_user: agent * agent * symmetric_key * text * text * text * hash_func * hash_func * hash_func * nat * text * text * text * set(agent) * nat -> fact


section types:

set_136, set_131, set_123: set
sseq1, nu, r1, r2, tsug_id, sseq2: protocol_id
State, 5, SID, 4, 3, 2, Dummy_State, 1, SID2, SID1: nat
Set_71, Set_55, Dummy_Set_71, Dummy_Set_55, Dummy_Set_28, Set_28, ASGoal: set(agent)
start, MGoal: message
R2, Seq, IDsn, R, Nu, IDu, TSug, Dummy_R2, Dummy_R, Dummy_Nu, dummy_nonce, seq, idu, idsn, tsug: text
Hash, F2, F5, add, f1, f2, f5: hash_func
SK, Kgs, Kug, dummy_sk, kug, kgs, k_is, kai: symmetric_key
SENSOR, GATEWAY, USER, A2Goal, A1Goal, u, g, i, s: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(u).
 iknows(f1).
 iknows(f2).
 iknows(f5).
 iknows(i).
 state_user(u,g,kug,seq,idu,tsug,f1,f2,f5,1,dummy_nonce,dummy_nonce,dummy_nonce,set_123,3).
 state_gateway(g,u,s,kug,kgs,seq,idu,idsn,tsug,f1,f2,f5,1,dummy_nonce,dummy_nonce,dummy_nonce,set_131,4).
 state_sensor(s,g,kgs,seq,idsn,f1,f2,f5,1,dummy_nonce,dummy_sk,set_136,5)


section rules:

step step_0 (USER,GATEWAY,Kug,Seq,IDu,TSug,Hash,F2,F5,R,R2,Dummy_Nu,Set_28,SID,Nu) :=
 state_user(USER,GATEWAY,Kug,Seq,IDu,TSug,Hash,F2,F5,1,R,R2,Dummy_Nu,Set_28,SID).
 iknows(start)
=[exists Nu]=>
 state_user(USER,GATEWAY,Kug,Seq,IDu,TSug,Hash,F2,F5,2,R,R2,Nu,Set_28,SID).
 iknows(xor(Kug,Nu))

step step_1 (USER,GATEWAY,Kug,Seq,IDu,TSug,Hash,F2,F5,Dummy_R,R2,Nu,Dummy_Set_28,SID,R) :=
 state_user(USER,GATEWAY,Kug,Seq,IDu,TSug,Hash,F2,F5,2,Dummy_R,R2,Nu,Dummy_Set_28,SID).
 iknows(pair(apply(Hash,Nu),xor(R,Kug)))
 =>
 state_user(USER,GATEWAY,Kug,Seq,IDu,TSug,Hash,F2,F5,3,R,R2,Nu,Dummy_Set_28,SID).
 secret(R,r1,Dummy_Set_28).
 request(USER,GATEWAY,r1,R,SID).
 contains(GATEWAY,Dummy_Set_28).
 contains(USER,Dummy_Set_28)

step step_2 (GATEWAY,USER,SENSOR,Kug,Kgs,Seq,IDu,IDsn,TSug,Hash,F2,F5,R,Dummy_R2,Dummy_Nu,Dummy_Set_55,SID,R2,Nu) :=
 state_gateway(GATEWAY,USER,SENSOR,Kug,Kgs,Seq,IDu,IDsn,TSug,Hash,F2,F5,1,R,Dummy_R2,Dummy_Nu,Dummy_Set_55,SID).
 iknows(xor(Kug,Nu))
=[exists R2]=>
 state_gateway(GATEWAY,USER,SENSOR,Kug,Kgs,Seq,IDu,IDsn,TSug,Hash,F2,F5,2,R,R2,Nu,Dummy_Set_55,SID).
 iknows(xor(R2,Kgs)).
 secret(Nu,nu,Dummy_Set_55).
 contains(GATEWAY,Dummy_Set_55).
 contains(USER,Dummy_Set_55)

step step_3 (GATEWAY,USER,SENSOR,Kug,Kgs,Seq,IDu,IDsn,TSug,Hash,F2,F5,Dummy_R,R2,Nu,Set_55,SID,R) :=
 state_gateway(GATEWAY,USER,SENSOR,Kug,Kgs,Seq,IDu,IDsn,TSug,Hash,F2,F5,2,Dummy_R,R2,Nu,Set_55,SID).
 iknows(apply(Hash,R2))
=[exists R]=>
 state_gateway(GATEWAY,USER,SENSOR,Kug,Kgs,Seq,IDu,IDsn,TSug,Hash,F2,F5,3,R,R2,Nu,Set_55,SID).
 iknows(pair(apply(Hash,Nu),xor(R,Kug))).
 witness(GATEWAY,USER,r1,R)

step step_4 (SENSOR,GATEWAY,Kgs,Seq,IDsn,Hash,F2,F5,Dummy_R2,SK,Dummy_Set_71,SID,R2) :=
 state_sensor(SENSOR,GATEWAY,Kgs,Seq,IDsn,Hash,F2,F5,1,Dummy_R2,SK,Dummy_Set_71,SID).
 iknows(xor(R2,Kgs))
 =>
 state_sensor(SENSOR,GATEWAY,Kgs,Seq,IDsn,Hash,F2,F5,2,R2,SK,Dummy_Set_71,SID).
 iknows(apply(Hash,R2)).
 secret(R2,r2,Dummy_Set_71).
 contains(GATEWAY,Dummy_Set_71).
 contains(SENSOR,Dummy_Set_71)


section properties:

property secrecy_of_nu (MGoal,ASGoal) :=
 [] ((secret(MGoal,nu,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_r1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,r1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_r2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,r2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_r1 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,r1,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,r1,MGoal))
     /\ ((request(A1Goal,A2Goal,r1,MGoal,SID1)
           /\ request(A1Goal,A2Goal,r1,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_nu (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,nu,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_r1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,r1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_r2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,r2,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_r1 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,r1,MGoal,SID) &
 not(witness(A2Goal,A1Goal,r1,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_r1 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,r1,MGoal,SID1).
 request(A1Goal,A2Goal,r1,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))



role creator(

	Cr,Tr,Kdc,Clod,Rdr : agent,
	K : symmetric_key,
	Hash : hash_func,
	Kcrcc,Kcrtr,Kcrkdc,Krdrcc,Krdrtr,Krdrkdc,Ktrcr,Ktrrdr,Kkdccr,Kkdcrdr,TPK: public_key,
	SND,RCV : channel(dy)

)
played_by Cr def=
	local
		State,Id,A : nat,
		Nb,Kbase,Si : text,
		K1, T, Y : message
	init
		State := 0
	transition
		1. State = 0 /\ RCV(start) =|> 
			State':= 1 /\ SND({Id}_Kcrtr)
			
		2. State = 1 /\ RCV({H(Id.Kbase.Hash(Kbase.inv(A)).H(Id.Kbase))}_INV(Ktrcr)) =|>
			State':= 2 /\ SND({Id.Kbase.Hash(Kbase.inv(A)).H(Id.Kbase)}_Kcrkdc)
					   
		3. State = 2  /\ RCV({H(Ai.Yi).H(H(H(G.G).Ai).Yi).H(Aa.Bb).H(H(Hj.Aa).H(Hj.Bb))}_INV(Kkdccr)) =|>
			State':=3 /\ T' := new()
					  /\ Y' := new()
					  /\SND({{K1.K}_(H(H(H(G.G).Ai).Yi)).T'.H(TPK.H(Aa.Bb).H(Id.Kbase.Hash(Kbase.inv(A)).H(Id.Kbase)).K1.Y').Y'}_Kcrcc)
end role



role reader(

	Cr,Tr,Kdc,Clod,Rdr : agent,
	K : symmetric_key,
	Hash : hash_func,
	Kcrcc,Kcrtr,Kcrkdc,Krdrcc,Krdrtr,Krdrkdc,Ktrcr,Ktrrdr,Kkdccr,Kkdcrdr,TPK: public_key,
	SND,RCV : channel(dy)

)
played_by Rdr def=
	local
		State,Id,A : nat,
		Nb,Kbase,T,Si,Y : text,
		K1 : message
	init
		State := 0
	transition
		1. State = 0 /\ SND(start) =|> 
			State':= 1 /\ SND(Id)
			
		2. State = 1 /\ RCV({H(Id.Kbase.Hash(Kbase.inv(A)).H(Id.Kbase))}_INV(Ktrcr)) =|>
			State':= 2 /\ SND(H(Id.Kbase.Hash(Kbase.inv(A)).H(Id.Kbase)))
			
		3. State = 2 /\ RCV(H(Ai.Yi).H(H(H(G.G).Ai).Yi).H(Aa.Bb).H(H(Hj.Aa).H(Hj.Bb))) =|>
			State':=3 /\SND({H(Id.Kbase.Hash(Kbase.inv(A)).H(Id.Kbase)).H(Ai.Yi).H(Aa.Bb)}_Krdrcc) 
					  /\RCV({K1}_H(H(H(G.G).Ai).Yi))
end role

role trustee(

	Cr,Tr,Kdc,Clod,Rdr : agent,
	K : symmetric_key,
	Hash : hash_func,
	Kcrcc,Kcrtr,Kcrkdc,Krdrcc,Krdrtr,Krdrkdc,Ktrcr,Ktrrdr,Kkdccr,Kkdcrdr,TPK: public_key,
	SND,RCV : channel(dy)

)
played_by Tr def= 

	local
		State: nat,
		Nb,Kbase,T,Si,Y : text
	init
		State :=1
	transition
		1. State = 1 /\ RCV({Id}_INV(Kcrtr)) =|>
			State' := 2 /\ SND({H(Id.Kbase.Hash(Kbase.inv(A)).H(Id.Kbase))}_Ktrcr) %%%send from trustee to creator
			
		2. State =2 /\ RCV({Id}_INV(Krdrtr)) =|>
			State' := 3 /\ SND({H(Id.Kbase.Hash(Kbase.inv(A)).H(Id.Kbase))}_Ktrrdr) %%%send from trustee to reader


end role

role kdc(

	Cr,Tr,Kdc,Clod,Rdr : agent,
	K : symmetric_key,
	Hash : hash_func,
	Kcrcc,Kcrtr,Kcrkdc,Krdrcc,Krdrtr,Krdrkdc,Ktrcr,Ktrrdr,Kkdccr,Kkdcrdr,TPK: public_key,
	SND,RCV : channel(dy)

)
played_by Kdc def=

	local
		State, Aa, Bb, G, Hj : nat
	init
		State := 1
	transition
		1. State = 1 /\ RCV({Id.Kbase.Hash(Kbase.inv(A)).H(Id.Kbase)}_INV(Kcrkdc)) =|>  
			State' := 2 /\ SND({H(Ai.Yi).H(H(H(G.G).Ai).Yi).H(Aa.Bb).H(H(Hj.Aa).H(Hj.Bb))}_Kkdccr)
			
		2. State = 2 /\ RCV({Id.Kbase.Hash(Kbase.inv(A)).H(Id.Kbase)}_INV(Krdrkdc)) =|>  
			State' := 3 /\ SND({H(Ai.Yi).H(H(H(G.G).Ai).Yi).H(Aa.Bb).H(H(Hj.Aa).H(Hj.Bb))}_Kkdcrdr)

end role

role cloud(

	Cr,Tr,Kdc,Clod,Rdr : agent,
	K : symmetric_key,
	Hash : hash_func,
	Kcrcc,Kcrtr,Kcrkdc,Krdrcc,Krdrtr,Krdrkdc,Ktrcr,Ktrrdr,Kkdccr,Kkdcrdr,TPK: public_key,
	SND,RCV : channel(dy)

)
played_by Clod def=
	
	local
		State : nat
	init 
		State := 1
	transition
		1. state = 1 /\ RCV({{K1}_(H(H(H(G.G).Ai).Yi)).T'.H(TPK.H(Aa.Bb).H(Id.Kbase.Hash(Kbase.inv(A)).H(Id.Kbase)).K1.Y').Y'}_INV(Kcrcc)) =|>
			state' := 2 /\witness(Cr, Clod, creator_cloud_pid, H(TPK.H(Aa.Bb).H(Id.Kbase.Hash(Kbase.inv(A)).H(Id.Kbase)).K1.Y') )
			
		2. state = 2 /\ RCV({H(Id.Kbase.Hash(Kbase.inv(A)).H(Id.Kbase)).H(Ai.Yi).H(Aa.Bb)}_INV(Krdrcc)) =|>
			State':= 3 /\ SND({K1}_(H(H(H(G.G).Ai).Yi))) /\ wirtness(Rdr, Clod, reader_cloud_pid, H(Id.Kbase.Hash(Kbase.inv(A)).H(Id.Kbase)).H(Ai.Yi).H(Aa.Bb))

end role

role session(

	Cr,Tr,Kdc,Clod,Rdr : agent,
	K : symmetric_key,
	Hash : hash_func,
	Kcrcc,Kcrtr,Kcrkdc,Krdrcc,Krdrtr,Krdrkdc,Ktrcr,Ktrrdr,Kkdccr,Kkdcrdr,TPK: public_key,
	SND,RCV : channel(dy)

)
def=
	local 
		SCr, SRdr, STr, SKdc, RCr, RRdr, RTr, RKdc, RClod : channel (dy)
	composition
		creator(Cr, Tr, Kdc, Clod, K, Hash, SCr, RCr,Kcrcc,Kcrtr,Kcrkdc,Ktrcr,Kkdccr,TPK) /\
		reader(Rdr, Tr, Kdc, Clod, K, Hash, SCr, RCr,Krdrcc,Krdrtr,Krdrkdc,Ktrrdr,Kkdcrdr,TPK) /\
		trustee(Tr, Cr, Rdr, K, Hash, STr, RTr,Kcrtr,Krdrtr,Ktrcr,Ktrrdr,TPK) /\
		kdc(Kdc, Cr, Rdr, Hash, SKdc, RKdc, RCr, RRdr,Kcrkdc,Krdrkdc,Kkdccr,Kkdcrdr,TPK)/\
		cloud(Clod, Cr, Rdr, K, Hash, RClod, SRdr, RCr, Kcrcc,Krdrcc,TPK)
		
end role


role environment()
	def=
		const
			creator_cloud_pid, reader_cloud_pid : protocol_id,
			cr,tr,kdc,clod,rdr : agent,
			k : symmetric_key,
			hash : hash_func,
			kcrcc,kcrtr,kcrkdc,krdrcc,krdrtr,krdrkdc,ktrcr,ktrrdr,kkdccr,kkdcrdr,tpk: public_key,
			intruder_knowledge = {cr,tr,kdc,clod,rdr,hash,pki,apki}
		composition
			session(cr,tr,kdc,clod,rdr,k, hash,kcrcc,kcrtr,kcrkdc,krdrcc,krdrtr,krdrkdc,ktrcr,ktrrdr,kkdccr,kkdcrdr,tpk ) /\ session(cr,tr,kdc,clod,rdr,k, hash,kcrcc,kcrtr,kcrkdc,krdrcc,krdrtr,krdrkdc,ktrcr,ktrrdr,kkdccr,kkdcrdr,tpk ) /\ session(cr,tr,kdc,clod,rdr,k, hash,kcrcc,kcrtr,kcrkdc,krdrcc,krdrtr,krdrkdc,ktrcr,ktrrdr,kkdccr,kkdcrdr,tpk )
end role

goal
	secrecy_of k1
	authentication_on creator_cloud_pid
	authentication_on  reader_cloud_pid

end goal

environment()
%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfile9edEm0

section signature:

state_cn: agent * agent * agent * public_key * public_key * public_key * hash_func * text * text * text * text * text * text * text * text * text * text * nat * set(agent) * set(agent) * nat -> fact
state_ha: agent * agent * agent * public_key * public_key * public_key * symmetric_key * hash_func * text * text * text * text * text * text * text * text * text * nat * set(agent) * nat -> fact
state_mn: agent * agent * agent * public_key * public_key * public_key * symmetric_key * hash_func * text * text * text * text * text * text * text * text * text * nat * set(agent) * set(agent) * nat -> fact


section types:

cnn, han, mnn, coa: protocol_id
5, 2, State, 4, 1, SID, 6, 3, 0, Dummy_State: nat
MNN, CNN, HAN, MNHOA, MNCOA, HAADDR, CNADDR, HATS, MOD, CNTS, TSMN, Dummy_CNTS, Dummy_HATS, Dummy_HAN, Dummy_CNN, Dummy_MOD, Dummy_TSMN, Dummy_HAADDR, Dummy_CNADDR, Dummy_MNCOA, Dummy_MNHOA, Dummy_MNN, dummy_nonce: text
set_134, set_133, set_127, set_112, set_111: set
Set_84, Set_83, Set_58, Dummy_Set_84, Dummy_Set_83, Set_32, Dummy_Set_58, Set_29, Dummy_Set_32, Dummy_Set_29, ASGoal: set(agent)
start, MGoal: message
HASH, has: hash_func
MNPK, mnpk: symmetric_key
MNPUK, HAPUK, CNPUK, mnpuk, cnpuk, hapuk: public_key
MN, HA, CN, mn1, i, ha1, cn1: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(i).
 state_mn(mn1,ha1,cn1,mnpuk,hapuk,cnpuk,mnpk,has,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,0,set_111,set_112,3).
 state_ha(ha1,mn1,cn1,mnpuk,hapuk,cnpuk,mnpk,has,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,1,set_127,4).
 state_cn(cn1,mn1,ha1,mnpuk,hapuk,cnpuk,has,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,2,set_133,set_134,5)


section rules:

step step_0 (MN,HA,CN,MNPUK,CNPUK,HAPUK,MNPK,HASH,Dummy_MNN,CNN,CNTS,Dummy_MNHOA,Dummy_MNCOA,Dummy_CNADDR,Dummy_HAADDR,Dummy_TSMN,Dummy_MOD,Dummy_Set_29,Dummy_Set_32,SID,MNN,MNHOA,MNCOA,CNADDR,HAADDR,TSMN,MOD) :=
 state_mn(MN,HA,CN,MNPUK,CNPUK,HAPUK,MNPK,HASH,Dummy_MNN,CNN,CNTS,Dummy_MNHOA,Dummy_MNCOA,Dummy_CNADDR,Dummy_HAADDR,Dummy_TSMN,Dummy_MOD,0,Dummy_Set_29,Dummy_Set_32,SID).
 iknows(start)
=[exists MOD,TSMN,HAADDR,CNADDR,MNCOA,MNHOA,MNN]=>
 state_mn(MN,HA,CN,MNPUK,CNPUK,HAPUK,MNPK,HASH,MNN,CNN,CNTS,MNHOA,MNCOA,CNADDR,HAADDR,TSMN,MOD,3,Dummy_Set_29,Dummy_Set_32,SID).
 iknows(crypt(HAPUK,scrypt(MNPK,pair(apply(HASH,pair(MNN,pair(MNHOA,pair(MNCOA,pair(HAADDR,CNADDR))))),pair(TSMN,MOD))))).
 secret(MNCOA,coa,Dummy_Set_29).
 secret(MNN,mnn,Dummy_Set_32).
 contains(MN,Dummy_Set_29).
 contains(HA,Dummy_Set_29).
 contains(CN,Dummy_Set_29).
 contains(MN,Dummy_Set_32).
 contains(HA,Dummy_Set_32)

step step_1 (MN,HA,CN,MNPUK,CNPUK,HAPUK,MNPK,HASH,Dummy_MNN,Dummy_CNN,CNTS,Dummy_MNHOA,Dummy_MNCOA,Dummy_CNADDR,HAADDR,TSMN,MOD,Set_29,Set_32,SID,MNN,CNN,MNHOA,MNCOA,CNADDR) :=
 state_mn(MN,HA,CN,MNPUK,CNPUK,HAPUK,MNPK,HASH,Dummy_MNN,Dummy_CNN,CNTS,Dummy_MNHOA,Dummy_MNCOA,Dummy_CNADDR,HAADDR,TSMN,MOD,3,Set_29,Set_32,SID).
 iknows(crypt(MNPUK,pair(MNN,pair(MNHOA,pair(MNCOA,pair(CNADDR,CNN))))))
 =>
 state_mn(MN,HA,CN,MNPUK,CNPUK,HAPUK,MNPK,HASH,MNN,CNN,CNTS,MNHOA,MNCOA,CNADDR,HAADDR,TSMN,MOD,6,Set_29,Set_32,SID)

step step_2 (HA,MN,CN,MNPUK,HAPUK,CNPUK,MNPK,HASH,Dummy_MNN,Dummy_HAN,Dummy_MNHOA,Dummy_MNCOA,Dummy_CNADDR,Dummy_HAADDR,Dummy_TSMN,Dummy_MOD,Dummy_HATS,Dummy_Set_58,SID,MNN,HAN,MNHOA,MNCOA,CNADDR,HAADDR,TSMN,MOD,HATS) :=
 state_ha(HA,MN,CN,MNPUK,HAPUK,CNPUK,MNPK,HASH,Dummy_MNN,Dummy_HAN,Dummy_MNHOA,Dummy_MNCOA,Dummy_CNADDR,Dummy_HAADDR,Dummy_TSMN,Dummy_MOD,Dummy_HATS,1,Dummy_Set_58,SID).
 iknows(crypt(HAPUK,scrypt(MNPK,pair(apply(HASH,pair(MNN,pair(MNHOA,pair(MNCOA,pair(HAADDR,CNADDR))))),pair(TSMN,MOD)))))
=[exists HAN,HATS]=>
 state_ha(HA,MN,CN,MNPUK,HAPUK,CNPUK,MNPK,HASH,MNN,HAN,MNHOA,MNCOA,CNADDR,HAADDR,TSMN,MOD,HATS,4,Dummy_Set_58,SID).
 iknows(crypt(HAPUK,pair(apply(HASH,pair(HAN,pair(MNHOA,pair(MNCOA,pair(HAADDR,CNADDR))))),pair(HATS,MOD)))).
 secret(HAN,han,Dummy_Set_58).
 contains(HA,Dummy_Set_58).
 contains(CN,Dummy_Set_58)

step step_3 (CN,MN,HA,MNPUK,HAPUK,CNPUK,HASH,Dummy_MNN,Dummy_CNN,Dummy_HAN,Dummy_MNHOA,Dummy_MNCOA,Dummy_HAADDR,Dummy_CNADDR,Dummy_HATS,Dummy_MOD,Dummy_CNTS,Dummy_Set_83,Dummy_Set_84,SID,MNN,CNN,HAN,MNHOA,MNCOA,HAADDR,CNADDR,HATS,MOD,CNTS) :=
 state_cn(CN,MN,HA,MNPUK,HAPUK,CNPUK,HASH,Dummy_MNN,Dummy_CNN,Dummy_HAN,Dummy_MNHOA,Dummy_MNCOA,Dummy_HAADDR,Dummy_CNADDR,Dummy_HATS,Dummy_MOD,Dummy_CNTS,2,Dummy_Set_83,Dummy_Set_84,SID).
 iknows(crypt(HAPUK,pair(apply(HASH,pair(HAN,pair(MNHOA,pair(MNCOA,pair(HAADDR,CNADDR))))),pair(HATS,MOD))))
=[exists MNN,CNN,CNTS]=>
 state_cn(CN,MN,HA,MNPUK,HAPUK,CNPUK,HASH,MNN,CNN,HAN,MNHOA,MNCOA,HAADDR,CNADDR,HATS,MOD,CNTS,5,Dummy_Set_83,Dummy_Set_84,SID).
 iknows(crypt(MNPUK,pair(MNN,pair(MNHOA,pair(MNCOA,pair(CNADDR,CNN)))))).
 secret(CNN,cnn,Dummy_Set_83).
 secret(MNCOA,coa,Dummy_Set_84).
 contains(CN,Dummy_Set_83).
 contains(MN,Dummy_Set_83).
 contains(CN,Dummy_Set_84).
 contains(MN,Dummy_Set_84)


section properties:

property secrecy_of_coa (MGoal,ASGoal) :=
 [] ((secret(MGoal,coa,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_mnn (MGoal,ASGoal) :=
 [] ((secret(MGoal,mnn,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_cnn (MGoal,ASGoal) :=
 [] ((secret(MGoal,cnn,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_han (MGoal,ASGoal) :=
 [] ((secret(MGoal,han,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state secrecy_of_coa (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,coa,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_mnn (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,mnn,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_cnn (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,cnn,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_han (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,han,ASGoal) &
 not(contains(i,ASGoal))


%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileppcOLw

section signature:

state_identityProvider: agent * agent * agent * text * text * symmetric_key * set(symmetric_key) * public_key * hash_func * nat * text * text * text * message * message * symmetric_key * symmetric_key * apply(hash_func,pair(text,pair(text,pair(symmetric_key,pair(text,symmetric_key))))) * pair(symmetric_key,pair(text,pair(text,pair(text,apply(hash_func,pair(text,pair(text,pair(symmetric_key,pair(text,symmetric_key))))))))) * nat -> fact
state_serviceProvider: agent * agent * agent * text * symmetric_key * public_key * hash_func * nat * text * text * text * text * message * message * message * message * symmetric_key * apply(hash_func,pair(text,pair(text,pair(symmetric_key,pair(text,symmetric_key))))) * set(agent) * nat -> fact
state_client: agent * agent * agent * set(symmetric_key) * hash_func * nat * text * text * text * message * message * message * message * crypt(public_key,pair(message,message)) * symmetric_key * pair(symmetric_key,pair(text,pair(text,pair(text,apply(hash_func,pair(text,pair(text,pair(symmetric_key,pair(text,symmetric_key))))))))) * nat -> fact


section types:

otherresourceid, sp_idp_sig: protocol_id
Sig, Dummy_Sig: apply(hash_func,pair(text,pair(text,pair(symmetric_key,pair(text,symmetric_key)))))
Session, Dummy_Session: pair(symmetric_key,pair(text,pair(text,pair(text,apply(hash_func,pair(text,pair(text,pair(symmetric_key,pair(text,symmetric_key)))))))))
Dummy_DiffieHellman, DiffieHellman: crypt(public_key,pair(message,message))
set_151, set_138, set_119: set
Set_60, Dummy_Set_60, ASGoal: set(agent)
A, Ysp, otherresource, otherresourcereq, Yc, CSPKey, Dummy_CSPKey, Dummy_Yc, resource, Dummy_Ysp, Dummy_A, credentials, sessionreq, resourcereq, start, dummy_msg, MGoal: message
State, 9, 8, 7, 5, SID, 4, 3, 2, Dummy_State, 1, 0, SID2, SID1: nat
Hash, h: hash_func
SSLKey, Dummy_SSLKey: set(symmetric_key)
IDPKey, dummy_pk, idpkey: public_key
CIDPKey, Key, APISecret, Dummy_Key, Dummy_CIDPKey, dummy_sk, apisecret: symmetric_key
Lsd, Expires, Ss, APIKey, Uid, Xsp, Dummy_Ss, Dummy_Expires, Dummy_Uid, Dummy_Xsp, Dummy_Xc, Dummy_Lsd, Dummy_APIKey, dummy_nonce, Xc, apikey, uid: text
C, SP, IDP, A2Goal, A1Goal, c, sp, idp, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(otherresourcereq).
 iknows(i).
 state_client(c,sp,idp,set_119,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,crypt(dummy_pk,pair(dummy_msg,dummy_msg)),dummy_sk,pair(dummy_sk,pair(dummy_nonce,pair(dummy_nonce,pair(dummy_nonce,dummy_msg)))),3).
 state_serviceProvider(sp,c,idp,apikey,apisecret,idpkey,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_sk,dummy_msg,set_138,4).
 state_identityProvider(idp,c,sp,apikey,uid,apisecret,set_119,idpkey,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_sk,dummy_sk,dummy_msg,pair(dummy_sk,pair(dummy_nonce,pair(dummy_nonce,pair(dummy_nonce,dummy_msg)))),5).
 state_client(c,sp,idp,set_119,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,crypt(dummy_pk,pair(dummy_msg,dummy_msg)),dummy_sk,pair(dummy_sk,pair(dummy_nonce,pair(dummy_nonce,pair(dummy_nonce,dummy_msg)))),7).
 state_serviceProvider(sp,c,idp,apikey,apisecret,idpkey,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_sk,dummy_msg,set_151,8).
 state_identityProvider(idp,c,sp,apikey,uid,apisecret,set_119,idpkey,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_sk,dummy_sk,dummy_msg,pair(dummy_sk,pair(dummy_nonce,pair(dummy_nonce,pair(dummy_nonce,dummy_msg)))),9)


section rules:

step step_0 (C,SP,IDP,SSLKey,Hash,APIKey,Lsd,Xc,A,Ysp,Yc,CSPKey,DiffieHellman,CIDPKey,Session,SID) :=
 state_client(C,SP,IDP,SSLKey,Hash,0,APIKey,Lsd,Xc,A,Ysp,Yc,CSPKey,DiffieHellman,CIDPKey,Session,SID).
 iknows(start)
 =>
 state_client(C,SP,IDP,SSLKey,Hash,1,APIKey,Lsd,Xc,A,Ysp,Yc,CSPKey,DiffieHellman,CIDPKey,Session,SID).
 iknows(resourcereq)

step step_1 (C,SP,IDP,SSLKey,Hash,Dummy_APIKey,Lsd,Xc,A,Ysp,Yc,CSPKey,Dummy_DiffieHellman,CIDPKey,Session,SID,APIKey,DiffieHellman) :=
 state_client(C,SP,IDP,SSLKey,Hash,1,Dummy_APIKey,Lsd,Xc,A,Ysp,Yc,CSPKey,Dummy_DiffieHellman,CIDPKey,Session,SID).
 iknows(pair(IDP,pair(APIKey,DiffieHellman)))
 =>
 state_client(C,SP,IDP,SSLKey,Hash,2,APIKey,Lsd,Xc,A,Ysp,Yc,CSPKey,DiffieHellman,CIDPKey,Session,SID).
 iknows(pair(sessionreq,APIKey))

step step_2 (C,SP,IDP,Dummy_SSLKey,Hash,APIKey,Dummy_Lsd,Xc,A,Ysp,Yc,CSPKey,DiffieHellman,Dummy_CIDPKey,Session,SID,Lsd,CIDPKey) :=
 state_client(C,SP,IDP,Dummy_SSLKey,Hash,2,APIKey,Dummy_Lsd,Xc,A,Ysp,Yc,CSPKey,DiffieHellman,Dummy_CIDPKey,Session,SID).
 iknows(Lsd)
=[exists CIDPKey]=>
 state_client(C,SP,IDP,Dummy_SSLKey,Hash,3,APIKey,Lsd,Xc,A,Ysp,Yc,CSPKey,DiffieHellman,CIDPKey,Session,SID).
 iknows(scrypt(CIDPKey,pair(APIKey,pair(credentials,pair(Lsd,DiffieHellman))))).
 contains(CIDPKey,Dummy_SSLKey)

step step_3 (C,SP,IDP,SSLKey,Hash,APIKey,Lsd,Dummy_Xc,Dummy_A,Dummy_Ysp,Dummy_Yc,Dummy_CSPKey,DiffieHellman,CIDPKey,Dummy_Session,SID,Xc,A,Ysp,Session) :=
 state_client(C,SP,IDP,SSLKey,Hash,3,APIKey,Lsd,Dummy_Xc,Dummy_A,Dummy_Ysp,Dummy_Yc,Dummy_CSPKey,DiffieHellman,CIDPKey,Dummy_Session,SID).
 iknows(scrypt(CIDPKey,pair(SP,pair(Session,pair(A,Ysp)))))
=[exists Xc]=>
 state_client(C,SP,IDP,SSLKey,Hash,4,APIKey,Lsd,Xc,A,Ysp,exp(A,Xc),exp(Ysp,Xc),DiffieHellman,CIDPKey,Session,SID).
 iknows(pair(resourcereq,pair(exp(A,Xc),pair(apply(Hash,pair(resourcereq,exp(Ysp,Xc))),Session))))

step step_4 (C,SP,IDP,SSLKey,Hash,APIKey,Lsd,Xc,A,Ysp,Yc,CSPKey,DiffieHellman,CIDPKey,Session,SID) :=
 state_client(C,SP,IDP,SSLKey,Hash,4,APIKey,Lsd,Xc,A,Ysp,Yc,CSPKey,DiffieHellman,CIDPKey,Session,SID).
 iknows(resource)
 =>
 state_client(C,SP,IDP,SSLKey,Hash,5,APIKey,Lsd,Xc,A,Ysp,Yc,CSPKey,DiffieHellman,CIDPKey,Session,SID)

step step_5 (SP,C,IDP,APIKey,APISecret,IDPKey,Hash,Uid,Expires,Ss,Dummy_Xsp,Dummy_A,Dummy_Ysp,Yc,CSPKey,Key,Sig,Set_60,SID,Xsp,A) :=
 state_serviceProvider(SP,C,IDP,APIKey,APISecret,IDPKey,Hash,0,Uid,Expires,Ss,Dummy_Xsp,Dummy_A,Dummy_Ysp,Yc,CSPKey,Key,Sig,Set_60,SID).
 iknows(resourcereq)
=[exists Xsp,A]=>
 state_serviceProvider(SP,C,IDP,APIKey,APISecret,IDPKey,Hash,1,Uid,Expires,Ss,Xsp,A,exp(A,Xsp),Yc,CSPKey,Key,Sig,Set_60,SID).
 iknows(pair(IDP,pair(APIKey,crypt(IDPKey,pair(A,exp(A,Xsp))))))

step step_6 (SP,C,IDP,APIKey,APISecret,IDPKey,Hash,Dummy_Uid,Dummy_Expires,Dummy_Ss,Xsp,A,Ysp,Dummy_Yc,CSPKey,Dummy_Key,Sig,Set_60,SID,Uid,Expires,Ss,Yc,Key) :=
 state_serviceProvider(SP,C,IDP,APIKey,APISecret,IDPKey,Hash,1,Dummy_Uid,Dummy_Expires,Dummy_Ss,Xsp,A,Ysp,Dummy_Yc,CSPKey,Dummy_Key,Sig,Set_60,SID).
 iknows(pair(resourcereq,pair(Yc,pair(apply(Hash,pair(resourcereq,exp(Yc,Xsp))),pair(Key,pair(Uid,pair(Expires,pair(Ss,apply(Hash,pair(Expires,pair(Ss,pair(Key,pair(Uid,APISecret)))))))))))))
 =>
 state_serviceProvider(SP,C,IDP,APIKey,APISecret,IDPKey,Hash,2,Uid,Expires,Ss,Xsp,A,Ysp,Yc,CSPKey,Key,Sig,Set_60,SID).
 iknows(resource).
 request(SP,IDP,sp_idp_sig,apply(Hash,pair(Expires,pair(Ss,pair(Key,pair(Uid,APISecret))))),SID)

step step_7 (SP,C,IDP,APIKey,APISecret,IDPKey,Hash,Dummy_Uid,Dummy_Expires,Dummy_Ss,Xsp,A,Ysp,Dummy_Yc,CSPKey,Dummy_Key,Sig,Dummy_Set_60,SID,Uid,Expires,Ss,Yc,Key) :=
 state_serviceProvider(SP,C,IDP,APIKey,APISecret,IDPKey,Hash,1,Dummy_Uid,Dummy_Expires,Dummy_Ss,Xsp,A,Ysp,Dummy_Yc,CSPKey,Dummy_Key,Sig,Dummy_Set_60,SID).
 iknows(pair(otherresourcereq,pair(Yc,pair(apply(Hash,pair(otherresourcereq,exp(Yc,Xsp))),pair(Key,pair(Uid,pair(Expires,pair(Ss,apply(Hash,pair(Expires,pair(Ss,pair(Key,pair(Uid,APISecret)))))))))))))
 =>
 state_serviceProvider(SP,C,IDP,APIKey,APISecret,IDPKey,Hash,2,Uid,Expires,Ss,Xsp,A,Ysp,Yc,CSPKey,Key,Sig,Dummy_Set_60,SID).
 iknows(otherresource).
 secret(otherresource,otherresourceid,Dummy_Set_60).
 request(SP,IDP,sp_idp_sig,apply(Hash,pair(Expires,pair(Ss,pair(Key,pair(Uid,APISecret))))),SID).
 contains(SP,Dummy_Set_60)

step step_8 (IDP,C,SP,APIKey,Uid,APISecret,SSLKey,IDPKey,Hash,Dummy_Lsd,Expires,Ss,A,Ysp,CIDPKey,Key,Sig,Session,SID,Lsd) :=
 state_identityProvider(IDP,C,SP,APIKey,Uid,APISecret,SSLKey,IDPKey,Hash,0,Dummy_Lsd,Expires,Ss,A,Ysp,CIDPKey,Key,Sig,Session,SID).
 iknows(pair(sessionreq,APIKey))
=[exists Lsd]=>
 state_identityProvider(IDP,C,SP,APIKey,Uid,APISecret,SSLKey,IDPKey,Hash,1,Lsd,Expires,Ss,A,Ysp,CIDPKey,Key,Sig,Session,SID).
 iknows(Lsd)

step step_9 (IDP,C,SP,APIKey,Uid,APISecret,Dummy_SSLKey,IDPKey,Hash,Lsd,Dummy_Expires,Dummy_Ss,Dummy_A,Dummy_Ysp,Dummy_CIDPKey,Dummy_Key,Dummy_Sig,Dummy_Session,SID,Expires,Ss,A,Ysp,CIDPKey,Key) :=
 state_identityProvider(IDP,C,SP,APIKey,Uid,APISecret,Dummy_SSLKey,IDPKey,Hash,1,Lsd,Dummy_Expires,Dummy_Ss,Dummy_A,Dummy_Ysp,Dummy_CIDPKey,Dummy_Key,Dummy_Sig,Dummy_Session,SID).
 iknows(scrypt(CIDPKey,pair(APIKey,pair(credentials,pair(Lsd,crypt(IDPKey,pair(A,Ysp))))))).
 contains(CIDPKey,Dummy_SSLKey)
=[exists Ss,Expires,Key]=>
 state_identityProvider(IDP,C,SP,APIKey,Uid,APISecret,Dummy_SSLKey,IDPKey,Hash,2,Lsd,Expires,Ss,A,Ysp,CIDPKey,Key,apply(Hash,pair(Expires,pair(Ss,pair(Key,pair(Uid,APISecret))))),pair(Key,pair(Uid,pair(Expires,pair(Ss,apply(Hash,pair(Expires,pair(Ss,pair(Key,pair(Uid,APISecret))))))))),SID).
 iknows(scrypt(CIDPKey,pair(SP,pair(pair(Key,pair(Uid,pair(Expires,pair(Ss,apply(Hash,pair(Expires,pair(Ss,pair(Key,pair(Uid,APISecret))))))))),pair(A,Ysp))))).
 witness(IDP,SP,sp_idp_sig,apply(Hash,pair(Expires,pair(Ss,pair(Key,pair(Uid,APISecret))))))


section properties:

property authentication_on_sp_idp_sig (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,sp_idp_sig,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,sp_idp_sig,MGoal))
     /\ ((request(A1Goal,A2Goal,sp_idp_sig,MGoal,SID1)
           /\ request(A1Goal,A2Goal,sp_idp_sig,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property secrecy_of_otherresourceid (MGoal,ASGoal) :=
 [] ((secret(MGoal,otherresourceid,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state authentication_on_sp_idp_sig (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,sp_idp_sig,MGoal,SID) &
 not(witness(A2Goal,A1Goal,sp_idp_sig,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_sp_idp_sig (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,sp_idp_sig,MGoal,SID1).
 request(A1Goal,A2Goal,sp_idp_sig,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state secrecy_of_otherresourceid (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,otherresourceid,ASGoal) &
 not(contains(i,ASGoal))


role user(Ui,SNj,HGWN:agent,
SK1:symmetric_key,
%Hishashfunction
H:hash_func,Snd,Rcv:channel(dy))
played_by Ui
def=
local State: nat,
IDi,PWi,DIDi,PWRi,Ai,TIDi,IDgwnh,IDsnj,Regi,R,Ri,Rj,Rk,T1,T2,T3,T4,Xk,Pj,Sran:text,
Bi,Ci,Di,Lii,SKi,Li,Ei,Qi,Kj,Fi,Yk,Gi,Hj:message,
Inc:hash_func
const user_gateway,gateway_snode,snode_user,
subs1,subs2,subs3,subs4,subs5,subs6,subs7:protocol_id
init State:=0
transition
%Start registration phase of the user
1.State=0/\Rcv(start)=|>
State':=1/\R':=new()
/\DIDi':=H(IDi.R')/\PWRi':=H(PWi.R')
/\Snd({DIDi'.PWRi'}_SK1)
%Send registration request to the HGWN
/\secret({IDi, PWi}, subs1, Ui)
2.State=1/\Rcv({Regi.Ai.TIDi.IDgwnh}_SK1)=|>
%Reeceives smart card information from HGWN
State':=2/\Ri':=new()  /\T1':=new()
/\Bi':=xor(Ai,H(DIDi.PWRi))/\Ci':=H(IDgwnh.Bi.Ri'.T1')
/\Di':=xor(Bi',Ri')
/\Snd(IDgwnh.TIDi.IDsnj.Ci.Di.T1)
%Send login message to the HGWN
/\witness(Ui,HGWN,user_gateway,Ri')
/\secret({Ri'},subs2,{Ui,HGWN,SNj})
/\request(Ui,HGWN,user_gateway,Ri')
3.State=2/\Rcv(Li'.Ei.Qi'.Kj.T4)=|>
%Receives messages from HGWN
State':=3 /\ Rj':=xor(Ri,Qi) /\Rk':=xor(Kj,Rj)
/\Lii':=H(Ei.DIDi.Rj.Rk.T4) /\SKi':=H(DIDi.Ri.Rj.Rk)
endrole

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role gateway(HGWN,Ui,SNj: agent,
SK1: symmetric_key,
%H is hash function
H: hash_func, 
Snd,Rcv: channel(dy))
played_by HGWN
def=
local State : nat,
IDi,PWi,DIDi,PWRi,Ai,TIDi,IDgwnh,IDsnj,Regi,R,Ri,Rj,Rk,T1,T2,T3,T4,Xk,Pj,PSj,Sran:text,
Bi,Ci,Di,Lii,SKi,Li,Ei,Qi,Kj,Fi,Yk,Gi,Hj:message,
Inc: hash_func
const user_gateway, gateway_snode, snode_user,subs1,subs2,subs3,subs4,subs5,subs6,subs7:protocol_id
init State:=0
transition
1.State=0/\Rcv({DIDi.PWRi}_SK1)=|>
%Receives registration request message from user 
State':=1/\TIDi':=new()/\Regi':=H(DIDi.PWRi)
/\Bi':=H(DIDi.TIDi'.Xk)
/\Ai':=xor(Bi',H(xor(DIDi.PWRi)))
/\secret({Xk},subs3,{HGWN})
/\secret({DIDi},subs4,{HGWN,Ui})
/\Snd({Regi'.Ai'.IDgwnh.TIDi'}_SK1)
%Send smart card information securely
/\Sran':=new()/\Pj':=H(IDsnj.Sran')
/\secret({Pj',Sran'},subs5,{HGWN,SNj})
2.State=1/\Rcv(IDsnj.PSj')=|>State':=2/\Pj':=xor(PSj',Sran)
3.State=2/\Rcv(IDgwnh.TIDi.IDsnj.Ci.Di.T1)=|>
%Receives login message from user 
State':=3/\Rk':=new() /\T2':=new()
/\Ri':=xor(Bi,Di)/\Ei':=H(IDsnj.DIDi.Pj.Rk'.T2') 
/\Fi':=xor(Pj,Rk')/\Yk':=xor(Ri,H(Rk'))
/\Gi':=xor(DIDi,H(IDsnj.Rk'))/\Snd(Ei'.Fi'.Yk'.Gi'.T2')
%Send message to the sensor node
/\secret({Rk'},subs6,{Ui,HGWN,SNj})
/\request(HGWN,SNj,gateway_snode,Rk')
4.State=3/\Rcv(Hj.Kj.T3)=|>
State':=4/\T4':=new() /\Rj':=xor(Kj,Rk)
/\Li':=H(Ei.DIDi.Rj.Rk.T4)/\Qi':=xor(Rj,Ri)
/\Snd(Li'.Ei.Qi'.Kj.T4)
%Send message to the user
 end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%

role snode (SNj,Ui,HGWN : agent,
SK1:symmetric_key,
%H is hash function 
H: hash_func,
Snd, Rcv:channel(dy))
played_by SNj 
def=
local State: nat,
IDi,PWi,DIDi,PWRi,Ai,TIDi,IDgwnh,IDsnj,Regi,R,Ri,Rj,Rk,T1,T2,T3,T4,Xk,Pj,PSj,Sran: text,
Bi,Ci,Di,Lii,SKi,Li,Ei,Qi,Kj,Fi,Yk,Gi,Hj: message,
Inc: hash_func
const user_gateway,gateway_snode,snode_user,subs1,subs2,subs3,subs4,subs5,subs6,subs7: protocol_id
init State:=0
transition
%Start node registration phase
1.State=0/\Rcv(start)=|>
State':=1/\PSj':=xor(Pj,Sran) /\Snd(IDsnj.PSj')
%Send registration message to the HGWN
2.State=1/\Rcv(Ei.Fi.Yk.Gi.T2)=|>
%Receives message from HGWN
State':=2/\Rj':=new() /\T3':=new()
/\Rk':=xor(Fi,Pj) /\Ri':=xor(Yk,H(Rk))
/\DIDi':=xor(Gi,H(IDsnj.Rk)) /\Hj':=H(Ei.DIDi.Rj'.T3')
/\Kj':=xor(Ri,Rj') /\Snd(Hj'.Kj'.T3')
%Send message to the HGWN
/\secret({Rj'},subs7,{Ui,HGWN,SNj})
/\witness(SNj,Ui,snode_user,Rj')
/\request(SNj,HGWN,snode_gateway,Rj')
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role session(Ui,SNj,HGWN:agent,
SK1: symmetric_key,
H: hash_func)
def=localSI,SJ,RI,RJ,TI,TJ,PI,PJ: channel(dy)
composition
user(Ui,HGWN,SNj,SK1,H,SI,RI)
/\gateway(HGWN,Ui,SNj,SK1,H,SJ,RJ)
/\snode(SNj,HGWN,Ui,SK1,H,TI,TJ)
end role

role environment()
def=
const ui,snj,hgwn: agent, sk1: symmetric_key,
h:hash_func,
idi,pwi,didi,pwri,ai,tidi,idgwnh,idsnj,bi,regi,r,ri,rj,rk,t1,t2,t3,t4,xk,pj,sran:text,
user_gateway,gateway_snode,snode_user,subs1,subs2,subs3,subs4:protocol_id
%Represents Intruder knowledge
intruder_knowledge={ui,snj,hgwn,h,regi,r,idgwnh,idsnj,hj,kj,t3,psj,li,ei,qi,t1,t2,t4,fi,yk,gi,tidi,ci,di}
composition 
session(hgwn,snj,ui,sk1,h)
/\session(ui,snj,hgwn,sk1,h)
/\session(ui,hgwn,snj,sk1,h)
end role
goal
%Verifies secrecy of the confidential information 
secrecy_of subs1	secrecy_of subs2
secrecy_ofsubs3	secrecy_of subs4
secrecy_ofsubs5	secrecy_ofsubs6
secrecy_ofsubs7
%Verifies authenticity of the random numbers used in the protocol
authentication_on user_gateway_ri
authentication_on gateway_snode_rk
authentication_on snode_user_rj
end goal 
environment()

%% PROTOCOL: Srinu Key Exchange
%% VARIANT: basic
%% PURPOSE: Encrypted key exchange
%% REFERENCE:
%% url{http://citeseer.ist.psu.edu/bellovin92encrypted.html}
%% MODELER:
%% begin{itemize}
%%   item Haykal Tej, Siemens CT IC 3, 2003
%%   item Sebastian M{"o}dersheim, ETH Z{"u}rich, December 2003
%% end{itemize}
%%
%% ALICE_BOB:
%% begin{verbatim}
%% A -> B : {Ea}_Kab        |    Key exchange part
%% B -> A : {{K}_Ea}_Kab    |
%% A -> B : {Ca}_K          |
%% B -> A : {Ca,Cb}_K       |    Challenge/Response
%% A -> B : {Cb}_K          |    Authentication part
%% end{verbatim}
%%
%% LIMITATIONS: None
%%
%% PROBLEMS: 3
%%
%% CLASSIFICATION: G2 G12
%%
%% ATTACKS: 
%% begin{verbatim}
%% i -> (a,3): start
%% (a,3) -> i: {Ea(1)}_kab
%% i -> (a,6): {Ea(1)}_kab
%% (a,6) -> i: {{K(2)}_Ea(1)}_kab 
%% i -> (a,3): {{K(2)}_Ea(1)}_kab
%% (a,3) -> i: {Na(3)}_K(2) witness(a,b,na,Na(3))
%% i -> (a,6): {Na(3)}_K(2)
%% (a,6) -> i: {Na(3),Nb(4)}_K(2) witness(a,b,nb,Nb(4))
%% i -> (a,3): {Na(3),Nb(4)}_K(2)
%% (a,3) -> i: {Nb(4)}_K(2)  request(a,b,nb,Nb(4))
%% end{verbatim}
%%
%% Parallel session attack, man-in-the-middle
%% between A as initiator and A as responder, attacker
%% masquerades as B, but no secret nonces are exposed.
%%
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%HLPSL:

role alice (Ui,S: agent,
               SKus: symmetric_key,
	       %H is the one-way hash function
               %BH is the Biohashing function
               H : hash_func,
		BH: hash_func,
               Snd,Rcv: channel(dy))
played_by Ui
def=

  local State   : nat,
	R, PWi, N, Bi, RPWi, P:text,
	Username,T1,T3,U,MK:text,
	F:hash_func,
	Xi,Yi:text

  const alice_bob_t1, bob_alice_t3, alice_bob_r, alice_bob_u,
	subs1,subs2,subs3: protocol_id

  init  State := 0

  transition
% User registration phase
   1. State = 0  /\ Rcv(start) =|> 
      State' := 1   /\ R' := new()
      /\ RPWi':= H(R'.PWi.Username)
      /\ secret({PWi,Bi,R'}, subs2, Ui)
      /\ secret({Username}, subs3, {Ui, S})
      /\ Snd({Username.RPWi'}_SKus)
% Ui has freshly generated the value r for S
      /\ witness(Ui, S, alice_bob_r, R')
% Receive the registration acknowledgement message from S

   2. State = 1 /\ Rcv({xor(H(MK.Username.N),H(R'.PWi.Username)).F(MK.P).H}_SKus) =|> 
% Login phase
      State' := 2
%send the REQUEST message to S
      /\ U' := new()
      /\ T1' := new()
      /\ Snd(xor(Username,H(F(U'.MK.P))).H(Username.H(MK.Username.N).
	F(U'.MK.P).F(U'.P).T1').F(U'.P).T1')

      /\ witness(Ui,S,alice_bob_u,U')
      /\ witness(Ui,S,alice_bob_t1,T1')
% Authentication phase
% Receive the CHALLENGE message  from S
   3. State = 2
      /\ Rcv(H(H(Username.H(MK.Username.N).F(MK.U'.P).T1'.T3').T1'.T3'.F(MK.U'.P)).T3') =|> 
      State' := 3
      /\ request(S,Ui,bob_alice_t3,T3')
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role bob (Ui,S: agent,
               SKus: symmetric_key,
	       %H is the one-way hash function
               %BH is the Biohashing function
               H : hash_func,
		BH: hash_func,
               Snd,Rcv: channel(dy))
played_by S
def=

  local State   : nat,
	R, PWi, N, Bi, RPWi, P, SK:text,
	Username,T1,T3,U,MK:text,
	F:hash_func,
	Xi,Yi:text

  const alice_bob_t1, bob_alice_t3, alice_bob_r, alice_bob_u,
	subs1,subs2,subs3: protocol_id

  init  State := 0

  transition
% User registration phase
% Receive the registration request message 
   1. State = 0
      /\ Rcv({Username.H(R'.PWi.Username)}_SKus)
      =|> 
      State' := 1
      /\ request(Ui,S,alice_bob_r,R')
      /\ secret({PWi,Bi,R'},subs2,Ui)
      /\ secret({Username},subs3,{Ui,S})
      /\ secret(MK,subs1,S)
      /\ Xi':= H(MK.Username.N)
      /\ Yi':= xor(Xi',H(R'.PWi.Username))
      /\ Snd({Yi'.F(MK.P).H}_SKus)

% Login phase
   2. State = 1
      /\ Rcv(xor(Username,H(F(U'.MK.P))).H(Username.H(MK.Username.N).
	F(U'.MK.P).F(U'.P).T1').F(U'.P).T1') =|> 

% Authentication phase
      State' := 2
      /\ T3' := new()
      /\ Snd(H(H(Username.H(MK.Username.N).F(MK.U'.P).T1'.T3').T1'.T3'.F(MK.U'.P)).T3')

      /\ witness(S,Ui,bob_alice_t3,T3')

      /\ request(Ui,S,alice_bob_t1,T1')

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role session(Ui,S: agent,
	     SKus: symmetric_key,
	     H: hash_func,
	     BH: hash_func)
def=

  local SI, SJ, RI, RJ: channel (dy)

  composition
     alice(Ui,S,SKus,H,BH,SI,RI)
  /\ bob(Ui,S,SKus,H,BH,SJ,RJ)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


role environment()
def=

  const ui, s   : agent,
        skus    : symmetric_key,
        h : hash_func, bh : hash_func, 
        alice_bob_t1, bob_alice_t3, alice_bob_r, 
        alice_bob_u, subs1,subs2, subs3 : protocol_id

  intruder_knowledge={ui,s,bh,h}

  composition
      session(ui,s,skus,h,bh)
   /\ session(ui,s,skus,h,bh)
 
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal

 % Confidentiality (G12)
 secrecy_of subs1
 secrecy_of subs2
 secrecy_of subs3

 % Message authentication (G2)
 % EKE_Init authenticates EKE_Resp on nb
 authentication_on alice_bob_t1

 % Message authentication (G2)
 % EKE_Resp authenticates EKE_Init on na
 authentication_on bob_alice_t3

end goal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

environment()
       

role user(U,S	:	agent,
	  H	:	hash_func,
	  Kus	: 	symmetric_key,
	  SU, RU:	channel (dy))
played_by U
def=

local
	State	:	nat,
	PWi, Ni, Y,T,CIDi,Tn,Tnn,Ni_new,PWi_new,IDi,A	:	 text
	const subs1,subs2,user_server_t : protocol_id

init State:=0

transition
%%%%%%%%%%%%%Registration Phase%%%%%%%%%%%%%

1. State = 0 /\RU(start) =|>
   State' := 2 /\IDi' := new()
	       /\SU({IDi'}_Kus)

2.State = 2 /\RU({PWi.H.Ni'.Y'}_Kus) =|>
  State':= 4

%%%%%%%%%%%%%%%%Login Phase
3.State=4/\RU({PWi'.H.Ni'.Y'}_Kus) =|>
  State':=6
	/\T':=new()
	/\witness(U,S,user_server_t,T')  
	/\CIDi':=xor(H(PWi'),H(xor(Ni',xor(Y',T'))))
	/\Snd(IDi.CIDi'.Ni'.T')

%%%%%%%%%%%%%%%%Verification Phase
4.State=6 /\RU(A'.Tn')=|>
 State':=8
	/\Tnn':=new()
	/\request(U,S,user_server_tn,Tn') % User U acceptance of value that was generated by Server

%%%%%%%%%%%%%%%password updation
5.State=8=|>
	State':=10
	/\PWi_new':=new()
	/\Ni_new':=xor(Ni',xor(H(PWi),H(PWi_new')))
	/\Ni':=Ni_new'
end role



role server (S, U : agent,
Kus : symmetric_key,
H: hash_func,
Snd, Rcv: channel(dy))

played_by S
def=
local 
State : nat,
PWi, Ni, Y,X,T,CIDi,Tn,Tnn,IDi,A: text
const subs1,subs2,user_server_t : protocol_id
init State := 1
transition     
1. State = 1 /\Rcv({IDi'}_Kus) =|>
	State':=3
	/\X':=new()
	/\secret(X',subs1,{S})
	/\Y':=new()
	/\secret(Y',subs2,{U,S})
	/\PWi':=new()
	/\Ni':=xor(H(PWi'),xor(H(X'),IDi'))
	/\Snd({PWi'.H.Ni'.Y'}_Kus)

2.State=3/\Rcv(IDi'.CIDi'.Ni'.T')=|>
 State':=5
	/\Tn':=new()
	/\request(S,U,user_server_t,T') % Server acceptance of value that was generated by User U
	/\A':=H(xor(xor(xor(xor(CIDi',H(xor(Ni',xor(Y,T')))),IDi'),Y),Tn'))
	/\Snd(A'.Tn')
end role




role session(U,S : agent)
def=

local SU, RU, SS, RS: channel (dy),
	Kus : symmetric_key,
	H : hash_func
composition
	user (U,S,H,Kus,SU, RU)
	/\ server(S,U,H,Kus,SS, RS)

end role



role environment()
def=

	const u,s:agent,
	h:hash_func

	intruder_knowledge={u,s,h}
	
	composition
		session(u,s)

end role

environment()

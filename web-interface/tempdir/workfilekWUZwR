role darth(
D,S,B,A                                       :agent,
Hash                                            :hash_func,
SND_BD,RCV_SD                         :channel(dy))

played_by D def=

local
 State                         :nat,
 Na,Ra,Rb                   :text,
 SKab                         : symmetric_key


 init State :=20 

 transition 

0. State  =  20  /\ RCV_SD(start) =|>
    State' := 22  /\  Na' := new()
                     /\ SND_BD(Na'.A) 

end role




role server (
     S,B,A                                     : agent,
     Kas,Kbs                                 : symmetric_key,
     Hash                                      : hash_func,
    SND_AS,SND_BS, RCV_BS     :channel (dy))

played_by S def=


local
    State                                           : nat,
    Na,Nb                                          : text,
    SKab                                           : symmetric_key

 init 
 State :=11 

transition

1. State =11  /\  RCV_BS(Na'.Nb'.A.B.Hash(Kbs.Na'.Nb'.A.B)) =|>
   State' :=13 /\ SKab' :=new()
                  /\ SND_AS ({SKab'}_Kas.Hash(Kas.Na'.B.{SKab'}_Kas))
                  /\ SND_BS({SKab'}_Kbs.Hash(Kbs.Nb'.B.{SKab'}_Kbs))
     %   /\witness(S,A,alice_server_na,Na')
        /\witness(S,B,bob_server_nb,Nb')
        

end role




role bob(
D,S,B,A                                     :agent,
Kbs                                        :symmetric_key,
Hash                                      :hash_func,
SND_SB,RCV_DB, RCV_SB   :channel(dy))  

played_by B def=

local
 State                       :nat,
 Na,Nb                      :text,
 SKab                       :symmetric_key

init
 State :=2

transition 

2. State  =2  /\  RCV_DB(Na'.A) =|>
    State' :=4 /\  Nb' :=new()
                   /\ SND_SB(Na'.Nb'.A.B.Hash(Kbs.Na'.Nb'.A.B)) 
                 
4. State = 4  /\  RCV_SB ({SKab'}_Kbs.Hash(Kbs.Nb.B.{SKab'}_Kbs))=|>
   State' :=6 /\ request (B,S,bob_server_nb,Nb)
                  /\secret(SKab',skab,{A,S,B})

                 
         
end role


role alice(
S,B,A                      :agent,
Kas                         :symmetric_key,
Hash                       :hash_func,
RCV_SA                 :channel(dy))

played_by A def=

local
 State                    :nat,
 Na                        :text,
 SKab                    : symmetric_key


 init State :=3 

 transition 

3. State   = 3 /\ RCV_SA ({SKab'}_Kas.Hash(Kas.Na'.B.{SKab'}_Kas)) =|>   
    State' := 5  %/\ request (A,S,alice_server_na,Na') 
                     /\secret(SKab',skab,{A,S,B})


 
end role



role session(
 D,S,B,A                                            : agent,
 Kas,Kbs                                        : symmetric_key,
 Hash                                             :hash_func)

def=

local 
    SBD,RSD,
    SBS, RBS, SSB,
    SAS,
    RDB,RSB,RSA : channel(dy)

composition

              darth(D,S,B,A,Hash,SBD,RSD)  
           /\ server(S,B,A,Kas,Kbs,Hash,SAS,SBS,RBS)  
           /\  bob (D,S,B,A,Kbs,Hash,SSB,RDB,RSB)
           /\alice (S,B,A,Kas,Hash,RSA)
end role

role environment()
      def=

 const d,s,b,a                                          : agent,
 kas,kbs,kis                                           : symmetric_key,
 alice_server_na,
 bob_server_nb,skab                              : protocol_id,
 h                                                         : hash_func

   composition
      
     session(d,s,b,a,kas,kbs,h)
   /\ session(d,s,b,a,kas,kbs,h)
   %/\session(d,s,b,i,kis,kbs,h)
   %/\session(d,s,i,a,kas,kis,h)

end role

goal
   secrecy_of skab
   authentication_on alice_server_na
   authentication_on bob_server_nb
end goal


environment()

role reader 
        (R,T,BS: agent,
         Hash: hash_func,
         SND_RT,RCV_RT: channel (dy),
         SND_RS,RCV_RS: channel(dy))
played_by R
def=
local
    State : nat,
    Nr,Nt,Ns,Tid,Tsec,Rid,Rpwd,Tor,Tot,Time: text,
    Hr,Vr,Ht,Vt:message
init    
State := 0
transition
1. State = 0   /\ RCV_RT(start) =|>
   State':= 1  /\ Nr':= new()
               /\ Time':=new()
               /\ SND_RT(Nr')
2. State = 1   /\ RCV_RT(xor(Hash(Tid.Nr'),Nt').Hash(Tid.Tsec.Nt'))  =|>
   State':= 4  /\ Ns':=new()
               /\ Hr':=xor(Hash(Rid.Nr.Time),Ns')
               /\ Vr':=Hash(Rid.Rpwd.Ns')
               /\ SND_RS(Hr'.Vr'.Ht'.Vt'.Nr.Time)
               /\ secret(Rid,reader_identity,{R,BS}) 
               /\ secret(Rpwd,reader_password,{R,BS}) 
               /\ witness(R,BS,verify_reader,Vr')
3. State = 4  /\ RCV_RS(Hash(xor(xor(Rpwd,Rid),Ns')).Tot') =|>
   State':=7  %/\ Tor':=Hash(xor(xor(Rpwd,Rid),Ns))
              /\ request(R,BS,server_verify_r,Ns')
              /\ SND_RT(Tot')
              /\ Rid':=xor(Rid,Ns)
              /\ Rpwd':=xor(Rpwd,Ns)

          
end role

%.....................................

role tag (R,T,BS: agent,
          Hash: hash_func, 
          SN,RC: channel(dy))

played_by T
def=
local
    State : nat,
    Nr,Nt,Tid,Tsec,Tot: text,
    Ht,Vt : message
init
State := 2
transition
1. State = 2   /\ RC(Nr') =|>
   State':= 3  /\ Nt' := new() 
               /\ Ht':= xor(Hash(Tid.Nr'),Nt')
               /\ Vt':= Hash(Tid.Tsec.Nt')
               /\ SN(Ht'.Vt')
               /\ secret(Tid,tag_identity,{T,BS}) 
               /\ secret(Tsec,tag_secret,{T,BS}) 
               /\ witness(T,BS,verify_tag,Vt') 
               
2. State = 3   /\ RC(Hash(xor(xor(Tsec,Tid),Nt')))  =|>
   State':=8   /\ request(T,BS,server_verify_t,Nt')
               /\ Tid':=xor(Tid,Nt)
               /\ Tsec':=xor(Tsec,Nt)
end role


% Role of the server.....................

role server( R,T,BS : agent,
             Hash:hash_func,
             SND,RCV: channel(dy))
played_by BS
def=
local
     State : nat,
     Nr,Nt,Ns,Tid,Tsec,Rid,Rpwd,Tor,Tot,Time : text,
     Ht,Vt,Hr,Vr : message
init
State := 5
transition
1. State = 5  /\ RCV(xor(Hash(Rid.Nr.Time),Ns').xor(Hash(Tid.Nr'),Nt').Hash(Tid.Tsec.Nt').Hash((Rid.Rpwd.Ns').Nr.Time))=|>
   State':= 6 /\ secret(Rid,reader_identity,{R,BS}) 
              /\ secret(Rpwd,reader_password,{R,BS}) 
              /\ request(BS,R,verify_reader,Vr')
              /\ secret(Tid,tag_identity,{T,BS}) 
              /\ secret(Tsec,tag_secret,{T,BS}) 
              /\ request(BS,T,verify_tag,Vt')
              /\ Tor':=Hash(xor(xor(Rpwd,Rid),Ns'))
              /\ Tot':=Hash(xor(xor(Tsec,Tid),Nt'))
              /\ witness(BS,R,server_verify_r,Ns')
              /\ witness(BS,T,server_verify_t,Nt')
              /\ SND(Tor'.Tot')
              /\ Rid':=xor(Rid,Ns)
              /\ Rpwd':=xor(Rpwd,Ns)
              /\ Tid':=xor(Tid,Nt)
              /\ Tsec':=xor(Tsec,Nt)
                         
end role        

role session(
R,T,BS : agent,
Hash: hash_func)
def=
local 
      SRS,RRS,SSR,RSR : channel(dy),
      SRT,RRT,STR,RTR : channel(dy)
composition

reader (R,T,BS,Hash,SRT,RRT,SRS,RRS)
/\ tag(R,T,BS,Hash,STR,RTR)
/\ server(R,T,BS,Hash,SSR,RSR)
end role


role environment()
def=
const
reader_identity, reader_password, tag_identity,tag_secret, verify_tag, verify_reader, server_verify_r, server_verify_t: protocol_id,
r,t,bs : agent,
h: hash_func
intruder_knowledge = {r,t}
composition
  session(r,t,bs,h)
end role

goal

secrecy_of reader_identity
secrecy_of reader_password
secrecy_of tag_identity
secrecy_of tag_secret

authentication_on verify_tag
authentication_on verify_reader


authentication_on server_verify_r
authentication_on server_verify_t

end goal

environment()






%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilegP23sp

section signature:

state_bob: agent * agent * text * hash_func * public_key * public_key * text * text * text * text * text * message * message * nat * text * text * message * set(agent) * nat -> fact
state_alice: agent * agent * text * hash_func * public_key * public_key * text * text * text * text * text * message * message * nat * text * text * message * set(agent) * nat -> fact


section types:

sec_b_SK, sk1, sk2, sec_a_SK: protocol_id
ka, kb, ki, Kb, Ka: public_key
f, F: hash_func
Dummy_State, 3, SID, SID2, SID1, 7, 5, State, 8, 6, 4, 2, 1, 0, 10: nat
set_91, set_119, set_118, set_117, set_115, set_108: set
ASGoal, Set_63, Set_33, Dummy_Set_63, Dummy_Set_33: set(agent)
A2Goal, A1Goal, a, b, B, A, i: agent
dummy_msg, MGoal, AUTH_A, SK, KEi, start, AUTH_B, KEr, Dummy_AUTH_A, Dummy_KEi, Dummy_AUTH_B, Dummy_SK, Dummy_KEr: message
Dummy_SA2, Dummy_DHX, Dummy_SA1, Dummy_Ni, dummy_nonce, g, MB, MA, Nr, DHY, Ni, SA1, SA2, G, one, zero, DHX, Dummy_DHY, Dummy_MB, Dummy_MA, Dummy_Nr: text


section inits:

initial_state init1 := 
 iknows(start).
 iknows(g).
 iknows(f).
 iknows(a).
 iknows(b).
 iknows(ka).
 iknows(kb).
 iknows(ki).
 iknows(inv(ki)).
 iknows(zero).
 iknows(one).
 iknows(i).
 state_alice(a,b,g,f,ka,kb,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,0,dummy_nonce,dummy_nonce,dummy_msg,set_91,3).
 state_bob(b,a,g,f,kb,ka,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,1,dummy_nonce,dummy_nonce,dummy_msg,set_108,4).
 state_alice(a,i,g,f,ka,ki,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,0,dummy_nonce,dummy_nonce,dummy_msg,set_115,6).
 state_bob(b,i,g,f,kb,ki,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,1,dummy_nonce,dummy_nonce,dummy_msg,set_119,10)


section rules:

step step_0 (A,B,G,F,Ka,Kb,Dummy_Ni,Dummy_SA1,SA2,Dummy_DHX,Nr,KEr,SK,MA,MB,AUTH_B,Set_33,SID,Ni,SA1,DHX) :=
 state_alice(A,B,G,F,Ka,Kb,Dummy_Ni,Dummy_SA1,SA2,Dummy_DHX,Nr,KEr,SK,0,MA,MB,AUTH_B,Set_33,SID).
 iknows(start)
=[exists Ni,DHX,SA1]=>
 state_alice(A,B,G,F,Ka,Kb,Ni,SA1,SA2,DHX,Nr,KEr,SK,2,MA,MB,AUTH_B,Set_33,SID).
 iknows(pair(SA1,pair(exp(G,DHX),Ni)))

step step_1 (A,B,G,F,Ka,Kb,Ni,SA1,Dummy_SA2,DHX,Dummy_Nr,Dummy_KEr,Dummy_SK,MA,MB,AUTH_B,Set_33,SID,SA2,Nr,KEr) :=
 state_alice(A,B,G,F,Ka,Kb,Ni,SA1,Dummy_SA2,DHX,Dummy_Nr,Dummy_KEr,Dummy_SK,2,MA,MB,AUTH_B,Set_33,SID).
 iknows(pair(SA1,pair(KEr,Nr)))
=[exists SA2]=>
 state_alice(A,B,G,F,Ka,Kb,Ni,SA1,SA2,DHX,Nr,KEr,apply(F,pair(Ni,pair(Nr,pair(SA1,exp(KEr,DHX))))),4,MA,MB,AUTH_B,Set_33,SID).
 iknows(scrypt(apply(F,pair(Ni,pair(Nr,pair(SA1,exp(KEr,DHX))))),pair(A,pair(crypt(inv(Ka),pair(SA1,pair(exp(G,DHX),pair(Ni,Nr)))),SA2))))

step step_2 (A,B,G,F,Ka,Kb,Ni,SA1,SA2,DHX,Nr,KEr,SK,Dummy_MA,MB,Dummy_AUTH_B,Dummy_Set_33,SID,MA) :=
 state_alice(A,B,G,F,Ka,Kb,Ni,SA1,SA2,DHX,Nr,KEr,SK,4,Dummy_MA,MB,Dummy_AUTH_B,Dummy_Set_33,SID).
 iknows(scrypt(SK,pair(B,pair(crypt(inv(Kb),pair(SA1,pair(KEr,pair(Nr,Ni)))),SA2))))
=[exists MA]=>
 state_alice(A,B,G,F,Ka,Kb,Ni,SA1,SA2,DHX,Nr,KEr,SK,6,MA,MB,crypt(inv(Kb),pair(SA1,pair(KEr,pair(Nr,Ni)))),Dummy_Set_33,SID).
 iknows(scrypt(SK,pair(MA,zero))).
 secret(SK,sec_a_SK,Dummy_Set_33).
 witness(A,B,sk2,SK).
 contains(A,Dummy_Set_33).
 contains(B,Dummy_Set_33)

step step_3 (A,B,G,F,Ka,Kb,Ni,SA1,SA2,DHX,Nr,KEr,SK,MA,Dummy_MB,AUTH_B,Set_33,SID,MB) :=
 state_alice(A,B,G,F,Ka,Kb,Ni,SA1,SA2,DHX,Nr,KEr,SK,6,MA,Dummy_MB,AUTH_B,Set_33,SID).
 iknows(scrypt(SK,pair(MB,one)))
 =>
 state_alice(A,B,G,F,Ka,Kb,Ni,SA1,SA2,DHX,Nr,KEr,SK,8,MA,MB,AUTH_B,Set_33,SID).
 request(A,B,sk1,SK,SID)

step step_4 (B,A,G,F,Kb,Ka,Dummy_Ni,Dummy_SA1,SA2,Dummy_Nr,Dummy_DHY,Dummy_SK,Dummy_KEi,MA,MB,AUTH_A,Set_63,SID,Ni,SA1,Nr,DHY,KEi) :=
 state_bob(B,A,G,F,Kb,Ka,Dummy_Ni,Dummy_SA1,SA2,Dummy_Nr,Dummy_DHY,Dummy_SK,Dummy_KEi,1,MA,MB,AUTH_A,Set_63,SID).
 iknows(pair(SA1,pair(KEi,Ni)))
=[exists Nr,DHY]=>
 state_bob(B,A,G,F,Kb,Ka,Ni,SA1,SA2,Nr,DHY,apply(F,pair(Ni,pair(Nr,pair(SA1,exp(KEi,DHY))))),KEi,3,MA,MB,AUTH_A,Set_63,SID).
 iknows(pair(SA1,pair(exp(G,DHY),Nr)))

step step_5 (B,A,G,F,Kb,Ka,Ni,SA1,Dummy_SA2,Nr,DHY,SK,KEi,MA,MB,Dummy_AUTH_A,Dummy_Set_63,SID,SA2) :=
 state_bob(B,A,G,F,Kb,Ka,Ni,SA1,Dummy_SA2,Nr,DHY,SK,KEi,3,MA,MB,Dummy_AUTH_A,Dummy_Set_63,SID).
 iknows(scrypt(SK,pair(A,pair(crypt(inv(Ka),pair(SA1,pair(KEi,pair(Ni,Nr)))),SA2))))
 =>
 state_bob(B,A,G,F,Kb,Ka,Ni,SA1,SA2,Nr,DHY,SK,KEi,5,MA,MB,crypt(inv(Ka),pair(SA1,pair(KEi,pair(Ni,Nr)))),Dummy_Set_63,SID).
 iknows(scrypt(SK,pair(B,pair(crypt(inv(Kb),pair(SA1,pair(exp(G,DHY),pair(Nr,Ni)))),SA2)))).
 witness(B,A,sk1,SK).
 secret(SK,sec_b_SK,Dummy_Set_63).
 contains(A,Dummy_Set_63).
 contains(B,Dummy_Set_63)

step step_6 (B,A,G,F,Kb,Ka,Ni,SA1,SA2,Nr,DHY,SK,KEi,Dummy_MA,Dummy_MB,AUTH_A,Set_63,SID,MA,MB) :=
 state_bob(B,A,G,F,Kb,Ka,Ni,SA1,SA2,Nr,DHY,SK,KEi,5,Dummy_MA,Dummy_MB,AUTH_A,Set_63,SID).
 iknows(scrypt(SK,pair(MA,zero)))
=[exists MB]=>
 state_bob(B,A,G,F,Kb,Ka,Ni,SA1,SA2,Nr,DHY,SK,KEi,7,MA,MB,AUTH_A,Set_63,SID).
 iknows(scrypt(SK,pair(MB,one))).
 request(B,A,sk2,SK,SID)


section properties:

property secrecy_of_sec_a_SK (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_a_SK,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_b_SK (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_b_SK,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_sk1 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,sk1,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,sk1,MGoal))
     /\ ((request(A1Goal,A2Goal,sk1,MGoal,SID1)
           /\ request(A1Goal,A2Goal,sk1,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_sk2 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,sk2,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,sk2,MGoal))
     /\ ((request(A1Goal,A2Goal,sk2,MGoal,SID1)
           /\ request(A1Goal,A2Goal,sk2,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sec_a_SK (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_a_SK,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_b_SK (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_b_SK,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_sk1 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,sk1,MGoal,SID) &
 not(witness(A2Goal,A1Goal,sk1,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_sk1 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,sk1,MGoal,SID1).
 request(A1Goal,A2Goal,sk1,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_sk2 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,sk2,MGoal,SID) &
 not(witness(A2Goal,A1Goal,sk2,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_sk2 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,sk2,MGoal,SID1).
 request(A1Goal,A2Goal,sk2,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


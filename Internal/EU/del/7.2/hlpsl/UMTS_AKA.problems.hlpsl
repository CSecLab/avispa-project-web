%% DISCUSSION & ISSUES:
%% -----------
%% zeb:
%% - the protocol described in A & B notation below can be modelled
%%   as there are no increasing sequence numbers etc.
%% - updated protocol accordingly
%%
%% LucaC: 
%%
%% - It seems to me that this protocol cannot be analysed, because it
%%   require arithmetic reasoning. In particular, we should be able to
%%   increase a nat and to check relation like '>='.  What do you think?
%%
%% - In the transition 2. of role Server I have replaced R' with R,
%%   because in my opinion R should be already known at the moment of the
%%   execution of this transition. Is it correct?
%% 
%% - I have added the parameter S into role Server and corrected the
%%   protocol wrt HLPSL_GUIDELINES. The compiler compiles, but it returns
%%   one warning:
%% 
%%   "Internal function Instantiation.prepare_instances: warning(1):
%%   unhandled use case"
%%
%%   Somebody knows what is going on?
%% 
%% - Moreover in the IF specification occur strange terms
%%   (e.g. 'set(a,ka)') inside 'contain' facts in the initial state:
%% 
%%   contains(set(a,ka),local_74).
%%   contains(set(b,kb),local_74).
%%   contains(set(i,ki),local_74)
%% 
%%   but in the rules you find 
%% 
%%   contains(pair(M,Km),KeyMap)
%% 
%%   I think this is a bug. What do you think?
 

%%===========================================================

%%1-2-UMTS-AKA

%%A-B Notation:

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% S is the server, M is the mobile set, they share a secret key k(M).
%% 
%% Both S and M have an own version of a sequence number,
%% that they try to mantain synchonized.
%% 
%% Using k(M), a random number (nonce) r, his sequence number seq,
%% when S receives a request from M (*or whenever he wishes*
%%   this part is not modelled here),
%% S generates:
%%   res = F2(k(M); r)   where F2 hash
%%   CK =  F3(k(M); r)   where F3 one-way
%%   IK =  F4(k(M); r)   where F4 one-way
%%   Ka =  F5(k(M); r)   where F5 one-way
%%   AUTN = {seq}Ka; F1(k(M); seq; r)  where F1 hash
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

 % M --> S : M
 % S --> M : r; {seq}Ka; F1(k(M); seq; r)
 % (*   from r M calculates KA, then seq, then checks if F1(k(M); seq; r) OK
 %      if yes, M increments his seq number and responds: *)
 % M --> S : F2(k(M); r)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Goal is that at the end both authenticate each other and share
%% the value of CK, IK.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%--------------------------Nhlpsl-spec ---------------------

role Server(      S,M : agent,
		  Snd, Rec: channel(dy),
                  K_M: symmetric_key,
                  Seq : nat,
                  F1,F2,F5: function
            ) played_by S def=

  exists State: nat,
         R: text(fresh)

  owns Snd

  init State=1

  accept State=1

  knowledge(S) = {S,M,K_M,Seq,F1,F2,F5}

  transition

    1.  State=1 /\ Rec(M) 
        =|> 
	Snd(R'.{Seq}F5(K_M.R').F1(K_M.Seq.R')) /\ State' = 2
	/\ secret(Seq,M) /\ secret(Seq,S)
        /\ witness(S,M,r,R')

    2.  State=2 /\ Rec(F2(K_M.R)) 
        =|> 
	Seq'  = add(Seq,1) /\ State'=3 
        /\ wrequest(S,M,r,R)
        
end role

%%  (*------------------------------------------------------*)

role Mobile(     M,S:agent,
                 Snd, Rec: channel(dy),
                 K_M: symmetric_key,
                 Seq: nat,
                 F1,F2,F5: function            ) played_by M def=

  exists State:nat, 
	 R:text

  owns Snd

  init State=1

  accept State=1

  knowledge(M) = {M,S,K_M,Seq,F1,F2,F5}

  transition

    1.  State=1 /\ Rec(start) =|> Snd(M)  /\ State'=2
    2.  State=2 /\ Rec(R'.{Seq}F5(K_M.R').F1(K_M.Seq.R'))
        =|>  
	Snd(F2(K_M. R')) /\ State'=3 
        /\ secret(Seq,S) /\ secret(Seq,M)
        /\ wrequest(M,S,r,R') /\ witness(M,S,r,R')
 
end role

%%  (*------------------------------------------------------*)

role Session(M,S: agent,
	     K_M: symmetric_key,
	     Seq: nat,
	     F1,F2,F5: function,
             SA,RA,SB,RB: channel(dy)) def=

   composition


	 Mobile(M,S,SA,RA,K_M,Seq,F1,F2,F5)
      /\ Server(S,M,SB,RB,K_M,Seq,F1,F2,F5)

end role



role Environment() def=

 const r: protocol_id,
       a,i,s: agent,
       f1,f2,f5: function,
       seq_as,seq_is,seq_ai: nat

 knowledge(i)={a,s,i,f1,f2,f5}

 composition
 
   Session(a,s,k_as,seq_as,f1,f2,f5,sa1,ra1,ss1,rs1) 
/\ Session(a,s,k_as,seq_as,f1,f2,f5,sa1,ra1,ss1,rs1) 
/\ Session(i,s,k_is,seq_is,f1,f2,f5,si1,ri1,ss2,rs2) 
/\ Session(a,i,k_ai,seq_ai,f1,f2,f5,sa2,ra2,si2,ri2)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal

%% Secrecy of the shared key

  secrecy_of Seq

%% Mobile authenticates Server on the shared key Km and the nonce R

  Mobile weakly authenticates Server on R


%% Server authenticates Mobile on the shared key Km and the nonce R

  Server weakly authenticates Mobile on R

end goal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Environment()

  

%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfiles7WHzK

section signature:

state_bob: agent * agent * agent * symmetric_key * nat * text * text * symmetric_key * scrypt(symmetric_key,pair(agent,pair(text,agent))) * scrypt(symmetric_key,pair(text,pair(text,pair(agent,symmetric_key)))) * nat -> fact
state_server: agent * agent * agent * symmetric_key * symmetric_key * nat * text * text * symmetric_key * set(agent) * nat -> fact
state_alice: agent * agent * agent * symmetric_key * nat * text * text * symmetric_key * nat -> fact


section types:

Dummy_Set_36, Set_36, ASGoal: set(agent)
sec_kab, auth_na, auth_nb: protocol_id
MGoal, start: message
Na, Nb, Dummy_Nb, Dummy_Na, dummy_nonce: text
Dummy_Y, Y: scrypt(symmetric_key,pair(text,pair(text,pair(agent,symmetric_key))))
dummy_agent, A, S, B, A2Goal, A1Goal, a, s, b, i: agent
Dummy_X, X: scrypt(symmetric_key,pair(agent,pair(text,agent)))
7, State, 5, SID, 4, Dummy_State, 3, SID2, SID1, 2, 1, 13, 12, 8: nat
Kbs, Dummy_Kab, Kab, dummy_sk, Kas, kas, kbs, ki: symmetric_key
set_90, set_102, set_100: set


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(s).
 iknows(ki).
 iknows(i).
 state_alice(a,s,b,kas,1,dummy_nonce,dummy_nonce,dummy_sk,3).
 state_server(s,a,b,kas,kbs,1,dummy_nonce,dummy_nonce,dummy_sk,set_90,4).
 state_bob(b,a,s,kbs,1,dummy_nonce,dummy_nonce,dummy_sk,scrypt(dummy_sk,pair(dummy_agent,pair(dummy_nonce,dummy_agent))),scrypt(dummy_sk,pair(dummy_nonce,pair(dummy_nonce,pair(dummy_agent,dummy_sk)))),5).
 state_alice(a,s,i,kas,1,dummy_nonce,dummy_nonce,dummy_sk,7).
 state_server(s,a,i,kas,ki,1,dummy_nonce,dummy_nonce,dummy_sk,set_100,8).
 state_server(s,i,b,ki,kbs,1,dummy_nonce,dummy_nonce,dummy_sk,set_102,12).
 state_bob(b,i,s,kbs,1,dummy_nonce,dummy_nonce,dummy_sk,scrypt(dummy_sk,pair(dummy_agent,pair(dummy_nonce,dummy_agent))),scrypt(dummy_sk,pair(dummy_nonce,pair(dummy_nonce,pair(dummy_agent,dummy_sk)))),13)


section rules:

step step_0 (A,S,B,Kas,Dummy_Na,Nb,Kab,SID,Na) :=
 state_alice(A,S,B,Kas,1,Dummy_Na,Nb,Kab,SID).
 iknows(start)
=[exists Na]=>
 state_alice(A,S,B,Kas,2,Na,Nb,Kab,SID).
 iknows(pair(A,pair(Na,pair(B,scrypt(Kas,pair(A,pair(Na,B)))))))

step step_1 (A,S,B,Kas,Na,Dummy_Nb,Dummy_Kab,SID,Nb,Kab) :=
 state_alice(A,S,B,Kas,2,Na,Dummy_Nb,Dummy_Kab,SID).
 iknows(pair(scrypt(Kas,pair(Na,pair(Nb,pair(B,Kab)))),scrypt(Kab,Na)))
 =>
 state_alice(A,S,B,Kas,3,Na,Nb,Kab,SID).
 iknows(scrypt(Kab,Nb)).
 witness(A,B,auth_nb,Nb).
 request(A,B,auth_na,Na,SID)

step step_2 (S,A,B,Kas,Kbs,Dummy_Na,Dummy_Nb,Dummy_Kab,Dummy_Set_36,SID,Na,Nb,Kab) :=
 state_server(S,A,B,Kas,Kbs,1,Dummy_Na,Dummy_Nb,Dummy_Kab,Dummy_Set_36,SID).
 iknows(pair(A,pair(Na,pair(B,pair(scrypt(Kas,pair(A,pair(Na,B))),scrypt(Kbs,pair(Na,pair(Nb,pair(A,B)))))))))
=[exists Kab]=>
 state_server(S,A,B,Kas,Kbs,2,Na,Nb,Kab,Dummy_Set_36,SID).
 iknows(pair(scrypt(Kbs,pair(Na,pair(Nb,pair(A,Kab)))),scrypt(Kas,pair(Na,pair(Nb,pair(B,Kab)))))).
 secret(Kab,sec_kab,Dummy_Set_36).
 contains(A,Dummy_Set_36).
 contains(B,Dummy_Set_36).
 contains(S,Dummy_Set_36)

step step_3 (B,A,S,Kbs,Dummy_Na,Dummy_Nb,Kab,Dummy_X,Y,SID,Na,Nb,X) :=
 state_bob(B,A,S,Kbs,1,Dummy_Na,Dummy_Nb,Kab,Dummy_X,Y,SID).
 iknows(pair(A,pair(Na,pair(B,X))))
=[exists Nb]=>
 state_bob(B,A,S,Kbs,2,Na,Nb,Kab,X,Y,SID).
 iknows(pair(A,pair(Na,pair(B,pair(X,scrypt(Kbs,pair(Na,pair(Nb,pair(A,B))))))))).
 witness(B,A,auth_na,Na)

step step_4 (B,A,S,Kbs,Na,Nb,Dummy_Kab,X,Dummy_Y,SID,Kab,Y) :=
 state_bob(B,A,S,Kbs,2,Na,Nb,Dummy_Kab,X,Dummy_Y,SID).
 iknows(pair(scrypt(Kbs,pair(Na,pair(Nb,pair(A,Kab)))),Y))
 =>
 state_bob(B,A,S,Kbs,3,Na,Nb,Kab,X,Y,SID).
 iknows(pair(Y,scrypt(Kab,Na)))

step step_5 (B,A,S,Kbs,Na,Nb,Kab,X,Y,SID) :=
 state_bob(B,A,S,Kbs,3,Na,Nb,Kab,X,Y,SID).
 iknows(scrypt(Kab,Nb))
 =>
 state_bob(B,A,S,Kbs,4,Na,Nb,Kab,X,Y,SID).
 request(B,A,auth_nb,Nb,SID)


section properties:

property secrecy_of_sec_kab (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_kab,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_auth_na (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth_na,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth_na,MGoal))
     /\ ((request(A1Goal,A2Goal,auth_na,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth_na,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_auth_nb (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth_nb,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth_nb,MGoal))
     /\ ((request(A1Goal,A2Goal,auth_nb,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth_nb,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sec_kab (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_kab,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_auth_na (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth_na,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_na,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth_na (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth_na,MGoal,SID1).
 request(A1Goal,A2Goal,auth_na,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_auth_nb (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth_nb,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_nb,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth_nb (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth_nb,MGoal,SID1).
 request(A1Goal,A2Goal,auth_nb,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


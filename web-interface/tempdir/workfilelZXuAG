
role user (
A, B				: agent,
H				: hash_func,
IDJ				: text,
SND,RCV				: channel(dy)
)


played_by A

def=

	local State				: nat,
        PWJ, TJ, TSJ				: text,
	AJ, BJ, CJ, DJ, EJ, FJ,GJ,PJ		: text

const sec_pwj, dj, tj, tsj, ej, fj, gj		: protocol_id

init State := 0
transition


	1. State = 0 /\ RCV(start) =|>
		   State' := 2 /\ PWJ' := new()
                               /\ PJ' := H(PWJ') 
			       /\ SND(IDJ.PJ') 
			       /\ secret(PWJ',sec_pwj,{A})
			       
	


	2. State = 2 /\ RCV(IDJ.BJ'.CJ'.DJ'.H) =|> 
		   State' := 4 /\ AJ' := xor(CJ',H(xor(PJ,IDJ))) 	       
		        /\ DJ' := xor(H(xor(AJ',IDJ)),PJ)
		        /\ request(A,B,dj,DJ')  
                        /\ TJ' := new()
		        /\ EJ':= H(xor(AJ',xor(IDJ,TJ')))
			/\ FJ':= H(xor(AJ',xor(BJ',PJ)))
                        /\ witness(A,B,tj,TJ')
                        /\ witness(A,B,ej,EJ')
                        /\ witness(A,B,fj,FJ')
                         /\ SND(IDJ.EJ'.TJ')
		       
       3. State = 4 /\ RCV(GJ'.TSJ') =|> 
		   State' := 6 /\ request(A,B,tsj,TSJ') 	       
		        /\ GJ':= H(xor(AJ,xor(IDJ,TSJ')))
			 /\ request(A,B,gj,GJ')
		        /\ SND(BJ.DJ.FJ)
	
end role

	
role server(
	B, A				: agent,
	X1,X2				: symmetric_key,
	H				: hash_func,
	IDJ				: text,
	SND,RCV				: channel(dy)
	)
	

played_by B

def=

	local State						: nat,
	PWJ,TJ,TSJ,SJ		 	     			: text,
	AJ,BJ,CJ,DJ,EJ,FJ,GJ,PJ					: text			      

const sec_x1, sec_x2, dj, tj, tsj, ej, fj, gj				: protocol_id
	      
init State := 1
transition
	 
	1. State = 1 /\ RCV(IDJ'.PJ') =|>  
	   	State' := 3 /\ SJ' := new()
		     /\ AJ' := H((xor(IDJ,X1)).X2)
		     /\ BJ' := xor(SJ',xor(H(xor(AJ',X2)),xor(H(X1,X2),PJ')))
		     /\ CJ' := xor(AJ',H(xor(PJ',IDJ)))
                     /\	DJ' := xor(H(xor(AJ',IDJ)),PJ')  
		     /\ SND(IDJ.BJ'.CJ'.DJ'.H)
		     /\ witness(B,A,dj,DJ')
		     /\ secret(X1,sec_x1,{B})
		     /\ secret(X2,sec_x2,{B})
		   
	  
	
	2. State = 3 /\ RCV(IDJ.EJ'.TJ') =|>
		State' := 5 /\ request(B,A,tj,TJ')
                         /\ AJ' := H((xor(IDJ,X1)).X2)
                         /\ EJ':= H(xor(AJ',xor(IDJ,TJ')))
			 /\ request(B,A,ej,EJ')		        
			 /\ TSJ' := new()
			 /\ GJ':= H(xor(AJ',xor(IDJ,TSJ')))
			 /\ witness(B,A,tsj,TSJ')
			 /\ witness(B,A,gj,GJ')
         
	3. State = 5 /\ RCV(BJ'.DJ'.FJ') =|>
		State' := 7 /\ PJ' := xor(H(xor(AJ,IDJ)),DJ') 
			 /\ FJ':= H(xor(AJ,xor(BJ',PJ')))
			 /\ request(B,A,fj,FJ')

end role


role session(

	A, B		: agent,
	X1, X2		: symmetric_key,
	H		: hash_func,
	IDJ		: text
	)
	
def=

	local SA, RA, SB, RB : channel(dy)

	
composition
		user(A,B,H,IDJ,SA,RA)
		/\ server(B,A,X1,X2,H,IDJ,SB,RB)


end role



role environment()


def=

	const	a,b						: agent,
		x1, x2, x1i, x2i				: symmetric_key,
		h						: hash_func,
		idj, idi					: text,
		sec_pwj, sec_x1, sec_x2, dj, tj, tsj, ej, fj, gj 	: protocol_id
		
	intruder_knowledge = {a,b,h,idi}
	
composition

		session(a,b,x1,x2,h,idj)
		/\ session(a,b,x1,x2,h,idj)
		/\ session(a,i,x1i,x2i,h,idi)
		/\ session(i,b,x1i,x2i,h,idi)
		
end role





goal
	secrecy_of sec_pwj, sec_x1, sec_x2
	authentication_on dj
	authentication_on tj
	authentication_on tsj
	authentication_on ej
	authentication_on fj
	authentication_on gj
	

end goal



environment()
    





  
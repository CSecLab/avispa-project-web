role alice (Ui,Sj: agent,
	SKuisj:symmetric_key,

H: hash_func,
Snd,Rcv:channel(dy))

played_by Ui def= local 
State: nat,
	IDi,NIDi,PWi,RPWi,Ri:text,
	
	Tc,Rc,Ts,Rs,K,Xs:text,
	NIDi1,NIDi2:text,
	ADD:hash_func,
	M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14:text
const alice_bob_tc,bob_alice_ts,
         alice_bob_rc,bob_alice_rs,
         subs1,subs2:protocol_id
init State:= 0
transition

1.State=0/\Rcv(start) =|>
     State':=1/\RPWi':=H(IDi.K.PWi)

	 /\Snd({IDi.RPWi'}_SKuisj)

/\secret({Xs},subs1,Sj)
           /\secret({PWi,K},subs2,Ui)

2.State=1/\Rcv({H(IDi.H(IDi.K.PWi)).
	xor(H(IDi.Xs),H(IDi.H(IDi.K.PWi))).
	xor(NIDi,H(IDi.H(IDi.H(IDi.K.PWi)))).
	xor(NIDi,H(IDi.H(IDi.H(IDi.K.PWi)))).
	H}_SKuisj)=|>

State':=2/\
           NIDi1':=xor(H(IDi.H(IDi.H(IDi.K.PWi))),
	        xor(NIDi,H(IDi.H(IDi.K.PWi))))
	/\ M1':=xor(xor(H(IDi.Xs),
		H(IDi.H(IDi.K.PWi))),
		H(IDi.H(IDi.K.PWi)))

/\Rc':=new()

/\Tc':=new()
/\M2':=xor(M1',Rc')
/\M3':=H(IDi.Rc'.Tc')

/\Snd(NIDi1'.M2'.M3'.Tc')

/\witness(Ui,Sj,alice_bob_rc,Rc')

/\witness(Ui,Sj,alice_bob_tc,Tc')


3. State=2/\Rcv(xor(xor(H(IDi,Xs),Rs'),Ts').
xor(H(Rs'.Ts'.xor(xor(xor(xor(xor(H(IDi.Xs).
    H(IDi.H(IDi.K.PWi))).
    H(IDi.H(IDi.K.PWi))),Rc').
    H(IDi.Xs)),Tc').Tc'),NIDi2').
   H(IDi.ADD(Rc'.1).ADD(Tc'.1).Rs'.Ts'.NIDi2').Ts')=|>

State':=3/\
        M10':=xor(xor(xor(xor(H(IDi.Xs),Rs'),Ts'),
	H(IDi.Xs)),Ts')
       /\M11':=H(M10'.Ts'.Rc'.Tc')
/\M12':=H(IDi.ADD(Rc'.1).ADD(Tc'.1).M10'.Ts'.NIDi2)
/\M13':=H(ADD(M10'.1).ADD(Ts'.1).ADD(Rc'.1).ADD(Tc'.1).NIDi2'.IDi)
/\Snd(M13')

/\request(Sj,Ui,bob_alice_rs,Rs')

/\request(Sj,Ui,bob_alice_ts,Ts')
end role


role bob (Ui,Sj:agent,
SKuisj : symmetric_key,

H: hash_func,
Snd, Rcv: channel(dy))

played_by Sj
def=
local State:nat,
       IDi,NIDi,TDi,Di,PWi,RPWi,Ri,Ei:text,

	Tc,Rc,Ts,Rs,K,Xs:text,
	NIDi1,NIDi2:text,
	ADD:hash_func,
	M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14:text
const alice_bob_tc,bob_alice_ts,
         alice_bob_rc,bob_alice_rs,
         subs1,subs2:protocol_id
init State:= 0
transition
1. State=0/\Rcv({IDi.H(IDi.K.PWi)}_SKuisj)=|>

State':=1/\secret({Xs},subs1,Sj)
            /\secret({PWi,K},subs2,Ui)

           /\Ri':=H(IDi.H(IDi.K.PWi))
          /\Ei':=xor(H(IDi.Xs),Ri')
         /\TDi':=xor(NIDi,H(IDi.Ri'))
         /\Di':=xor(NIDi,H(IDi.Ri'))
         /\Snd({Ri'.Ei'.TDi'.Di'.H}_SKuisj)
2.State=1/\Rcv(xor(H(IDi.H(IDi.H(IDi.K.PWi))),
               xor(NIDi,H(IDi.H(IDi.K.PWi)))).
               xor(xor(xor(H(IDi.Xs),
                    H(IDi.H(IDi.K.PWi))),
                    H(IDi.H(IDi.K.PWi))),Rc').
                    H(IDi.Rc'.Tc').Tc')=|>

State':=2/\

Rs':=new()

/\Ts':=new()
/\M4':=H(IDi.Xs)
/\M5':=xor(xor(xor(xor(xor(H(IDi.Xs),
H(IDi.H(IDi.K.PWi))),
H(IDi.H(IDi.K.PWi))),Rc'),
H(IDi.Xs)),Tc')
/\M6':=H(IDi.M5'.Tc')
/\M7':=xor(xor(M4',Rs'),Ts')
/\NIDi2':=new()
/\M8':=xor(H(Rs'.Ts'.M5'.Tc'),NIDi2')
/\M9':=H(IDi.ADD(M5'.1).ADD(Tc'.1).Rs'.Ts'.NIDi2')
/\Snd(M7'.M8'.M9'.Ts')

/\witness(Sj,Ui,bob_alice_rs,Rs')

/\witness(Sj,Ui,bob_alice_ts,Ts')

3. State=2/\Rcv(H(ADD(Rs'.1).ADD(Ts'.1).ADD(Rc'.1).ADD(Tc'.1).NIDi2'.IDi))=|>

State':=3/\request(Ui,Sj,alice_bob_rc,Rc')

/\request(Ui,Sj,alice_bob_tc,Tc')
end role


role session(Ui,Sj:agent,SKuisj:symmetric_key,
H:hash_func)
def=
local SI,SJ,RI,RJ:channel(dy)
composition
             alice(Ui,Sj,SKuisj,H,SI,RI)
             /\bob(Ui,Sj,SKuisj,H,SJ,RJ)
end role
role environment()
def=
const ui, sj: agent,
skuisj: symmetric_key,
h: hash_func,
         alice_bob_tc,bob_alice_ts,
         alice_bob_rc,bob_alice_rs,
         subs1,subs2: protocol_id
         intruder_knowledge={ui,sj,h}
         composition
            session(ui,sj,skuisj,h)
            /\session(ui,sj,skuisj,h)
end role


goal
secrecy_of subs1
secrecy_of subs2
authentication_on alice_bob_tc
authentication_on alice_bob_rc
end goal
environment()
run



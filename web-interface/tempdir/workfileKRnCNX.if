%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileKRnCNX

section signature:

state_bob: agent * agent * public_key * public_key * nat * text * text * symmetric_key * set(agent) * nat -> fact
state_alice: agent * agent * public_key * public_key * nat * text * text * symmetric_key * set(agent) * nat -> fact


section types:

set_81, set_80, set_79, set_77, set_73, set_64: set
Na, Nb, Dummy_Na, dummy_nonce: text
5, 3, 1, State, 10, 6, 4, SID, Dummy_State, 2, 0, SID2, SID1: nat
Set_38, Dummy_Set_38, Dummy_Set_19, Set_19, ASGoal: set(agent)
start, MGoal: message
bob_alice_na, na, nb: protocol_id
Kab, Dummy_Kab, dummy_sk, kab: symmetric_key
Ka, Kb, ka, kb, ki: public_key
A, B, A2Goal, A1Goal, i, a, b: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(ka).
 iknows(kb).
 iknows(ki).
 iknows(inv(ki)).
 iknows(i).
 state_alice(a,b,ka,kb,0,dummy_nonce,dummy_nonce,dummy_sk,set_64,3).
 state_bob(b,a,ka,kb,1,dummy_nonce,dummy_nonce,dummy_sk,set_73,4).
 state_alice(a,i,ka,ki,0,dummy_nonce,dummy_nonce,dummy_sk,set_77,6).
 state_bob(b,i,ki,kb,1,dummy_nonce,dummy_nonce,dummy_sk,set_81,10)


section rules:

step step_0 (A,B,Ka,Kb,Dummy_Na,Nb,Kab,Dummy_Set_19,SID,Na) :=
 state_alice(A,B,Ka,Kb,0,Dummy_Na,Nb,Kab,Dummy_Set_19,SID).
 iknows(start)
=[exists Na]=>
 state_alice(A,B,Ka,Kb,2,Na,Nb,Kab,Dummy_Set_19,SID).
 iknows(crypt(Kb,Dummy_Na)).
 secret(Na,na,Dummy_Set_19).
 witness(A,B,bob_alice_na,Na).
 contains(A,Dummy_Set_19).
 contains(B,Dummy_Set_19)

step step_1 (A,B,Ka,Kb,Na,Nb,Dummy_Kab,Set_19,SID,Kab) :=
 state_alice(A,B,Ka,Kb,2,Na,Nb,Dummy_Kab,Set_19,SID).
 iknows(crypt(inv(Kb),pair(Na,Kab)))
 =>
 state_alice(A,B,Ka,Kb,4,Na,Nb,Kab,Set_19,SID).
 iknows(crypt(Kb,Kab))

step step_2 (B,A,Ka,Kb,Dummy_Na,Nb,Dummy_Kab,Dummy_Set_38,SID,Na,Kab) :=
 state_bob(B,A,Ka,Kb,1,Dummy_Na,Nb,Dummy_Kab,Dummy_Set_38,SID).
 iknows(crypt(Kb,Na))
=[exists Kab]=>
 state_bob(B,A,Ka,Kb,3,Na,Nb,Kab,Dummy_Set_38,SID).
 iknows(crypt(inv(Kb),pair(Na,Kab))).
 contains(A,Dummy_Set_38).
 contains(B,Dummy_Set_38)

step step_3 (B,A,Ka,Kb,Na,Nb,Kab,Set_38,SID) :=
 state_bob(B,A,Ka,Kb,3,Na,Nb,Kab,Set_38,SID).
 iknows(crypt(Kb,Kab))
 =>
 state_bob(B,A,Ka,Kb,5,Na,Nb,Kab,Set_38,SID).
 request(B,A,bob_alice_na,Na,Kab,SID)


section properties:

property secrecy_of_na (MGoal,ASGoal) :=
 [] ((secret(MGoal,na,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_kab (MGoal,ASGoal) :=
 [] ((secret(MGoal,kab,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_bob_alice_na (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,bob_alice_na,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,bob_alice_na,MGoal))
     /\ ((request(A1Goal,A2Goal,bob_alice_na,MGoal,SID1)
           /\ request(A1Goal,A2Goal,bob_alice_na,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_na (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,na,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_kab (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,kab,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_bob_alice_na (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,bob_alice_na,MGoal,SID) &
 not(witness(A2Goal,A1Goal,bob_alice_na,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_bob_alice_na (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,bob_alice_na,MGoal,SID1).
 request(A1Goal,A2Goal,bob_alice_na,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


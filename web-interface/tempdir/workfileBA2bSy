role alice (
	A,B: agent,
	SND,RCV: channel(dy),
	Kab: symmetric_key,
	Succ: hash_func
) played_by A def=
	local
		Na,Nb,N1b: text,
		K1ab: symmetric_key,
		State: nat
	init
		State := 0
	transition
		1.	State = 0 /\ RCV(start) =|>
				State' := 2 /\	Na' := new() /\ SND(A.{Na'}_Kab)
		2.	State = 2 /\ RCV({Succ(Na).Nb'}_Kab) =|>
				State' := 4 /\	SND({Succ(Nb')}_Kab) /\ witness(A,B,bob_alice_nb,Nb')
		3.	State = 4 /\ RCV({K1ab'.N1b'.Na}_Kab) =|>
				State' := 6 /\	request(A,B,alice_bob_na,Na) /\
				request(A,B,alice_bob_k1ab,K1ab')
end role
role bob (
	A,B: agent,
	SND,RCV: channel(dy),
	Kab: symmetric_key,
	Succ: hash_func
) played_by B def=
	local
		Na,Nb,N1b: text,
		K1ab: symmetric_key,
		State: nat
	init
		State := 1
	transition
		1.	State = 1 /\ RCV(A.{Na'}_Kab) =|>
				State' := 3 /\	Nb' := new() /\ SND({Succ(Na').Nb'}_Kab)
		2.	State = 3 /\ RCV({Succ(Nb)}_Kab) =|>
				State' := 5 /\	K1ab' := new() /\ N1b' := new() /\
				SND({K1ab'.N1b'.Na}_Kab) /\
				secret(K1ab',k1ab,{A,B}) /\ secret(N1b',n1b,{A,B}) /\
				request(B,A,bob_alice_nb,Nb) /\ witness(B,A,alice_bob_na,Na) /\
				witness(B,A,alice_bob_k1ab,K1ab')
end role
role session (
	A,B: agent,
	Kab: symmetric_key,
	Succ: hash_func
) def=
	local
		SND_A,RCV_A,SND_B,RCV_B: channel(dy)
	composition
		alice(A,B,SND_A,RCV_A,Kab,Succ) /\ bob(A,B,SND_B,RCV_B,Kab,Succ)
end role
role environment() def=
	const
		a,b: agent,
		kab: symmetric_key,
		succ: hash_func,
		alice_bob_na,bob_alice_nb,k1ab,n1b: protocol_id
	
	intruder_knowledge = {a,b,kai,kib,succ}


	composition
		session(a,b,kab,succ) /\ session(a,b,kab,succ) /\
		session(a,i,kai,succ) /\ session(i,b,kib,succ)

end role
goal
	secrecy_of k1ab, n1b
	authentication_on alice_bob_na, bob_alice_nb, alice_bob_k1ab
end goal
environment()
 
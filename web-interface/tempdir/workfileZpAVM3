%% PROTOCOL: NSPK: Needham-Schroeder Public-Key Protocol
%% VARIANT: original version (of 1978) without key server
%% PURPOSE: Two-party mutual autentication
%% ALICE_BOB:
%% 1. A  - {Na.A}_Kb ----> B
%% 2. A  B
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% définition du rôle alice, initiant le protocole
role alice (A,S : agent,
	    Ka,Ks : public_key,
		Login : text,
		Info : text,
		H : hash_func,
	    SND,RCV : channel(dy))

played_by A def=

	local State : nat,
		U,V : message,
		Na,Ns : text,
		Refuse,Validation : text

init State :=0

transition



tryInscription. 	State = 0 /\ RCV(start)  =|>
						State':=1
						/\ Na' :=new()
						/\ U' := H(A.S.Login.Info.Na') 
						/\ SND({{A.S.Login.Info.Na'.U'}_inv(Ka)}_Ks)
						/\ secret(Login.Info,nba,{A,S})
						/\ witness(A,S,serveur_alice_nb,Na') % auth bob_alice (2)

inscription_Ok. 	State = 1/\ RCV({{S.Validation'.Ns'.V'}_inv(Ks)}_Ka) =|> 
						State' := 2
						/\ request(A,S,alice_serveur_ns,Na)


stillIndentified. 	State = 1/\ RCV({{S.Ns'.V'.Refuse'}_inv(Ks)}_Ka) =|> 
						State' := 3
						/\ request(A,S,alice_serveur_ns,Na)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% role serveur à écrire

role serveur (A,S : agent,
	    Ka,Ks : public_key,
		H : hash_func,
		KeyComm : (text) set,
		NonceMap : (text) set,
	    SND,RCV:channel(dy))

played_by S def=

	local State : nat,
	X,Y : message,
	Na,Ns : text,
	Validation,Refuse : text,
	Login,Info : text

init State :=0

transition

inscriptionAccepted. 	State = 0 /\ RCV({{A.S.Login'.Info'.Na'.X'}_inv(Ka)}_Ks) /\ not(in(Login',KeyComm)) /\ not(in(Na',NonceMap))=|>
							State':=1 
							/\ Ns':=new()
							/\ Validation':=new()
							/\ Y':=H(A.S.Validation'.Ns')
							/\ SND({{A.S.Validation'.Ns'.Y'}_inv(Ks)}_Ka) 
							/\ KeyComm' := cons(Login',KeyComm)
							/\ request(S,A,serveur_alice_nb,Na')
							/\ witness(S,A,alice_serveur_ns,Ns')

serveurRefuse. 		State = 0 /\ RCV({{A.S.Login'.Info'.Na'.X'}_inv(Ka)}_Ks) /\ in(Login',KeyComm) /\ not(in(Na',NonceMap))=|>
							State':=1
							/\ Ns':=new()
							/\ Refuse':=new()
							/\ Y':=H(A.S.Refuse'.Ns')
							/\ SND({{A.S.Ns'.Refuse'.Y'}_inv(Ks)}_Ka) 
							/\ request(S,A,serveur_alice_nb,Na')
							/\ witness(S,A,alice_serveur_ns,Ns')


end role


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% définition du rôle caractérisant une session
role session(A,S : agent, Ka,Ks : public_key,Login : text,Info : text, H : hash_func,KeyMapS : (text) set,NonceMap : (text) set) def=

	local SA,RA,SS,RS : channel(dy)

	composition

	alice(A,S,Ka,Ks,Login,Info,H,SA,RA)
	/\ serveur(A,S,Ka,Ks,H,KeyMapS,NonceMap,SS,RS)
	

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% définition du rôle caractérisant le scenario à exécuter
role environment() def=

	local KeyMapS,KeyMapI,NonceMap : (text) set

	const agentA, agentS : agent,
		pKA,pKS,pKI : public_key,
		nba : protocol_id,
		loginAS,loginAI,loginIS : text,
		infoAS,infoAI,infoIS : text,
		h : hash_func,
		serveur_alice_nb,alice_serveur_ns : protocol_id
		
	init KeyMapS := {}
		/\ KeyMapI := {}
		/\ NonceMap := {}

	intruder_knowledge = { agentA, agentS, pKA, pKS, pKI, inv(pKI)}

	composition

		session(agentA,agentS,pKA,pKS,loginAS,infoAS,h,KeyMapS,NonceMap)
		/\ session(agentA,agentS,pKA,pKS,loginAS,infoAS,h,KeyMapS,NonceMap)
		/\session(agentA,i,pKA,pKI,loginAI,infoAI,h,KeyMapI,NonceMap)
		/\session(i,agentS,pKI,pKS,loginIS,infoIS,h,KeyMapS,NonceMap)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% pas de section goal ici (donc pas de propriété à vérifier)
goal

	authentication_on serveur_alice_nb
	authentication_on alice_serveur_ns
	secrecy_of nba

end goal


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% lancement du rôle principal
environment()

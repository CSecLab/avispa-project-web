role alice (A,B:agent,
	    K:symmetric_key,
	    Hash: hash_func,
	    SND,RCV : channel(dy))
played_by A 
def=
local State:nat, Na,Nb:text, K1:message
init State:=0
transition
	1. State = 0 /\ RCV(start) =|>
	   State' := 2 /\ Na':=new() /\ SND({Na'}_K)
	2. State = 2 /\ RCV({Nb'}_K) =|>
	   State' := 4 /\ K1':=Hash(Na.Nb') /\ SND({Nb'}_K1')
end role

role bob (A,B:agent,
	    K:symmetric_key,
	    Hash: hash_func,
	    SND,RCV : channel(dy))
played_by B def=
local State:nat, Na,Nb:text,K1:message
	
init State:=1

transition
	1. State = 1 /\ RCV({Na'}_K) =\>
	   State' := 3 /\ Nb':=new() /\ SND({Nb'}_K) /\ K1':=Hash(Na',Nb)
	2. State = 3 /\ RCV({Nb}_K1) =|>
	   State := 5
end role

role session(A,B:agent,
	     K:symmetric_key,
	     Hash:hash_func)
def=
local SA,RA,SB,RB:channel(dy)
composition
	alice(A,B,K,Hash,SA,RA) /\ bob(B,A,K,Hash,SB,RB) 
end role

role environment()
def=
const 	a,b :agent,
	k1:protocol_id,
	kab,kib,kai :symmetric_key,
	h: hash_func

intruder_knowledge = {a,b,h,kai,kib}
composition 
	session(a,b,kab,h) /\ session(i,b,kib,h) /\ session(a,i,kai,h)
end role

goal
 secrecy_of k1
 authentication_on k1
end goal

environment()
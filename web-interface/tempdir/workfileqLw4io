role alice (A, B: agent,
K : symmetric_key,
Hash: hash_func,
SND_BA, RCV_BA: channel(dy))
played_by A
def=
local State : nat,
Na, Ns : text,
Ka : symmetric_key,

init State := 0
transition
1. State = 0 /\ RCV_BA(start) =|>
State’:= 2 /\ Na’ := new() /\
/\ SND_BA(A.B.Na.Hash(xor(xor(Ka, Na), B), Na))
2. State = 2 /\ RCV_BA(A.B.Ns.Nb. Hash(xor(Ka, Ns)).xor(Hash(Ka.Ns), Hash(Rc.Ra).Hash(Kb.Ns))) /\ request(A,B,alice_bob_na,Na)
end role

role bob (A, B: agent,
K : symmetric_key,
Hash: hash_func,
SND_AB, RCV_AB, SND_SB, RCV_SB: channel(dy))
played_by B
def=
local State : nat,
Na, Nb : text,
Kb : symmetric_key

init State := 1
transition
1. State = 1 /\ RCV_AB(A.B.Na.Hash(xor(xor(Ka, Na), B), Na)) =|>
State’:= 3 /\ Nb’ := new() /\ SND_SB(A.B.Na.Nb.Hash(xor(xor(Kb, Nb), Nb)))
/\ witness(B,A,alice_bob_na,Na’)
end role

role session(A, B : agent,
Ka, Kb : symmetric_key)
def=
local
SBA, RBA,
SAB, RAB : channel (dy)
composition
alice (A, B, Ka, SBA, RBA)
/\ bob (A, B, Kb, SAB, RAB)
end role

role environment()
def=
const a, b,: agent,
ka, kb, ki : symmetric_key,
alice_bob_na, k: protocol_id
intruder_knowledge = {a, b, ki}

composition
session(a, b,ka,kb)
/\ session(a, i,ka,ki)
/\ session(i, b,ki,kb)
end role

goal
secrecy_of k
authentication_on alice_bob_na
end goal

environment()

 
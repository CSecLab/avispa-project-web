role alice (  A,B : agent,
              P1  : public_key,  
              H   : hash_func,
          SND,RCV : channel(dy) )
played_by A
def=
   local  State   : nat,
          S1      : text,
          Dlist   : text,
          Clist   : text,
          %P0     : public_key,  
          %P1     : public_key,  
          MUL     : hash_func

const alice_bob_na, bob_alice_nb : protocol_id

init State := 0
transition
1. State   = 0 /\ RCV(start) =|>
   State' := 2 /\ Dlist':= new() % list
               /\ S1' := H(Dlist') %signed
               /\ Clist' := {S1'}_P1 % encrypted list
               /\ SND(Clist')         %send to conservator
               /\ witness(A,B,bob_alice_nb,S1')
end role 

role bob (    A,B : agent,
              P1  : public_key,  
               H  : hash_func,
         SND, RCV : channel(dy))
played_by B  
% as conservator
def=
   local  State   : nat,
          S0,S1   : text,
          Clist   : text,
          %P0     : public_key,  %P0 testator's public key 
          %P1     : public_key,  %P1 conservator's public key 
          MUL     : hash_func

init State := 1
transition
1. State   = 1 /\ RCV(Clist') =|>
   State' := 3 /\ request(B,A,bob_alice_nb,S1)
end role

role session (A,  B : agent,
             P1     : public_key,
              H     : hash_func )
def=  
   local  SA, SB,RA, RB: channel (dy)
composition
       alice(A,B,P1,H,SA, RA)
       /\bob(A,B,P1,H,SB, RB)
end role

role environment()
def=
   const a, b ,i       : agent,
         p0, p1, ki    : public_key,
         h             : hash_func,
         clist         : text,
         bob_alice_na, 
         alice_bob_nb,
         na, nb        : protocol_id
intruder_knowledge = {a, b, i, h, clist}

composition
    session(a,b,p1,clist)
 /\ session(a,i,p1,clist)
end role

goal
secrecy_of na, nb
authentication_on alice_bob_nb
authentication_on bob_alice_na
end goal

environment()

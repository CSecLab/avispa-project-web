%%  HLPSL:
role sgas_Init (EV,SGS : agent,
				PW : symmetric_key,
				Hsh : hash_func,
				G,P : text,
				Snd,Rcv : channel(dy))
played_by EV
def=
  local State : nat, 
	EVr, EVr2 :text,
	Salt : protocol_id,
	EVg, SGSg, X, Ver, U, S0, K0, K, M : message,
	EVg2, SGSg2, X2, Ver2, U2, S02, K02, K2, M2, PW2, Salt2, PW3 : message

  const sec_init_M, sec_init_K : protocol_id,
		sec_init_M2, sec_init_K2 : protocol_id

  init  State := 0

  transition

  1. State = 0  /\ Rcv(start) =|>
     State':= 1 /\ EVr' := new()
				/\ EVg' := exp(G,EVr')
                /\ Snd(EV.EVg')  

  2. State = 1  /\ Rcv(Salt'.{SGSg'}_(exp(G,Hsh(Salt'.Hsh(EV.PW))))) =|> 
     State':= 2 /\ K0':= Hsh(P.G)				% k= hash(N,g)
				/\ U':= Hsh(EVg.SGSg')				% u= hash(A,B)
				/\ X':= Hsh(Salt'.PW)				% x= hash(salt, pw)
				/\ Ver' := exp(G,X') 				% ver = g^x
				/\ S0' := xor(SGSg',Hsh(K0'.Ver'))		% g^b + k.g^x - k.g^x = g^b
                /\ K' := Hsh((exp(S0',EVr)).(exp(exp(S0',U'),X')))				% K = hash(g^ab , g^bux)
                /\ M' := Hsh((xor(Hsh(P),Hsh(G))).(Hsh(xor(EV,PW))).Salt'.EVg.SGSg'.K')		% M = hash(M1,M2,salt,A,B,K)
				/\ PW2' := Hsh(EVg.SGSg.K)
                /\ Snd(M')  
                /\ witness(EV,SGS,k1,K')
                /\ secret(K',sec_init_K,{EV,SGS})

  3. State = 2  /\ Rcv(Hsh(PW2)) =|> 
    State' := 3 /\ request(EV,SGS,k2,K)
				/\ EVr2' := new()
				/\ EVg2' := exp(G,EVr2')
                /\ Snd(EV.EVg2')  

  4. State = 3  /\ Rcv(Salt2'.{SGSg2'}_(exp(G,Hsh(Salt2'.Hsh(EV.PW2))))) =|> 
     State':= 4 /\ U2':= Hsh(EVg2.SGSg2')				% u= hash(A,B)
				/\ X2':= Hsh(Salt2'.PW2)				% x= hash(salt, pw)
				/\ Ver2' := exp(G,X2') 				% ver = g^x
				/\ S02' := xor(SGSg2',Hsh(K0.Ver2'))		% g^b + k.g^x - k.g^x = g^b
                /\ K2' := Hsh((exp(S02',EVr2)).(exp(exp(S02',U2'),X2')))				% K = hash(g^ab , g^bux)
                /\ M2' := Hsh((xor(Hsh(P),Hsh(G))).(Hsh(xor(EV,PW2))).Salt2'.EVg2.SGSg2'.K2')		% M = hash(M1,M2,salt,A,B,K)
				/\ PW3' := Hsh(EVg2.SGSg2.K2)
                /\ Snd(M2')  
                /\ witness(EV,SGS,k12,K2')
                /\ secret(K2',sec_init_K2,{EV,SGS})

  3. State = 2  /\ Rcv(Hsh(PW3)) =|> 
    State' := 3 /\ request(EV,SGS,k2,K2)
				
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 	

role sgas_Resp (SGS, EV: agent,
				PW : symmetric_key,
				Salt : protocol_id,
				Hsh : hash_func,
				G,P : text,
				Snd, Rcv : channel(dy))
played_by SGS
def=
  local State : nat, 
	SGSr, SGSr2   : text,
	EVg, SGSg, U, X, Ver, S0, K0, K, M: message,
	EVg2, SGSg2, U2, X2, Ver2, S02, K2, M2, PW2, Salt2, PW3 : message

  const sec_resp_M, sec_resp_K : protocol_id,
		sec_resp_M2, sec_resp_K2 : protocol_id

  init  State := 0

  transition

  1. State = 0  /\ Rcv(EV.EVg') =|>		 	% A and g^a
     State':= 1 /\ K0' := Hsh(P.G)			% k = hash(N,g)
				/\ SGSr' := new()				% b = Rnd()
				/\ X' := Hsh(Salt.PW)			% x = hash(salt, pw)
				/\ Ver' := exp(G,X')			% ver = g^x
				/\ SGSg' := xor(exp(G,SGSr'),Hsh(K0'.Ver'))	% B = g^b + k.g^x
				/\ U' := Hsh(EVg'.SGSg')	 	       	% u = hash(A,B)
				/\ S0' := exp(exp(Ver',U'),SGSr')	% ((g^x)^u)^b = g^bux
                /\ K' := Hsh((exp(EVg',SGSr')).S0')			% K = hash(g^ab , g^bux)
                /\ M' := Hsh((xor(Hsh(P),Hsh(G))).(Hsh(xor(EV,PW))).Salt.EVg'.SGSg'.K')	% M = hash(M1,m2,salt,A,B,K)
				/\ Snd(Salt.{SGSg'}_(exp(G,Hsh(Salt.Hsh(EV.PW)))))	% sending salt,B
                /\ witness(SGS,EV,k2,K')
                /\ secret(K',sec_resp_K,{EV,SGS})

  2. State = 1  /\ Rcv(M) =|>		 	% A and g^a
     State':= 2 /\ PW2' := Hsh(EVg.SGSg.K)
				/\ Snd(Hsh(PW2'))
                /\ request(SGS,EV,k1,K)

  3. State = 2  /\ Rcv(EV.EVg2') =|>		 	% A and g^a
     State':= 3 /\ Salt2' := new()				% New salt = Rnd()
				/\ SGSr2' := new()				% b = Rnd()
				/\ X2' := Hsh(Salt2'.PW2)			% x = hash(salt, pw)
				/\ Ver2' := exp(G,X2')			% ver = g^x
				/\ SGSg2' := xor(exp(G,SGSr2'),Hsh(K0.Ver2'))	% B = g^b + k.g^x
				/\ U2' := Hsh(EVg2'.SGSg2')	 	       	% u = hash(A,B)
				/\ S02' := exp(exp(Ver2',U2'),SGSr2')	% ((g^x)^u)^b = g^bux
                /\ K2' := Hsh((exp(EVg2',SGSr2')).S02')			% K = hash(g^ab , g^bux)
                /\ M2' := Hsh((xor(Hsh(P),Hsh(G))).(Hsh(xor(EV,PW2))).Salt2'.EVg2'.SGSg2'.K2')	% M = hash(M1,M2,salt,A,B,K)
				/\ Snd(Salt2'.{SGSg2'}_(exp(G,Hsh(Salt2'.Hsh(EV.PW2)))))	% sending salt,B
                /\ witness(SGS,EV,k22,K2')
                /\ secret(K2',sec_resp_K2,{EV,SGS})				

  4. State = 3  /\ Rcv(M2) =|>		 	% A and g^a
     State':= 4 /\ PW3' := Hsh(EVg2.SGSg2.K2)
				/\ Snd(Hsh(PW3'))
                /\ request(SGS,EV,k12,K2)
				
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 	

role session(EV,SGS : agent,
			PW : symmetric_key,
			Salt : protocol_id,
			Hsh : hash_func,
			G,P : text)
def=

   local SndEV,RcvEV,SndSGS,RcvSGS: channel (dy)

   composition
           sgas_Init(EV,SGS,PW,Hsh,G,P,SndEV,RcvEV)  /\
           sgas_Resp(SGS,EV,PW,Salt,Hsh,G,P,SndSGS,RcvSGS)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 	

role environment()
def=

  const k1,k2,k12,k22 : protocol_id,
	ev,sgs,i: agent,
	kab,kai,kbi: symmetric_key,
	s_ab,s_ai,s_bi : protocol_id,
	hsh: hash_func,
	g,p: text
	
  intruder_knowledge = {i, kai, kbi, s_ai, s_bi}
  composition
	   session(ev,sgs,kab,s_ab,hsh,g,p)
	/\ session(ev,i,kai,s_ai,hsh,g,p)
	/\ session(sgs,i,kbi,s_bi,hsh,g,p)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 	
  
goal

    secrecy_of sec_init_M, sec_init_K, sec_resp_M, sec_resp_K
    secrecy_of sec_init_M2, sec_init_K2, sec_resp_M2, sec_resp_K2

    authentication_on k2
    authentication_on k1

    authentication_on k22
    authentication_on k12

end goal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

environment()

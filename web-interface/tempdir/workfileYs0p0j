role alice (Ui, Sj   : agent,
            SKuisj : symmetric_key,
            % H is one-way hash function
            % BH is BioHashing function
            H: hash_func,
            BH : hash_func,
            Snd, Rcv: channel(dy))
% Player by the initiator: the user Ui
played_by Ui
def=
 local State  : nat,
       RPWi, PWi, Bi, Xs, K, IDi, Q,
       Fi, Ri, Si, P, RNu, RNs, SKij:  text,
       F, Gen, Rep : hash_func
 const alice_bob_rnu,  bob_alice_rns,
       subs1, subs2, subs3, 
       subs4, subs5 : protocol_id
init  State := 0
transition
% Registration phase
 1. State = 0   /\ Rcv(start) =|>
    State' := 1 /\ Fi' := BH(H(IDi.K.PWi).Bi)
% Send the registration request message to Sj
                /\ Snd({IDi.Fi'}_SKuisj)
		/\ secret({Xs}, subs1, Sj)
                /\ secret({PWi, Bi, K}, subs2, Ui)
                /\ secret({IDi}, subs3, {Ui,Sj})
% Receive the registration acknowledgment message from Sj
 2. State = 1 /\ Rcv({P.Q.F(Xs.P).BH(H(IDi.K.PWi).Bi).
                      xor(H(IDi.Xs),BH(H(IDi.K.PWi).Bi)).
                      H.Rep}_SKuisj) =|>
% Login phase
    State' := 2 /\ Ri' := new()
                /\ RNu' := new()
                /\ secret(Ri', subs4, Ui)
% Send the login request message to Sj
                /\ Snd(F(Ri'.P).
                   xor(xor(IDi, H(F(Ri'.P).F(Ri'.Xs.P))),RNu').
                   H(IDi.xor(xor(IDi, H(F(Ri'.P).F(Ri'.Xs.P))),RNu').
                   F(Ri'.P).F(Ri'.Xs.P).H(IDi.Xs).RNu'))
% Ui has freshly generated the value RNu for Sj
                /\ witness(Ui, Sj, alice_bob_rnu, RNu')
%Authentication and session key agreement phase
% Receive the authentication request message from Sj
3. State = 2  /\ Rcv(F(Si'.P).xor(xor(H(IDi.Xs),RNs'),RNu').
                     H(F(Si'.Ri'.P).F(Ri'.Xs.P).F(Si'.P).
                     xor(xor(H(IDi.Xs),RNs'),RNu').RNu'.RNs'.
                     H(IDi.H(IDi.Xs).RNu'.RNs'.F(Ri'.Xs.P).
                     F(Si'.P))) ) =|> 
% Ui's acceptance of the value RNs generated for Ui by Sj 
State' := 3   /\ request(Sj, Ui, bob_alice_rns, RNs')                
end role


%%%%%%%%%%%%%%%%%%%%% 
role  bob (Ui, Sj   : agent,
            SKuisj : symmetric_key,
            % H is one-way hash function
            % BH is BioHashing function
            H: hash_func,
            BH : hash_func,
            Snd, Rcv: channel(dy))
% Player by the responder: the server Sj
played_by Sj
def=
 local State  : nat,
       RPWi, PWi, Bi, Xs, K, IDi, Q,
       Fi, Ri, Si, P, RNu, RNs, SKij:  text,
       F, Gen, Rep : hash_func
 const alice_bob_rnu,  bob_alice_rns,
       subs1, subs2, subs3, 
       subs4, subs5 : protocol_id
init  State := 0
 transition
% Registration phase
% Receive the registration request message from Ui
1. State  = 0 /\ Rcv({IDi.BH(H(IDi.K.PWi).Bi)}_SKuisj) =|>  
  State' := 1 /\ secret({Xs}, subs1, Sj)
              /\ secret({PWi, Bi, K}, subs2, Ui)
              /\ secret({IDi}, subs3, {Ui,Sj})
% Send the registration acknowledgment message to Ui
              /\ Snd({P.Q.F(Xs.P).BH(H(IDi.K.PWi).Bi).
                      xor(H(IDi.Xs),BH(H(IDi.K.PWi).Bi)).
                      H.Rep}_SKuisj)
% Login phase
% Receive the login request message from Ui
2. State = 1 /\ Rcv(F(Ri'.P).
                   xor(xor(IDi, H(F(Ri'.P).F(Ri'.Xs.P))),RNu').
                   H(IDi.xor(xor(IDi, H(F(Ri'.P).F(Ri'.Xs.P))),RNu').
                   F(Ri'.P).F(Ri'.Xs.P).H(IDi.Xs).RNu')) =|> 
% Authentication and session key agreement phase
 State' := 2 /\ Si' := new()
             /\ RNs':= new()
             /\ secret(Si', subs5, Sj)
% Send the authentication request message to Ui
             /\ Snd(F(Si'.P).xor(xor(H(IDi.Xs),RNs'),RNu').
                     H(F(Si'.Ri'.P).F(Ri'.Xs.P).F(Si'.P).
                     xor(xor(H(IDi.Xs),RNs'),RNu').RNu'.RNs'.
                     H(IDi.H(IDi.Xs).RNu'.RNs'.F(Ri'.Xs.P).
                     F(Si'.P))))
% Sj has freshly generated the value RNs for Ui
             /\ witness(Sj, Ui, bob_alice_rns, RNs')
% Sj's acceptance of the value RNu generated for Sj by Ui 
            /\ request(Ui, Sj, alice_bob_rnu, RNu')
end role

%%%%%%%%%%%%%%%%%%%%%%%%%

role session(Ui, Sj: agent,
             SKuisj : symmetric_key,
             H : hash_func,
             BH : hash_func)
def=
  local  SI, SJ, RI, RJ: channel (dy)
  composition
            alice (Ui, Sj, SKuisj, H, BH, SI, RI)
        /\  bob   (Ui, Sj, SKuisj, H, BH, SJ, RJ)
end role 

%%%%%%%%%%%%%%%%%%%%%%%%%%%


role environment()
def=
  const ui, sj: agent,
        skuisj : symmetric_key,
        h   : hash_func,
        bh  : hash_func,
        pwi, bi, xs, k, idi, rnu, rns:  text, 
        alice_bob_rnu,  bob_alice_rns,
        subs1, subs2, subs3, subs4, subs5 : protocol_id
  intruder_knowledge = {ui, sj, h, bh}
  composition
	   session(ui, sj, skuisj, h, bh) 
	/\ session(ui, sj, skuisj, h, bh) 
end role

goal
  secrecy_of subs1
  secrecy_of subs2
  secrecy_of subs3
  secrecy_of subs4
  secrecy_of subs5

  authentication_on alice_bob_rnu 
  authentication_on bob_alice_rns   
end goal
environment()


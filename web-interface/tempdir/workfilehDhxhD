%role gateway (GW, KDC : agent,
%Pgw, Pkdc : public_key,
%H1, H2 : hash_func,
%IDgw, P, Kgw, Gr, E : text,
%N : message,
%SND, RCV : channel(dy))
%played_by GW
%def=
%local State : nat,
%Kgw : text,
%Gr : text,
%E : text,
%Pkdc : public_key,
%M : message,
%N : message
%init State := 0
%transition
%0. State = 0 /\ RCV(start) =|>
%State':= 1 /\ Kgw':= new()
%/\ E':= (Kgw'.P)
%/\ N':= ({E'}_IDgw)
%/\ SND({N'}_Pkdc)
%/\ secret(P,EC,{GW,KDC})
%/\ secret(Kgw',SK,{GW})
%2. State = 2 /\ RCV(M')=|>
%state':= 3
%/\secret(M',GK,{GW,KDC})
%end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role key_server (KDC, GW : agent,
Pgw, Pkdc : public_key,
H1, H2 : hash_func,
P, IDgw : text,
N : message,
SND, RCV : channel(dy))
played_by KDC
def=
local State : nat,
Kgw : text,
Pgw : public_key,
M, M1 : message,
H1, H2 : hash_func
init State := 1
transition
1. State = 1 /\ RCV(N') =|>
State':= 2 /\ M1' := H1(Kgw'.P, IDgw)
/\ M' :=({M1'}_inv(Pkdc))
/\ SND({M'})
/\ secret (M',Dg,{GW, KDC})
end role
role session(GW, KDC : agent,
Pgw, Pkdc : public_key)
def=
local SGK, RGK,
SKG, RKG : channel (dy)
composition
gateway(GW, KDC, Pgw, Pkdc, SGK, RGK)
/\ bob (GW, KDC, Pgw, Pkdc, SKG, RKG)
end role
role environment()
def=
const GW, KDC :agent,
Pgw, Pkdc : public_key,
H1, H2 : hash_func,
P, IDgw : text,
N, M, M1 : message
intruder_knowledge = {GW, KDC, Pgw, Pkdc, IDgw}
composition
goal
secrecy_of M
end goal
environment()
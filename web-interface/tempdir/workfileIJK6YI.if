%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileIJK6YI

section signature:

state_bob: agent * agent * agent * agent * symmetric_key * hash_func * nat * text * text * message * set(agent) * nat -> fact
state_relay: agent * agent * agent * agent * symmetric_key * hash_func * nat * text * text * message * nat -> fact
state_gateway: agent * agent * agent * agent * symmetric_key * hash_func * nat * text * text * message * nat -> fact
state_alice: agent * agent * agent * agent * symmetric_key * hash_func * nat * text * text * message * nat -> fact


section types:

k1, bob_alice_nb: protocol_id
ASGoal, Set_69, Dummy_Set_69: set(agent)
set_136, set_132, set_129, set_124, set_118: set
h, Hash: hash_func
kagbr, kagri, kairb, kagib, kigrb, K: symmetric_key
MGoal, K1, start, Dummy_K1, dummy_msg: message
Na, Nb, Dummy_Nb, Dummy_Na, dummy_nonce: text
5, State, 16, 3, 14, 12, 10, 26, 25, 24, 21, 20, 18, 15, 13, 11, 9, 4, 8, 2, 6, 1, SID, 0, Dummy_State, SID2, SID1: nat
a, b, g, r, A, B, G, R, i, A2Goal, A1Goal: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(g).
 iknows(h).
 iknows(kagri).
 iknows(kairb).
 iknows(kagib).
 iknows(kigrb).
 iknows(i).
 state_alice(a,b,g,r,kagbr,h,0,dummy_nonce,dummy_nonce,dummy_msg,3).
 state_gateway(g,a,b,r,kagbr,h,10,dummy_nonce,dummy_nonce,dummy_msg,4).
 state_relay(r,a,b,g,kagbr,h,10,dummy_nonce,dummy_nonce,dummy_msg,5).
 state_bob(b,a,g,r,kagbr,h,1,dummy_nonce,dummy_nonce,dummy_msg,set_118,6).
 state_alice(a,g,r,i,kagri,h,0,dummy_nonce,dummy_nonce,dummy_msg,8).
 state_gateway(r,a,g,i,kagri,h,10,dummy_nonce,dummy_nonce,dummy_msg,9).
 state_bob(g,a,r,i,kagri,h,1,dummy_nonce,dummy_nonce,dummy_msg,set_124,11).
 state_alice(a,i,r,b,kairb,h,0,dummy_nonce,dummy_nonce,dummy_msg,13).
 state_gateway(r,a,i,b,kairb,h,10,dummy_nonce,dummy_nonce,dummy_msg,14).
 state_relay(b,a,i,r,kairb,h,10,dummy_nonce,dummy_nonce,dummy_msg,15).
 state_alice(a,g,i,b,kagib,h,0,dummy_nonce,dummy_nonce,dummy_msg,18).
 state_relay(b,a,g,i,kagib,h,10,dummy_nonce,dummy_nonce,dummy_msg,20).
 state_bob(g,a,i,b,kagib,h,1,dummy_nonce,dummy_nonce,dummy_msg,set_132,21).
 state_gateway(r,i,g,b,kigrb,h,10,dummy_nonce,dummy_nonce,dummy_msg,24).
 state_relay(b,i,g,r,kigrb,h,10,dummy_nonce,dummy_nonce,dummy_msg,25).
 state_bob(g,i,r,b,kigrb,h,1,dummy_nonce,dummy_nonce,dummy_msg,set_136,26)


section rules:

step step_0 (A,B,G,R,K,Hash,Dummy_Na,Nb,K1,SID,Na) :=
 state_alice(A,B,G,R,K,Hash,0,Dummy_Na,Nb,K1,SID).
 iknows(start)
=[exists Na]=>
 state_alice(A,B,G,R,K,Hash,2,Na,Nb,K1,SID).
 iknows(scrypt(K,Na))

step step_1 (A,B,G,R,K,Hash,Na,Dummy_Nb,Dummy_K1,SID,Nb) :=
 state_alice(A,B,G,R,K,Hash,2,Na,Dummy_Nb,Dummy_K1,SID).
 iknows(scrypt(K,Nb))
 =>
 state_alice(A,B,G,R,K,Hash,4,Na,Nb,apply(Hash,pair(Na,Nb)),SID).
 iknows(scrypt(Dummy_K1,Nb)).
 witness(A,B,bob_alice_nb,Nb)

step step_2 (G,A,B,R,K,Hash,Dummy_Na,Nb,K1,SID,Na) :=
 state_gateway(G,A,B,R,K,Hash,10,Dummy_Na,Nb,K1,SID).
 iknows(scrypt(K,Na))
 =>
 state_gateway(G,A,B,R,K,Hash,12,Na,Nb,K1,SID).
 iknows(scrypt(K,Na))

step step_3 (G,A,B,R,K,Hash,Na,Dummy_Nb,K1,SID,Nb) :=
 state_gateway(G,A,B,R,K,Hash,12,Na,Dummy_Nb,K1,SID).
 iknows(scrypt(K,Nb))
 =>
 state_gateway(G,A,B,R,K,Hash,14,Na,Nb,K1,SID).
 iknows(scrypt(K,Nb))

step step_4 (G,A,B,R,K,Hash,Na,Dummy_Nb,K1,SID,Nb) :=
 state_gateway(G,A,B,R,K,Hash,14,Na,Dummy_Nb,K1,SID).
 iknows(scrypt(K1,Nb))
 =>
 state_gateway(G,A,B,R,K,Hash,16,Na,Nb,K1,SID).
 iknows(scrypt(K1,Nb))

step step_5 (R,A,B,G,K,Hash,Dummy_Na,Nb,K1,SID,Na) :=
 state_relay(R,A,B,G,K,Hash,10,Dummy_Na,Nb,K1,SID).
 iknows(scrypt(K,Na))
 =>
 state_relay(R,A,B,G,K,Hash,12,Na,Nb,K1,SID).
 iknows(scrypt(K,Na))

step step_6 (R,A,B,G,K,Hash,Na,Dummy_Nb,K1,SID,Nb) :=
 state_relay(R,A,B,G,K,Hash,12,Na,Dummy_Nb,K1,SID).
 iknows(scrypt(K,Nb))
 =>
 state_relay(R,A,B,G,K,Hash,14,Na,Nb,K1,SID).
 iknows(scrypt(K,Nb))

step step_7 (R,A,B,G,K,Hash,Na,Dummy_Nb,K1,SID,Nb) :=
 state_relay(R,A,B,G,K,Hash,14,Na,Dummy_Nb,K1,SID).
 iknows(scrypt(K1,Nb))
 =>
 state_relay(R,A,B,G,K,Hash,16,Na,Nb,K1,SID).
 iknows(scrypt(K1,Nb))

step step_8 (B,A,G,R,K,Hash,Dummy_Na,Dummy_Nb,Dummy_K1,Dummy_Set_69,SID,Na,Nb) :=
 state_bob(B,A,G,R,K,Hash,1,Dummy_Na,Dummy_Nb,Dummy_K1,Dummy_Set_69,SID).
 iknows(scrypt(K,Na))
=[exists Nb]=>
 state_bob(B,A,G,R,K,Hash,3,Na,Nb,apply(Hash,pair(Na,Nb)),Dummy_Set_69,SID).
 iknows(scrypt(K,Nb)).
 secret(Dummy_K1,k1,Dummy_Set_69).
 contains(A,Dummy_Set_69).
 contains(B,Dummy_Set_69)

step step_9 (B,A,G,R,K,Hash,Na,Nb,K1,Set_69,SID) :=
 state_bob(B,A,G,R,K,Hash,3,Na,Nb,K1,Set_69,SID).
 iknows(scrypt(K1,Nb))
 =>
 state_bob(B,A,G,R,K,Hash,5,Na,Nb,K1,Set_69,SID).
 request(B,A,bob_alice_nb,Nb,SID)


section properties:

property secrecy_of_k1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,k1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_bob_alice_nb (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,bob_alice_nb,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,bob_alice_nb,MGoal))
     /\ ((request(A1Goal,A2Goal,bob_alice_nb,MGoal,SID1)
           /\ request(A1Goal,A2Goal,bob_alice_nb,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_k1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,k1,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_bob_alice_nb (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,bob_alice_nb,MGoal,SID) &
 not(witness(A2Goal,A1Goal,bob_alice_nb,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_bob_alice_nb (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,bob_alice_nb,MGoal,SID1).
 request(A1Goal,A2Goal,bob_alice_nb,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


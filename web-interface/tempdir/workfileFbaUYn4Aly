role role_A(A:agent,B:agent,K:symmetric_key,SND,RCV:channel(dy))
played_by A
def=
	local
		State:nat,Na:text,Nb:text,Ci:text,Ri:text,C2i:text,R2i:text
	init
		State := 0
	transition
		1. State=0 /\ RCV(start) =|> State':=1 /\ Na':=new() /\ SND(Na')
		2. State=1 /\ RCV(Nb') =|> State':=2 /\ Ci':=new() /\ SND(Ci')
		4. State=2 /\ RCV(Ri') =|> State':=3
		5. State=3 /\ RCV(C2i') =|> State':=4 /\ R2i':=new() /\ witness(A,B,auth_1,R2i') /\ SND(R2i')
end role

role role_B(A:agent,B:agent,K:symmetric_key,SND,RCV:channel(dy))
played_by B
def=
	local
		State:nat,Na:text,Nb:text,Ci:text,Ri:text,C2i:text,R2i:text
	init
		State := 0
	transition
		1. State=0 /\ RCV(Na') =|> State':=1 /\ Nb':=new() /\ SND(Nb')
		3. State=1 /\ RCV(Ci') =|> State':=2 /\ Ri':=new() /\ witness(B,A,auth_2,Ri') /\ SND(Ri') /\ C2i':=new() /\ SND(C2i')
		6. State=2 /\ RCV(R2i') =|> State':=3 /\ request(B,A,auth_1,R2i')
end role

role session1(A:agent,B:agent,K:symmetric_key)
def=
	local
		SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_B(A,B,K,SND2,RCV2) /\ role_A(A,B,K,SND1,RCV1)
end role

role environment()
def=
	const
		hash_0:function,bob:agent,alice:agent,key1:symmetric_key,auth_1:protocol_id,auth_2:protocol_id
	intruder_knowledge = {}
	composition
		session1(alice,bob,key1)
end role

goal
	authentication_on auth_1
	authentication_on auth_2
end goal

environment()

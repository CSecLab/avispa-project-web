role role_R(R:agent,IdN:text,SND,RCV:channel(dy))
played_by R
def=
	local
		State:nat,Ts:text,S:text,Te:text,Ker:symmetric_key,Krn:symmetric_key
	init
		State := 0
	transition
		1. State=0 /\ RCV({S'.Ts'.Te'}_Ker') =|> State':=1
		4. State=1 /\ RCV({{IdN}_Krn'}_Ker) =|> State':=2
end role

role role_E(E:agent,S:text,SND,RCV:channel(dy))
played_by E
def=
	local
		State:nat,Te:text,Ts:text,Ker:symmetric_key,IdN:text,Krn:symmetric_key
	init
		State := 0
	transition
		1. State=0 /\ RCV(start) =|> State':=1 /\ Ker':=new() /\ Te':=new() /\ Ts':=new() /\ SND({S.Ts'.Te'}_Ker') /\ SND(S.Ts'.Te')
		3. State=1 /\ RCV({IdN'}_Krn') =|> State':=2 /\ SND({{IdN'}_Krn'}_Ker)
end role

role role_N(N:agent,IdN:text,SND,RCV:channel(dy))
played_by N
def=
	local
		State:nat,Te:text,S:text,Ts:text,Krn:symmetric_key
	init
		State := 0
	transition
		2. State=0 /\ RCV(S'.Ts'.Te') =|> State':=1 /\ Krn':=new() /\ SND({IdN}_Krn')
end role

role session1(S:text,E:agent,R:agent,N:agent,IdN:text)
def=
	local
		SND3,RCV3,SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_N(N,IdN,SND3,RCV3) /\ role_E(E,S,SND2,RCV2) /\ role_R(R,IdN,SND1,RCV1)
end role

role environment()
def=
	const
		hash_0:function,r:agent,s:text,e:agent,n:agent,const_1:text,auth_1:protocol_id
	intruder_knowledge = {}
	composition
		session1(s,e,r,n,const_1)
end role

goal
	authentication_on auth_1
end goal

environment()

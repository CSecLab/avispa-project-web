%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileyMQCBV

section signature:

state_server: agent * agent * hash_func * hash_func * hash_func * hash_func * symmetric_key * nat * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * nat -> fact
state_user: agent * agent * hash_func * hash_func * hash_func * hash_func * symmetric_key * nat * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * nat -> fact


section types:

user_server_tu, user_server_ru, server_user_ts, server_user_rs, pid: protocol_id
State, 3, 2, 7, 1, 6, 0, 4, SID, Dummy_State, SID2, SID1: nat
ASGoal: set(agent)
start, MGoal: message
Y, y: symmetric_key
H, Mul, Add, Conc, h, mul, add, conc: hash_func
u, s, U, S, A2Goal, A1Goal, i: agent
tu, ts, r, ruu, ru, rss, rs, IDu, IDs, ID, Fu, IMu, SIDu, Eu, Cs, PWu, X, Tu, Ts, R, Ruu, Ru, Rss, Rs, Ku, Ks, SK, Dummy_Ks, Dummy_Cs, Dummy_R, Dummy_IMu, Dummy_ID, Dummy_SK, Dummy_Ku, Dummy_Rs, Dummy_Rss, Dummy_Ts, Dummy_Ru, Cu, Dummy_Ruu, Dummy_Tu, Dummy_Cu, Dummy_Eu, Dummy_IDu, dummy_nonce, ids, id, idu, fu, imu, pwu, x: text


section inits:

initial_state init1 := 
 iknows(start).
 iknows(u).
 iknows(s).
 iknows(h).
 iknows(mul).
 iknows(add).
 iknows(conc).
 iknows(i).
 state_user(u,s,h,mul,add,conc,y,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,3).
 state_server(u,s,h,mul,add,conc,y,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,4).
 state_user(u,s,h,mul,add,conc,y,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,6).
 state_server(u,s,h,mul,add,conc,y,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,7)


section rules:

step step_0 (U,S,H,Mul,Add,Conc,Y,Dummy_IDu,IDs,ID,Fu,IMu,SIDu,Dummy_Eu,Cu,PWu,X,Tu,Ts,R,Ruu,Ru,Rss,Rs,Ku,Ks,SK,SID) :=
 state_user(U,S,H,Mul,Add,Conc,Y,0,Dummy_IDu,IDs,ID,Fu,IMu,SIDu,Dummy_Eu,Cu,PWu,X,Tu,Ts,R,Ruu,Ru,Rss,Rs,Ku,Ks,SK,SID).
 iknows(start)
 =>
 state_user(U,S,H,Mul,Add,Conc,Y,1,apply(H,Fu),IDs,ID,Fu,IMu,SIDu,apply(H,PWu),Cu,PWu,X,Tu,Ts,R,Ruu,Ru,Rss,Rs,Ku,Ks,SK,SID).
 iknows(scrypt(Y,pair(Dummy_IDu,Dummy_Eu))).
 secret(PWu,pid,U)

step step_1 (U,S,H,Mul,Add,Conc,Y,IDu,IDs,ID,Fu,IMu,SIDu,Eu,Dummy_Cu,PWu,X,Dummy_Tu,Ts,R,Dummy_Ruu,Dummy_Ru,Rss,Rs,Ku,Ks,SK,SID,Tu,Ru) :=
 state_user(U,S,H,Mul,Add,Conc,Y,1,IDu,IDs,ID,Fu,IMu,SIDu,Eu,Dummy_Cu,PWu,X,Dummy_Tu,Ts,R,Dummy_Ruu,Dummy_Ru,Rss,Rs,Ku,Ks,SK,SID).
 iknows(scrypt(Y,pair(IMu,pair(apply(Add,pair(apply(H,pair(ID,pair(X,SIDu))),apply(H,PWu))),apply(H,pair(apply(H,pair(ID,pair(X,SIDu))),IDu))))))
=[exists Tu,Ru]=>
 state_user(U,S,H,Mul,Add,Conc,Y,2,IDu,IDs,ID,Fu,IMu,SIDu,Eu,apply(H,pair(IMu,pair(apply(Mul,pair(Ru,apply(H,pair(ID,pair(X,SIDu))))),pair(apply(H,pair(ID,pair(X,SIDu))),Tu)))),PWu,X,Tu,Ts,R,apply(Mul,pair(Ru,apply(H,pair(ID,pair(X,SIDu))))),Ru,Rss,Rs,Ku,Ks,SK,SID).
 iknows(pair(IMu,pair(apply(Mul,pair(Ru,apply(H,pair(ID,pair(X,SIDu))))),pair(apply(H,pair(IMu,pair(apply(Mul,pair(Ru,apply(H,pair(ID,pair(X,SIDu))))),pair(apply(H,pair(ID,pair(X,SIDu))),Tu)))),Tu)))).
 witness(U,S,user_server_tu,Tu).
 witness(U,S,user_server_ru,Ru)

step step_2 (U,S,H,Mul,Add,Conc,Y,IDu,IDs,ID,Fu,IMu,SIDu,Eu,Cu,PWu,X,Tu,Dummy_Ts,R,Ruu,Ru,Dummy_Rss,Dummy_Rs,Dummy_Ku,Ks,Dummy_SK,SID,Ts,Rs) :=
 state_user(U,S,H,Mul,Add,Conc,Y,2,IDu,IDs,ID,Fu,IMu,SIDu,Eu,Cu,PWu,X,Tu,Dummy_Ts,R,Ruu,Ru,Dummy_Rss,Dummy_Rs,Dummy_Ku,Ks,Dummy_SK,SID).
 iknows(pair(IMu,pair(apply(Mul,pair(Rs,apply(H,pair(ID,pair(X,SIDu))))),pair(apply(H,pair(IMu,pair(apply(Mul,pair(Rs,apply(H,pair(ID,pair(X,SIDu))))),pair(apply(H,pair(ID,pair(X,SIDu))),Ts)))),Ts))))
 =>
 state_user(U,S,H,Mul,Add,Conc,Y,3,IDu,IDs,ID,Fu,IMu,SIDu,Eu,Cu,PWu,X,Tu,Ts,R,Ruu,Ru,apply(Mul,pair(Rs,apply(H,pair(ID,pair(X,SIDu))))),Rs,apply(Mul,apply(Mul,pair(Ru,apply(Mul,pair(Rs,apply(H,pair(ID,pair(X,SIDu)))))))),Ks,apply(H,pair(IMu,pair(Ruu,pair(apply(Mul,pair(Rs,apply(H,pair(ID,pair(X,SIDu))))),pair(Tu,pair(Ts,apply(Mul,apply(Mul,pair(Ru,apply(Mul,pair(Rs,apply(H,pair(ID,pair(X,SIDu)))))))))))))),SID).
 request(S,U,server_user_ts,Ts,SID).
 request(S,U,server_user_rs,Rs,SID)

step step_3 (S,U,H,Mul,Add,Conc,Y,IDu,IDs,Dummy_ID,Fu,Dummy_IMu,SIDu,Eu,Cs,PWu,X,Tu,Ts,Dummy_R,Ruu,Ru,Rss,Rs,Ku,Ks,SK,SID,R) :=
 state_server(S,U,H,Mul,Add,Conc,Y,0,IDu,IDs,Dummy_ID,Fu,Dummy_IMu,SIDu,Eu,Cs,PWu,X,Tu,Ts,Dummy_R,Ruu,Ru,Rss,Rs,Ku,Ks,SK,SID).
 iknows(scrypt(Y,pair(IDu,Eu)))
=[exists R]=>
 state_server(S,U,H,Mul,Add,Conc,Y,1,IDu,IDs,apply(Conc,pair(IDu,IDs)),Fu,scrypt(X,apply(Conc,pair(Dummy_ID,R))),SIDu,Eu,Cs,PWu,X,Tu,Ts,R,Ruu,Ru,Rss,Rs,Ku,Ks,SK,SID).
 secret(PWu,pid,U).
 iknows(scrypt(Y,pair(Dummy_IMu,pair(apply(Add,pair(apply(H,pair(Dummy_ID,pair(X,SIDu))),apply(H,PWu))),apply(H,pair(apply(H,pair(Dummy_ID,pair(X,SIDu))),Dummy_ID))))))

step step_4 (S,U,H,Mul,Add,Conc,Y,IDu,IDs,ID,Fu,IMu,SIDu,Eu,Dummy_Cs,PWu,X,Dummy_Tu,Dummy_Ts,R,Dummy_Ruu,Dummy_Ru,Dummy_Rss,Dummy_Rs,Ku,Dummy_Ks,Dummy_SK,SID,Tu,Ts,Ru,Rs) :=
 state_server(S,U,H,Mul,Add,Conc,Y,1,IDu,IDs,ID,Fu,IMu,SIDu,Eu,Dummy_Cs,PWu,X,Dummy_Tu,Dummy_Ts,R,Dummy_Ruu,Dummy_Ru,Dummy_Rss,Dummy_Rs,Ku,Dummy_Ks,Dummy_SK,SID).
 iknows(pair(IMu,pair(apply(Mul,pair(Ru,apply(H,pair(ID,pair(X,SIDu))))),pair(apply(H,pair(IMu,pair(Ruu,pair(apply(H,pair(ID,pair(X,SIDu))),Tu)))),Tu))))
=[exists Ts,Rs]=>
 state_server(S,U,H,Mul,Add,Conc,Y,2,IDu,IDs,ID,Fu,IMu,SIDu,Eu,apply(H,pair(IMu,pair(apply(Mul,pair(Rs,apply(H,pair(ID,pair(X,SIDu))))),pair(apply(H,pair(ID,pair(X,SIDu))),Ts)))),PWu,X,Tu,Ts,R,apply(Mul,pair(Ru,apply(H,pair(ID,pair(X,SIDu))))),Ru,apply(Mul,pair(Rs,apply(H,pair(ID,pair(X,SIDu))))),Rs,Ku,apply(Mul,apply(Mul,pair(Rs,apply(Mul,pair(Ru,apply(H,pair(ID,pair(X,SIDu)))))))),apply(H,pair(IMu,pair(apply(Mul,pair(Ru,apply(H,pair(ID,pair(X,SIDu))))),pair(Dummy_Rss,pair(Tu,pair(Dummy_Ts,Dummy_Ks)))))),SID).
 iknows(pair(IMu,pair(apply(Mul,pair(Rs,apply(H,pair(ID,pair(X,SIDu))))),pair(apply(H,pair(IMu,pair(apply(Mul,pair(Rs,apply(H,pair(ID,pair(X,SIDu))))),pair(apply(H,pair(ID,pair(X,SIDu))),Ts)))),Ts)))).
 witness(S,U,server_user_ts,Ts).
 witness(S,U,server_user_rs,Rs).
 request(U,S,user_server_tu,Tu,SID).
 request(U,S,user_server_ru,Ru,SID)


section properties:

property secrecy_of_pid (MGoal,ASGoal) :=
 [] ((secret(MGoal,pid,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_user_server_tu (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,user_server_tu,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,user_server_tu,MGoal))
     /\ ((request(A1Goal,A2Goal,user_server_tu,MGoal,SID1)
           /\ request(A1Goal,A2Goal,user_server_tu,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_user_server_ru (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,user_server_ru,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,user_server_ru,MGoal))
     /\ ((request(A1Goal,A2Goal,user_server_ru,MGoal,SID1)
           /\ request(A1Goal,A2Goal,user_server_ru,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_server_user_ts (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,server_user_ts,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,server_user_ts,MGoal))
     /\ ((request(A1Goal,A2Goal,server_user_ts,MGoal,SID1)
           /\ request(A1Goal,A2Goal,server_user_ts,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_server_user_rs (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,server_user_rs,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,server_user_rs,MGoal))
     /\ ((request(A1Goal,A2Goal,server_user_rs,MGoal,SID1)
           /\ request(A1Goal,A2Goal,server_user_rs,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_pid (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,pid,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_user_server_tu (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,user_server_tu,MGoal,SID) &
 not(witness(A2Goal,A1Goal,user_server_tu,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_user_server_tu (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,user_server_tu,MGoal,SID1).
 request(A1Goal,A2Goal,user_server_tu,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_user_server_ru (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,user_server_ru,MGoal,SID) &
 not(witness(A2Goal,A1Goal,user_server_ru,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_user_server_ru (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,user_server_ru,MGoal,SID1).
 request(A1Goal,A2Goal,user_server_ru,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_server_user_ts (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,server_user_ts,MGoal,SID) &
 not(witness(A2Goal,A1Goal,server_user_ts,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_server_user_ts (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,server_user_ts,MGoal,SID1).
 request(A1Goal,A2Goal,server_user_ts,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_server_user_rs (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,server_user_rs,MGoal,SID) &
 not(witness(A2Goal,A1Goal,server_user_rs,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_server_user_rs (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,server_user_rs,MGoal,SID1).
 request(A1Goal,A2Goal,server_user_rs,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


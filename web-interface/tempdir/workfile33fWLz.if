%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfile33fWLz

section signature:

state_bs2: agent * agent * agent * text * text * hash_func * hash_func * nat * text * text * text * symmetric_key * symmetric_key * message * message * message * set(agent) * nat -> fact
state_bs1: agent * agent * agent * symmetric_key * text * text * hash_func * hash_func * nat * symmetric_key * message * message * nat -> fact
state_ue: agent * agent * agent * symmetric_key * text * text * hash_func * hash_func * nat * text * text * text * symmetric_key * symmetric_key * message * message * message * message * message * set(agent) * nat -> fact


section types:

ptk2, ptk1, ue_bs2_mac, bs2_ue_mac: protocol_id
set_154, set_151, set_149, set_147, set_145, set_143, set_138, set_118: set
Set_84, Dummy_Set_84, Set_40, Dummy_Set_40, ASGoal: set(agent)
Exd1, Exd2, Mac, HO_req, HO_res, Dummy_Exd2, start, Dummy_Mac, Dummy_Exd1, Dummy_HO_res, Dummy_HO_req, dummy_msg, MGoal: message
7, 5, 4, State, 16, 15, 13, 11, 9, 8, SID, 3, 6, 2, 1, 0, Dummy_State, SID2, SID1: nat
Fkey, Mul, f, m: hash_func
N_ue, N_bs2, ID, A, P, Dummy_N_bs2, Dummy_N_ue, Dummy_ID, dummy_nonce, a, p: text
Auk2, PTK2, Auk1, Dummy_PTK2, Dummy_PTK1, Dummy_Auk2, PTK1, dummy_sk, k1, k2, ki: symmetric_key
UE, BS1, BS2, A2Goal, A1Goal, u, i, b1, b2: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(u).
 iknows(b1).
 iknows(b2).
 iknows(k1).
 iknows(k2).
 iknows(ki).
 iknows(a).
 iknows(p).
 iknows(f).
 iknows(m).
 iknows(i).
 state_ue(u,b1,b2,k1,a,p,f,m,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,dummy_sk,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_118,3).
 state_bs1(b1,u,b2,k1,a,p,f,m,2,dummy_sk,dummy_msg,dummy_msg,4).
 state_bs2(b2,u,b1,a,p,f,m,4,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,dummy_sk,dummy_msg,dummy_msg,dummy_msg,set_138,5).
 state_bs1(b1,i,b2,ki,a,p,f,m,2,dummy_sk,dummy_msg,dummy_msg,8).
 state_bs2(b2,i,b1,a,p,f,m,4,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,dummy_sk,dummy_msg,dummy_msg,dummy_msg,set_145,9).
 state_ue(u,i,b2,ki,a,p,f,m,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,dummy_sk,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_147,11).
 state_bs2(b2,u,i,a,p,f,m,4,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,dummy_sk,dummy_msg,dummy_msg,dummy_msg,set_149,13).
 state_ue(u,b1,i,ki,a,p,f,m,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,dummy_sk,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_151,15).
 state_bs1(b1,u,i,ki,a,p,f,m,2,dummy_sk,dummy_msg,dummy_msg,16)


section rules:

step step_0 (UE,BS1,BS2,Auk1,A,P,Fkey,Mul,ID,N_ue,N_bs2,Auk2,PTK1,Dummy_HO_req,HO_res,Exd1,Exd2,Mac,Set_40,SID,HO_req) :=
 state_ue(UE,BS1,BS2,Auk1,A,P,Fkey,Mul,0,ID,N_ue,N_bs2,Auk2,PTK1,Dummy_HO_req,HO_res,Exd1,Exd2,Mac,Set_40,SID).
 iknows(start)
=[exists HO_req]=>
 state_ue(UE,BS1,BS2,Auk1,A,P,Fkey,Mul,1,ID,N_ue,N_bs2,Auk2,PTK1,HO_req,HO_res,Exd1,Exd2,Mac,Set_40,SID).
 iknows(HO_req)

step step_1 (UE,BS1,BS2,Auk1,A,P,Fkey,Mul,Dummy_ID,Dummy_N_ue,N_bs2,Dummy_Auk2,PTK1,HO_req,Dummy_HO_res,Dummy_Exd1,Exd2,Dummy_Mac,Set_40,SID,ID,N_ue,HO_res,Exd1) :=
 state_ue(UE,BS1,BS2,Auk1,A,P,Fkey,Mul,1,Dummy_ID,Dummy_N_ue,N_bs2,Dummy_Auk2,PTK1,HO_req,Dummy_HO_res,Dummy_Exd1,Exd2,Dummy_Mac,Set_40,SID).
 iknows(HO_res)
=[exists N_ue,ID,Exd1]=>
 state_ue(UE,BS1,BS2,Auk1,A,P,Fkey,Mul,6,ID,N_ue,N_bs2,apply(Fkey,pair(Auk1,A)),PTK1,HO_req,HO_res,Exd1,Exd2,scrypt(apply(Fkey,pair(Auk1,A)),pair(ID,pair(apply(Mul,pair(N_ue,P)),Exd1))),Set_40,SID).
 iknows(pair(ID,pair(apply(Mul,pair(N_ue,P)),pair(Exd1,scrypt(apply(Fkey,pair(Auk1,A)),pair(ID,pair(apply(Mul,pair(N_ue,P)),Exd1))))))).
 witness(UE,BS2,bs2_ue_mac,scrypt(apply(Fkey,pair(Auk1,A)),pair(ID,pair(apply(Mul,pair(N_ue,P)),Exd1))))

step step_2 (UE,BS1,BS2,Auk1,A,P,Fkey,Mul,ID,N_ue,Dummy_N_bs2,Auk2,Dummy_PTK1,HO_req,HO_res,Exd1,Dummy_Exd2,Dummy_Mac,Dummy_Set_40,SID,N_bs2,Exd2) :=
 state_ue(UE,BS1,BS2,Auk1,A,P,Fkey,Mul,6,ID,N_ue,Dummy_N_bs2,Auk2,Dummy_PTK1,HO_req,HO_res,Exd1,Dummy_Exd2,Dummy_Mac,Dummy_Set_40,SID).
 iknows(pair(apply(Mul,pair(N_bs2,P)),pair(Exd2,scrypt(Auk2,pair(apply(Mul,pair(N_bs2,P)),Exd2))))).
 request(UE,BS2,ue_bs2_mac,scrypt(Auk2,pair(apply(Mul,pair(N_bs2,P)),Exd2)),SID)
 =>
 state_ue(UE,BS1,BS2,Auk1,A,P,Fkey,Mul,8,ID,N_ue,N_bs2,Auk2,apply(Mul,pair(N_ue,apply(Mul,pair(N_bs2,P)))),HO_req,HO_res,Exd1,Exd2,scrypt(Auk2,pair(apply(Mul,pair(N_bs2,P)),Exd2)),Dummy_Set_40,SID).
 secret(apply(Mul,pair(N_ue,apply(Mul,pair(N_bs2,P)))),ptk1,Dummy_Set_40).
 contains(UE,Dummy_Set_40).
 contains(BS2,Dummy_Set_40)

step step_3 (BS1,UE,BS2,Auk1,A,P,Fkey,Mul,Dummy_Auk2,Dummy_HO_req,Dummy_HO_res,SID,HO_req,HO_res) :=
 state_bs1(BS1,UE,BS2,Auk1,A,P,Fkey,Mul,2,Dummy_Auk2,Dummy_HO_req,Dummy_HO_res,SID).
 iknows(HO_req)
=[exists HO_res]=>
 state_bs1(BS1,UE,BS2,Auk1,A,P,Fkey,Mul,3,apply(Fkey,pair(Auk1,A)),HO_req,HO_res,SID).
 iknows(HO_res).
 iknows(apply(Fkey,pair(Auk1,A)))

step step_4 (BS2,UE,BS1,A,P,Fkey,Mul,ID,N_ue,N_bs2,Dummy_Auk2,PTK2,Exd1,Exd2,Mac,Set_84,SID,Auk2) :=
 state_bs2(BS2,UE,BS1,A,P,Fkey,Mul,4,ID,N_ue,N_bs2,Dummy_Auk2,PTK2,Exd1,Exd2,Mac,Set_84,SID).
 iknows(Auk2)
 =>
 state_bs2(BS2,UE,BS1,A,P,Fkey,Mul,5,ID,N_ue,N_bs2,Auk2,PTK2,Exd1,Exd2,Mac,Set_84,SID)

step step_5 (BS2,UE,BS1,A,P,Fkey,Mul,Dummy_ID,Dummy_N_ue,Dummy_N_bs2,Dummy_Auk2,Dummy_PTK2,Dummy_Exd1,Dummy_Exd2,Dummy_Mac,Dummy_Set_84,SID,ID,N_ue,N_bs2,Auk2,Exd1,Exd2) :=
 state_bs2(BS2,UE,BS1,A,P,Fkey,Mul,5,Dummy_ID,Dummy_N_ue,Dummy_N_bs2,Dummy_Auk2,Dummy_PTK2,Dummy_Exd1,Dummy_Exd2,Dummy_Mac,Dummy_Set_84,SID).
 iknows(pair(ID,pair(apply(Mul,pair(N_ue,P)),pair(Exd1,scrypt(Auk2,pair(ID,pair(apply(Mul,pair(N_ue,P)),Exd1))))))).
 request(BS2,UE,bs2_ue_mac,scrypt(Auk2,pair(ID,pair(apply(Mul,pair(N_ue,P)),Exd1))),SID)
=[exists N_bs2,Exd2]=>
 state_bs2(BS2,UE,BS1,A,P,Fkey,Mul,7,ID,N_ue,N_bs2,Auk2,apply(Mul,pair(Dummy_N_bs2,apply(Mul,apply(Mul,pair(N_ue,P))))),Exd1,Exd2,scrypt(Auk2,pair(ID,pair(apply(Mul,pair(N_ue,P)),Exd1))),Dummy_Set_84,SID).
 iknows(pair(apply(Mul,pair(N_bs2,P)),pair(Exd2,scrypt(Auk2,pair(ID,pair(apply(Mul,pair(N_ue,P)),Exd1)))))).
 witness(BS2,UE,ue_bs2_mac,scrypt(Auk2,pair(ID,pair(apply(Mul,pair(N_ue,P)),Exd1)))).
 secret(apply(Mul,pair(Dummy_N_bs2,apply(Mul,apply(Mul,pair(N_ue,P))))),ptk2,Dummy_Set_84).
 contains(UE,Dummy_Set_84).
 contains(BS2,Dummy_Set_84)


section properties:

property authentication_on_ue_bs2_mac (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,ue_bs2_mac,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,ue_bs2_mac,MGoal))
     /\ ((request(A1Goal,A2Goal,ue_bs2_mac,MGoal,SID1)
           /\ request(A1Goal,A2Goal,ue_bs2_mac,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_bs2_ue_mac (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,bs2_ue_mac,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,bs2_ue_mac,MGoal))
     /\ ((request(A1Goal,A2Goal,bs2_ue_mac,MGoal,SID1)
           /\ request(A1Goal,A2Goal,bs2_ue_mac,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property secrecy_of_ptk1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,ptk1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_ptk2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,ptk2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state authentication_on_ue_bs2_mac (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,ue_bs2_mac,MGoal,SID) &
 not(witness(A2Goal,A1Goal,ue_bs2_mac,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_ue_bs2_mac (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,ue_bs2_mac,MGoal,SID1).
 request(A1Goal,A2Goal,ue_bs2_mac,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_bs2_ue_mac (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,bs2_ue_mac,MGoal,SID) &
 not(witness(A2Goal,A1Goal,bs2_ue_mac,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_bs2_ue_mac (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,bs2_ue_mac,MGoal,SID1).
 request(A1Goal,A2Goal,bs2_ue_mac,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state secrecy_of_ptk1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,ptk1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_ptk2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,ptk2,ASGoal) &
 not(contains(i,ASGoal))


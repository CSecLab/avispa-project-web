%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileN18869

section signature:

state_client: agent * agent * hash_func * public_key * nat * text * text * symmetric_key * text * text * set(agent) * set(agent) * nat -> fact
state_server: agent * agent * hash_func * public_key * nat * text * text * symmetric_key * text * text * set(agent) * set(agent) * nat -> fact


section types:

Set_48, Set_46, Dummy_Set_48, Dummy_Set_46, Dummy_Set_29, Dummy_Set_26, Set_29, Set_26, ASGoal: set(agent)
start, MGoal: message
id, p, nc, c_s_nc, s_c_kcs, s_c_p, s_c_id: protocol_id
ID, P, Ns, Nc, Dummy_ID, Dummy_P, Dummy_Nc, Dummy_Ns, dummy_nonce: text
Kcs, Dummy_Kcs, kcs, dummy_sk, ksi, kci: symmetric_key
Es, es: public_key
F, f: hash_func
6, 3, 4, SID, State, Dummy_State, SID2, SID1, 2, 1, 0, 10: nat
S, C, A2Goal, A1Goal, s, c, i: agent
set_99, set_98, set_96, set_95, set_90, set_89, set_76, set_75, set_103, set_102, set_101, set_100: set


section inits:

initial_state init1 := 
 iknows(start).
 iknows(s).
 iknows(c).
 iknows(f).
 iknows(ksi).
 iknows(kci).
 iknows(i).
 state_server(s,c,f,es,0,dummy_nonce,dummy_nonce,dummy_sk,dummy_nonce,dummy_nonce,set_75,set_76,3).
 state_client(c,s,f,es,1,dummy_nonce,dummy_nonce,dummy_sk,dummy_nonce,dummy_nonce,set_89,set_90,4).
 state_server(s,i,f,es,0,dummy_nonce,dummy_nonce,dummy_sk,dummy_nonce,dummy_nonce,set_95,set_96,6).
 state_client(c,i,f,es,1,dummy_nonce,dummy_nonce,dummy_sk,dummy_nonce,dummy_nonce,set_102,set_103,10)


section rules:

step step_0 (S,C,F,Es,Dummy_Ns,Nc,Kcs,P,ID,Set_26,Set_29,SID,Ns) :=
 state_server(S,C,F,Es,0,Dummy_Ns,Nc,Kcs,P,ID,Set_26,Set_29,SID).
 iknows(start)
=[exists Ns]=>
 state_server(S,C,F,Es,2,Ns,Nc,Kcs,P,ID,Set_26,Set_29,SID).
 iknows(Ns)

step step_1 (S,C,F,Es,Ns,Dummy_Nc,Dummy_Kcs,Dummy_P,Dummy_ID,Dummy_Set_26,Dummy_Set_29,SID,Nc,P,ID) :=
 state_server(S,C,F,Es,2,Ns,Dummy_Nc,Dummy_Kcs,Dummy_P,Dummy_ID,Dummy_Set_26,Dummy_Set_29,SID).
 iknows(pair(crypt(inv(Es),Nc),scrypt(apply(F,pair(Nc,Ns)),pair(apply(F,Ns),pair(P,ID)))))
 =>
 state_server(S,C,F,Es,4,Ns,Nc,apply(F,pair(Dummy_Nc,Ns)),P,ID,Dummy_Set_26,Dummy_Set_29,SID).
 iknows(scrypt(apply(F,pair(Dummy_Nc,Ns)),apply(f,Dummy_Nc))).
 request(S,C,c_s_nc,Dummy_Nc,SID).
 secret(Dummy_Nc,nc,Dummy_Set_26).
 secret(Dummy_Kcs,kcs,Dummy_Set_29).
 contains(S,Dummy_Set_26).
 contains(C,Dummy_Set_26).
 contains(S,Dummy_Set_29).
 contains(C,Dummy_Set_29)

step step_2 (C,S,F,Es,Dummy_Ns,Dummy_Nc,Dummy_Kcs,P,ID,Dummy_Set_46,Dummy_Set_48,SID,Ns,Nc) :=
 state_client(C,S,F,Es,1,Dummy_Ns,Dummy_Nc,Dummy_Kcs,P,ID,Dummy_Set_46,Dummy_Set_48,SID).
 iknows(Ns)
=[exists Nc]=>
 state_client(C,S,F,Es,3,Ns,Nc,apply(F,pair(Nc,Dummy_Ns)),P,ID,Dummy_Set_46,Dummy_Set_48,SID).
 iknows(pair(crypt(Es,Nc),scrypt(apply(F,pair(Nc,Dummy_Ns)),pair(apply(f,Dummy_Ns),pair(P,ID))))).
 witness(C,S,c_s_nc,Nc).
 secret(P,p,Dummy_Set_46).
 secret(ID,id,Dummy_Set_48).
 contains(C,Dummy_Set_46).
 contains(S,Dummy_Set_46).
 contains(C,Dummy_Set_48).
 contains(S,Dummy_Set_48)


section properties:

property secrecy_of_p (MGoal,ASGoal) :=
 [] ((secret(MGoal,p,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_id (MGoal,ASGoal) :=
 [] ((secret(MGoal,id,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_kcs (MGoal,ASGoal) :=
 [] ((secret(MGoal,kcs,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_nc (MGoal,ASGoal) :=
 [] ((secret(MGoal,nc,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_c_s_nc (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,c_s_nc,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,c_s_nc,MGoal))
     /\ ((request(A1Goal,A2Goal,c_s_nc,MGoal,SID1)
           /\ request(A1Goal,A2Goal,c_s_nc,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_p (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,p,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_id (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,id,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_kcs (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,kcs,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_nc (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,nc,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_c_s_nc (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,c_s_nc,MGoal,SID) &
 not(witness(A2Goal,A1Goal,c_s_nc,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_c_s_nc (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,c_s_nc,MGoal,SID1).
 request(A1Goal,A2Goal,c_s_nc,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


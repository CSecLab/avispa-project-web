%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileg7q8aD

section signature:

state_sensor: agent * agent * agent * hash_func * public_key * public_key * public_key * text * nat * text * text * public_key * public_key * text * text * text * text * text * text * text * text * text * nat -> fact
state_user: agent * agent * agent * hash_func * public_key * public_key * public_key * text * nat * public_key * text * text * text * text * text * text * text * text * text * text * nat -> fact
state_base: agent * agent * agent * hash_func * public_key * public_key * public_key * text * nat * text * text * text * text * text * text * text * text * nat -> fact


section types:

base_user, base_sensor, sensor_base: protocol_id
start, MGoal: message
State, 13, 12, 11, 9, 8, 7, 5, SID, 3, 2, 4, 1, 0, Dummy_State, SID2, SID1: nat
TK, SK, R, G, TS, HashValue, P, SIID, DIDI, SigNew, Sig, KAB, UID, Dummy_SigNew, Dummy_SK, Dummy_TK, Dummy_HashValue, Dummy_Sig, Dummy_R, Dummy_SIID, Dummy_G, Dummy_TS, Dummy_UID, Dummy_NU, NU, Dummy_DIDI, Dummy_P, dummy_nonce, Alpha, kab: text
KUS, KSN, SNK, USK, PKPKG, dummy_pk, snk, usk, pkpkg: public_key
H, h: hash_func
SN, BS, US, A2Goal, A1Goal, us, bs, sn, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(us).
 iknows(bs).
 iknows(sn).
 iknows(h).
 iknows(snk).
 iknows(ksn).
 iknows(kus).
 iknows(i).
 state_base(bs,us,sn,h,pkpkg,usk,snk,kab,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,3).
 state_user(us,bs,sn,h,pkpkg,usk,snk,kab,0,dummy_pk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,4).
 state_sensor(sn,us,bs,h,pkpkg,usk,snk,kab,0,dummy_nonce,dummy_nonce,dummy_pk,dummy_pk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,5).
 state_base(bs,us,sn,h,pkpkg,usk,snk,kab,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,7).
 state_user(us,bs,sn,h,pkpkg,usk,snk,kab,0,dummy_pk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,8).
 state_sensor(sn,us,bs,h,pkpkg,usk,snk,kab,0,dummy_nonce,dummy_nonce,dummy_pk,dummy_pk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,9).
 state_base(bs,us,sn,h,pkpkg,usk,snk,kab,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,11).
 state_user(us,bs,sn,h,pkpkg,usk,snk,kab,0,dummy_pk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,12).
 state_sensor(sn,us,bs,h,pkpkg,usk,snk,kab,0,dummy_nonce,dummy_nonce,dummy_pk,dummy_pk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,13)


section rules:

step step_0 (BS,US,SN,H,PKPKG,USK,SNK,KAB,Dummy_P,Alpha,UID,SIID,TS,G,Dummy_DIDI,Dummy_NU,SID,NU) :=
 state_base(BS,US,SN,H,PKPKG,USK,SNK,KAB,0,Dummy_P,Alpha,UID,SIID,TS,G,Dummy_DIDI,Dummy_NU,SID).
 iknows(start)
=[exists NU]=>
 state_base(BS,US,SN,H,PKPKG,USK,SNK,KAB,1,apply(H,pair(Alpha,PKPKG)),Alpha,UID,SIID,TS,G,apply(H,pair(NU,inv(PKPKG))),NU,SID).
 iknows(crypt(USK,pair(apply(H,pair(NU,inv(PKPKG))),apply(H,pair(Alpha,PKPKG))))).
 witness(BS,US,base_user,apply(H,pair(NU,inv(PKPKG)))).
 witness(BS,US,base_user,apply(H,pair(Alpha,PKPKG))).
 iknows(crypt(SNK,pair(apply(H,pair(NU,inv(PKPKG))),apply(H,pair(Alpha,PKPKG))))).
 witness(BS,SN,base_sensor,apply(H,pair(NU,inv(PKPKG)))).
 witness(BS,SN,base_sensor,apply(H,pair(Alpha,PKPKG)))

step step_1 (BS,US,SN,H,PKPKG,USK,SNK,KAB,P,Alpha,Dummy_UID,SIID,Dummy_TS,Dummy_G,DIDI,NU,SID,UID,TS,G) :=
 state_base(BS,US,SN,H,PKPKG,USK,SNK,KAB,1,P,Alpha,Dummy_UID,SIID,Dummy_TS,Dummy_G,DIDI,NU,SID).
 iknows(pair(UID,pair(TS,G)))
 =>
 state_base(BS,US,SN,H,PKPKG,USK,SNK,KAB,2,P,Alpha,UID,SIID,TS,G,DIDI,NU,SID).
 request(SN,BS,sensor_base,pair(UID,pair(TS,G)),SID).
 iknows(pair(apply(H,UID),pair(TS,G)))

step step_2 (BS,US,SN,H,PKPKG,USK,SNK,KAB,P,Alpha,UID,Dummy_SIID,Dummy_TS,Dummy_G,DIDI,NU,SID,SIID,TS,G) :=
 state_base(BS,US,SN,H,PKPKG,USK,SNK,KAB,2,P,Alpha,UID,Dummy_SIID,Dummy_TS,Dummy_G,DIDI,NU,SID).
 iknows(pair(SIID,pair(TS,G)))
 =>
 state_base(BS,US,SN,H,PKPKG,USK,SNK,KAB,3,P,Alpha,UID,SIID,TS,G,DIDI,NU,SID).
 iknows(pair(apply(H,SIID),pair(TS,G)))

step step_3 (US,BS,SN,H,PKPKG,USK,SNK,KAB,KSN,Dummy_UID,Dummy_TS,Dummy_G,Dummy_P,Sig,Dummy_DIDI,HashValue,TK,SK,Dummy_R,SID,UID,TS,G,P,DIDI,R) :=
 state_user(US,BS,SN,H,PKPKG,USK,SNK,KAB,0,KSN,Dummy_UID,Dummy_TS,Dummy_G,Dummy_P,Sig,Dummy_DIDI,HashValue,TK,SK,Dummy_R,SID).
 iknows(crypt(USK,pair(DIDI,P)))
=[exists R,UID,G,TS]=>
 state_user(US,BS,SN,H,PKPKG,USK,SNK,KAB,1,KSN,UID,TS,G,P,Sig,DIDI,HashValue,TK,SK,R,SID).
 iknows(pair(UID,pair(TS,G))).
 request(BS,US,base_user,DIDI,SID).
 request(BS,US,base_user,P,SID)

step step_4 (US,BS,SN,H,PKPKG,USK,SNK,KAB,KSN,UID,Dummy_TS,Dummy_G,P,Dummy_Sig,DIDI,Dummy_HashValue,Dummy_TK,Dummy_SK,R,SID,TS,G,HashValue) :=
 state_user(US,BS,SN,H,PKPKG,USK,SNK,KAB,1,KSN,UID,Dummy_TS,Dummy_G,P,Dummy_Sig,DIDI,Dummy_HashValue,Dummy_TK,Dummy_SK,R,SID).
 iknows(pair(HashValue,pair(TS,G)))
 =>
 state_user(US,BS,SN,H,PKPKG,USK,SNK,KAB,2,KSN,UID,TS,G,P,crypt(KSN,pair(TS,pair(Dummy_TK,UID))),DIDI,HashValue,pair(R,apply(H,UID)),apply(H,pair(KAB,TS)),R,SID).
 iknows(crypt(KSN,pair(TS,pair(Dummy_TK,UID))))

step step_5 (SN,US,BS,H,PKPKG,USK,SNK,KAB,Sig,SigNew,KSN,KUS,Dummy_DIDI,Dummy_SIID,Dummy_P,HashValue,TS,G,Dummy_R,SK,TK,SID,DIDI,SIID,P,R) :=
 state_sensor(SN,US,BS,H,PKPKG,USK,SNK,KAB,0,Sig,SigNew,KSN,KUS,Dummy_DIDI,Dummy_SIID,Dummy_P,HashValue,TS,G,Dummy_R,SK,TK,SID).
 iknows(crypt(SNK,pair(DIDI,P)))
=[exists R,SIID]=>
 state_sensor(SN,US,BS,H,PKPKG,USK,SNK,KAB,1,Sig,SigNew,KSN,KUS,DIDI,SIID,P,HashValue,TS,G,R,SK,TK,SID).
 request(BS,US,base_sensor,DIDI,SID).
 request(BS,US,base_sensor,P,SID)

step step_6 (SN,US,BS,H,PKPKG,USK,SNK,KAB,Sig,SigNew,KSN,KUS,DIDI,SIID,P,HashValue,Dummy_TS,Dummy_G,R,SK,TK,SID,TS,G) :=
 state_sensor(SN,US,BS,H,PKPKG,USK,SNK,KAB,1,Sig,SigNew,KSN,KUS,DIDI,SIID,P,HashValue,Dummy_TS,Dummy_G,R,SK,TK,SID).
 iknows(pair(HashValue,pair(TS,G)))
 =>
 state_sensor(SN,US,BS,H,PKPKG,USK,SNK,KAB,2,Sig,SigNew,KSN,KUS,DIDI,SIID,P,HashValue,TS,G,R,SK,TK,SID).
 iknows(pair(SIID,pair(TS,G)))

step step_7 (SN,US,BS,H,PKPKG,USK,SNK,KAB,Dummy_Sig,Dummy_SigNew,KSN,KUS,DIDI,SIID,P,HashValue,TS,G,R,Dummy_SK,Dummy_TK,SID,Sig) :=
 state_sensor(SN,US,BS,H,PKPKG,USK,SNK,KAB,2,Dummy_Sig,Dummy_SigNew,KSN,KUS,DIDI,SIID,P,HashValue,TS,G,R,Dummy_SK,Dummy_TK,SID).
 iknows(Sig)
 =>
 state_sensor(SN,US,BS,H,PKPKG,USK,SNK,KAB,3,Sig,pair(SIID,crypt(KUS,pair(TS,pair(pair(R,apply(H,SIID)),SIID)))),KSN,KUS,DIDI,SIID,P,HashValue,TS,G,R,apply(H,pair(KAB,TS)),pair(R,apply(H,SIID)),SID)


section properties:

property authentication_on_base_sensor (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,base_sensor,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,base_sensor,MGoal))
     /\ ((request(A1Goal,A2Goal,base_sensor,MGoal,SID1)
           /\ request(A1Goal,A2Goal,base_sensor,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_base_user (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,base_user,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,base_user,MGoal))
     /\ ((request(A1Goal,A2Goal,base_user,MGoal,SID1)
           /\ request(A1Goal,A2Goal,base_user,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_sensor_base (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,sensor_base,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,sensor_base,MGoal))
     /\ ((request(A1Goal,A2Goal,sensor_base,MGoal,SID1)
           /\ request(A1Goal,A2Goal,sensor_base,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state authentication_on_base_sensor (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,base_sensor,MGoal,SID) &
 not(witness(A2Goal,A1Goal,base_sensor,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_base_sensor (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,base_sensor,MGoal,SID1).
 request(A1Goal,A2Goal,base_sensor,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_base_user (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,base_user,MGoal,SID) &
 not(witness(A2Goal,A1Goal,base_user,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_base_user (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,base_user,MGoal,SID1).
 request(A1Goal,A2Goal,base_user,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_sensor_base (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,sensor_base,MGoal,SID) &
 not(witness(A2Goal,A1Goal,sensor_base,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_sensor_base (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,sensor_base,MGoal,SID1).
 request(A1Goal,A2Goal,sensor_base,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


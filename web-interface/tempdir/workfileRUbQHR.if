%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileRUbQHR

section signature:

state_twoway_S: agent * agent * agent * hash_func * symmetric_key * nat * text * text * text * text * text * text * nat -> fact
state_twoway_U: agent * agent * agent * hash_func * symmetric_key * nat * text * text * text * text * text * text * text * text * set(text) * set(agent) * nat -> fact
state_twoway_G: agent * agent * agent * text * hash_func * symmetric_key * symmetric_key * nat * text * text * text * text * text * text * text * text * text * text * set(text) * set(agent) * set(text) * set(agent) * nat -> fact


section types:

id_u_g, kgid, pid, xaid, id_s_g: protocol_id
Set_62, Set_35, Dummy_Set_62, Set_32, Dummy_Set_35, Dummy_Set_32: set(text)
set_147, set_146, set_144, set_143, set_142, set_141, set_133, set_132, set_116, set_115, set_114, set_113: set
H, dummy_hash: hash_func
Ts, T, Xa, A, Pwd, K_G, C, DID, M, Y, Dummy_DID, Dummy_L, Dummy_Ts, Dummy_T, Dummy_C, Dummy_A, Dummy_Y, Dummy_M, Dummy_Xa, L, dummy_nonce: text
9, 8, 7, St, 0, 6, 5, 2, SID, 4, 1, 3, Dummy_St, SID2, SID1: nat
Set_63, Set_36, Dummy_Set_63, Set_33, Dummy_Set_36, Dummy_Set_33, ASGoal: set(agent)
start, MGoal: message
SK_SG, SK_UG, kg_ug, kg_sg: symmetric_key
g, s, U, G, S, A2Goal, A1Goal, i, u: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(dummy_nonce).
 iknows(i).
 state_twoway_G(g,u,s,dummy_nonce,dummy_hash,kg_ug,kg_sg,3,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_113,set_114,set_115,set_116,3).
 state_twoway_U(u,g,s,dummy_hash,kg_ug,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_132,set_133,4).
 state_twoway_S(s,u,g,dummy_hash,kg_sg,7,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,5).
 state_twoway_G(g,u,i,dummy_nonce,dummy_hash,kg_ug,kg_sg,3,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_141,set_142,set_143,set_144,7).
 state_twoway_U(u,g,i,dummy_hash,kg_ug,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_146,set_147,8)


section rules:

step step_0 (G,U,S,K_G,H,SK_UG,SK_SG,Dummy_Xa,A,Dummy_M,Dummy_Y,DID,C,T,Ts,L,Pwd,Dummy_Set_32,Dummy_Set_33,Dummy_Set_35,Dummy_Set_36,SID,Xa) :=
 state_twoway_G(G,U,S,K_G,H,SK_UG,SK_SG,3,Dummy_Xa,A,Dummy_M,Dummy_Y,DID,C,T,Ts,L,Pwd,Dummy_Set_32,Dummy_Set_33,Dummy_Set_35,Dummy_Set_36,SID).
 iknows(scrypt(SK_UG,pair(U,Pwd)))
=[exists Xa]=>
 state_twoway_G(G,U,S,K_G,H,SK_UG,SK_SG,4,Xa,A,xor(apply(H,pair(U,Pwd)),apply(H,K_G)),apply(H,Pwd),DID,C,T,Ts,L,Pwd,Dummy_Set_32,Dummy_Set_33,Dummy_Set_35,Dummy_Set_36,SID).
 secret(Dummy_Set_32,pid,Dummy_Set_33).
 secret(Dummy_Set_35,xaid,Dummy_Set_36).
 iknows(scrypt(SK_UG,pair(H,pair(U,pair(xor(apply(H,pair(U,Pwd)),apply(H,K_G)),pair(apply(H,Pwd),Xa)))))).
 witness(G,U,id_u_g,Xa).
 iknows(scrypt(SK_SG,Xa)).
 witness(G,S,id_s_g,Xa).
 contains(Pwd,Dummy_Set_32).
 contains(U,Dummy_Set_33).
 contains(G,Dummy_Set_33).
 contains(Xa,Dummy_Set_35).
 contains(G,Dummy_Set_36).
 contains(S,Dummy_Set_36)

step step_1 (G,U,S,K_G,H,SK_UG,SK_SG,Dummy_Xa,Dummy_A,M,Y,DID,Dummy_C,Dummy_T,Dummy_Ts,Dummy_L,Pwd,Set_32,Set_33,Set_35,Set_36,SID,Xa,T,Ts) :=
 state_twoway_G(G,U,S,K_G,H,SK_UG,SK_SG,5,Dummy_Xa,Dummy_A,M,Y,DID,Dummy_C,Dummy_T,Dummy_Ts,Dummy_L,Pwd,Set_32,Set_33,Set_35,Set_36,SID).
 iknows(pair(xor(apply(H,pair(U,Pwd)),apply(H,pair(Xa,T))),pair(apply(H,pair(xor(apply(H,pair(U,Pwd)),apply(H,K_G)),pair(Xa,T))),T)))
=[exists Ts]=>
 state_twoway_G(G,U,S,K_G,H,SK_UG,SK_SG,6,Xa,apply(H,pair(xor(apply(H,pair(U,Pwd)),apply(H,pair(Xa,T))),pair(S,pair(Xa,Ts)))),M,Y,DID,apply(H,pair(xor(xor(xor(apply(H,pair(U,Pwd)),apply(H,pair(Xa,T))),apply(H,pair(Xa,T))),apply(H,K_G)),pair(Xa,T))),T,Ts,xor(xor(apply(H,pair(U,Pwd)),apply(H,pair(Xa,T))),apply(H,pair(Xa,T))),Pwd,Set_32,Set_33,Set_35,Set_36,SID).
 request(U,G,id_u_g,T,SID).
 iknows(pair(xor(apply(H,pair(U,Pwd)),apply(H,pair(Xa,T))),pair(apply(H,pair(xor(apply(H,pair(U,Pwd)),apply(H,pair(Xa,T))),pair(S,pair(Xa,Ts)))),Ts))).
 witness(G,S,id_s_g,Ts)

step step_2 (U,G,S,H,SK_UG,Pwd,T,C,DID,Xa,M,Y,K_G,Dummy_Set_62,Dummy_Set_63,SID) :=
 state_twoway_U(U,G,S,H,SK_UG,0,Pwd,T,C,DID,Xa,M,Y,K_G,Dummy_Set_62,Dummy_Set_63,SID).
 iknows(start)
 =>
 state_twoway_U(U,G,S,H,SK_UG,1,Pwd,T,C,DID,Xa,M,Y,K_G,Dummy_Set_62,Dummy_Set_63,SID).
 iknows(scrypt(SK_UG,pair(U,Pwd))).
 secret(Dummy_Set_62,pid,Dummy_Set_63).
 contains(Pwd,Dummy_Set_62).
 contains(U,Dummy_Set_63).
 contains(G,Dummy_Set_63)

step step_3 (U,G,S,H,SK_UG,Pwd,Dummy_T,Dummy_C,Dummy_DID,Dummy_Xa,M,Y,K_G,Set_62,Set_63,SID,T,Xa) :=
 state_twoway_U(U,G,S,H,SK_UG,1,Pwd,Dummy_T,Dummy_C,Dummy_DID,Dummy_Xa,M,Y,K_G,Set_62,Set_63,SID).
 iknows(scrypt(SK_UG,pair(H,pair(U,pair(xor(apply(H,pair(U,Pwd)),apply(H,K_G)),pair(apply(H,Pwd),Xa))))))
=[exists T]=>
 state_twoway_U(U,G,S,H,SK_UG,2,Pwd,T,apply(H,pair(xor(apply(H,pair(U,Pwd)),apply(H,K_G)),pair(Xa,T))),xor(apply(H,pair(U,Pwd)),apply(H,pair(Xa,T))),Xa,M,Y,K_G,Set_62,Set_63,SID).
 request(G,U,id_u_g,Xa,SID).
 iknows(pair(xor(apply(H,pair(U,Pwd)),apply(H,pair(Xa,T))),pair(apply(H,pair(xor(apply(H,pair(U,Pwd)),apply(H,K_G)),pair(Xa,T))),T))).
 witness(U,G,id_u_g,T)

step step_4 (S,U,G,H,SK_SG,Ts,T,Dummy_Xa,A,Pwd,K_G,SID,Xa) :=
 state_twoway_S(S,U,G,H,SK_SG,7,Ts,T,Dummy_Xa,A,Pwd,K_G,SID).
 iknows(scrypt(SK_SG,Xa))
 =>
 state_twoway_S(S,U,G,H,SK_SG,8,Ts,T,Xa,A,Pwd,K_G,SID).
 request(G,S,id_s_g,Xa,SID)

step step_5 (S,U,G,H,SK_SG,Dummy_Ts,Dummy_T,Dummy_Xa,A,Pwd,K_G,SID,Ts,T,Xa) :=
 state_twoway_S(S,U,G,H,SK_SG,8,Dummy_Ts,Dummy_T,Dummy_Xa,A,Pwd,K_G,SID).
 iknows(pair(xor(apply(H,pair(U,Pwd)),apply(H,pair(Xa,T))),pair(apply(H,pair(xor(apply(H,pair(U,Pwd)),apply(H,pair(Xa,T))),pair(S,pair(Xa,Ts)))),Ts)))
 =>
 state_twoway_S(S,U,G,H,SK_SG,9,Ts,T,Xa,A,Pwd,K_G,SID).
 request(G,S,id_s_g,Ts,SID)


section properties:

property secrecy_of_pid (MGoal,ASGoal) :=
 [] ((secret(MGoal,pid,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_xaid (MGoal,ASGoal) :=
 [] ((secret(MGoal,xaid,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_id_u_g (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,id_u_g,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,id_u_g,MGoal))
     /\ ((request(A1Goal,A2Goal,id_u_g,MGoal,SID1)
           /\ request(A1Goal,A2Goal,id_u_g,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_id_s_g (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,id_s_g,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,id_s_g,MGoal))
     /\ ((request(A1Goal,A2Goal,id_s_g,MGoal,SID1)
           /\ request(A1Goal,A2Goal,id_s_g,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_pid (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,pid,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_xaid (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,xaid,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_id_u_g (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,id_u_g,MGoal,SID) &
 not(witness(A2Goal,A1Goal,id_u_g,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_id_u_g (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,id_u_g,MGoal,SID1).
 request(A1Goal,A2Goal,id_u_g,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_id_s_g (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,id_s_g,MGoal,SID) &
 not(witness(A2Goal,A1Goal,id_s_g,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_id_s_g (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,id_s_g,MGoal,SID1).
 request(A1Goal,A2Goal,id_s_g,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


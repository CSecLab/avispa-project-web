role role_RP 	(
	RP,OP,TE	:	agent,
	ROKey,RTKey	:	symmetric_key,
	TEKey		:	public_key,
	SND,RCV		:	channel(dy) 
		)
played_by RP
def=
	local
		State:nat,
		ClientId:text,
		ResponseType:text,
		Scope:text,
		Stat:text,
		Code:text,
		GrantType:text,
		RedirectUri:text,
		ExpireIn:text,
		TokenType:text,
		AccessToken:text,
		RefreshToken:text,
		Nonce:text,
		IdToken:text
	init
		State := 0
	transition
		1. 	State=0 /\ RCV(start) =|>
			State':=1 
			/\ RedirectUri':=new() 
			/\ Nonce':=new() 
			/\ secret(Nonce',sec_3,{RP,TE}) 
			/\ Stat':=new() 
			/\ secret(Stat',sec_4,{RP,OP}) 
			/\ ClientId':=new() 
			/\ Scope':=new() 
			/\ ResponseType':=new() 
			/\ SND({ResponseType'.Scope'.ClientId'.Stat'.Nonce'.RedirectUri'}_ROKey)
		2. 	State=1 /\ RCV({Code'.Stat}_ROKey) =|> 
			State':=2 
			/\ secret(Stat',sec_4,{RP,OP}) 
			/\ GrantType':=new() 
			/\ SND({GrantType'.Code'.RedirectUri}_RTKey)
		4. 	State=2 /\ RCV({AccessToken'.TokenType'.RefreshToken'.ExpireIn'.{IdToken'.Nonce}_inv(TEKey)}_RTKey) =|> 
			State':=3 
			/\ secret(Nonce',sec_3,{RP,TE})
end role

role role_OP	(
	OP,RP,TE	:	agent,
	ROKey		:	symmetric_key,
	SND,RCV		:	channel(dy)
		)
played_by OP
def=
	local
		State:nat,
		Nonce:text,
		ClientId:text,
		ResponseType:text,
		Scope:text,
		RedirectUri:text,
		Code:text,
		Stat:text
	init
		State := 0
	transition
		1. 	State=0 /\ RCV({ResponseType'.Scope'.ClientId'.Stat'.Nonce'.RedirectUri'}_ROKey) =|> 
			State':=1 
			/\ secret(Nonce',sec_3,{RP,TE}) 
			/\ secret(Stat',sec_4,{RP,OP}) 
			/\ Code':=new() 
			/\ SND({Code'.Stat'}_ROKey)
end role

role role_TE	(
	TE,RP,OP	:	agent,
	RTKey		:	symmetric_key,
	TEKey		:	public_key,
	SND,RCV		:	channel(dy)
		)
played_by TE
def=
	local
		State:nat,
		Code:text,
		GrantType:text,
		RedirectUri:text,
		ExpireIn:text,
		TokenType:text,
		AccessToken:text,
		RefreshToken:text,
		Nonce:text,
		IdToken:text
	init
		State := 0
	transition
		3. 	State=0 /\ RCV({GrantType'.Code'.RedirectUri'}_RTKey) =|> 
			State':=1 
			/\ witness(TE,RP,auth_2,Code') 
			/\ Nonce':=new() 
			/\ secret(Nonce',sec_3,{RP,TE}) 
			/\ IdToken':=new() 
			/\ ExpireIn':=new() 
			/\ RefreshToken':=new() 
			/\ TokenType':=new() 
			/\ AccessToken':=new() 
			/\ SND({AccessToken'.TokenType'.RefreshToken'.ExpireIn'.{IdToken'.Nonce'}_inv(TEKey)}_RTKey)
end role

role session 	(
	RP,OP,TE	:	agent,
	ROKey,RTKey	:	symmetric_key,
	TEKey		:	public_key
		)
def=
	local
		SND1,RCV1,SND2,RCV2,SND3,RCV3 :	channel(dy)
	composition
		role_RP(RP,OP,TE,ROKey,RTKey,TEKey,SND1,RCV1) 
		/\ role_OP(OP,RP,TE,ROKey,SND2,RCV2) 
		/\ role_TE(TE,RP,OP,RTKey,TEKey,SND3,RCV3)
end role

role environment()
def=
	const
		clientApplication,authorizationServer,tokenEndpoint:agent,
		rokey,rtkey:symmetric_key,
		tekey:public_key,
		auth_1:protocol_id,
		auth_2:protocol_id,
		sec_3:protocol_id,
		sec_4:protocol_id
	intruder_knowledge = {clientApplication,authorizationServer,tokenEndpoint,tekey}
	composition
		session(clientApplication,authorizationServer,tokenEndpoint,rokey,rtkey,tekey)		
		/\ session(i,authorizationServer,tokenEndpoint,rokey,rtkey,tekey)
		/\ session(clientApplication,i,tokenEndpoint,rokey,rtkey,tekey)
		/\ session(clientApplication,authorizationServer,i,rokey,rtkey,tekey)
 
		
end role

goal
	authentication_on auth_1
	authentication_on auth_2
	secrecy_of sec_3
	secrecy_of sec_4
end goal

environment()

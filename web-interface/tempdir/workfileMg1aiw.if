%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileMg1aiw

section signature:

state_server: agent * agent * hash_func * hash_func * hash_func * hash_func * symmetric_key * public_key * public_key * text * text * text * text * text * text * pair(text,pair(text,text)) * pair(text,text) * nat * message * message * apply(hash_func,pair(symmetric_key,pair(text,apply(hash_func,pair(symmetric_key,pair(text,text)))))) * apply(hash_func,pair(symmetric_key,pair(text,apply(hash_func,pair(symmetric_key,pair(text,text)))))) * apply(hash_func,pair(apply(hash_func,pair(text,pair(text,text))),pair(agent,pair(agent,pair(text,pair(text,pair(text,text))))))) * apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text))))))) * apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text))))))) * public_key * nat -> fact
state_client: agent * agent * hash_func * hash_func * hash_func * hash_func * symmetric_key * public_key * public_key * text * text * text * text * text * pair(text,pair(text,text)) * pair(text,text) * text * nat * message * message * apply(hash_func,pair(symmetric_key,pair(text,apply(hash_func,pair(symmetric_key,pair(text,text)))))) * apply(hash_func,pair(symmetric_key,pair(text,apply(hash_func,pair(symmetric_key,pair(text,text)))))) * apply(hash_func,pair(apply(hash_func,pair(text,pair(text,text))),pair(agent,pair(agent,pair(text,pair(text,pair(text,text))))))) * apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text))))))) * apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text))))))) * public_key * apply(hash_func,pair(text,pair(text,text))) * nat -> fact


section types:

M: apply(hash_func,pair(text,pair(text,text)))
ClientK, ServerK: apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text)))))))
Finished: apply(hash_func,pair(apply(hash_func,pair(text,pair(text,text))),pair(agent,pair(agent,pair(text,pair(text,pair(text,text)))))))
Totp, Hotp: apply(hash_func,pair(symmetric_key,pair(text,apply(hash_func,pair(symmetric_key,pair(text,text))))))
UserId, Dummy_UserId: pair(text,text)
MethAuth, Dummy_MethAuth: pair(text,pair(text,text))
3, 6, State, 36, 2, 1, 0, 10, 4, SID, Dummy_State, SID2, SID1: nat
ASGoal: set(agent)
choiceMethode, Na, Nb, Sid, Pa, Xt, PMS, hotp, totp, certificat, null, error_message, opad, Dummy_Nb, ipad, Dummy_Xt, Dummy_Pa, Dummy_Sid, Dummy_Na, dummy_nonce: text
Challenge, Time, start, Dummy_Time, Dummy_Challenge, dummy_msg, MGoal: message
Ka, Kb, Ks, dummy_pk, ka, kb, ki, ks: public_key
SharedKey, sharedKey: symmetric_key
H, PRF, KeyGen, SHA_1, h, prf, keygen, sha_1: hash_func
sec_clientk, sec_serverk, na_nb1, na_nb2, hotp_id, totp_id: protocol_id
A, B, A2Goal, A1Goal, a, b, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(ka).
 iknows(kb).
 iknows(ks).
 iknows(ki).
 iknows(inv(ki)).
 iknows(crypt(inv(ks),pair(i,ki))).
 iknows(i).
 state_client(a,b,h,prf,keygen,sha_1,sharedKey,ka,ks,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,pair(dummy_nonce,pair(dummy_nonce,dummy_nonce)),pair(dummy_nonce,dummy_nonce),dummy_nonce,0,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_pk,dummy_msg,3).
 state_server(b,a,h,prf,keygen,sha_1,sharedKey,kb,ks,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,pair(dummy_nonce,pair(dummy_nonce,dummy_nonce)),pair(dummy_nonce,dummy_nonce),1,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_pk,4).
 state_client(a,i,h,prf,keygen,sha_1,sharedKey,ka,ks,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,pair(dummy_nonce,pair(dummy_nonce,dummy_nonce)),pair(dummy_nonce,dummy_nonce),dummy_nonce,0,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_pk,dummy_msg,6).
 state_server(b,i,h,prf,keygen,sha_1,sharedKey,kb,ks,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,pair(dummy_nonce,pair(dummy_nonce,dummy_nonce)),pair(dummy_nonce,dummy_nonce),1,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_pk,10)


section rules:

step step_0 (A,B,H,PRF,KeyGen,SHA_1,SharedKey,Ka,Ks,Dummy_Na,Dummy_Sid,Dummy_Pa,Dummy_Xt,PMS,Dummy_MethAuth,Dummy_UserId,Nb,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Kb,M,SID,Na,Sid,Pa,MethAuth,UserId) :=
 state_client(A,B,H,PRF,KeyGen,SHA_1,SharedKey,Ka,Ks,Dummy_Na,Dummy_Sid,Dummy_Pa,Dummy_Xt,PMS,Dummy_MethAuth,Dummy_UserId,Nb,0,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Kb,M,SID).
 iknows(start)
=[exists Sid,UserId,MethAuth,Pa,Na]=>
 state_client(A,B,H,PRF,KeyGen,SHA_1,SharedKey,Ka,Ks,Na,Sid,Pa,36,PMS,MethAuth,UserId,Nb,2,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Kb,M,SID).
 iknows(pair(A,pair(Na,pair(Sid,pair(Pa,pair(36,pair(MethAuth,UserId)))))))

step step_1 (B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Dummy_Na,Nb,Dummy_Sid,Dummy_Pa,Dummy_Xt,PMS,Dummy_MethAuth,Dummy_UserId,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Ka,SID,Na,Sid,Pa,Xt,MethAuth,UserId) :=
 state_server(B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Dummy_Na,Nb,Dummy_Sid,Dummy_Pa,Dummy_Xt,PMS,Dummy_MethAuth,Dummy_UserId,1,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Ka,SID).
 iknows(pair(A,pair(Na,pair(Sid,pair(Pa,pair(Xt,pair(MethAuth,UserId))))))) &
 not(equal(Xt,36))
 =>
 state_server(B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Na,Nb,Sid,Pa,Xt,PMS,MethAuth,UserId,6,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Ka,SID)

step step_2 (B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Dummy_Na,Dummy_Nb,Dummy_Sid,Dummy_Pa,Dummy_Xt,PMS,Dummy_MethAuth,Dummy_UserId,Dummy_Challenge,Dummy_Time,Hotp,Totp,Finished,ClientK,ServerK,Ka,SID,Na,Nb,Sid,Pa,UserId,Challenge,Time) :=
 state_server(B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Dummy_Na,Dummy_Nb,Dummy_Sid,Dummy_Pa,Dummy_Xt,PMS,Dummy_MethAuth,Dummy_UserId,1,Dummy_Challenge,Dummy_Time,Hotp,Totp,Finished,ClientK,ServerK,Ka,SID).
 iknows(pair(A,pair(Na,pair(Sid,pair(Pa,pair(36,pair(MethAuth,UserId)))))))
=[exists Time,Challenge,Nb]=>
 state_server(B,A,H,PRF,KeyGen,SHA_1,SharedKey,Kb,Ks,Na,Nb,Sid,Pa,36,PMS,choiceMethode,UserId,3,Challenge,Time,Hotp,Totp,Finished,ClientK,ServerK,Ka,SID).
 iknows(pair(Nb,pair(Sid,pair(Pa,pair(36,pair(choiceMethode,crypt(inv(Ks),pair(B,Kb)))))))).
 iknows(B)


section properties:

property secrecy_of_sec_clientk (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_clientk,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_serverk (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_serverk,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_na_nb1 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,na_nb1,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,na_nb1,MGoal))
     /\ ((request(A1Goal,A2Goal,na_nb1,MGoal,SID1)
           /\ request(A1Goal,A2Goal,na_nb1,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_na_nb2 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,na_nb2,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,na_nb2,MGoal))
     /\ ((request(A1Goal,A2Goal,na_nb2,MGoal,SID1)
           /\ request(A1Goal,A2Goal,na_nb2,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_hotp_id (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,hotp_id,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,hotp_id,MGoal))
     /\ ((request(A1Goal,A2Goal,hotp_id,MGoal,SID1)
           /\ request(A1Goal,A2Goal,hotp_id,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_totp_id (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,totp_id,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,totp_id,MGoal))
     /\ ((request(A1Goal,A2Goal,totp_id,MGoal,SID1)
           /\ request(A1Goal,A2Goal,totp_id,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sec_clientk (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_clientk,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_serverk (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_serverk,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_na_nb1 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,na_nb1,MGoal,SID) &
 not(witness(A2Goal,A1Goal,na_nb1,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_na_nb1 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,na_nb1,MGoal,SID1).
 request(A1Goal,A2Goal,na_nb1,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_na_nb2 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,na_nb2,MGoal,SID) &
 not(witness(A2Goal,A1Goal,na_nb2,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_na_nb2 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,na_nb2,MGoal,SID1).
 request(A1Goal,A2Goal,na_nb2,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_hotp_id (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,hotp_id,MGoal,SID) &
 not(witness(A2Goal,A1Goal,hotp_id,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_hotp_id (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,hotp_id,MGoal,SID1).
 request(A1Goal,A2Goal,hotp_id,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_totp_id (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,totp_id,MGoal,SID) &
 not(witness(A2Goal,A1Goal,totp_id,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_totp_id (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,totp_id,MGoal,SID1).
 request(A1Goal,A2Goal,totp_id,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


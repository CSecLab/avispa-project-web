%% PROTOCOL: LTE_A Key Authentication and Derivation in LTE_A Network
%% VARIANT: With AKA method (Authentication and Key Agreement)
%% PURPOSE: Mutual Authentication, replay protection, confidentiality, Key Derivation. \\
%% MODELER:
%% \begin{itemize}
%% \item Saleem Ishaq for Middlesex MSc. Dissertation 01-Sep, 2015
%% \item Middlesex University London
%% \end{itemize}
%% ALICE_BOB:
%% \begin{verbatim}
%% The protocol exchanges messages between the UE, MME and eNodeB, e.g. an UMTS subscriber
%% identity module, and an authentication (MME) server S. Before the protocol
%% starts, S has obtained an attachment request from the UE with its IMSI 
%%    AR = (AT_R, IMSI, AT_RES, IK, CK)
%% from the home environment (UE) of the peer P.
%% For constructing AV, UE/S and P share the following data/functions:
%%    PK         : Private key   (long term secret)
%%    SQN        : sequence number (unique to a session)
%%    MME Net_Id : authentication function
%%    K, AUTN    : key generation functions
%% The AV-components are computed by
%%    AT_RAND    : a unique random number
%%    K          : (SK, RAND)
%%    IK         : (SK, RAND)
%%    KDF        : (SK, RAND)
%%    MAC        : (SK, SQN, AT_RAND)
%%    AT_AUTN    : {SQN}, AK. MAC
%%    AT_RES     : (SK, AT_RAND)
%%
%% UE -> MME: AR, IMSI
%% MME -> AUC: IMSI, NET_ID
%%         % NET_ID is the Network Address Identifier of the MME.
%%         % AuC Responds back to MME with authentication vector AV = (AT_RAND,AT_AUTN,AT_RES,IK,KDF, KDF)
%%         % AuC computes message authentication code for next message:
%%         %    AT_MAC = HMAC(PRF_SHA1(NAI,IK,CK),AT_RAND.AT_AUTN)
%% MME -> UE: AT_RAND, AT_AUTN
%%         % UE checks validity of RAND, AUTN and SQN
%%         % UE computes AT_RES = F2(SK,AT_RAND), AUTN
%%         % UE comperes the received AUTN with new AUTN 
%% UE -> MME: AT_RES.AT_MAC
%%         % MME Compares and checks validity of AT_MAC,AT_RES
%% MME -> UE: success
%%         % MME,UE agree on
%%         %   TMSI Temporary Mobile Subscriber Identity S/M-TMSI F3(GUTI)
%%         %   session key for integrity check IK = F4(SK,AT_RAND)
%% \end{verbatim}
%% LIMITATIONS:
%% \begin{itemize}
%% \item The server S combines the (logically) different roles of the home
%% environment HE, the network access server NAS and the AKA server.
%% \item The modeller has to take care that each session gets a unique
%% sequence number SQN
%% \item No synchronization of SQN (in case the peer decides SQN is invalid).
%% \item No resumption of a previous session.
%% \end{itemize}
%%
%% PROBLEMS: 3
%% ATTACKS: None
%%
%% NOTES:
%% The mechanism is based on challenge-response and uses symmetric cryptography.
%% AKA typically runs in a UMTS Subscriber Identity Module (USIM).
%% In AKA, the pre-shared credential is stored in the USIM and in the user's
%% home server. The authentication process starts when the user attaches to
%% the home environment where an authentication vector from the secret key and
%% a sequence number is generated. The authentication vector contains a random
%% number (RAND), an authenticator part (AUTN) for authenticating the network,
%% the expected result (XRES) for authenticating the peer, a session key for
%% integrity (IK), and a session key for encryption (CK). After the
%% authentication vector is delivered, the authentication starts the protocol
%% by sending a challenge (RAND) and authentication Token (AUTN) to MME.
%% MME verifies the AUTN based on the
%% secret key and the sequence number to authenticate the network. If the AUTN
%% is valid, the MME generates the authentication result RES itself and sends
%% this to the authentication UE. The MME verifies the
%% RES from the UE. If it is valid, the user is authenticated and IK and CK
%% will be used in key derivation of both peers.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% HLPSL:
role peer (
    UE, MME,         : agent,
    F1,F2,F3,F4,F5   : hash_func,
    PRF_SHA1         : hash_func,
    HMAC             : hash_func,
    PK               : Private_key, 
    SQN              : text,
    SND,RCV          : channel (dy))
played_by UE def=

  local
    AT_RAND          : text,
    NAI              : text,
    AT_MAC1 : hash(hash(text.hash(symmetric_key.text).hash(symmetric_key.text)).text.message),
    AT_MAC2 : hash(hash(text.hash(symmetric_key.text).hash(symmetric_key.text)).hash(symmetric_key.text)),
    AT_AUTN : message,
    AT_RES, IK, CK   : hash(symmetric_key.text),
    State            : nat 

  const
    request_id,
    respond_id,
    success     : text,
    sec_ck1, sec_ik1,
    at_rand,
    at_rand2    : protocol_id
 
  init 
    State := 0 
  
  transition

  1. State   = 0
       /\ RCV(request_id)
     =|>
     State' := 2
       /\ NAI' := new()
       /\ SND(request_id.NAI')

  2. State   = 2
       /\ RCV(AT_RAND'.AT_AUTN'.AT_MAC1')
       /\ AT_AUTN'  = {SQN}_F5(SK.AT_RAND').F1(SK.SQN.AT_RAND')
       /\ KDF'       = F3(SK.AT_RAND')
       /\ IK'       = F4(SK.AT_RAND')
       /\ AT_MAC1'  = HMAC(PRF_SHA1(AV.RAND.NAI.IK'.KDF.KDF').AT_RES'.AT_AUTN')
     =|>
     State' := 4
       /\ AT_RES'  := F2(SK.AT_RAND')
       /\ AT_MAC2' := HMAC(PRF_SHA1(NAI.IK'.CK').AT_RES')
       /\ SND(AT_RES'.AT_MAC2')
       /\ request(P,S,at_rand,AT_RAND')
       /\ witness(P,S,at_rand2,AT_RAND')
       /\ secret(CK',sec_ck1,{S,P})
       /\ secret(IK',sec_ik1,{S,P})

  3. State   = 4 /\ RCV(success) =|>
     State' := 6 

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role server (
    P,S              : agent,
    F1,F2,F3,F4,F5   : hash_func,
    PRF_SHA1         : hash_func,
    HMAC             : hash_func,
    SK               : symmetric_key, 
    SQN              : text,
    SND,RCV          : channel (dy))
played_by S def=

  local
    AT_RAND          : text,
    NAI              : text, 
    AT_MAC1 : hash(hash(text.hash(symmetric_key.text).hash(symmetric_key.text)).text.message),
    AT_MAC2 : hash(hash(text.hash(symmetric_key.text).hash(symmetric_key.text)).hash(symmetric_key.text)),
    AT_AUTN : message,
    AT_RES, IK, CK   : hash(symmetric_key.text),
    State            : nat

  const
    request_id,
    respond_id,
    success     : text,
    sec_ck2, sec_ik2,
    at_rand,
    at_rand2    : protocol_id
 

  init 
    State := 1 

  transition

  1. State   = 1
       /\ RCV(start)
     =|>
     State' := 3
       /\ SND(request_id)

  2. State   = 3
       /\ RCV(respond_id.NAI')
     =|>
     State' := 5
       /\ AT_RAND' := new()
       /\ AT_AUTN' := {SQN}_F5(SK.AT_RAND').F1(SK.SQN.AT_RAND')
       /\ CK'      := F3(SK.AT_RAND')
       /\ IK'      := F4(SK.AT_RAND')
       /\ AT_MAC1' := HMAC(PRF_SHA1(NAI'.IK'.CK').AT_RAND'.AT_AUTN')
       /\ SND(AT_RAND'.AT_AUTN'.AT_MAC1')
       /\ witness(S,P,at_rand,AT_RAND')
       /\ secret(CK',sec_ck2,{S,P})
       /\ secret(IK',sec_ik2,{S,P})

  3. State   = 5
       /\ RCV(AT_RES'.AT_MAC2')
       /\ AT_RES'  = F2(SK.AT_RAND)
       /\ AT_MAC2' = HMAC(PRF_SHA1(NAI.IK.CK).AT_RES')
     =|>
     State' := 7
       /\ SND(success)
       /\ request(S,P,at_rand2,AT_RAND)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role session(
    P,S              : agent,
    F1,F2,F3,F4,F5   : hash_func,
    PRF_SHA1         : hash_func,
    HMAC             : hash_func,
    SK               : symmetric_key,
    SQN              : text)
def=

local
    SNDP, RCVP, SNDS, RCVS : channel (dy)

const 
    at_rand,at_rand2       : protocol_id

  composition
     peer(  P,S,F1,F2,F3,F4,F5,PRF_SHA1,HMAC,SK,SQN,SNDP,RCVP)
  /\ server(P,S,F1,F2,F3,F4,F5,PRF_SHA1,HMAC,SK,SQN,SNDS,RCVS)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role environment() def=

  const 
    p,s                     : agent,
    kps,kis                 : symmetric_key, % !!one per user   !!
    sqnp1, sqnp2, sqni      : text,          % !!one per session!!
    f1,f2,f3,f4,f5          : hash_func,
    prf_sha1                : hash_func,
    hmac                    : hash_func

  intruder_knowledge = {p,s,i,f1,f2,f3,f4,f5,prf_sha1,hmac
%%%                     prf_sha1,hmac,kis,sqni   %%% 3rd session
                       }
 
  composition
     session(p,s,f1,f2,f3,f4,f5,prf_sha1,hmac,kps,sqnp1)
%  /\ session(p,s,f1,f2,f3,f4,f5,prf_sha1,hmac,kps,sqnp2)
% /\ session(i,s,f1,f2,f3,f4,f5,prf_sha1,hmac,kis,sqni)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal

  %secrecy_of CK, IK
  secrecy_of sec_ck1, sec_ck2, sec_ik1, sec_ik2

  %Peer authenticates Server on at_rand
  authentication_on at_rand
  %Server authenticates Peer on at_rand2
  authentication_on at_rand2

end goal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

environment()



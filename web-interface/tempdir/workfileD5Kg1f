role user (

        U, M, B: agent, % User, Merchant and Bank
        Hash: hash_func,
        K_UB: symmetric_key, % pre-shared key between User and Bank
        PK_U, PK_M, PK_ B   % public key of U, M, B 
        SND_U, RCV_U, SND_M, RCV_M: channel(dy)
        )
        
        played_by U
        
        def=
        
        local
                State: nat,
                 Success_failed, Yes_no: text,
                 IDU: hash (nat.nat), % Anonymous Identity of User (U)
                 IDM: hash (nat.nat), % Anonymous Identity of Merchant (M)
                 IDB: text,      % ID of Bank 
                 PNU: nat,      % User's Phone Number
                 PINU: nat,     % User's Personal Identification Number
                 AIU: nat,      % User's Account Information 
                 TID: text,      % The Identity of transaction
                 T¬_U: nat,       %Timestamp generated by U
                 T¬_M: nat,       %Timestamp generated by M
                 NONCE: nat, % Random Number, used to ensure old data  
                                             cannot be reused to replay 
                 Date: text
                AMT:nat           % Payment data 
                 Desc:text          % Description of goods   
                 OI,PI:message  % Order Information, Payment Information

        const
                idPayer, x1, x2, description: protocol_id


        init
                State := 0
                
        transition
        
                        % start registration sub-protocol
                0. State = 0 / RCV_U(start) =|>
                   State':=2 / PNU':=new()
                             / PINU':=new()
                             / IDU' := Hash(PNPr'.PINPr')     
                             / AIU':=new ()
                             / SND_B({PNU'.IDU'.AIU'}_K_UB)
                             / witness (U, B, IDU’)
                             / TID_M'=new () /
                             SND_M (TID_M'.Chall_C')
                
                         6.   % Phase 1 :  % start payment sub-protocol
                8. State = 3 / RCV_M({TID_M. Chall_C'.XID', Chall_M'.h(TID_M. Chall_C'.XID', Chall_M)})_inv(SignK_M) =|>
                   Sign_U(SLC)=SLC.h(SLC)_ inv(SignK_U)    
OI ':=XID'. Chall_C'.h(Desc.AMT).Chall_M'/
PI':=TID'. XID'. h (Desc.AMT).AMT.M.h (XID'.AIU') / Sign_U(SLC)={h(SLC)}_inv(Sign K(U))
K_UB:=new () /
SND_M (OI'. Sign_U (SLC). {PI'}_K_UB) _inv (SignK_U)

witness (U. M. deal. OI'. h (PI')) /
witness (U. B. deal. OI'. PI) /
secret (Desc, Order, {U,M}) /
secret (Amt, Order, {U,M,B}) /
secret (PI', payment, {U,B}) /

State':=4 / RCV_B ({Success_failed } _K_UB)


________________________________________

role merchant (

        U, M, B: agent, % User, Merchant and Bank
        Hash: hash_func,
        K_UB: symmetric_key, % pre-shared key between User and Bank
        PK_U, PK_M, PK_ B   % public key of U, M, B 
        SND_U, RCV_U, SND_M, RCV_M: channel(dy)
        )
        
        played_by M
        
        def=
        
        local
                State: nat,
                 Success_failed, Yes_no: text,
                 IDU: hash (nat.nat), % Anonymous Identity of User (U)
                 IDM: hash (nat.nat), % Anonymous Identity of Merchant (M)
                 IDB: text,      % ID of Bank 
                 PNU: nat,      % User's Phone Number
                 PINU: nat,     % User's Personal Identification Number
                 AIU: nat,      % User's Account Information 
                 TID: text,      % The Identity of transaction
                 T¬_U: nat,       %Timestamp generated by U
                 T¬_M: nat,       %Timestamp generated by M
                 NONCE: nat, % Random Number, used to ensure old data  
                                             cannot be reused to replay 
                 Date: text,
                AMT:nat,           % Payment data 
                 Desc:text,          % Description of goods   
                 OI,PI:message  % Order Information, Payment Information
              
        const
                idPayee, y1, y2, rcvMsg, securKey: protocol_id


        init
                State := 0
                
        transition
        
                        % start registration sub-protocol
                0. State = 0 / RCV_M(start) =|>
                   State':=2 / PNM':=new()
                             / PINM':=new()
                             / IDM' := Hash(PNM'.PINM')     
                             / AIM':=new ()
                             / SND_B({PNM'.IDM'.AIM'}_K_MB)
                             / witness (M, B, IDM’)
                             / TID_M'=new () /
                             SND_M (TID_M'.Chall_C')
                
                    
 6.   % Phase 1:  % start payment sub-protocol
                8. State = 3 / RCV_M ({TID_M'.Chall_C', Chall_M'.h(TID_M. Chall_C'.XID', Chall_M)})_inv(SignK_M) =|>
                   Sign_U(SLC)=SLC.h(SLC)_ inv(SignK_U)    
OI ':=XID'. Chall_C'.h(Desc.AMT).Chall_M'/
PI':=TID'. XID'. h (Desc.AMT).AMT.M.h (XID'.AIU') / Sign_U(SLC)={h(SLC)}_inv(Sign K(U))
K_UB:=new () /
SND_M (OI'. Sign_U (SLC). {PI'}_K_UB) _inv (SignK_U)

witness (M. U. deal. OI'. h (PI')) /
witness (M. B. deal. OI'.h(PI) /

State':=4 / RCV_B ({Success_failed } _K_MB)



end role

________________________________________


role bank (

        U, M, B: agent, % User, Merchant and Bank
        Hash: hash_func,
        K_UB: symmetric_key, % pre-shared key between User and Bank
        PK_U, PK_M, PK_ B   % public key of U, M, B 
        SND_U, RCV_U, SND_M, RCV_M: channel(dy)
        )
        
        played_by B
        
        def=
        
        local
                State: nat,
                 Success_failed, Yes_no: text,
                 IDU: hash (nat.nat), % Anonymous Identity of User (U)
                 IDM: hash (nat.nat), % Anonymous Identity of Merchant (M)
                 IDB: text,      % ID of Bank 
                 PNU: nat,      % User's Phone Number
                 PINU: nat,     % User's Personal Identification Number
                 AIU: nat,      % User's Account Information 
                 TID: text,      % The Identity of transaction
                 T¬_U: nat,       %Timestamp generated by U
                 T¬_M: nat,       %Timestamp generated by M
                 NONCE: nat, % Random Number, used to ensure old data  
                                             cannot be reused to replay 
                 Date: text
                AMT:nat           % Payment data 
                 Desc:text          % Description of goods   
                 OI,PI:message  % Order Information, Payment Information


       const
                idPayer, startMsg, x1, x2: protocol_id


        init
                State := 1
                
        transition
        
                        
                1. State = 1 / RCV_U({PNU'.IDU'.AIU'}_K_UB) =|>
                   State':=3 / Success_failed':=new()
                             / SND_U({Success_failed'}_ K_UB)
                             / wrequest (B,U,IDU,')

                7. State = 4 / RCV_M({PNM'.IDM'.AIM'}_ K_MB)  =|>
                   State':=5 / Success Failed':= new()
                             / SND_M({Success_failed'}_ K_MB)
                             / wrequest (B,M,IDM',)

                 State':=6/ RCV_M({Sig_U(SLC) {PI}_K_UB)_inv(Sig K_M) 


                State':=9 / Success_failed':=new ()
                / SND_M({Success_failed'}_ K_MB)
                             / wrequest (B,M,IDM',)

               State':=11 / Success_failed':=new ()
                / SND_U({Success_failed'}_ K_UB)
                             / wrequest (B, M, IDU’,)

              / secret (Desc',Order,{U,M})
              / secret (Amt,Order,{U,M.B})
              / secret(PI',payment,{U,B})
           
                    

                        
________________________________________


role session (

       U, M, B: agent,
       AIU:text,
       Amt:nat,
       Desc:text,
       Hash: hash_func,
      PK_U, PK_M, PK_ B   % public key of U, M, B 

        )
        
        def=
        
        local
                SU_B, RU_B, SU_M, RU_M,
                SB_U, RB_U, SM_U, RM_U,
                SM_B, RM_B, SB_M, RB_M: channel (dy),
                Success_failed: text,
                IDU: hash (nat.nat), % Anonymous Identity of User (U)
                 IDM: hash (nat.nat), % Anonymous Identity of Merchant (M)
                 IDB: text,      % ID of Bank 
                 PNU: nat,      % User's Phone Number
                 PINU: nat,     % User's Personal Identification Number
                 PNM: nat,      % User's Phone Number
                 PINM: nat,     % User's Personal Identification Number
                 AIU: nat,      % User's Account Information 
                 TID: text,      % The Identity of transaction
                 T¬_U: nat,       %Timestamp generated by U
                 T¬_M: nat,       %Timestamp generated by M
                 NONCE: nat, % Random Number, used to ensure old data  
                                             cannot be reused to replay 
                 Date: text
                 AMT:nat           % Payment data 
                 Desc:text          % Description of goods   
                 OI,PI:message  % Order Information, Payment Information

 init
                
composition     
                                                
user(U, M, B, Hash,IDU, IDM, IDB,PK_U,PK_M,PK_B,SN_B,RC_B,SN_M,RC_M)
 / merchant(U, M, B, Hash,IDU, IDM, IDB,PK_U,PK_M,PK_B,SN_B,RC_B,SN_U,RC_U) 
 / bank(U, M, B, Hash,IDU, IDM, IDB,PK_U,PK_M,PK_B,SN_M,RC_M,SN_U,RC_U)


                
end role

________________________________________
role environment()
        
        def=
        
        const
                u,m,b: agent,
                h: hash_func,
                PK_U, PK_M, PK_ B: public key  
                                                      :protocol_id
                
        intruder_knowledge = {i,u,m,b}         
                                                        
        composition     
                
                   session (i, u,m,b, h, pk_u,pk_m,pk_b)
         %      / session(pe, pr, tsc, peM, prM, h, k11, k12, k2, kmm)
                
end role

________________________________________

goal
  % Entity authentication (G1)
  % Message authentication (G2)
  % Replay protection (G3)
  % Accountability (G17)
  % Proof of Origin (G18)
  % Proof of Delivery (G19)
  authentication_on deal
  weak_authentication_on deal

  % ID protection (Eavesdr.)
  % Conifidentiality 
  secrecy_of order
  secrecy_of payment
end goal

________________________________________



 
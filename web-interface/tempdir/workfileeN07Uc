%% PROTOCOL: ENABLE Protocol.
%% PURPOSE: An Energy-Effcient Access Control Scheme for Wireless Sensor Networks based on Elliptic Curve Cryptography
%% Alice:
%% L (rand), Ta (rand), S1 (const)
%% Alice -> S: L, Ta, S1

%% S:
%% computes MAC1 (const)
%% S -> KDC: L, Ta, S1, MAC1

%% KDC:
%% M (rand), Tkdc (rand), MAC2 (const)
%% KDC -> S: M, Tkdc, MAC2

%% S: MAC3 (const)
%% S -> Alice: MAC3
%% To simulate man-in-the-middle attack on this protocol.

role aliceRole (A, S, KDC : agent,
			Snd, Rcv: channel(dy),
			Ka : public_key,
			H: hash_func
			)

played_by A def=
         local State : nat,
         S1, MAC3, Ta, Xa, R, L, CertA :  text
         const alice_sensor_l,  sensor_alice_1, sub1 : protocol_id

   init  State := 0


  transition
   1. State   = 0 /\ Rcv(start) =|>
      State' := 1 /\  Ta' := new() /\ Xa' := new()      % fresh value Ta' and Xa' is generated by user A
	  /\ L' := H(xor(Xa', Ta')) 						% l = h(xa xor Ta)
	  /\ R' := new() /\ S1' := {{R'}_L.CertA}_Ka        % S1 = signA((r)L || cartA)
	  /\ secret({L},sub1, A) 							% L is kept secret to user A only
	  /\ Snd({R'}_L.Ta'.S1)  							% A -> S: r(L), Ta, S1
	  /\ witness (A, S, alice_sensor_l, L)  
                  
   2. State = 1   /\ Rcv(MAC3) =|> 						% User A received the message MAC3 from user S
      State' := 2 
	  /\ request (S, A, sensor_alice_1, MAC3) 			%  A's acceptance of the value MAC3 generated for A by S               
 end role


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role sensorRole (A, S, KDC  : agent,
		%	L  : symmetric_key,
			Xs : public_key,
           	Snd, Rcv: channel(dy))
played_by S
def=
         local State  : nat,
         Ta, S1, MAC1, M, Tkdc, MAC2, MAC3, R, L:  text
         const alice_sensor_l, sensor_kdc_1, kdc_s_1, sensor_alice_1, sub2 : protocol_id

   init  State := 0


  transition
   1. State   = 0 /\ Rcv({R'}_L.Ta'.S1) =|>  
      State' := 1 /\ MAC1' := {{R'}_L.Ta'.S1}_Xs 		% MAC1 = MAC(xs, (r)L || Ta || S1)
	              /\ Snd({R'}_L.Ta'.S1.MAC1')           % S -> KDC: (r)L, Ta, S1, MAC1
                  /\ witness (S, KDC, sensor_kdc_1, MAC1)
                  /\ request (A, S, alice_sensor_l, L)  % S's acceptance of the value L generated for S by A    

   2. State   = 1 /\ Rcv(M'.Tkdc'.MAC2) =|>
	  State' := 2 /\ Snd(MAC3)                          % S -> A: MAC3
				  /\ witness(S, A, sensor_alice_1, MAC3) /\ request(KDC, S, kdc_s_1, M')
end role


%%%%%%%%%%%%%%%%%%%%%%%%%

role kdcRole (A, S, KDC  : agent,
			Xsp  : symmetric_key,
			H: hash_func,
           	Snd, Rcv: channel(dy))
played_by KDC
def=
         local State  : nat,
         M, Tkdc, MAC2, Ta, S1, MAC1, R, L, IDa:  text
         const sensor_kdc_1, kdc_sensor_1, sub2 : protocol_id

   init  State := 0


  transition
   1. State   = 0 
		/\ Rcv({R'}_L.Ta'.S1.MAC1') =|>  
      State' := 1 /\ Tkdc' := new() 			% fresh value of Tkdc is generated by user KDC
	  /\ M' := H(xor(Xsp, Tkdc')) 				% M = h(xs xor Tkdc)
	  /\ MAC2' := {{R'}_M.IDa}_Xsp
      /\ secret({M'}, sub2, KDC)  				% M' is kept secret to user KDC only
      /\ Snd({R'}_M.Tkdc'.IDa.MAC2) 			% KDC -> S: (r)M, Tkdc, IDa, MAC2
      /\ witness (KDC, S, kdc_sensor_1, M')
      /\ request (S, KDC, sensor_kdc_1, MAC1)	%  KDC's acceptance of the value MAC generated for KDC by S               
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role session(A,S, KDC: agent, Xp : public_key, XSs : symmetric_key, Ka : public_key,
			   H: hash_func)
def=

  local  ACh_Send, ACh_Rcv, SCh_Send, SCh_Rcv, KDCCh_Send, KDCCh_Rcv: channel (dy),
         Ta, S1, MAC1, M, Tkdc, MAC2, MAC3, IDa :  text
		 const alice_sensor_l, sensor_alice_1, sensor_kdc_1, kdc_sensor_1, kdc_s_1, sub1, sub2 : protocol_id
           
  composition
           aliceRole(A, S, KDC, ACh_Send, ACh_Rcv, Ka, H)
       /\  sensorRole(A, S, KDC, Xp, SCh_Send, SCh_Rcv)
	   /\  kdcRole(A, S, KDC, XSs, H,  KDCCh_Send, KDCCh_Rcv)
end role 

%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%
role environment()
def=

		const a, s, kdc   : agent,
		xss : symmetric_key,
		xs: public_key,
		ka : public_key,
        h : hash_func,
        ta, s1, mac1, m, tkdc, mac2, mac3, l :  text,
	    alice_sensor_l, sensor_alice_1, sensor_kdc_1, kdc_sensor_1, kdc_s_1, sub1, sub2 : protocol_id

  intruder_knowledge = {a, s, kdc, l, ta, s1, mac1, m, tkdc, mac2, mac3}

  composition
	session(a, s, kdc, xs, xss, ka, h) /\
	session(a, s, kdc, xs, xss, ka, h)  
end role


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal
  secrecy_of sub1
  secrecy_of sub2
  authentication_on sensor_kdc_1
  authentication_on kdc_sensor_1
  authentication_on alice_sensor_l
  authentication_on sensor_alice_1
  authentication_on kdc_s_1
end goal
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
environment()


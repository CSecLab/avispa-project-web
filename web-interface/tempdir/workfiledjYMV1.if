%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfiledjYMV1

section signature:

state_stationdebase: agent * agent * hash_func * nat * nat * nat * text * nat * message * nat -> fact
state_capteur: agent * agent * hash_func * nat * nat * nat * text * nat * message * set(agent) * nat -> fact


section types:

ksession, capteur_stationdebase_na: protocol_id
X, Dummy_X, dummy_nonce: text
set_76, set_73, set_59: set
Set_22, Dummy_Set_22, ASGoal: set(agent)
Ksession, Dummy_Ksession, start, dummy_msg, MGoal: message
a, b, A, B, A2Goal, A1Goal, i: agent
Na, Ri, State, R, 7, 2, 6, 4, SID, Dummy_Na, 1, 0, Dummy_Ri, Dummy_State, 3, dummy_nat, SID2, SID1, r: nat
H, h: hash_func


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(h).
 iknows(i).
 state_capteur(a,b,h,r,0,dummy_nat,dummy_nonce,dummy_nat,dummy_msg,set_59,3).
 state_stationdebase(a,b,h,r,0,dummy_nat,dummy_nonce,dummy_nat,dummy_msg,4).
 state_capteur(a,i,h,r,0,dummy_nat,dummy_nonce,dummy_nat,dummy_msg,set_73,6).
 state_stationdebase(a,i,h,r,0,dummy_nat,dummy_nonce,dummy_nat,dummy_msg,7)


section rules:

step step_0 (A,B,H,R,Dummy_Ri,Dummy_X,Dummy_Na,Dummy_Ksession,Dummy_Set_22,SID,Ri,Na,Ksession) :=
 state_capteur(A,B,H,R,0,Dummy_Ri,Dummy_X,Dummy_Na,Dummy_Ksession,Dummy_Set_22,SID).
 iknows(start)
=[exists Ri,Na,Ksession]=>
 state_capteur(A,B,H,R,1,Ri,xor(Ksession,apply(H,Na)),Na,Ksession,Dummy_Set_22,SID).
 iknows(pair(scrypt(apply(H,R),pair(xor(Ksession,apply(H,Na)),Na)),scrypt(apply(H,Ksession),Ri))).
 witness(A,B,capteur_stationdebase_na,Na).
 secret(Ksession,ksession,Dummy_Set_22).
 contains(A,Dummy_Set_22).
 contains(B,Dummy_Set_22)

step step_1 (A,B,H,R,Ri,X,Na,Ksession,Set_22,SID) :=
 state_capteur(A,B,H,R,1,Ri,X,Na,Ksession,Set_22,SID).
 iknows(scrypt(apply(H,Ksession),inv(R)))
 =>
 state_capteur(A,B,H,R,2,Ri,X,Na,Ksession,Set_22,SID)

step step_2 (A,B,H,R,Dummy_Ri,Dummy_X,Dummy_Na,Dummy_Ksession,SID,Ri,X,Na,Ksession) :=
 state_stationdebase(A,B,H,R,0,Dummy_Ri,Dummy_X,Dummy_Na,Dummy_Ksession,SID).
 iknows(pair(scrypt(apply(H,R),pair(X,Na)),scrypt(apply(H,Ksession),Ri)))
 =>
 state_stationdebase(A,B,H,R,1,Ri,X,Na,Ksession,SID).
 request(B,A,capteur_stationdebase_na,Na,SID).
 iknows(scrypt(apply(H,Dummy_Ksession),inv(R)))


section properties:

property secrecy_of_ksession (MGoal,ASGoal) :=
 [] ((secret(MGoal,ksession,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_capteur_stationdebase_na (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,capteur_stationdebase_na,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,capteur_stationdebase_na,MGoal))
     /\ ((request(A1Goal,A2Goal,capteur_stationdebase_na,MGoal,SID1)
           /\ request(A1Goal,A2Goal,capteur_stationdebase_na,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_ksession (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,ksession,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_capteur_stationdebase_na (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,capteur_stationdebase_na,MGoal,SID) &
 not(witness(A2Goal,A1Goal,capteur_stationdebase_na,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_capteur_stationdebase_na (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,capteur_stationdebase_na,MGoal,SID1).
 request(A1Goal,A2Goal,capteur_stationdebase_na,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


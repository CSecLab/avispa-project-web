%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileF4bEK5

section signature:

state_userp1: agent * agent * hash_func * nat * text * text * text * text * text * text * text * set(agent) * nat -> fact
state_controlserver: agent * agent * hash_func * nat * text * text * text * nat -> fact


section types:

be: protocol_id
set_76, set_73, set_62: set
State, 3, 10, 2, 9, 7, 11, 6, 1, 0, 4, SID, Dummy_State: nat
bee, idi, ai, Bi, X, Pid, Dummy_Di, Dummy_Ci, bi, Dummy_Ai, Bee, Dummy_Idi, Pi, Dummy_Pi, Idi, Dummy_Bee, Ai, Ci, Di, Dummy_Pid, Dummy_X, Dummy_Bi, dummy_nonce: text
Set_24, Dummy_Set_24, ASGoal: set(agent)
start, MGoal: message
Hash, ha: hash_func
u, U, CS, i, cs: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(u).
 iknows(cs).
 iknows(ha).
 iknows(i).
 state_controlserver(cs,u,ha,1,dummy_nonce,dummy_nonce,dummy_nonce,3).
 state_userp1(u,cs,ha,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_62,4).
 state_controlserver(cs,u,ha,1,dummy_nonce,dummy_nonce,dummy_nonce,6).
 state_userp1(u,cs,ha,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_73,7).
 state_controlserver(cs,u,ha,1,dummy_nonce,dummy_nonce,dummy_nonce,9).
 state_userp1(u,cs,ha,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_76,10)


section rules:

step step_0 (CS,U,Hash,Dummy_Bi,Dummy_X,Dummy_Pid,SID,X) :=
 state_controlserver(CS,U,Hash,1,Dummy_Bi,Dummy_X,Dummy_Pid,SID).
 iknows(pair(idi,pair(ai,bee)))
=[exists X]=>
 state_controlserver(CS,U,Hash,2,apply(Hash,pair(apply(Hash,pair(idi,bee)),Dummy_X)),X,apply(Hash,pair(idi,bee)),SID).
 iknows(apply(Hash,pair(apply(Hash,pair(idi,bee)),Dummy_X)))

step step_1 (U,CS,Hash,Dummy_Bee,Dummy_Pi,Dummy_Idi,Dummy_Ai,Ci,Di,Pid,Dummy_Set_24,SID,Bee,Pi,Idi) :=
 state_userp1(U,CS,Hash,0,Dummy_Bee,Dummy_Pi,Dummy_Idi,Dummy_Ai,Ci,Di,Pid,Dummy_Set_24,SID).
 iknows(start)
=[exists Bee,Idi,Pi]=>
 state_userp1(U,CS,Hash,1,Bee,Pi,Idi,apply(Hash,pair(Bee,Pi)),Ci,Di,Pid,Dummy_Set_24,SID).
 iknows(pair(Idi,pair(apply(Hash,pair(Bee,Pi)),pair(Bee,11)))).
 secret(Bee,be,Dummy_Set_24).
 contains(U,Dummy_Set_24).
 contains(CS,Dummy_Set_24)

step step_2 (U,CS,Hash,Bee,Pi,Idi,Ai,Dummy_Ci,Dummy_Di,Dummy_Pid,Set_24,SID) :=
 state_userp1(U,CS,Hash,2,Bee,Pi,Idi,Ai,Dummy_Ci,Dummy_Di,Dummy_Pid,Set_24,SID).
 iknows(bi)
 =>
 state_userp1(U,CS,Hash,3,Bee,Pi,Idi,Ai,apply(Hash,pair(Idi,Ai)),xor(bi,apply(Hash,xor(apply(Hash,pair(Idi,Bee)),Ai))),apply(Hash,pair(Idi,Bee)),Set_24,SID)


section properties:

property secrecy_of_be (MGoal,ASGoal) :=
 [] ((secret(MGoal,be,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state secrecy_of_be (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,be,ASGoal) &
 not(contains(i,ASGoal))


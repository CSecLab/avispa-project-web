role alice(
		A,B : agent,
		Ka, Kb : public_key,
		SND, RCV : channel (dy))
		 
		played_by A def=
		
		local State : nat,
		Kab : symmetric_key,
		Na,Nb :text
		
		init State :=0
		
		transition
		
		0.  State  = 0 /\ RCV(start) =|> 
				State':= 2 /\ Kab' := new() 
									 /\ SND({Kab'}_Kb)
									 /\ secret(Kab',kab,{A,B})
									 
		2.  State  = 2 /\ RCV({Nb'}_Kab) =|>
				State':= 4 /\ Na' :=new()
									 /\ SND({Na'.{Nb'}_inv(Ka)}_Kab)
									 /\ witness(A,B,bob_alice_nb,Nb')
end role

role bob(
		A,B :agent,
		Ka,Kb :public_key,
		SND, RCV : channel (dy))
		
		played_by B def=
		
		local State : nat,Kab : symmetric_key,
		Na,Nb :text
		
		init State :=1
		
		transition
		
		1.  State  = 1 /\ RCV({Kab'}_Kb) =|> 
				State':= 3 /\ Nb' :=new()
									 /\ SND({Nb'}_Kab')
		3.  State  = 3 /\ RCV({Na'.{Nb}_inv(Ka)}_Kab) =|> 
				State':=5 /\ request(B,A,bob_alice_nb,Nb)
end role

role session(
		A,B : agent,
		Ka,Kb: public_key)
		def=
		
		local SA, RA, SB, RB: channel (dy)

  	composition 

    alice(A,B,Ka,Kb,SA,RA)
     /\ bob  (A,B,Ka,Kb,SB,RB)

end role

role environment() 
		def=
		const a, b : agent,
					ka, kb, ki : public_key,
					na, nb,
					bob_alice_nb,kab : protocol_id
					
					intruder_knowledge = {a, b, ka, kb, ki, inv(ki)}
					
					composition
					
					session(a,b,ka,kb)
     	 /\ session(a,i,ka,ki)
     	 /\ session(i,b,ki,kb)
end role

goal
		secrecy_of kab
		authentication_on bob_alice_nb
end goal

environment()


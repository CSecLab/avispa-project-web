%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilerigwMm

section signature:

state_server: agent * agent * agent * agent * symmetric_key * hash_func * hash_func * hash_func * nat * text * text * text * text * text * text * text * text * apply(hash_func,pair(text,pair(text,text))) * apply(hash_func,pair(apply(hash_func,pair(apply(hash_func,pair(text,pair(text,text))),pair(text,pair(text,text)))),text)) * set(agent) * nat -> fact
state_relay: agent * agent * agent * agent * symmetric_key * hash_func * hash_func * hash_func * nat * text * text * text * text * text * text * text * text * apply(hash_func,pair(text,pair(text,text))) * apply(hash_func,pair(apply(hash_func,pair(apply(hash_func,pair(text,pair(text,text))),pair(text,pair(text,text)))),text)) * nat -> fact
state_client: agent * agent * agent * agent * symmetric_key * hash_func * hash_func * hash_func * nat * text * text * text * text * text * text * text * text * apply(hash_func,pair(text,pair(text,text))) * apply(hash_func,pair(apply(hash_func,pair(apply(hash_func,pair(text,pair(text,text))),pair(text,pair(text,text)))),text)) * set(agent) * set(agent) * nat -> fact


section types:

set_183, set_166, set_165: set
dummy_msg, MGoal, start: message
Dummy_Set_133, Dummy_Set_44, Dummy_Set_42, ASGoal, Set_44, Set_42, Set_133: set(agent)
kk2, s_msk, s_mac, kk1: protocol_id
Mac, Dummy_Mac: apply(hash_func,pair(apply(hash_func,pair(apply(hash_func,pair(text,pair(text,text))),pair(text,pair(text,text)))),text))
Msk, Dummy_Msk: apply(hash_func,pair(text,pair(text,text)))
Kid, Result, Psk, Pmsg, Npc, Nps, Nec, Nes, Dummy_Psk, Dummy_Nes, Dummy_Nec, Dummy_Nps, Dummy_Npc, dummy_nonce, start_eap_fast, respond_id, request_id: text
H, PRF, INT, h, prf, int: hash_func
K2, k1, k2, ki, K1: symmetric_key
C, G, R, S, c, g, r, s, i: agent
11, State, 6, SID, 5, 28, 26, 7, 24, 22, 20, 18, Dummy_State, 16, 3, 14, 12, 10, 8, 4, 2, 1, 0, 9, 29, 27, 25, 23, 21, 19, 17, 15, 13: nat


section inits:

initial_state init1 := 
 iknows(start).
 iknows(c).
 iknows(g).
 iknows(r).
 iknows(s).
 iknows(h).
 iknows(prf).
 iknows(int).
 iknows(ki).
 iknows(i).
 state_client(c,i,r,s,ki,h,prf,int,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_165,set_166,3).
 state_relay(r,c,i,s,k2,h,prf,int,11,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,5).
 state_server(s,c,i,r,k2,h,prf,int,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_183,6)


section rules:

step step_0 (C,G,R,S,K1,H,PRF,INT,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,Set_42,Set_44,SID) :=
 state_client(C,G,R,S,K1,H,PRF,INT,0,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,Set_42,Set_44,SID).
 iknows(start)
 =>
 state_client(C,G,R,S,K1,H,PRF,INT,2,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,Set_42,Set_44,SID).
 iknows(0)

step step_1 (C,G,R,S,K1,H,PRF,INT,Dummy_Npc,Dummy_Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,Set_42,Set_44,SID,Npc,Nps) :=
 state_client(C,G,R,S,K1,H,PRF,INT,2,Dummy_Npc,Dummy_Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,Set_42,Set_44,SID).
 iknows(Nps)
=[exists Npc]=>
 state_client(C,G,R,S,K1,H,PRF,INT,4,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,Set_42,Set_44,SID).
 iknows(Npc)

step step_2 (C,G,R,S,K1,H,PRF,INT,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,Set_42,Set_44,SID) :=
 state_client(C,G,R,S,K1,H,PRF,INT,4,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,Set_42,Set_44,SID).
 iknows(pair(respond_id,S))
 =>
 state_client(C,G,R,S,K1,H,PRF,INT,6,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,Set_42,Set_44,SID).
 iknows(start_eap_fast)

step step_3 (C,G,R,S,K1,H,PRF,INT,Npc,Nps,Dummy_Nec,Dummy_Nes,Dummy_Psk,Pmsg,Result,Kid,Dummy_Msk,Mac,Set_42,Set_44,SID,Nec,Nes,Psk) :=
 state_client(C,G,R,S,K1,H,PRF,INT,6,Npc,Nps,Dummy_Nec,Dummy_Nes,Dummy_Psk,Pmsg,Result,Kid,Dummy_Msk,Mac,Set_42,Set_44,SID).
 iknows(scrypt(K1,Nes))
=[exists Psk,Nec]=>
 state_client(C,G,R,S,K1,H,PRF,INT,8,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,apply(H,pair(Nec,pair(Nes,Psk))),Mac,Set_42,Set_44,SID).
 iknows(scrypt(K1,Nec))

step step_4 (C,G,R,S,K1,H,PRF,INT,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Dummy_Mac,Dummy_Set_42,Dummy_Set_44,SID) :=
 state_client(C,G,R,S,K1,H,PRF,INT,8,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Dummy_Mac,Dummy_Set_42,Dummy_Set_44,SID).
 iknows(Mac)
 =>
 state_client(C,G,R,S,K1,H,PRF,INT,10,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,apply(INT,pair(apply(PRF,pair(apply(H,pair(Nec,pair(Nes,Psk))),pair(Nps,pair(Npc,Kid)))),Pmsg)),Dummy_Set_42,Dummy_Set_44,SID).
 iknows(apply(INT,pair(apply(PRF,pair(apply(H,pair(Nec,pair(Nes,Psk))),pair(Nps,pair(Npc,Kid)))),Pmsg))).
 secret(K1,kk1,Dummy_Set_42).
 secret(Msk,s_msk,Dummy_Set_44).
 contains(C,Dummy_Set_42).
 contains(G,Dummy_Set_42).
 contains(C,Dummy_Set_44).
 contains(G,Dummy_Set_44).
 contains(R,Dummy_Set_44).
 contains(S,Dummy_Set_44)

step step_5 (R,C,G,S,K2,H,PRF,INT,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,SID) :=
 state_relay(R,C,G,S,K2,H,PRF,INT,11,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,SID).
 iknows(0)
 =>
 state_relay(R,C,G,S,K2,H,PRF,INT,13,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,SID).
 iknows(0)

step step_6 (R,C,G,S,K2,H,PRF,INT,Npc,Dummy_Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,SID,Nps) :=
 state_relay(R,C,G,S,K2,H,PRF,INT,13,Npc,Dummy_Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,SID).
 iknows(Nps)
 =>
 state_relay(R,C,G,S,K2,H,PRF,INT,15,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,SID).
 iknows(Nps)

step step_7 (R,C,G,S,K2,H,PRF,INT,Dummy_Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,SID,Npc) :=
 state_relay(R,C,G,S,K2,H,PRF,INT,15,Dummy_Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,SID).
 iknows(Npc)
 =>
 state_relay(R,C,G,S,K2,H,PRF,INT,17,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,SID).
 iknows(Npc)

step step_8 (R,C,G,S,K2,H,PRF,INT,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,SID) :=
 state_relay(R,C,G,S,K2,H,PRF,INT,17,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,SID).
 iknows(pair(respond_id,S))
 =>
 state_relay(R,C,G,S,K2,H,PRF,INT,19,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,SID).
 iknows(pair(respond_id,S))

step step_9 (R,C,G,S,K2,H,PRF,INT,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,SID) :=
 state_relay(R,C,G,S,K2,H,PRF,INT,19,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,SID).
 iknows(start_eap_fast)
 =>
 state_relay(R,C,G,S,K2,H,PRF,INT,21,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,SID).
 iknows(start_eap_fast)

step step_10 (R,C,G,S,K2,H,PRF,INT,Npc,Nps,Nec,Dummy_Nes,Psk,Pmsg,Result,Kid,Msk,Mac,SID,Nes) :=
 state_relay(R,C,G,S,K2,H,PRF,INT,21,Npc,Nps,Nec,Dummy_Nes,Psk,Pmsg,Result,Kid,Msk,Mac,SID).
 iknows(scrypt(K2,Nes))
 =>
 state_relay(R,C,G,S,K2,H,PRF,INT,23,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,SID).
 iknows(Nes)

step step_11 (R,C,G,S,K2,H,PRF,INT,Npc,Nps,Dummy_Nec,Nes,Dummy_Psk,Pmsg,Result,Kid,Msk,Mac,SID,Nec) :=
 state_relay(R,C,G,S,K2,H,PRF,INT,23,Npc,Nps,Dummy_Nec,Nes,Dummy_Psk,Pmsg,Result,Kid,Msk,Mac,SID).
 iknows(Nec)
 =>
 state_relay(R,C,G,S,K2,H,PRF,INT,25,Npc,Nps,Nec,Nes,Dummy_Psk,Pmsg,Result,Kid,Msk,Mac,SID).
 iknows(scrypt(K2,Nec))

step step_12 (R,C,G,S,K2,H,PRF,INT,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Dummy_Mac,SID,Mac) :=
 state_relay(R,C,G,S,K2,H,PRF,INT,25,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Dummy_Mac,SID).
 iknows(Mac)
 =>
 state_relay(R,C,G,S,K2,H,PRF,INT,27,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,SID).
 iknows(Mac)

step step_13 (R,C,G,S,K2,H,PRF,INT,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Dummy_Mac,SID,Mac) :=
 state_relay(R,C,G,S,K2,H,PRF,INT,27,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Dummy_Mac,SID).
 iknows(Mac)
 =>
 state_relay(R,C,G,S,K2,H,PRF,INT,29,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,SID).
 iknows(Mac)

step step_14 (S,C,G,R,K2,H,PRF,INT,Npc,Dummy_Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,Set_133,SID,Nps) :=
 state_server(S,C,G,R,K2,H,PRF,INT,1,Npc,Dummy_Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,Set_133,SID).
 iknows(0)
=[exists Nps]=>
 state_server(S,C,G,R,K2,H,PRF,INT,3,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,Set_133,SID).
 iknows(Nps)

step step_15 (S,C,G,R,K2,H,PRF,INT,Dummy_Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,Set_133,SID,Npc) :=
 state_server(S,C,G,R,K2,H,PRF,INT,3,Dummy_Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,Set_133,SID).
 iknows(Npc)
 =>
 state_server(S,C,G,R,K2,H,PRF,INT,5,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,Set_133,SID).
 iknows(pair(respond_id,S))

step step_16 (S,C,G,R,K2,H,PRF,INT,Npc,Nps,Nec,Dummy_Nes,Psk,Pmsg,Result,Kid,Msk,Mac,Set_133,SID,Nes) :=
 state_server(S,C,G,R,K2,H,PRF,INT,5,Npc,Nps,Nec,Dummy_Nes,Psk,Pmsg,Result,Kid,Msk,Mac,Set_133,SID).
 iknows(start_eap_fast)
=[exists Nes]=>
 state_server(S,C,G,R,K2,H,PRF,INT,7,Npc,Nps,Nec,Nes,Psk,Pmsg,Result,Kid,Msk,Mac,Set_133,SID).
 iknows(scrypt(K2,Nes))

step step_17 (S,C,G,R,K2,H,PRF,INT,Npc,Nps,Dummy_Nec,Nes,Dummy_Psk,Pmsg,Result,Kid,Dummy_Msk,Dummy_Mac,Dummy_Set_133,SID,Nec) :=
 state_server(S,C,G,R,K2,H,PRF,INT,7,Npc,Nps,Dummy_Nec,Nes,Dummy_Psk,Pmsg,Result,Kid,Dummy_Msk,Dummy_Mac,Dummy_Set_133,SID).
 iknows(scrypt(K2,Nec))
 =>
 state_server(S,C,G,R,K2,H,PRF,INT,9,Npc,Nps,Nec,Nes,Dummy_Psk,Pmsg,Result,Kid,apply(H,pair(Nec,pair(Nes,Psk))),apply(INT,pair(apply(PRF,pair(apply(H,pair(Nec,pair(Nes,Psk))),pair(Nps,pair(Npc,Kid)))),Pmsg)),Dummy_Set_133,SID).
 iknows(apply(INT,pair(apply(PRF,pair(apply(H,pair(Nec,pair(Nes,Psk))),pair(Nps,pair(Npc,Kid)))),Pmsg))).
 secret(K2,kk2,Dummy_Set_133).
 contains(S,Dummy_Set_133).
 contains(R,Dummy_Set_133)


section properties:

property secrecy_of_kk1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,kk1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_kk2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,kk2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_s_msk (MGoal,ASGoal) :=
 [] ((secret(MGoal,s_msk,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state secrecy_of_kk1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,kk1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_kk2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,kk2,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_s_msk (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,s_msk,ASGoal) &
 not(contains(i,ASGoal))


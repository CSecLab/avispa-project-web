role alice(A,B:agent,
			Ka,Kb:symmetric_key,
			SND,RCV:channel(dy))
	played_by A def=
		local State: nat,
			 Na,Nb:text
		init State:=0
		transition
			1. State=0    /\ RCV(start)=|>
				State':=2 /\ Na':=new()
						  /\ SND({Na'.A}_Kb)
						  /\witness(A,B,alice_bob_na,Na')
						  /\ secret(Na',na,{A,B})
			2. State=2 /\ RCV({Nb'.xor(Na,B)}_Ka)=|>
				State':=4 /\ SND({Nb'}_Kb)
							/\ wrequest(A,B,bob_alice_nb,Nb')
end role

role bob(A,B:agent,
			Ka,Kb:symmetric_key,
			SND,RCV:channel(dy))
	played_by B def=
		local State: nat,
			 Na,Nb:text
		init State:=1
		transition
			1. State=1    /\ RCV({Na'.A}_Kb)=|>
				State':=3 /\ Nb':=new()
						  /\ SND({Nb'.xor(Na',B)}_Ka)
						  /\witness(A,B,bob_alice_nb,Nb')
						  /\ secret(Nb',nb,{A,B})
			2. State=3 /\ RCV({Nb}_Kb)=|>
				State':=5  /\ wrequest(B,A,alice_bob_na,Na)
end role

role session(A,B: agent,
				Ka,Kb:symmetric_key)
		def=
			local SA,RA,SB,RB : channel(dy)
			composition alice(A,B,Ka,Kb,SA,RA)
						/\ bob(A,B,Ka,Kb,SB,RB)
end role

role environment()
	def=
		const alice_bob_na,bob_alice_nb, na,nb:protocol_id,
				a,b,i:agent,
				ka,kb,ki:symmetric_key
		intruder_knowledge={a,b,i,ka,kb,ki}
		composition session(a,b,ka,kb)
				/\ session(a,i,ka,ki)
end role

goal
	secrecy_of na,nb
	authentication_on alice_bob_na
	authentication_on bob_alice_nb
end goal

environment()
%%% This is the Alice Role of the authenticated key agreement protocol
%%% where the input parameters are the main knowledge of Alice and Bob
role alice (A,B: agent ,
S: symmetric_key ,
Hash: hash_func ,
CC: nat ,
Sess: nat ,
SND ,RCV : channel (dy))
played_by A def=
local
State: nat ,
Kconf: message ,
R1 ,R2: text ,
Authb: message ,
K1: symmetric_key ,
K2: symmetric_key ,
K3: symmetric_key ,
X : hash(message.hash(message.nat.nat.nat.text.text.agent)) %%% expression of the
%%% knowledge on the
%%% format used to
%%% compute the message
%%% authentication code
%%% creation of the 3 keys from the shared secret
init
State :=1 /\
K1:= Hash(Hash(Hash(Hash(S).S).S).S) /\
K2:= Hash(Hash(Hash(S).S).S) /\
K3:= Hash(Hash(S).S)
transition
%%% First message that launchs the key agreement with a fresh Nonce R1
1. State =0 /\ RCV(start) =|>
State':= 2 /\ R1':= new() /\ SND(A.Sess .{1. CC.Sess.R1'.A.Hash (1.CC.Sess.R1'.A)}_K1)
%%% Answer of Bob with R2 and the MAC that confirms that the key derived by Alice is
%%% the same than Bob
2. State =2 /\ RCV(B.Sess .{2. CC.Sess.R2'.R1.B.X'}_K1)
/\ X' = Hash(xor(Hash(K2.Hash(K2.CC.Sess.R1.R2'.K3)) ,23644). Hash(xor(Hash(K2.
Hash(K2.CC.Sess.R1.R2'.K3 )) ,13878).2. CC.Sess.R2'.R1.B))
=|> State':=4 /\ Kconf':= Hash(K2.Hash(K2.CC.Sess.R1.R2'.K3))
/\ SND(Hash(xor(Kconf' ,23644). Hash(xor(Kconf' ,13878).3.A.CC.Sess.R1.R2)) )
/\ witness(A,B,alice_bob_R2 ,R2')
/\ witness(A,B,derive_ab_ks ,Kconf')
/\ request(A,B,bob_alice_R1 ,R1)
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% This is the role played by Bob in the system
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role bob (
A,B: agent ,
S: symmetric_key ,
Hash: hash_func ,
CC: nat ,
Sess: nat ,
SND ,RCV : channel (dy))
played_by B def=
local
State: nat ,
Kconf: message ,
R1 ,R2: text ,
Autha: message ,
K1: symmetric_key ,
K2: symmetric_key ,
K3: symmetric_key ,
X3: hash(nat.nat.nat.text.agent),
X2: hash(message.hash(message.nat.agent.nat.nat.text.text ))
init
State :=1 /\
K1:= Hash(Hash(Hash(Hash(S).S).S).S) /\
K2:= Hash(Hash(Hash(S).S).S) /\
K3:= Hash(Hash(S).S)
transition
%%% Reception of the message of Alice that wants make a key agreement
%%% based on the secret shared keys , on the fresh nonce of Alice and on
%%% the nonce chosen by Bob
1. State =1 /\ RCV(A.Sess .{1. CC.Sess.R1'.A.X3'} _K1) /\ Hash (1. CC.Sess.R1'.A) = X3'
=|> State':= 3 /\ R2':= new () /\ Kconf':= Hash(xor(K2 ,23644). Hash(xor(K2 ,13878).
CC.Sess.R1.R2'.K3)) /\ SND(B.Sess .{2. CC.Sess.R2'.R1'.B.Hash(xor(Kconf',
23644). Hash(xor(Kconf' ,13878).2. CC.Sess.R2'.R1.B))} _K1) /\ secret(Kconf',
kconf ,{A,B}) /\ witness(A,B,bob_alice_R1 ,R1')
%%% Last received message where Bob checks the good ending of the protocol and that
%%% the authentication is well achieved
2. State = 3 /\ RCV(X2') /\ Hash(xor(Kconf ,23644). Hash(xor(Kconf ,13878).3.A.CC.Sess.
R1.R2)) = X2 ’
=|> State':=5 /\ request(A,B,alice_bob_R2 ,R2) /\ request(A,B,derive_ab_ks ,
Kconf)
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% This role makes the composition of the roles of Alice and Bob and describes a
%%% session of the protocol
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role session(A,B : agent ,
S: symmetric_key ,
Hash : hash_func ,
CC: nat ,
Sess: nat)
def=
%%% Define of the channel of communications
local SA , SB , RA , RB: channel (dy)
composition
alice (A, B, S, Hash , CC , Sess , SA , RA)
/\ bob (A, B, S, Hash , CC , Sess , SB , RB)
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role environment ()
def=
const
kconf , bob_alice_R1 , alice_bob_R2 , derive_ab_ks : protocol_id ,
kab , kai , kib : symmetric_key ,
a, b : agent ,
h : hash_func
intruder_knowledge = {a, b, h, kai , kib} %%% it defines what knows an intruder i
%% The test involves 4 parallel sessions
composition
%% Two legitimates sessions between Alice and Bob are executed with consecutive number
%% and keys of session
session(a, b, kab , h, 1, 1) /\ session (a,b, h(h(h(h(kab).kab).kab .). kab), h, 1,2)
%% Two sessions where the intruder plays one of the two role in a protocol session
/\ session(a, i, kai , h, 1, 2) /\ session(i, b, kib , h, 1, 3)
end role
%%% The goal section describes the security goals that must achieve the protocol to
%%% confirm the mutual authentication and to ensure the secrecy of the derived keys
goal
secrecy_of kconf
authentication_on bob_alice_R1
authentication_on alice_bob_R2
authentication_on derive_ab_ks
end goal
environment ()
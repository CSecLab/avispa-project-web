%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilexL4fND

section signature:

state_host: agent * agent * agent * public_key * public_key * public_key * hash_func * nat * crypt(public_key,crypt(inv(public_key),pair(text,text))) * crypt(public_key,crypt(inv(public_key),pair(text,text))) * pair(crypt(public_key,crypt(inv(public_key),pair(text,text))),crypt(public_key,crypt(inv(public_key),pair(text,text)))) * text * text * text * nat -> fact
state_board: agent * agent * agent * public_key * public_key * public_key * hash_func * nat * crypt(public_key,crypt(inv(public_key),pair(text,text))) * crypt(public_key,crypt(inv(public_key),pair(text,text))) * text * text * pair(crypt(public_key,crypt(inv(public_key),pair(text,text))),crypt(public_key,crypt(inv(public_key),pair(text,text)))) * crypt(inv(public_key),hash_func) * nat -> fact
state_user: agent * agent * agent * public_key * public_key * public_key * hash_func * nat * crypt(public_key,crypt(inv(public_key),pair(text,text))) * crypt(public_key,crypt(inv(public_key),pair(text,text))) * text * text * text * text * set(agent) * set(agent) * set(agent) * set(agent) * nat -> fact


section types:

user_host_s1: protocol_id
MGoal, start: message
Sig, Dummy_Sig: crypt(inv(public_key),hash_func)
Req_all, Dummy_Req_all: pair(crypt(public_key,crypt(inv(public_key),pair(text,text))),crypt(public_key,crypt(inv(public_key),pair(text,text))))
hf, Hash, dummy_hash: hash_func
Req_board, Req_host, Dummy_Req_board, Dummy_Req_host: crypt(public_key,crypt(inv(public_key),pair(text,text)))
5, State, 4, 2, 17, 16, 13, 11, 8, 7, 3, SID, 1, Dummy_State: nat
Uhoa, N1, N2, N3, Dummy_N3, Dummy_N2, Dummy_N1, Dummy_Uhoa, dummy_nonce: text
ku, kh, kb, ki, Ku, Kh, Kb, dummy_pk: public_key
u, h, b, U, H, B, i: agent
set_143, set_142, set_141, set_140, set_137, set_136, set_135, set_134, set_131, set_130, set_129, set_128, set_105, set_104, set_103, set_102: set
Set_34, Set_32, Set_30, Set_27, Dummy_Set_34, Dummy_Set_32, Dummy_Set_30, Dummy_Set_27, ASGoal: set(agent)


section inits:

initial_state init1 := 
 iknows(start).
 iknows(u).
 iknows(h).
 iknows(b).
 iknows(hf).
 iknows(ku).
 iknows(kh).
 iknows(kb).
 iknows(ki).
 iknows(i).
 state_user(u,h,b,ku,kh,kb,hf,1,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_102,set_103,set_104,set_105,3).
 state_board(b,u,h,ku,kh,kb,hf,2,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),dummy_nonce,dummy_nonce,pair(crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce)))),crypt(inv(dummy_pk),dummy_hash),4).
 state_host(h,u,b,ku,kh,kb,hf,3,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),pair(crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce)))),dummy_nonce,dummy_nonce,dummy_nonce,5).
 state_user(u,i,b,ku,ki,kb,hf,1,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_128,set_129,set_130,set_131,7).
 state_board(b,u,i,ku,ki,kb,hf,2,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),dummy_nonce,dummy_nonce,pair(crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce)))),crypt(inv(dummy_pk),dummy_hash),8).
 state_user(u,h,i,ku,kh,ki,hf,1,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_134,set_135,set_136,set_137,11).
 state_host(h,u,i,ku,kh,ki,hf,3,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),pair(crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce)))),dummy_nonce,dummy_nonce,dummy_nonce,13).
 state_board(b,i,h,ki,kh,kb,hf,2,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),dummy_nonce,dummy_nonce,pair(crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce)))),crypt(inv(dummy_pk),dummy_hash),16).
 state_host(h,i,b,ki,kh,kb,hf,3,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),pair(crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce)))),dummy_nonce,dummy_nonce,dummy_nonce,17)


section rules:

step step_0 (U,H,B,Ku,Kh,Kb,Hash,Dummy_Req_host,Dummy_Req_board,Dummy_Uhoa,Dummy_N1,Dummy_N2,Dummy_N3,Dummy_Set_27,Dummy_Set_30,Dummy_Set_32,Dummy_Set_34,SID,Uhoa,N1,N2,N3) :=
 state_user(U,H,B,Ku,Kh,Kb,Hash,1,Dummy_Req_host,Dummy_Req_board,Dummy_Uhoa,Dummy_N1,Dummy_N2,Dummy_N3,Dummy_Set_27,Dummy_Set_30,Dummy_Set_32,Dummy_Set_34,SID).
 iknows(start)
=[exists N3,N2,N1,Uhoa]=>
 state_user(U,H,B,Ku,Kh,Kb,Hash,3,crypt(Kh,crypt(inv(Ku),pair(Uhoa,N1))),crypt(Kb,crypt(inv(Ku),pair(N2,N3))),Uhoa,N1,N2,N3,Dummy_Set_27,Dummy_Set_30,Dummy_Set_32,Dummy_Set_34,SID).
 secret(Uhoa,uhoa,Dummy_Set_27).
 secret(N1,n1,Dummy_Set_30).
 secret(N2,n2,Dummy_Set_32).
 secret(N3,n3,Dummy_Set_34).
 iknows(pair(crypt(Kh,crypt(inv(Ku),pair(Uhoa,N1))),crypt(Kb,crypt(inv(Ku),pair(N2,N3))))).
 contains(U,Dummy_Set_27).
 contains(H,Dummy_Set_27).
 contains(U,Dummy_Set_30).
 contains(H,Dummy_Set_30).
 contains(U,Dummy_Set_32).
 contains(B,Dummy_Set_32).
 contains(U,Dummy_Set_34).
 contains(B,Dummy_Set_34)

step step_1 (B,U,H,Ku,Kh,Kb,Hash,Dummy_Req_host,Req_board,Dummy_N2,Dummy_N3,Dummy_Req_all,Dummy_Sig,SID,Req_host,N2,N3) :=
 state_board(B,U,H,Ku,Kh,Kb,Hash,2,Dummy_Req_host,Req_board,Dummy_N2,Dummy_N3,Dummy_Req_all,Dummy_Sig,SID).
 iknows(pair(Req_host,crypt(Kb,crypt(inv(Ku),pair(N2,N3)))))
 =>
 state_board(B,U,H,Ku,Kh,Kb,Hash,4,Req_host,Req_board,N2,N3,pair(Req_host,crypt(Kb,crypt(inv(Ku),pair(N2,N3)))),crypt(inv(Kb),apply(Hash,pair(Req_host,crypt(Kb,crypt(inv(Ku),pair(N2,N3)))))),SID).
 iknows(pair(pair(Req_host,crypt(Kb,crypt(inv(Ku),pair(N2,N3)))),crypt(inv(Kb),apply(Hash,pair(Req_host,crypt(Kb,crypt(inv(Ku),pair(N2,N3))))))))

step step_2 (H,U,B,Ku,Kh,Kb,Hash,Req_host,Req_board,Req_all,Dummy_Uhoa,Dummy_N1,N2,SID,Uhoa,N1) :=
 state_host(H,U,B,Ku,Kh,Kb,Hash,3,Req_host,Req_board,Req_all,Dummy_Uhoa,Dummy_N1,N2,SID).
 iknows(pair(crypt(Kh,crypt(inv(Ku),pair(Uhoa,N1))),pair(Req_board,crypt(inv(Kb),apply(Hash,Req_all)))))
 =>
 state_host(H,U,B,Ku,Kh,Kb,Hash,5,Req_host,Req_board,Req_all,Uhoa,N1,N2,SID)


section properties:

property secrecy_of_uhoa (MGoal,ASGoal) :=
 [] ((secret(MGoal,uhoa,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_n1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,n1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_n2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,n2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_n3 (MGoal,ASGoal) :=
 [] ((secret(MGoal,n3,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state secrecy_of_uhoa (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,uhoa,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_n1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,n1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_n2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,n2,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_n3 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,n3,ASGoal) &
 not(contains(i,ASGoal))


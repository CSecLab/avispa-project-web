role alice(
A,B,S : agent,
Kas: symmetric_key
sb,ss,rs,rb: channel(dy))
Played_by  A def=
local
State,Ta:nat ,
Na,m:text,
Kab:message
init state:=0
transition
1.	State=0 /\RCV(start)=|> state’:=2 /\ kab’:=new() /\ Ta’:=new() /\ ss(A,{kab’.Ta’.B}_kas) /\ secret(kab’,kab,{A,B,S})/\request(A,S,alice_server_Kas,Kas)
2.	State=2 /\ Na’:=new() /\ sb({A.Na’}_kab) =|> state’:=6 /\ request(A,B,alice_bob_na,Na’)
3.	State=6 /\ rb({m’}_kab) =|> state’:=12 
end role
role bob(
A,B,S : agent,
Kbs : symmetric key,
ss,rs, sa,ra: channel(dy))
Played_by B def=
local
State,Ts:nat,
M,Na:text,
Kab:message
     init state:=5
transition
1.	State=5 /\ rs({A.kab’.Ts’}_Kbs) =|> state’:=7/\ witness(B,S,server_bob_Kbs,Kbs)
2.	State=7 /\ ra({A.Na’}_kab) =|> state’:=9
3.	State=9 /\ m’:=xor(Na’,1) /\ sa({m’}_kab) =|> state’:=11 /\ witness(B,A,alice_bob_Na,Na’)
end role
role server(
A,B,S : agent,
Kas,kbs: symmetric_key,
sa, ra, sb, rb,: channel(dy))
local
State,Ts,Ta: nat, 
Kab:message
init state:=1
transition
1.	State=1 /\ ra(A,{B.kab’.Ta’}_kas) =|> state’:=3/\witness(S,A,alice_server_Kas,Kas)
2.	State=3 /\ Ts’:=new() /\ sb({A.kab’.Ts’}_kbs) =|> state:=5/\request(S,B,server_bob_Kbs,Kbs)
end role
role session(A,B,S :agent,
Kas,kbs  :symmetric_key) def=
Local 
Composition
alice( A,B,S,ks,sb,rb,ss,rs)
/\ bob(B,A,S,ks,sa,ra,ss,rs)
/\ server(S,A,B,kas,kbs,sa,ra,sb,rb)
end role
role environment()
def=
const 
A,B,S :agent,
server_bob_Kbs, alice_bob_na, alice_server_Kas:protocol_id
Kas,kbs,kab : symmetric_key
intruder_knowledge:= {A,B,S,kab}
composition
session(A,B,S,kas,kbs,Kab)
/\ session(i,B,S,kis,kib,Kbs)
/\ session(A,i,S,kis,kai,Kas)
/\ Session(A,B,i,kai,kbi,Kab)
end role
goal
secrecy_of Kab
authentication_on server_bob_Kbs
authentication_on alice_bob_na
authentication_on alice_server_Kas
end goal
environment()

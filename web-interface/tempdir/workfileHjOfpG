role role_RP 	(
	RP,OP,TE		:	agent,
	ClientId, URI		:	text,
	ROKey,RTKey		:	symmetric_key,
	TEKey			:	public_key,
	AuthReq,AuthRes,
	TokenReq,TokenRes	:	protocol_id,
	SND,RCV			:	channel(dy) 
		)
played_by RP
def=
	local
		State		:	nat,
		Stat,Code,IdToken:	text
	init
		State := 0
	transition
		1. 	State=0 /\ RCV(start) =|>
			State':=1 
			/\ Stat':=new() 
			/\ secret(Stat',sec_3,{RP,OP}) 
			/\ SND({AuthReq.ClientId.Stat'.URI}_ROKey)
		2. 	State=1 /\ RCV({AuthRes.Code'.Stat'}_ROKey) =|> 
			State':=2 
			/\ secret(Stat',sec_3,{RP,OP}) 
			/\ SND({TokenReq.Code'}_RTKey)
		3. 	State=2 /\ RCV({TokenRes.{IdToken'}_inv(TEKey)}_RTKey) =|> 
			State':=3 
end role

role role_OP	(
	OP,RP,TE		:	agent,
	ClientId, URI		:	text,
	ROKey			:	symmetric_key,
	AuthRequest,AuthRes	:	protocol_id,
	SND,RCV			:	channel(dy)
		)
played_by OP
def=
	local
		State		:	nat,
		Code,Stat	:	text
	init
		State := 0
	transition
		1. 	State=0 /\ RCV({AuthReq.ClientId'.Stat'}_ROKey) =|> 
			State':=1 
			/\ witness(OP,RP,auth_1,ClientId')
			/\ witness(OP,RP,auth_2,URI')
			/\ secret(Stat',sec_3,{RP,OP}) 
			/\ Code':=new() 
			/\ SND({AuthRes.Code'.Stat'}_ROKey)
end role

role role_TE	(
	TE,RP,OP		:	agent,
	RTKey			:	symmetric_key,
	TEKey			:	public_key,
	TokenReq,TokenRes	:	protocol_id,
	SND,RCV			:	channel(dy)
		)
played_by TE
def=
	local
		State		:	nat,
		Code,IdToken	:	text
	init
		State := 0
	transition
		1. 	State=0 /\ RCV({TokenReq.Code'}_RTKey) =|> 
			State':=1 
			/\ witness(TE,RP,auth_3,Code') 
			/\ IdToken':=new() 
			/\ SND({TokenRes.{IdToken'}_inv(TEKey)}_RTKey)
end role

role session 	(
	RP,OP,TE			:	agent,
	ClientId,URI			:	text,
	ROKey,RTKey			:	symmetric_key,
	TEKey				:	public_key,
	AuthReq,AuthRes,
	TokenReq,TokenRes	:	protocol_id
		)
def=
	local
		SND1,RCV1,SND2,RCV2,SND3,RCV3 :	channel(dy)
	composition
		role_RP(RP,OP,TE,ClientId,URI,ROKey,RTKey,TEKey,AuthRequest,AuthRes,TokenReq,TokenRes,SND1,RCV1) 
	     /\ role_OP(OP,RP,TE,ClientId,URI,ROKey,AuthReq,AuthRes,SND2,RCV2) 
	     /\ role_TE(TE,RP,OP,RTKey,TEKey,TokenReq,TokenRes,SND3,RCV3)
end role

role environment()
def=
	const
		rp,op,te		:	agent,
		clientid		:	text,
		rokey,rtkey		:	symmetric_key,
		tekey			:	public_key,
		authreq,authres,	
		tokenreq,tokenres,	
		auth_1,				
		auth_2,				
		auth_3,				
		sec_3			:	protocol_id
	intruder_knowledge = {rp,op,te,tekey}
	composition
		session(rp,op,te,clientid,rokey,rtkey,tekey,authreq,authres,tokenreq,tokenres)		
	      /\ session(i,op,te,clientid,rokey,rtkey,tekey,authreq,authres,tokenreq,tokenres)
	      /\ session(rp,i,te,clientid,rokey,rtkey,tekey,authreq,authres,tokenreq,tokenres)
	      /\ session(rp,op,i,clientid,rokey,rtkey,tekey,authreq,authres,tokenreq,tokenres)
 
		
end role

goal
	authentication_on auth_1
	authentication_on auth_2
	authentication_on auth_3
	secrecy_of sec_3
end goal

environment()

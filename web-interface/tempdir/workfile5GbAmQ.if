%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfile5GbAmQ

section signature:

state_server: agent * agent * symmetric_key * hash_func * nat * text * text * text * text * apply(hash_func,pair(symmetric_key,pair(text,text))) * symmetric_key * nat -> fact
state_tag: agent * agent * symmetric_key * hash_func * nat * text * text * text * apply(hash_func,pair(text,pair(text,text))) * set(agent) * set(agent) * nat -> fact


section types:

Auth, Dummy_Auth: apply(hash_func,pair(text,pair(text,text)))
set_90, set_89, set_87, set_86, set_69, set_68: set
Dummy_Auth1, Auth1: apply(hash_func,pair(symmetric_key,pair(text,text)))
R1, R2, ID, Dummy_ID, Dummy_R2, Dummy_R1, dummy_nonce, IDold: text
Set_45, Set_42, Dummy_Set_45, Dummy_Set_42, ASGoal: set(agent)
2, 10, 6, State, 4, SID, Dummy_State, 3, 1, 0, SID2, SID1: nat
dummy_msg, start, MGoal: message
H, h: hash_func
dummy_sk, K, Dummy_K, Kold, k, kold, kti, ksi: symmetric_key
id, id2, trk, trid, id3, id4, id5: protocol_id
T, S, tag, A2Goal, A1Goal, server, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(tag).
 iknows(server).
 iknows(h).
 iknows(kti).
 iknows(ksi).
 iknows(i).
 state_tag(tag,server,k,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,set_68,set_69,3).
 state_server(server,tag,k,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_sk,4).
 state_tag(tag,i,kti,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,set_86,set_87,6).
 state_server(server,i,ksi,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_sk,10)


section rules:

step step_0 (T,S,K,H,Dummy_R1,Dummy_R2,ID,Auth,Dummy_Set_42,Dummy_Set_45,SID,R1,R2) :=
 state_tag(T,S,K,H,0,Dummy_R1,Dummy_R2,ID,Auth,Dummy_Set_42,Dummy_Set_45,SID).
 iknows(R1)
=[exists R2]=>
 state_tag(T,S,K,H,1,R1,R2,ID,Auth,Dummy_Set_42,Dummy_Set_45,SID).
 iknows(pair(apply(h,pair(K,pair(R1,R2))),xor(R2,ID))).
 witness(T,S,trid,ID).
 witness(T,S,trk,K).
 secret(R2,id2,Dummy_Set_42).
 secret(ID,id,Dummy_Set_45).
 contains(T,Dummy_Set_42).
 contains(S,Dummy_Set_42).
 contains(T,Dummy_Set_45).
 contains(S,Dummy_Set_45)

step step_1 (T,S,Dummy_K,H,Dummy_R1,Dummy_R2,Dummy_ID,Dummy_Auth,Set_42,Set_45,SID,K,R1,R2,ID) :=
 state_tag(T,S,Dummy_K,H,1,Dummy_R1,Dummy_R2,Dummy_ID,Dummy_Auth,Set_42,Set_45,SID).
 iknows(apply(h,pair(Dummy_ID,pair(Dummy_K,pair(R1,R2)))))
=[exists K,ID]=>
 state_tag(T,S,K,H,2,R1,R2,ID,apply(h,pair(Dummy_ID,pair(Dummy_K,pair(R1,R2)))),Set_42,Set_45,SID).
 request(S,T,trid,apply(h,pair(Dummy_ID,pair(Dummy_K,pair(R1,R2)))),SID)

step step_2 (S,T,K,H,Dummy_R1,R2,ID,IDold,Auth1,Kold,SID,R1) :=
 state_server(S,T,K,H,0,Dummy_R1,R2,ID,IDold,Auth1,Kold,SID).
 iknows(start)
=[exists R1]=>
 state_server(S,T,K,H,1,R1,R2,ID,IDold,Auth1,Kold,SID).
 iknows(R1)

step step_3 (S,T,Dummy_K,H,R1,Dummy_R2,Dummy_ID,IDold,Dummy_Auth1,Kold,SID,K,R2,ID) :=
 state_server(S,T,Dummy_K,H,3,R1,Dummy_R2,Dummy_ID,IDold,Dummy_Auth1,Kold,SID).
 iknows(pair(apply(H,pair(Dummy_K,pair(R1,R2))),xor(R2,Dummy_ID)))
=[exists K,ID]=>
 state_server(S,T,K,H,4,R1,R2,ID,IDold,apply(H,pair(Dummy_K,pair(R1,R2))),Kold,SID).
 request(S,T,id3,apply(H,pair(Dummy_K,pair(R1,R2))),SID).
 iknows(apply(H,pair(Dummy_ID,pair(Dummy_K,pair(R1,R2))))).
 witness(S,T,trid,Dummy_ID)

step step_4 (S,T,Kold,H,R1,Dummy_R2,IDold,Dummy_Auth1,SID,R2) :=
 state_server(S,T,Kold,H,3,R1,Dummy_R2,IDold,IDold,Dummy_Auth1,Kold,SID).
 iknows(pair(apply(h,pair(Kold,pair(R1,R2))),xor(R2,IDold)))
 =>
 state_server(S,T,Kold,H,4,R1,R2,IDold,IDold,apply(H,pair(Kold,pair(R1,R2))),Kold,SID).
 request(S,T,id3,apply(H,pair(Kold,pair(R1,R2))),SID).
 iknows(apply(H,pair(IDold,pair(Kold,pair(R1,R2))))).
 witness(S,T,trid,IDold)


section properties:

property secrecy_of_id (MGoal,ASGoal) :=
 [] ((secret(MGoal,id,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_id2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,id2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_trid (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,trid,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,trid,MGoal))
     /\ ((request(A1Goal,A2Goal,trid,MGoal,SID1)
           /\ request(A1Goal,A2Goal,trid,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_id3 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,id3,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,id3,MGoal))
     /\ ((request(A1Goal,A2Goal,id3,MGoal,SID1)
           /\ request(A1Goal,A2Goal,id3,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_trk (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,trk,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,trk,MGoal))
     /\ ((request(A1Goal,A2Goal,trk,MGoal,SID1)
           /\ request(A1Goal,A2Goal,trk,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_id (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,id,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_id2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,id2,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_trid (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,trid,MGoal,SID) &
 not(witness(A2Goal,A1Goal,trid,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_trid (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,trid,MGoal,SID1).
 request(A1Goal,A2Goal,trid,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_id3 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,id3,MGoal,SID) &
 not(witness(A2Goal,A1Goal,id3,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_id3 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,id3,MGoal,SID1).
 request(A1Goal,A2Goal,id3,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_trk (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,trk,MGoal,SID) &
 not(witness(A2Goal,A1Goal,trk,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_trk (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,trk,MGoal,SID1).
 request(A1Goal,A2Goal,trk,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileUoINcc

section signature:

state_server: agent * agent * hash_func * hash_func * hash_func * symmetric_key * nat * text * text * apply(hash_func,pair(text,pair(text,text))) * nat -> fact
state_tag: agent * agent * hash_func * hash_func * hash_func * symmetric_key * nat * text * text * apply(hash_func,pair(text,pair(text,text))) * set(agent) * nat -> fact


section types:

Auth, Dummy_Auth1, Dummy_Auth, Auth1: apply(hash_func,pair(text,pair(text,text)))
set_81, set_79, set_65: set
Nr, Nt, Dummy_Nt, Dummy_Nr, dummy_nonce: text
3, State, 10, 6, 4, SID, 1, Dummy_State, 2, 0, SID2, SID1: nat
Set_39, Dummy_Set_39, ASGoal: set(agent)
start, dummy_msg, MGoal: message
ID, Dummy_ID, iden, idi: symmetric_key
H, F, Succ, h, f, g: hash_func
trid, id, id3, trk: protocol_id
T, S, tag, A2Goal, A1Goal, server, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(tag).
 iknows(server).
 iknows(h).
 iknows(f).
 iknows(g).
 iknows(idi).
 iknows(i).
 state_tag(tag,server,h,f,g,iden,1,dummy_nonce,dummy_nonce,dummy_msg,set_65,3).
 state_server(server,tag,h,f,g,iden,0,dummy_nonce,dummy_nonce,dummy_msg,4).
 state_tag(tag,i,h,f,g,iden,1,dummy_nonce,dummy_nonce,dummy_msg,set_79,6).
 state_server(server,i,h,f,g,idi,0,dummy_nonce,dummy_nonce,dummy_msg,10)


section rules:

step step_0 (T,S,H,F,Succ,ID,Dummy_Nr,Dummy_Nt,Auth,Dummy_Set_39,SID,Nr,Nt) :=
 state_tag(T,S,H,F,Succ,ID,1,Dummy_Nr,Dummy_Nt,Auth,Dummy_Set_39,SID).
 iknows(Nr)
=[exists Nt]=>
 state_tag(T,S,H,F,Succ,ID,3,Nr,Nt,Auth,Dummy_Set_39,SID).
 iknows(pair(apply(F,pair(ID,pair(Nr,Nt))),Nt)).
 secret(ID,id,Dummy_Set_39).
 contains(T,Dummy_Set_39).
 contains(S,Dummy_Set_39)

step step_1 (T,S,H,F,Succ,Dummy_ID,Dummy_Nr,Dummy_Nt,Dummy_Auth,Set_39,SID,Nr,Nt) :=
 state_tag(T,S,H,F,Succ,Dummy_ID,3,Dummy_Nr,Dummy_Nt,Dummy_Auth,Set_39,SID).
 iknows(apply(F,pair(ID,pair(Nr,Nt))))
 =>
 state_tag(T,S,H,F,Succ,apply(Succ,Dummy_ID),3,Nr,Nt,apply(F,pair(apply(Succ,Dummy_ID),pair(Nr,Nt))),Set_39,SID).
 request(S,T,trid,apply(F,pair(apply(Succ,Dummy_ID),pair(Nr,Nt))),SID).
 iknows(apply(Succ,Dummy_ID))

step step_2 (S,T,H,F,Succ,ID,Dummy_Nr,Nt,Auth1,SID,Nr) :=
 state_server(S,T,H,F,Succ,ID,0,Dummy_Nr,Nt,Auth1,SID).
 iknows(start)
=[exists Nr]=>
 state_server(S,T,H,F,Succ,ID,2,Nr,Nt,Auth1,SID).
 iknows(Nr)

step step_3 (S,T,H,F,Succ,ID,Dummy_Nr,Dummy_Nt,Dummy_Auth1,SID,Nr,Nt) :=
 state_server(S,T,H,F,Succ,ID,2,Dummy_Nr,Dummy_Nt,Dummy_Auth1,SID).
 iknows(pair(apply(F,pair(ID,pair(Nr,Nt))),Nt))
 =>
 state_server(S,T,H,F,Succ,ID,4,Nr,Nt,apply(F,pair(ID,pair(Nr,Nt))),SID).
 request(S,T,id3,apply(F,pair(ID,pair(Nr,Nt))),SID)

step step_4 (S,T,H,F,Succ,Dummy_ID,Dummy_Nr,Dummy_Nt,Auth1,SID,Nr,Nt) :=
 state_server(S,T,H,F,Succ,Dummy_ID,4,Dummy_Nr,Dummy_Nt,Auth1,SID).
 iknows(apply(F,pair(apply(Succ,Dummy_ID),pair(Nr,Nt))))
 =>
 state_server(S,T,H,F,Succ,apply(Succ,Dummy_ID),4,Nr,Nt,Auth1,SID)


section properties:

property secrecy_of_id (MGoal,ASGoal) :=
 [] ((secret(MGoal,id,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_trid (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,trid,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,trid,MGoal))
     /\ ((request(A1Goal,A2Goal,trid,MGoal,SID1)
           /\ request(A1Goal,A2Goal,trid,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_id3 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,id3,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,id3,MGoal))
     /\ ((request(A1Goal,A2Goal,id3,MGoal,SID1)
           /\ request(A1Goal,A2Goal,id3,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_trk (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,trk,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,trk,MGoal))
     /\ ((request(A1Goal,A2Goal,trk,MGoal,SID1)
           /\ request(A1Goal,A2Goal,trk,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_id (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,id,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_trid (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,trid,MGoal,SID) &
 not(witness(A2Goal,A1Goal,trid,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_trid (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,trid,MGoal,SID1).
 request(A1Goal,A2Goal,trid,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_id3 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,id3,MGoal,SID) &
 not(witness(A2Goal,A1Goal,id3,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_id3 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,id3,MGoal,SID1).
 request(A1Goal,A2Goal,id3,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_trk (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,trk,MGoal,SID) &
 not(witness(A2Goal,A1Goal,trk,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_trk (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,trk,MGoal,SID1).
 request(A1Goal,A2Goal,trk,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


role alice (A,B,S: agent,Ks : public_key, K: symmetric_key,	SND_AS, RCV_AS: channel (dy)) 
played_by A def=
  local 
     State  : nat, 
     Na,Nb,C  : text
  init 
     State:=0

  transition 
    0. State=0 /\ RCV_AS(start) =|>
          State':=4
       /\ Na':=new()
       /\ SND_AS(A.B.xor({Na'}_Ks,{A}_Ks).xor({Na'}_Ks,{B}_Ks).xor({Na'}_Ks,{C}_Ks))
	   /\ witness(A,B,bob_alice_na,Na')
	   /\ secret(Na',na,{A,B,S}) 

    4. State=4 /\ RCV_AS(xor(K',{Na}_Ks)) =|>
		  State':=6
		  /\ request(A,S, alice_server_sa,K')
 
end role

role bob(B, A, S: agent,      
         Ks: public_key,     
		 K: symmetric_key,
         SND_BS, RCV_BS: channel (dy)) 
played_by B def=

  local State : nat, 
        Na, Nb, C: text

  init State := 2

  transition 

    2.  State= 2 /\ RCV_BS(start) =|> 
                State':= 7
				/\ Nb':=new()
				/\ SND_BS(B.A.xor({B}_Ks,{Nb'}_Ks).xor({A}_Ks,{Nb'}_Ks).xor({C}_Ks,{Nb'}_Ks))
                /\ secret(Nb',nb,{A,B,S}) 
                /\ witness(B,A,alice_bob_nb,Nb')

    5.  State= 5 /\ RCV_BS(xor(K',{Nb}_Ks)) =|> 
			State':=7
			/\ request(B,S, bob_server_sb,K')
end role

role server(S, A, B: agent,
		Ks: public_key,
		SND_AS, RCV_AS, SND_BS, RCV_BS: channel(dy))

	played_by S def=
	
	local State : nat,
		  Nb,Na,C : text,
		  K: symmetric_key
		  
	init State := 1

	transition
	
		1. State = 1 /\ RCV_AS(A.B.xor({Na'}_Ks,{A}_Ks).xor({Na'}_Ks,{B}_Ks).xor({Na'}_Ks,{C}_Ks)) =|>
				State':= 3
		3. State = 3 /\ RCV_BS(B.A.xor({Nb'}_Ks,{B}_Ks).xor({Nb'}_Ks,{A}_Ks).xor({Nb'}_Ks,{C}_Ks)) =|>
			State':=8 
			/\ K' := new()
			/\ SND_BS(xor(K',{Nb'}_Ks)) 
			/\ SND_AS(xor(K',{Na}_Ks)) 
			/\ secret(K',kab,{A,B}) 
			/\ witness(S,A,alice_server_sa,K')
			/\ witness(S,B,bob_server_sb,K')
			
end role

role session(A,B,S: agent, 
			Ks: public_key, 
			K: symmetric_key) def= 
    local SND_AS, SND_BS, RCV_AS, RCV_BS: channel (dy)

  composition
    alice(A,B,S,Ks,K,SND_AS,RCV_AS) /\ 
    bob(B,A,S,Ks,K,SND_BS,RCV_BS) /\
    server(S,A,B,Ks,SND_AS, RCV_AS, SND_BS, RCV_BS) 
end role

role environment() def=

  const
     a, b, s, i: agent,
     ks, ki: public_key,
     na, nb, kab,ca, alice_bob_nb, bob_alice_na,
	 alice_server_sa,bob_server_sb: protocol_id

  intruder_knowledge = {a,b,i,ks,ki,inv(ki)}

  composition
    session(a,b,s,ks,k)
	/\session(a,i,s,ks,k) 
	 /\session(i,b,s,ks,k) 

end role

goal

  secrecy_of kab
%  authentication_on alice_bob_nb,bob_server_sb
%  authentication_on bob_alice_na,alice_server_sa

end goal

environment()

%% PROTOCOL: 4-way handshake
%% PURPOSE: Encrypted key exchange
%% MP_MA:
%% B -> A : (AA,ANonce,msg1)    
%% A -> B : (SPA,SNonce,msg2,MIC{SNonce,msg2,PTK})
%% B -> A : (AA,ANonce,msg3,MIC{ANonce,msg3,PTK})
%% A -> B : (SPA,msg4,MIC{msg4})
%%
%%
%% 
%%HLPSL:

role bob(A,B: agent,
		 PMK: symmetric_key,
		 AA: text,
         Hash: hash_func,
         Snd,Rcv: channel(dy))
played_by B
def=

  local State   : nat,
        AA,SPA,msg1,msg2,msg3,msg4,ANonce,SNonce,PTK : text,
		MIC : message,

  init  State := 0

  transition

   1. State = 0
      / Rcv(start)
      =|> 
      State' := 2
	  / ANonce:=new()
      / Snd(AA,ANonce,msg1) 

   2. State = 2
      / Rcv(SPA,SNonce,msg2,MIC)
	  / PTK:=Hash(AA.SPA.ANonce.SNonce.PMK)
	  / MIC':=Hash(SNonce.msg2.PTK)
	  / MIC' = MIC
      =|> 
      State' := 4
	  / MIC':=Hash(ANonce,msg3,PTK)
      / Snd(AA,ANonce,msg3,MIC') 

   3. State = 4
      / Rcv(SPA,msg4,MIC} 
      / MIC':=Hash(msg4)
      / MIC' = MIC
	  =|> 
      State' := 6
	  / request(B,A)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role alice(A,B: agent,
		 PMK: symmetric_key,
		 SPA: text,
         Hash: hash_func,
         Snd,Rcv: channel(dy))
played_by A
def=

  local State   : nat,
        msg1,msg2,msg3,msg4,ANonce,SNonce,PTK : text,
		MIC : message,

  init  State := 1

  transition

   1. State = 1
      / Rcv(AA,ANonce',msg1)
	  / SNonce:=new()
	  / PTK:=Hash(AA.SPA.ANonce.SNonce.PMK)
	  / MIC:=Hash(SNonce.msg2.PTK)
      =|> 
      State' := 3
      / Snd(SPA,SNonce,msg2,MIC) 

   2. State = 3
      / Rcv(AA,ANonce,msg3,MIC)
	  / MIC':=Hash(ANonce,msg3,PTK)
	  / MIC' = MIC
      =|> 
      State' := 5
	  / MIC':=Hash(msg4)
      / Snd(SPA,msg4,MIC') 


end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role session(A,B: agent,
		 PMK: symmetric_key,
		 SPA: text,
		 AA: text,
         Hash: hash_func)
def=

  local SA, RA, SB, RB: channel (dy)

  composition
     MA(B,A,PMK,AA,Hash,SB,RB)
  / MP(A,B,PMK,SPA,Hash,SA,RA)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


role environment()
def=

  const a, b   : agent,

  intruder_knowledge={a,b}

  composition
      session(a,b)
 
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal

 secrecy_of PTK,PMK


end goal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

environment()
 
%

role user (USERID, SID : agent,
SKus : symmetric_key,
H : hash_func,
Snd, Rcv: channel(dy))


played_by USERID
def=
local State : nat,
PWi, Ni, Y,Na,CID,Bi,Ci,Nb,Ack,Ni_new,PWi_new: text
const temps1,temps2,user_server_na,server_user_nb : protocol_id
init State := 0

transition
1. State = 0 /\Rcv(start) =|>
State' := 2 /\PWi' := new()
/\Snd({PWi'}_SKus) /\secret({PWi'}, temps1, {USERID,SID}) /\secret({SKus}, temps2, {USERID,SID})

2.State = 2 /\Rcv({PWi.H.Ni'.Y'}_SKus)
=|>State':= 4

3.State=4 /\Rcv({PWi'.H.Ni'.Y'}_SKus)=|>
State':=6
/\Na':=new() /\witness(USERID,SID,user_server_na,Na')   /\CID':=xor(H(PWi'),H(xor(Ni',xor(Y',Na')))) /\Bi':=H(xor(CID',H(PWi)))
/\Ci':=H(xor(Na',xor(Ni',xor(Bi',Y')))) /\Snd(CID'.Ni'.Ci'.Na')

%%%%%%%%%%%%%%%password updation
4.State=6=|>
State':=8
/\PWi_new':=new() /\Ni_new':=xor(Ni',xor(H(PWi),H(PWi_new'))) /\Ni':=Ni_new'
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role server (USERID, SID : agent,
SKus : symmetric_key,
H: hash_func,
Snd, Rcv: channel(dy))

played_by SID
def=
local 
State : nat,
PWi, Ni, Y,X,Na,CID,Bi,Ci,Nb,HPWi,Ack: text
const temps1,temps2,user_server_na,server_user_nb : protocol_id
init State := 1
transition
1. State = 1 /\Rcv({PWi'}_SKus) =|>
State':=3 /\X':=new() /\secret(X',temps1,{SID})
/\Y':=new() /\secret(Y',temps2,{USERID,SID}) /\Ni':=xor(H(PWi'),H(X')) /\Snd({PWi'.H.Ni'.Y'}_SKus)

2.State=3/\Rcv(CID'.Ni'.Ci'.Na')=|>
State':=5 /\Nb':=new()

%/\H(PWi'):=xor(CID',H(Ni',xor(Y1,Na')))
%/\Bi':=H(xor(CID',H(PWi')))
%/\Ci':=H(xor(Na',xor(Ni',xor(Bi',Y'))))
/\request(SID,USERID,user_server_na,Na') % Server acceptance of value that was generated by User USERID
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role session(USERID, SID : agent)
def=
local 
SKus : symmetric_key,
H : hash_func,
SU,SS,RU,RS:channel(dy),
PWi, X,Y,Ni: text
const temps1,temps2 : protocol_id
composition
user(USERID,SID,SKus,H,SU,RU) /\server(USERID,SID,SKus,H,SS,RS)
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role environment ()
def=
const u,s : agent,
h: hash_func,
temps1,temps2,user_server_na,server_user_nb : protocol_id

intruder_knowledge={u,s,h}
composition
session(u,s)
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
goal
	secrecy_of temps1
	secrecy_of temps2
	authentication_on user_server_na
	authentication_on server_user_nb
end goal
environment()

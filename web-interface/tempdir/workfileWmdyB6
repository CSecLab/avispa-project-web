 % Client Side Role and Client's transition

 role alice ( A , S  : agent, 
              Password,
              Login    : text,
              B,C      : message,
              Hash     : hash_func,
              Kas      : symmetric_key,
              Snd, Rcv : channel(dy)) played_by A def=

  local State          : nat,
        N              : text,
        C1 , C2 , C3 ,
        D1 , D2 , D3 ,
        D4 , D5        : message 
 
  const na,np,    
        sec_c_Kas   : protocol_id    

  init State := 0

  transition

   0.    State  = 0  /\ Rcv(start) =|>
         State' := 2 /\ Password' := new() /\ B' := xor(Password,1) /\ Snd({A.{Hash(Hash(B'))}})
                     /\ secret(Password,sec_c_Kas,{A,S})
                     /\ witness(A,S,np,Password)

   2.    State = 4   /\ Snd(Login) =|>
         State' := 5 
         

   4.    State  = 4  /\ Rcv(N) =|>
         State' := 6 /\ N':= new() /\ D1' := Hash(xor(Password,N'))  /\ D2' := Hash(Hash(xor(Password,N'))) /\ C1' := xor(D1',D2')
                     /\ D3' := Hash(Hash(xor(Password,xor(N',1))))  /\ D4' := Hash(xor(Password,N')) /\ C2' := xor(D3',D4')
                     /\ D5' := Hash(xor(Password,xor(N',1))) /\ C3' := Hash(Hash(D5')) 
                     /\ Snd(C1'.C2'.C3')
                     /\ request(A,S,na,N)

end role





% Server Side role and Server's transition

role server ( S, A  : agent,
              Password,
              Login    : text,
              B,C      : message,
              Hash     : hash_func,
              Kas      : symmetric_key,
              Snd, Rcv : channel(dy)) played_by S def=

  local State        : nat,
        N            : text,
        B1,B2, 
        B3,B4, 
        B5,C1,C2,
        C3           : message

  const na,np,
        sec_s_Kas    : protocol_id

  init State := 0
        

  transition

   1.    State  =  1 /\ Rcv(A.(Hash(Hash(xor(Password,1))))) =|>
         State' := 2 /\ C' :=  Hash(Hash(xor(Password,1)))
                     /\ secret(Password,sec_s_Kas,{A,S})
                     /\ request(S,A,np,Password)
         

   3.    State = 3   /\ Rcv(Login) =|> 
         State' := 5 /\ N' := new() /\ Snd(N') 
                     /\ witness(S,A,na,N)

   5.    State = 5   /\ Rcv(C1'.C2'.C3')/\ not(C1' = C2') /\ C3 = Hash(Hash(xor(Password,xor(N,1))))  =|>
         State' := 6 /\B1' := Hash(xor(Password,N))  /\ B2' := xor(C1',Hash(B1'))
                     /\ B1':= B2'
                     /\ B3' :=Hash(Hash(xor(Password,xor(N,1)))) /\ B4' := xor(C2', Hash(xor(Password,N)))
                     /\ B3' := B4 
                     /\ C' := Hash(Hash(xor(Password,xor(N,1))))
                     /\ N' := xor(N',1)

end role





% Session creation and composition of server and client 

role session( A , S    : agent, 
              Password,
              Login    : text,
              B,C      : message,
              Hash     : hash_func,
              Kas      : symmetric_key,
              Snd,Rcv  : channel(dy))  def= 


composition

  alice (A,S,Password,Login,B,C,Hash,Kas,Snd,Rcv) 
  /\
  server (S,A,Password,Login,B,C,Hash,Kas,Snd,Rcv)

end role





% Inclusion of the third party that is inclusion of intruder  

role environment()

  def= 
    local Snd, Rcv : channel (dy)

    const a,s,i    : agent, 
          password,
          login    : text,
          b,c      : message,
          h        : hash_func,
          kas      : symmetric_key,
          na,np    : protocol_id

  intruder_knowledge = {a,s,h,b,c}

  composition 

  session(a,s,password,login,b,c,h,kas,Snd,Rcv)

end role             




% Secrecy and authentication based on protocol id 

goal
  
  % secrecy of the shared key

  secrecy_of sec_c_Kas, sec_s_Kas
  
  % S authenticates A on password

  authentication_on np                                    

  % A authenticates S on N

  authentication_on na                                     
  
end goal 


environment()
role alice(A,B : agent,
			Kab : symmetric_key,
			Msg: text,
			SND, RCV : channel (dy))
played_by A def=
	local	State: nat
	init 	State := 0
	
	transition
	step1. State = 0 /\ RCV(start) =|>
	State':= 2 /\ SND({Msg}_Kab) /\ secret(Msg, secret_msg,{A,B})
end role

role bob(A,B : agent,
		Kab : symmetric_key,
		SND, RCV : channel (dy))
played_by B def=
	local 	State: nat, Ans ,Msg: text
	init 	State := 1
	
	transition
	step1. State = 1 /\ RCV({Msg}_Kab) =|>
	State':= 3 /\ SND({Ans}_Kab) /\ secret(Ans, secret_ans,{A,B})
end role

role session(A,B : agent,
		Kab_A, Kab_B : symmetric_key,
		Msg : text)
def=
		local SA, RA, SB, RB: channel (dy)
		
	composition
	alice (A, B, Kab_A, Msg, SA, RA)
	/\ bob (B, A, Kab_B, SB, RB)
end role

role environment()
def=
	const a, b: agent,
	kab, ki : symmetric_key,
	msg: text,
	secret_msg, secret_ans : protocol_id

	intruder_knowledge = {a, b,ki}
	
	composition
	session(a,b,kab,kab,msg)
	/\ session(a,i,kab,ki,msg)
	/\ session(i,b,ki,kab,msg)
end role

goal
	secrecy_of secret_msg, secret_ans
end goal

environment()
role alice (A,B     : agent,
            P0,P4   : public_key,  
            SND,RCV : channel(dy) )
played_by A
% as bank
def=
   local  State   : nat,
          Cw      : text,   % encrypted Will
          W       : text,   % Will
          K       : symmetric_key,
          Zc      : text,
          F,H     : hash_func
const alice_bob_na, bob_alice_nb : protocol_id

init State := 0
transition
1. State   = 0 /\ RCV(start) =|>
   State' := 2 /\ Zc'    := {K}_P4 
               /\ Cw'    := {W}_K 
               /\ SND(Zc'.Cw')    %send to court
               /\ secret(K,bob_alice_nb,{A,B})
               /\ witness(A,B,bob_alice_nb,Cw')
end role 

role bob (A,B     : agent,
          P0,P4   : public_key,  
          SND,RCV : channel(dy) )
played_by B  
% as court
def=
   local  State   : nat,
          Zw, Cw  : text,
          W       : text,
          K       : symmetric_key

init State := 1
transition
1. State   = 1 /\ RCV(Zc'.Cw') =|>
   State' := 3 /\ K' := {Zc'}_inv(P4)
               /\ W' := {Cw'}_K'  
               /\ witness(B,A,bob_alice_nb,W)
end role

role session (A,  B   : agent,
              P0,P4   : public_key  )
def=  
   local  SA, SB,RA, RB: channel (dy)
composition
       alice(A,B,P0,P4,SA,RA)
       /\bob(A,B,P0,P4,SB,RB)
end role

role environment()
def=
   const a, b ,i       : agent,
         p0,p4,ki      : public_key,
         zw,cw         : text,
         bob_alice_na, 
         alice_bob_nb,
         na, nb        : protocol_id
intruder_knowledge = {a,b,i,p0,p3,zw,cw}

composition
    session(a,b,p0,p4)
 /\ session(a,i,p0,p4)
end role

goal
secrecy_of na, nb
authentication_on alice_bob_nb
authentication_on bob_alice_na
end goal

environment()

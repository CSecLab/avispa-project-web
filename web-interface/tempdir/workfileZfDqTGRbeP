role alice (A, B: agent,
Na, Nb: public_key,
Snd, Rcv: channel(dy))
played_by A def=

local State : nat,
Na, Nb: text,
Kb: public_key
init State := 0
transition


 State = 0 /\ Rcv(start))=|>
 State:= 1 /\ Snd(A.B)

State = 1 /\ Rcv({B.Kb}_inv(Ks))=|> 

 State = 0 /\ Rcv(start) /\ in(B.Kb)=|>
 State:= 4 /\ Na:=new() /\ Snd({Na.A}_Kb)
/\ secret(Na,sna,{A,B})
/\ witness(A,B,bob_alice_na,Na)

State = 4 /\ Rcv({Na.Nb}_Ka)=|> 
State:= 6 /\ Snd({Nb}_Kb)
/\ request(A,B,alice_bob_nb,Nb)
end role

role bob(A, B: agent,
Kb, Ks: public_key,
Snd, Rcv: channel(dy))
played_by B def=
local State: nat,
Na, Nb: text,
Ka: public_key

init State := 2
transition



 State = 2 /\ Rcv({Na.A}_Kb) /\ not(in(A.Ka))=|>
 State:= 3 /\ Snd(B.A)
State = 3 /\ Rcv({A.Ka}_inv(Ks))=|> 
State = 2 /\ Rcv({Na.A}_Kb) /\ in(A.Ka)=|> 
State:= 5 /\ Nb:=new() /\ Snd({Na.Nb}_Ka)
/\ secret(Nb,snb,{A,B})
/\ witness(B,A,alice_bob_nb,Nb)
 
State = 5 /\ Rcv({Nb}_Kb)=|> 
State:= 7 /\ request(B,A,bob_alice_na,Na)
end role


role server(S: agent,
Ks: public_key,
KeyMap: (agent.public_key) set,
Snd, Rcv: channel(dy))
played_by S def=
local A, B: agent,
Kb: public_key
transition
req1. Rcv(A.B) /\ in(B.Kb,
Snd({B.Kb}_inv(Ks))
end role


role environment() def=
local KeyMap: (agent.public_key) set,
Snd, Rcv: channel(dy)
const a, b, s, i: agent,
ka, kb, ki, ks: public_key,
sna, snb, alice_bob_nb, bob_alice_na: protocol_id
init KeyMap := {a.ka, b.kb, i.ki}
intruder_knowledge = {a, b, ks, ka, kb, ki, inv(ki)}
composition



goal
secrecy_of sna, snb
authentication_on alice_bob_nb
authentication_on bob_alice_na
end goal


environment()

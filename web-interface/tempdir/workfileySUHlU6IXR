role a(A : agent, Ka, Kb : symmetric_key,SND, RCV : channel(dy))played_by A def=local State : nat, Na, Nb : text, B : agentinit State:=0transitionstep1. State=0 / RCV(start)=|> State’:=1 / Na’:=new() / SND({Na’.A}_Kb)step2. State=1 / RCV({Na.Nb’}_Ka)=|> State’:=2 / SND({Nb’}_Kb)end rolerole b(B : agent, Ka, Kb : symmetric_key,SND, RCV : channel(dy))played_by B def=local State : nat, Na,Nb : text, A : agentinit State:=0transitionstep1. State=0 /  RCV({Na’.A’}_Kb)
=|> State’:=1 / SND({Na’.Nb’}_Ka)step2. State=1 / RCV({Nb}_Kb)=|> State’:=2end role
role session(A, B : agent, KaA, KbA, KaB, KbB : symmetric_key)def=local S_A, R_A, S_B, R_B : channel(dy)compositiona(A, KaA, KbB, S_A, R_A)/ b(B, KaB, KbB, S_B, R_B)end rolerole environment()def=const alice, bob : agent, ka, kb : symmetric_keyintruder_knowledge={alice, bob}compositionsession(alice, bob, ka, kb, ka, kb)/ session(alice, bob, ka, kb, ka, kb)end roleenvironment() 
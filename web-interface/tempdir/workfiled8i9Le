role Reader(R, T, S: agent,
             
            h:hash,
            SND_RT, RCV_TR, SND_RS, RCV_SR: channel(dy))
played by R

def=

  local State: nat,
        R1:text(fresh),
        ID:text,

init state=0

transition

1. State = 0 /\ R1’ := new() /\ SND_RT(R1')

2. State = 1   /\ Rcv_TR(h(k,R1,R2).xor(R2,ID).h(ID,R1))

3. State=2 /\ SND_RS(h(k,R1,R2).xor(R2,ID).ID)







role Tag(T,R, S: agent,
               h: hash,
                L: text set,
               Snd,Rcv: channel(dy))
played_by T
def=

  local State   : nat,
        
        R1,R2 : text(fresh)
        ID,k:text

  const sec_k1 : protocol_id

  init  State := 0

  transition

   1. State = 0
      /\ Rcv(R1)
      =|> 
      State' := 1
      /\ R2' := new()
      /\ Snd(h(k,R1,R2).xor(R2,ID).h(ID,R1)) 
      /\ request( T, R, tag_reader_ID,ID')
      /\ secret(ID',id, {T, R, S})
      /\ secret (R2, id2, {T, S})

   2. State = 1
      /\ Rcv(h(ID',R1,R2))
      =|> 
      State' := 2
      ID'=h(ID)
      K'=h(ID,K)

end role

role Reader(R,T, S: agent,
               h: hash
              L: text set,
               Snd,Rcv: channel(dy))
played_by R
def=

  local State   : nat,
        
        R1: text(fresh)
        ID,HID:text

  

  init  State := 0

  transition

   1. State = 0
      /\ Rcv(R1)
      =|> 
      State' := 1
      /\ R2' := new()
      /\ Snd(h(k,R1,R2).xor(R2,ID).h(ID,R1)) 
      /\ request( T, R, tag_reader_ID,ID')
      /\ secret(ID',id, {T, R, S})
      /\ secret (R2, id2, {T, S})

   2. State = 1
      /\ Rcv(h(ID',R1,R2))
      =|> 
      State' := 2
      ID'=h(ID)
      K'=h(ID,K)

end role


goal

secrecy_of id
secrecy_of id2
authentication_on tag_reader_ID

end goal
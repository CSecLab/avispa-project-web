%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileBiI8UN

section signature:

state_server: agent * symmetric_key * hash_func * agent * nat * nat * message * message * message * message * message * message * message * message * message * message * message * message * message * message * text * nat -> fact
state_user: agent * agent * symmetric_key * hash_func * nat * nat * text * text * message * message * message * message * message * message * message * message * set(agent) * nat -> fact


section types:

Dummy_Set_28, ASGoal, Set_28: set(agent)
auth, apasswd: protocol_id
set_89, set_117: set
dummy_hash, h, H, inr: hash_func
Dummy_N, Dummy_State, 3, SID, SID2, SID1, 9, 7, 5, State, N, 8, 6, 4, 2, 1, 0: nat
skey, SKey, Skey: symmetric_key
Dummy_Apasswd, dummy_nonce, Nonce, login_request, ok, Apasswd, Dummy_Nonce: text
A2Goal, A1Goal, a, b, s, X, S, Dummy_X, dummy_agent, A, i: agent
Dummy_NthResponse, Dummy_HashPasswd, dummy_msg, MGoal, Msg1, Msg2, Msg3, Msg4, R, NthResponse, Challenge, HPasswd, HashPasswd, HR, NthCredential, H2PN1, H3PN1, Hashpasswd, start, Dummy_H3PN1, Dummy_H2PN1, Dummy_NthCredential, Dummy_HR, Dummy_HPasswd, Dummy_R, Dummy_Msg4, Dummy_Msg3, Dummy_Msg2, Dummy_Msg1, Dummy_Challenge: message


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(s).
 iknows(h).
 iknows(login_request).
 iknows(i).
 state_user(a,s,skey,dummy_hash,0,1,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_89,3).
 state_server(s,skey,h,dummy_agent,1,1,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_nonce,4).
 state_server(s,skey,h,dummy_agent,1,1,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_nonce,7)


section rules:

step step_0 (A,S,Skey,H,Dummy_N,Dummy_Apasswd,Nonce,Dummy_HashPasswd,NthResponse,Challenge,Msg1,Msg2,Msg3,Msg4,R,Dummy_Set_28,SID,N,Apasswd) :=
 state_user(A,S,Skey,H,0,Dummy_N,Dummy_Apasswd,Nonce,Dummy_HashPasswd,NthResponse,Challenge,Msg1,Msg2,Msg3,Msg4,R,Dummy_Set_28,SID).
 iknows(start)
=[exists N,Apasswd]=>
 state_user(A,S,Skey,H,2,N,Apasswd,Nonce,apply(H,apply(H,xor(Apasswd,N))),NthResponse,Challenge,Msg1,Msg2,Msg3,Msg4,R,Dummy_Set_28,SID).
 iknows(pair(A,pair(apply(H,apply(H,xor(Apasswd,N))),N))).
 secret(Apasswd,apasswd,Dummy_Set_28).
 contains(A,Dummy_Set_28).
 contains(S,Dummy_Set_28)

step step_1 (A,S,Skey,H,N,Apasswd,Nonce,HashPasswd,NthResponse,Challenge,Msg1,Msg2,Msg3,Msg4,R,Set_28,SID) :=
 state_user(A,S,Skey,H,2,N,Apasswd,Nonce,HashPasswd,NthResponse,Challenge,Msg1,Msg2,Msg3,Msg4,R,Set_28,SID).
 iknows(pair(S,ok))
 =>
 state_user(A,S,Skey,H,4,N,Apasswd,Nonce,HashPasswd,NthResponse,Challenge,Msg1,Msg2,Msg3,Msg4,R,Set_28,SID).
 iknows(pair(A,pair(S,login_request)))

step step_2 (A,S,Skey,H,N,Apasswd,Nonce,HashPasswd,Dummy_NthResponse,Dummy_Challenge,Dummy_Msg1,Dummy_Msg2,Dummy_Msg3,Dummy_Msg4,Dummy_R,Set_28,SID,Challenge) :=
 state_user(A,S,Skey,H,4,N,Apasswd,Nonce,HashPasswd,Dummy_NthResponse,Dummy_Challenge,Dummy_Msg1,Dummy_Msg2,Dummy_Msg3,Dummy_Msg4,Dummy_R,Set_28,SID).
 iknows(pair(S,pair(A,pair(N,Challenge))))
 =>
 state_user(A,S,Skey,H,6,N,Apasswd,Nonce,HashPasswd,apply(H,apply(H,xor(Apasswd,N))),Challenge,xor(apply(H,apply(H,apply(H,xor(Apasswd,N)))),xor(apply(H,xor(Challenge,apply(H,apply(H,xor(Apasswd,N))))),apply(H,xor(apply(H,apply(H,xor(Apasswd,N))),apply(inr,N))))),xor(apply(H,xor(Apasswd,N)),apply(H,apply(H,xor(Challenge,apply(H,apply(H,xor(Apasswd,N))))))),xor(apply(H,xor(apply(H,apply(H,xor(Apasswd,N))),apply(H,xor(Challenge,apply(H,apply(H,xor(Apasswd,N))))))),apply(H,apply(H,xor(Apasswd,apply(inr,N))))),xor(apply(H,apply(H,apply(H,xor(Apasswd,apply(inr,N))))),apply(H,apply(H,apply(H,xor(Challenge,apply(H,apply(H,xor(Apasswd,N)))))))),xor(Challenge,apply(H,apply(H,xor(Apasswd,N)))),Set_28,SID).
 iknows(pair(xor(apply(H,apply(H,apply(H,xor(Apasswd,N)))),xor(apply(H,xor(Challenge,apply(H,apply(H,xor(Apasswd,N))))),apply(H,xor(apply(H,apply(H,xor(Apasswd,N))),apply(inr,N))))),pair(xor(apply(H,xor(Apasswd,N)),apply(H,apply(H,xor(Challenge,apply(H,apply(H,xor(Apasswd,N))))))),pair(xor(apply(H,xor(apply(H,apply(H,xor(Apasswd,N))),apply(H,xor(Challenge,apply(H,apply(H,xor(Apasswd,N))))))),apply(H,apply(H,xor(Apasswd,apply(inr,N))))),xor(apply(H,apply(H,apply(H,xor(Apasswd,apply(inr,N))))),apply(H,apply(H,apply(H,xor(Challenge,apply(H,apply(H,xor(Apasswd,N))))))))))))

step step_3 (A,S,Skey,H,N,Apasswd,Dummy_Nonce,HashPasswd,NthResponse,Challenge,Msg1,Msg2,Msg3,Msg4,R,Set_28,SID,Nonce) :=
 state_user(A,S,Skey,H,6,N,Apasswd,Dummy_Nonce,HashPasswd,NthResponse,Challenge,Msg1,Msg2,Msg3,Msg4,R,Set_28,SID).
 iknows(pair(S,pair(A,Nonce)))
 =>
 state_user(A,S,Skey,H,8,N,Apasswd,Nonce,HashPasswd,NthResponse,Challenge,Msg1,Msg2,Msg3,Msg4,R,Set_28,SID).
 request(S,A,auth,Nonce,SID)

step step_4 (S,SKey,H,Dummy_X,N,NthResponse,Challenge,Dummy_HPasswd,Dummy_HashPasswd,HR,NthCredential,H2PN1,H3PN1,Hashpasswd,Msg1,Msg2,Msg3,Msg4,R,Nonce,SID,X,HashPasswd) :=
 state_server(S,SKey,H,Dummy_X,1,N,NthResponse,Challenge,Dummy_HPasswd,Dummy_HashPasswd,HR,NthCredential,H2PN1,H3PN1,Hashpasswd,Msg1,Msg2,Msg3,Msg4,R,Nonce,SID).
 iknows(pair(X,HashPasswd))
 =>
 state_server(S,SKey,H,X,3,N,NthResponse,Challenge,xor(HashPasswd,apply(H,pair(SKey,X))),HashPasswd,HR,NthCredential,H2PN1,H3PN1,Hashpasswd,Msg1,Msg2,Msg3,Msg4,R,Nonce,SID).
 iknows(pair(S,ok))

step step_5 (S,SKey,H,X,N,Dummy_NthResponse,Dummy_Challenge,HPasswd,HashPasswd,HR,NthCredential,H2PN1,H3PN1,Hashpasswd,Msg1,Msg2,Msg3,Msg4,Dummy_R,Nonce,SID,R) :=
 state_server(S,SKey,H,X,3,N,Dummy_NthResponse,Dummy_Challenge,HPasswd,HashPasswd,HR,NthCredential,H2PN1,H3PN1,Hashpasswd,Msg1,Msg2,Msg3,Msg4,Dummy_R,Nonce,SID).
 iknows(pair(X,pair(S,login_request)))
=[exists R]=>
 state_server(S,SKey,H,X,5,N,HashPasswd,xor(HashPasswd,R),HPasswd,HashPasswd,HR,NthCredential,H2PN1,H3PN1,Hashpasswd,Msg1,Msg2,Msg3,Msg4,R,Nonce,SID).
 iknows(pair(S,pair(X,pair(N,xor(HashPasswd,R)))))

step step_6 (S,SKey,H,X,N,NthResponse,Challenge,HPasswd,HashPasswd,Dummy_HR,Dummy_NthCredential,H2PN1,H3PN1,Hashpasswd,Dummy_Msg1,Dummy_Msg2,Dummy_Msg3,Dummy_Msg4,R,Nonce,SID,Msg1,Msg2,Msg3,Msg4) :=
 state_server(S,SKey,H,X,5,N,NthResponse,Challenge,HPasswd,HashPasswd,Dummy_HR,Dummy_NthCredential,H2PN1,H3PN1,Hashpasswd,Dummy_Msg1,Dummy_Msg2,Dummy_Msg3,Dummy_Msg4,R,Nonce,SID).
 iknows(pair(Msg1,pair(Msg2,pair(Msg3,Msg4))))
 =>
 state_server(S,SKey,H,X,7,N,NthResponse,Challenge,HPasswd,HashPasswd,xor(apply(H,xor(NthResponse,apply(inr,N))),xor(Msg1,apply(H,NthResponse))),apply(H,xor(Msg2,apply(H,xor(apply(H,xor(NthResponse,apply(inr,N))),xor(Msg1,apply(H,NthResponse)))))),H2PN1,H3PN1,Hashpasswd,Msg1,Msg2,Msg3,Msg4,R,Nonce,SID)

step step_7 (S,SKey,H,X,N,NthCredential,Challenge,HPasswd,HashPasswd,HR,Dummy_H2PN1,Dummy_H3PN1,Hashpasswd,Msg1,Msg2,Msg3,Msg4,R,Nonce,SID) :=
 state_server(S,SKey,H,X,7,N,NthCredential,Challenge,HPasswd,HashPasswd,HR,NthCredential,Dummy_H2PN1,Dummy_H3PN1,Hashpasswd,Msg1,Msg2,Msg3,Msg4,R,Nonce,SID)
 =>
 state_server(S,SKey,H,X,8,N,NthCredential,Challenge,HPasswd,HashPasswd,HR,NthCredential,xor(Msg3,apply(H,xor(NthCredential,HR))),xor(Msg4,apply(H,apply(H,HR))),Hashpasswd,Msg1,Msg2,Msg3,Msg4,R,Nonce,SID)

step step_8 (S,SKey,H,X,N,NthResponse,Challenge,HPasswd,HashPasswd,HR,NthCredential,H2PN1,Hashpasswd,Msg1,Msg2,Msg3,Msg4,R,Dummy_Nonce,SID,Nonce) :=
 state_server(S,SKey,H,X,8,N,NthResponse,Challenge,HPasswd,HashPasswd,HR,NthCredential,H2PN1,apply(H,H2PN1),Hashpasswd,Msg1,Msg2,Msg3,Msg4,R,Dummy_Nonce,SID)
=[exists Nonce]=>
 state_server(S,SKey,H,X,9,N,NthResponse,Challenge,HPasswd,HashPasswd,HR,NthCredential,H2PN1,apply(H,H2PN1),Hashpasswd,Msg1,Msg2,Msg3,Msg4,R,Nonce,SID).
 iknows(pair(S,pair(X,Nonce))).
 witness(S,X,auth,Nonce)


section properties:

property secrecy_of_apasswd (MGoal,ASGoal) :=
 [] ((secret(MGoal,apasswd,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_auth (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth,MGoal))
     /\ ((request(A1Goal,A2Goal,auth,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_apasswd (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,apasswd,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_auth (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth,MGoal,SID1).
 request(A1Goal,A2Goal,auth,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


role role_A(A:agent,B:agent,S:agent,KPa:public_key,KPb:public_key,KPs:public_key,SND,RCV:channel(dy))
played_by A
def=
	local
		State:nat,Ns:text,Na:text,Nb:text,Hash:function
	init
		State := 0
	transition
		1. State=0 / RCV(start) =|> 
State':=1 / Na':=new() / witness(A,B,auth_1,Na') / SND(A.Na')
		2. State=1 / RCV(S.Ns'.Na.Hash({Na.A}_KPa)) =|>
 State':=2 / SND(Ns'.Hash({S.Ns'}_KPs)) / SND(A.Na)
		5. State=2 / RCV(B.Nb'.Hash({Na.A}_KPa)) =|>
 State':=3 / SND(Nb'.Hash({B.Nb'}_KPb))
end role

role role_B(A:agent,B:agent,S:agent,
KPa:public_key,KPb:public_key,KPs:public_key,SND,RCV:channel(dy))
played_by B
def=
	local
		State:nat,Na:text,Nb:text,Ns:text,Hash:function
	init
		State := 0
	transition
		4. State=0 / RCV(A.Na') =|>
 State':=1 / request(B,A,auth_1,Na') / Nb':=new() / SND(B.Nb'.Hash({Na'.A}_KPa))
		6. State=1 / RCV(Nb.Hash({B.Nb}_KPb)) =|> 
State':=2 / SND(B.Nb)
		8. State=2 / RCV(S.Ns'.Nb.Hash({B.Nb}_KPb)) =|>
 State':=3 / SND(Ns'.Hash({S.Ns'}_KPs))
end role

role role_S(A:agent,B:agent,S:agent,
KPa:public_key,KPb:public_key,KPs:public_key,SND,RCV:channel(dy))
played_by S
def=
	local
		State:nat,Na:text,Nb:text,Ns:text,Hash:function
	init
		State := 0
	transition
		1. State=0 / RCV(A.Na') =|> 
State':=1 / Ns':=new() / SND(S.Ns'.Na'.Hash({Na'.A}_KPa))
		3. State=1 / RCV(Ns.Hash({S.Ns}_KPs)) =|> State':=2
		7. State=2 / RCV(B.Nb') =|> 
State':=3 / SND(S.Ns.Nb'.Hash({B.Nb'}_KPb))
		9. State=3 / RCV(Ns.Hash({S.Ns}_KPs)) =|> State':=4
end role

role session1(A:agent,B:agent,S:agent,
KPa:public_key,KPb:public_key,KPs:public_key)
def=
	local
		SND3,RCV3,SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_S(A,B,S,KPa,KPb,KPs,SND3,RCV3) / role_B(A,B,S,KPa,KPb,KPs,SND2,RCV2) /
 role_A(A,B,S,KPa,KPb,KPs,SND1,RCV1)
end role

role environment()
def=
	const
		hash_0:function,pk2:public_key,serveur:agent,alice:agent,bob:agent,
pk1:public_key,pk3:public_key,auth_1:protocol_id
	intruder_knowledge = {}
	composition
		session1(alice,bob,serveur,pk1,pk2,pk3)
end role

goal
	authentication_on auth_1
end goal
environment()
 
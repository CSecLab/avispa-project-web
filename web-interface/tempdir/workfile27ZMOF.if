%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfile27ZMOF

section signature:

state_issuer: agent * agent * agent * public_key * symmetric_key * nat * text * text * text * message * message * set(agent) * nat -> fact
state_receiver: agent * agent * agent * public_key * nat * text * text * text * message * message * message * set(agent) * set(agent) * nat -> fact
state_alice: agent * agent * agent * public_key * symmetric_key * nat * text * text * message * message * set(agent) * set(agent) * nat -> fact


section types:

sec_k3, sec_k4, sec_k2, sec_k5, sec_k1: protocol_id
kai, Kai: symmetric_key
ki, Ki: public_key
set_99, set_93, set_92, set_81, set_80, set_124, set_123, set_122, set_120, set_119, set_117, set_115, set_114, set_113, set_112, set_111, set_109, set_108, set_106, set_105: set
Dummy_Set_46, Dummy_Set_45, Dummy_Set_26, Dummy_Set_22, ASGoal, Set_62, Set_46, Set_45, Set_26, Set_22, Dummy_Set_62: set(agent)
Dummy_G, Dummy_H, dummy_msg, MGoal, M, G, H, start, Dummy_M: message
Alice, Receiver, Issuer, issuer, receiver, alice, i: agent
Dummy_X, Dummy_Q, dummy_nonce, Q, X, A, Dummy_A: text
SID, 4, Dummy_State, 3, State, 1, 5, 17, 2, 15, 0, 13, 12, 8, 7: nat


section inits:

initial_state init1 := 
 iknows(start).
 iknows(alice).
 iknows(issuer).
 iknows(receiver).
 iknows(ki).
 iknows(i).
 state_alice(alice,receiver,issuer,ki,kai,0,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_80,set_81,3).
 state_receiver(receiver,alice,issuer,ki,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,set_92,set_93,4).
 state_issuer(issuer,alice,receiver,ki,kai,2,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_99,5).
 state_alice(alice,receiver,i,ki,kai,0,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_105,set_106,7).
 state_receiver(receiver,alice,i,ki,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,set_108,set_109,8).
 state_receiver(receiver,i,issuer,ki,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,set_114,set_115,12).
 state_issuer(issuer,i,receiver,ki,kai,2,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_117,13).
 state_alice(alice,i,issuer,ki,kai,0,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_119,set_120,15).
 state_issuer(issuer,alice,i,ki,kai,2,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_124,17)


section rules:

step step_0 (Alice,Receiver,Issuer,Ki,Kai,Dummy_Q,A,G,Dummy_H,Dummy_Set_22,Set_26,SID,Q) :=
 state_alice(Alice,Receiver,Issuer,Ki,Kai,0,Dummy_Q,A,G,Dummy_H,Dummy_Set_22,Set_26,SID).
 iknows(start)
=[exists Q]=>
 state_alice(Alice,Receiver,Issuer,Ki,Kai,2,Q,A,G,crypt(Ki,pair(Q,Kai)),Dummy_Set_22,Set_26,SID).
 iknows(crypt(Ki,pair(Q,Kai))).
 secret(Q,sec_k1,Dummy_Set_22).
 contains(Alice,Dummy_Set_22).
 contains(Issuer,Dummy_Set_22)

step step_1 (Alice,Receiver,Issuer,Ki,Kai,Q,A,Dummy_G,H,Set_22,Dummy_Set_26,SID,G) :=
 state_alice(Alice,Receiver,Issuer,Ki,Kai,4,Q,A,Dummy_G,H,Set_22,Dummy_Set_26,SID).
 iknows(G)
 =>
 state_alice(Alice,Receiver,Issuer,Ki,Kai,5,Q,A,G,H,Set_22,Dummy_Set_26,SID).
 secret(G,sec_k5,Dummy_Set_26).
 contains(Alice,Dummy_Set_26).
 contains(Issuer,Dummy_Set_26)

step step_2 (Receiver,Alice,Issuer,Ki,Q,Dummy_X,A,M,G,Dummy_H,Dummy_Set_45,Set_46,SID,X,H) :=
 state_receiver(Receiver,Alice,Issuer,Ki,1,Q,Dummy_X,A,M,G,Dummy_H,Dummy_Set_45,Set_46,SID).
 iknows(H)
=[exists X]=>
 state_receiver(Receiver,Alice,Issuer,Ki,3,Q,X,A,M,G,H,Dummy_Set_45,Set_46,SID).
 iknows(pair(X,H)).
 secret(Q,sec_k2,Dummy_Set_45).
 contains(Alice,Dummy_Set_45).
 contains(Issuer,Dummy_Set_45)

step step_3 (Receiver,Alice,Issuer,Ki,Q,X,A,M,Dummy_G,H,Set_45,Dummy_Set_46,SID,G) :=
 state_receiver(Receiver,Alice,Issuer,Ki,3,Q,X,A,M,Dummy_G,H,Set_45,Dummy_Set_46,SID).
 iknows(pair(X,G))
 =>
 state_receiver(Receiver,Alice,Issuer,Ki,4,Q,X,A,M,G,H,Set_45,Dummy_Set_46,SID).
 iknows(G).
 secret(A,sec_k4,Dummy_Set_46).
 contains(Alice,Dummy_Set_46).
 contains(Issuer,Dummy_Set_46)

step step_4 (Issuer,Alice,Receiver,Ki,Kai,Q,Dummy_X,Dummy_A,Dummy_M,Dummy_G,Dummy_Set_62,SID,X,A,M) :=
 state_issuer(Issuer,Alice,Receiver,Ki,Kai,2,Q,Dummy_X,Dummy_A,Dummy_M,Dummy_G,Dummy_Set_62,SID).
 iknows(pair(X,M))
=[exists A]=>
 state_issuer(Issuer,Alice,Receiver,Ki,Kai,3,Q,X,A,M,scrypt(Kai,A),Dummy_Set_62,SID).
 iknows(pair(Dummy_X,scrypt(Kai,A))).
 secret(A,sec_k3,Dummy_Set_62).
 contains(Alice,Dummy_Set_62).
 contains(Issuer,Dummy_Set_62)


section properties:

property secrecy_of_sec_k1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_k1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_k2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_k2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_k3 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_k3,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_k4 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_k4,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_k5 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_k5,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state secrecy_of_sec_k1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_k1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_k2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_k2,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_k3 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_k3,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_k4 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_k4,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_k5 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_k5,ASGoal) &
 not(contains(i,ASGoal))


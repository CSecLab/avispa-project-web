%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileB3iBvU

section signature:

state_server: agent * agent * agent * agent * hash_func * nat * text * text * text * text * message * text * set(agent) * nat -> fact
state_relay: agent * agent * agent * agent * hash_func * nat * text * text * text * text * message * text * nat -> fact
state_gateway: agent * agent * agent * agent * hash_func * nat * text * text * text * text * message * text * nat -> fact
state_client: agent * agent * agent * agent * hash_func * nat * text * text * text * text * message * text * set(agent) * nat -> fact


section types:

s_msk, s_mac: protocol_id
7, State, 21, 19, 17, 15, 13, 11, 20, 5, 18, 16, 14, 12, 10, 9, 8, 6, 3, 4, SID, 2, 1, 0, Dummy_State: nat
set_132, set_128, set_124, set_108: set
Set_87, Set_27, Dummy_Set_87, Dummy_Set_27, ASGoal: set(agent)
MAC, start, Dummy_MAC, dummy_msg, MGoal: message
MSK, Kid, Eap_pay, Nc, Ns, Dummy_Kid, Dummy_MSK, Dummy_Ns, Dummy_Nc, dummy_nonce, nc, ns: text
H1, h1: hash_func
g, r, C, S, G, R, i, c, s: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(c).
 iknows(s).
 iknows(g).
 iknows(r).
 iknows(h1).
 iknows(nc).
 iknows(ns).
 iknows(i).
 state_client(c,s,g,r,h1,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_nonce,set_108,3).
 state_gateway(c,s,g,r,h1,10,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_nonce,4).
 state_relay(c,s,g,r,h1,11,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_nonce,5).
 state_server(s,c,g,r,h1,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_nonce,set_124,6).
 state_client(c,i,g,r,h1,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_nonce,set_128,8).
 state_gateway(c,i,g,r,h1,10,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_nonce,9).
 state_relay(c,i,g,r,h1,11,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_nonce,10)


section rules:

step step_0 (C,S,G,R,H1,Nc,Ns,Eap_pay,Kid,MAC,MSK,Set_27,SID) :=
 state_client(C,S,G,R,H1,0,Nc,Ns,Eap_pay,Kid,MAC,MSK,Set_27,SID).
 iknows(start)
 =>
 state_client(C,S,G,R,H1,2,Nc,Ns,Eap_pay,Kid,MAC,MSK,Set_27,SID).
 iknows(0)

step step_1 (C,S,G,R,H1,Dummy_Nc,Dummy_Ns,Eap_pay,Kid,Dummy_MAC,Dummy_MSK,Set_27,SID,Nc,Ns,MSK) :=
 state_client(C,S,G,R,H1,2,Dummy_Nc,Dummy_Ns,Eap_pay,Kid,Dummy_MAC,Dummy_MSK,Set_27,SID).
 iknows(Ns)
=[exists MSK,Nc]=>
 state_client(C,S,G,R,H1,4,Nc,Ns,Eap_pay,Kid,apply(H1,pair(MSK,pair(Nc,pair(Ns,Kid)))),MSK,Set_27,SID).
 iknows(Nc)

step step_2 (C,S,G,R,H1,Nc,Ns,Eap_pay,Dummy_Kid,Dummy_MAC,MSK,Dummy_Set_27,SID,MAC) :=
 state_client(C,S,G,R,H1,4,Nc,Ns,Eap_pay,Dummy_Kid,Dummy_MAC,MSK,Dummy_Set_27,SID).
 iknows(MAC)
 =>
 state_client(C,S,G,R,H1,6,Nc,Ns,Eap_pay,Dummy_Kid,MAC,MSK,Dummy_Set_27,SID).
 iknows(MAC).
 contains(C,Dummy_Set_27).
 contains(S,Dummy_Set_27)

step step_3 (C,S,G,R,H1,Nc,Ns,Eap_pay,Kid,MAC,MSK,SID) :=
 state_gateway(C,S,G,R,H1,10,Nc,Ns,Eap_pay,Kid,MAC,MSK,SID).
 iknows(0)
 =>
 state_gateway(C,S,G,R,H1,12,Nc,Ns,Eap_pay,Kid,MAC,MSK,SID).
 iknows(0)

step step_4 (C,S,G,R,H1,Nc,Dummy_Ns,Eap_pay,Kid,MAC,MSK,SID,Ns) :=
 state_gateway(C,S,G,R,H1,12,Nc,Dummy_Ns,Eap_pay,Kid,MAC,MSK,SID).
 iknows(Ns)
 =>
 state_gateway(C,S,G,R,H1,14,Nc,Ns,Eap_pay,Kid,MAC,MSK,SID).
 iknows(Ns)

step step_5 (C,S,G,R,H1,Dummy_Nc,Ns,Eap_pay,Kid,MAC,MSK,SID,Nc) :=
 state_gateway(C,S,G,R,H1,14,Dummy_Nc,Ns,Eap_pay,Kid,MAC,MSK,SID).
 iknows(Nc)
 =>
 state_gateway(C,S,G,R,H1,16,Nc,Ns,Eap_pay,Kid,MAC,MSK,SID).
 iknows(Nc)

step step_6 (C,S,G,R,H1,Nc,Ns,Eap_pay,Dummy_Kid,Dummy_MAC,MSK,SID,MAC) :=
 state_gateway(C,S,G,R,H1,16,Nc,Ns,Eap_pay,Dummy_Kid,Dummy_MAC,MSK,SID).
 iknows(MAC)
 =>
 state_gateway(C,S,G,R,H1,18,Nc,Ns,Eap_pay,Dummy_Kid,MAC,MSK,SID).
 iknows(MAC)

step step_7 (C,S,G,R,H1,Nc,Ns,Eap_pay,Dummy_Kid,Dummy_MAC,MSK,SID,MAC) :=
 state_gateway(C,S,G,R,H1,18,Nc,Ns,Eap_pay,Dummy_Kid,Dummy_MAC,MSK,SID).
 iknows(MAC)
 =>
 state_gateway(C,S,G,R,H1,20,Nc,Ns,Eap_pay,Dummy_Kid,MAC,MSK,SID).
 iknows(MAC)

step step_8 (C,S,G,R,H1,Nc,Ns,Eap_pay,Kid,MAC,MSK,SID) :=
 state_relay(C,S,G,R,H1,11,Nc,Ns,Eap_pay,Kid,MAC,MSK,SID).
 iknows(0)
 =>
 state_relay(C,S,G,R,H1,13,Nc,Ns,Eap_pay,Kid,MAC,MSK,SID).
 iknows(0)

step step_9 (C,S,G,R,H1,Nc,Dummy_Ns,Eap_pay,Kid,MAC,MSK,SID,Ns) :=
 state_relay(C,S,G,R,H1,13,Nc,Dummy_Ns,Eap_pay,Kid,MAC,MSK,SID).
 iknows(Ns)
 =>
 state_relay(C,S,G,R,H1,15,Nc,Ns,Eap_pay,Kid,MAC,MSK,SID).
 iknows(Ns)

step step_10 (C,S,G,R,H1,Dummy_Nc,Ns,Eap_pay,Kid,MAC,MSK,SID,Nc) :=
 state_relay(C,S,G,R,H1,15,Dummy_Nc,Ns,Eap_pay,Kid,MAC,MSK,SID).
 iknows(Nc)
 =>
 state_relay(C,S,G,R,H1,17,Nc,Ns,Eap_pay,Kid,MAC,MSK,SID).
 iknows(Nc)

step step_11 (C,S,G,R,H1,Nc,Ns,Eap_pay,Dummy_Kid,Dummy_MAC,MSK,SID,MAC) :=
 state_relay(C,S,G,R,H1,17,Nc,Ns,Eap_pay,Dummy_Kid,Dummy_MAC,MSK,SID).
 iknows(MAC)
 =>
 state_relay(C,S,G,R,H1,19,Nc,Ns,Eap_pay,Dummy_Kid,MAC,MSK,SID).
 iknows(MAC)

step step_12 (C,S,G,R,H1,Nc,Ns,Eap_pay,Dummy_Kid,Dummy_MAC,MSK,SID,MAC) :=
 state_relay(C,S,G,R,H1,19,Nc,Ns,Eap_pay,Dummy_Kid,Dummy_MAC,MSK,SID).
 iknows(MAC)
 =>
 state_relay(C,S,G,R,H1,21,Nc,Ns,Eap_pay,Dummy_Kid,MAC,MSK,SID).
 iknows(MAC)

step step_13 (S,C,G,R,H1,Nc,Dummy_Ns,Eap_pay,Kid,MAC,MSK,Set_87,SID,Ns) :=
 state_server(S,C,G,R,H1,1,Nc,Dummy_Ns,Eap_pay,Kid,MAC,MSK,Set_87,SID).
 iknows(0)
=[exists Ns]=>
 state_server(S,C,G,R,H1,3,Nc,Ns,Eap_pay,Kid,MAC,MSK,Set_87,SID).
 iknows(Ns)

step step_14 (S,C,G,R,H1,Dummy_Nc,Ns,Eap_pay,Dummy_Kid,Dummy_MAC,Dummy_MSK,Dummy_Set_87,SID,Nc,Kid,MSK) :=
 state_server(S,C,G,R,H1,3,Dummy_Nc,Ns,Eap_pay,Dummy_Kid,Dummy_MAC,Dummy_MSK,Dummy_Set_87,SID).
 iknows(Nc)
=[exists Kid,MSK]=>
 state_server(S,C,G,R,H1,5,Nc,Ns,Eap_pay,Kid,apply(H1,pair(MSK,pair(Nc,pair(Ns,Kid)))),MSK,Dummy_Set_87,SID).
 iknows(apply(H1,pair(MSK,pair(Nc,pair(Ns,Kid))))).
 contains(C,Dummy_Set_87).
 contains(S,Dummy_Set_87)

step step_15 (S,C,G,R,H1,Nc,Ns,Eap_pay,Dummy_Kid,Dummy_MAC,MSK,Set_87,SID,MAC) :=
 state_server(S,C,G,R,H1,5,Nc,Ns,Eap_pay,Dummy_Kid,Dummy_MAC,MSK,Set_87,SID).
 iknows(MAC)
 =>
 state_server(S,C,G,R,H1,7,Nc,Ns,Eap_pay,Dummy_Kid,MAC,MSK,Set_87,SID)


section properties:

property secrecy_of_s_msk (MGoal,ASGoal) :=
 [] ((secret(MGoal,s_msk,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state secrecy_of_s_msk (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,s_msk,ASGoal) &
 not(contains(i,ASGoal))


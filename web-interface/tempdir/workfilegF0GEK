
%% 1. A->B: {Na,A}_kAS
%% 
%% 2. B->S: { {Na,A}_kAS,Nb, B}_kBS
%% 
%% 3. S->B: {kAB, Nb, {kAB, Na, A, B}_kAS}_kBS
%%   B poate verifica noutatea mesajului dupa 'Nb'
%% 
%% 3'' alternativa. S->B: {kAB, Nb, A, B}_kBS, {kAB, Na, A, B}_kAS
%%   B poate verifica noutatea mesajului dupa 'Nb'
%% 
%% 4. B->A: {kAB, Na, A, B}_kAS, {Na, Nb}_kAB
%%   Na - noutatea mesajului
%%   {Na, Nb}_kAB => B cunoaste kAB
%%  
%% 
%% 5. A->B: {Nb}_kAB
%%    Nb =>noutatea mesajului
%%    kAB => A cunoaste kAB 
 
role client_A(A,B: agent,
           SND_BA, RCV_BA: channel (dy),
           K_BS, K_AS: symmetric_key)
played_by A def=

    local State: nat,
           Na, Nb: text,
           Kab            : symmetric_key

    init State := 0

    transition

      0. State = 0 /\ RCV_BA(start) =|>
           State':= 1 /\ Na' := new() 
                /\ SND_BA({Na'.A}_K_AS)
                /\ witness(A,B, bob_alice_na, Na')

      1. State = 1 /\ RCV_BA({Kab'.Na.A.B}_K_AS.{Na.Nb'}_Kab') =|>
              State' := 2 /\ SND_BA({Nb'}_Kab')
                /\ request(A,B, alice_bob_nb, Nb')


end role

role server_B(A,B,S: agent,
           SND_AB, RCV_AB, SND_SB, RCV_SB: channel (dy),
           K_BS, K_AS: symmetric_key)
played_by B def=

    local Na, Nb    : text,
        State        : nat,
        Kab            : symmetric_key

    init State := 1

    transition
        
        1. State = 1 /\ RCV_AB({Na'.A}_K_AS) =|>
               State' := 2 /\ Nb' := new() /\ SND_SB({{Na'.A}_K_AS.Nb'.B}_K_BS)
                /\ witness(B,A, alice_bob_nb, Nb')

        2. State = 2 /\ RCV_SB({Kab'.Nb.{Kab'.Na.A.B}_K_AS}_K_BS) =|>
            State' := 3 /\ SND_AB({Kab'.Na.A.B}_K_AS.{Na.Nb}_Kab')
               /\ request(B,A,bob_alice_na, Na)

        3. State = 3 /\ RCV_AB({Nb}_Kab') =|>
            State' := 4

end role
        
  
role auth_serv_S(A,B,S: agent,
           SND_BS, RCV_BS: channel (dy),
           K_BS, K_AS: symmetric_key)
played_by S
def=
    local Na, Nb    : text,
        State        : nat,
        Kab            : symmetric_key

    init State := 1

    transition
        
        1. State = 1 /\ RCV_BS({{Na'.A}_K_AS.Nb'.B}_K_BS) =|>
               State' := 2 /\ Kab' := new() 
                /\ SND_BS({Kab'.Nb'.{Kab'.Na'.A.B}_K_AS}_K_BS)
                /\ secret(Kab', secret_k, {A,B,S})


end role

role session(A, B, S: agent,
    K_AS, K_BS: symmetric_key) def=

    local SBA, RBA,
          SAB, RAB,
          SSB, RSB,
          SBS, RBS: channel (dy)

    composition
           client_A     (A,B, SBA, RBA, K_BS, K_AS)
        /\ server_B     (A,B,S, SAB, RAB, SSB, RSB, K_BS, K_AS)
        /\ auth_serv_S  (A,B,S, SBS, RBS, K_BS, K_AS)

end role

role environment() def=
    const   a, b, s:            agent,
            kas, kbs:           symmetric_key,
            secret_k:           protocol_id,
            bob_alice_na, alice_bob_nb: protocol_id

    intruder_knowledge = {a,b,s}

    composition
        session(a,b,s, kas, kbs)
%%        /\ session(a,i,s, kas, kbs)
%%        /\ session(i,b,s, kas, kbs)
end role

goal
    secrecy_of secret_k
    authentication_on alice_bob_nb
    authentication_on bob_alice_na
end goal

environment()
        

%% vim: set tabstop=4 expandtab smartindent:

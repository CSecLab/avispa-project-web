%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileyKR7Re

section signature:

state_serveur: agent * agent * public_key * public_key * hash_func * set(text) * nat * text * text * text * text * message * message * text * text * nat -> fact
state_alice: agent * agent * public_key * public_key * text * text * hash_func * nat * text * text * message * message * text * text * nat -> fact


section types:

set_88, set_87: set
ASGoal: set(agent)
secretInfo, alice_serveur_nas, serveur_alice_nsa: protocol_id
KeyComm: set(text)
Dummy_Key, Dummy_K1, dummy_msg, MGoal, K1, Key, start: message
h, Hash: hash_func
pka, pks, pki, PKs, PKa: public_key
A2Goal, A1Goal, a, s, S, A, i: agent
Dummy_Refuse, Dummy_Validation, Dummy_Ns, Dummy_Na, dummy_nonce, loginAS, loginAI, loginIS, infoAS, infoAI, infoIS, Validation, Refuse, Info, Login, Na, Ns, Dummy_Login, Dummy_Info: text
SID, Dummy_State, 3, SID2, SID1, 5, State, 6, 4, 2, 1, 0, 13, 9, 7: nat


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(s).
 iknows(h).
 iknows(pka).
 iknows(pks).
 iknows(pki).
 iknows(inv(pki)).
 iknows(i).
 state_alice(a,s,pka,pks,infoAS,loginAS,h,0,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,3).
 state_serveur(s,a,pks,pka,h,set_87,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,4).
 state_alice(a,s,pka,pks,infoAS,loginAS,h,0,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,6).
 state_serveur(s,a,pks,pka,h,set_87,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,7).
 state_alice(a,i,pka,pki,infoAI,loginAI,h,0,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,9).
 state_serveur(s,i,pks,pki,h,set_87,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,13)


section rules:

step step_0 (A,S,PKa,PKs,Info,Login,Hash,Dummy_Na,Ns,K1,Key,Validation,Refuse,SID,Na) :=
 state_alice(A,S,PKa,PKs,Info,Login,Hash,0,Dummy_Na,Ns,K1,Key,Validation,Refuse,SID).
 iknows(start)
=[exists Na]=>
 state_alice(A,S,PKa,PKs,Info,Login,Hash,2,Na,Ns,K1,Key,Validation,Refuse,SID).
 iknows(crypt(PKs,crypt(inv(PKa),pair(A,Na))))

step step_1 (A,S,PKa,PKs,Info,Login,Hash,Na,Dummy_Ns,Dummy_K1,Dummy_Key,Validation,Refuse,SID,Ns) :=
 state_alice(A,S,PKa,PKs,Info,Login,Hash,2,Na,Dummy_Ns,Dummy_K1,Dummy_Key,Validation,Refuse,SID).
 iknows(crypt(PKa,crypt(inv(PKs),pair(S,Ns))))
 =>
 state_alice(A,S,PKa,PKs,Info,Login,Hash,4,Na,Ns,apply(Hash,pair(A,pair(S,pair(Info,Login)))),apply(Hash,pair(Na,Ns)),Validation,Refuse,SID).
 iknows(scrypt(apply(Hash,pair(Na,Ns)),crypt(inv(PKa),pair(A,pair(S,pair(Info,pair(Login,apply(Hash,pair(A,pair(S,pair(Info,Login)))))))))))

step step_2 (A,S,PKa,PKs,Info,Login,Hash,Na,Ns,Dummy_K1,Key,Dummy_Validation,Refuse,SID,K1,Validation) :=
 state_alice(A,S,PKa,PKs,Info,Login,Hash,4,Na,Ns,Dummy_K1,Key,Dummy_Validation,Refuse,SID).
 iknows(scrypt(Key,crypt(inv(PKs),pair(A,pair(S,pair(Validation,K1))))))
 =>
 state_alice(A,S,PKa,PKs,Info,Login,Hash,6,Na,Ns,K1,Key,Validation,Refuse,SID)

step step_3 (A,S,PKa,PKs,Info,Login,Hash,Na,Ns,Dummy_K1,Key,Validation,Dummy_Refuse,SID,K1,Refuse) :=
 state_alice(A,S,PKa,PKs,Info,Login,Hash,4,Na,Ns,Dummy_K1,Key,Validation,Dummy_Refuse,SID).
 iknows(scrypt(Key,crypt(inv(PKs),pair(A,pair(S,pair(Refuse,K1))))))
 =>
 state_alice(A,S,PKa,PKs,Info,Login,Hash,6,Na,Ns,K1,Key,Validation,Refuse,SID)

step step_4 (S,A,PKs,PKa,Hash,KeyComm,Dummy_Na,Dummy_Ns,Info,Login,K1,Dummy_Key,Validation,Refuse,SID,Na,Ns) :=
 state_serveur(S,A,PKs,PKa,Hash,KeyComm,1,Dummy_Na,Dummy_Ns,Info,Login,K1,Dummy_Key,Validation,Refuse,SID).
 iknows(crypt(PKs,crypt(inv(PKa),pair(A,Na))))
=[exists Ns]=>
 state_serveur(S,A,PKs,PKa,Hash,KeyComm,3,Na,Ns,Info,Login,K1,apply(Hash,pair(Na,Ns)),Validation,Refuse,SID).
 iknows(crypt(PKa,crypt(inv(PKs),pair(S,Ns))))

step step_5 (S,A,PKs,PKa,Hash,KeyComm,Na,Ns,Dummy_Info,Dummy_Login,Dummy_K1,Key,Dummy_Validation,Refuse,SID,Info,Login,Validation) :=
 state_serveur(S,A,PKs,PKa,Hash,KeyComm,3,Na,Ns,Dummy_Info,Dummy_Login,Dummy_K1,Key,Dummy_Validation,Refuse,SID).
 iknows(scrypt(Key,crypt(inv(PKa),pair(A,pair(S,pair(Login,pair(Info,K1))))))) &
 not(contains(Login,KeyComm))
=[exists Validation]=>
 state_serveur(S,A,PKs,PKa,Hash,KeyComm,5,Na,Ns,Info,Login,apply(Hash,pair(A,pair(S,Validation))),Key,Validation,Refuse,SID).
 iknows(scrypt(Key,crypt(inv(PKs),pair(A,pair(S,pair(Validation,apply(Hash,pair(A,pair(S,Validation)))))))))

step step_6 (S,A,PKs,PKa,Hash,KeyComm,Na,Ns,Dummy_Info,Dummy_Login,Dummy_K1,Key,Validation,Dummy_Refuse,SID,Info,Login,Refuse) :=
 state_serveur(S,A,PKs,PKa,Hash,KeyComm,3,Na,Ns,Dummy_Info,Dummy_Login,Dummy_K1,Key,Validation,Dummy_Refuse,SID).
 iknows(crypt(PKs,crypt(inv(PKa),pair(A,pair(S,pair(Login,pair(Info,K1))))))).
 contains(Login,KeyComm)
=[exists Refuse]=>
 state_serveur(S,A,PKs,PKa,Hash,KeyComm,5,Na,Ns,Info,Login,apply(Hash,pair(A,pair(S,Refuse))),Key,Validation,Refuse,SID).
 iknows(scrypt(Key,crypt(inv(PKs),pair(A,pair(S,pair(Refuse,apply(Hash,pair(A,pair(S,Refuse))))))))).
 contains(Login,KeyComm)


section properties:

property authentication_on_alice_serveur_nas (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,alice_serveur_nas,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,alice_serveur_nas,MGoal))
     /\ ((request(A1Goal,A2Goal,alice_serveur_nas,MGoal,SID1)
           /\ request(A1Goal,A2Goal,alice_serveur_nas,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_serveur_alice_nsa (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,serveur_alice_nsa,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,serveur_alice_nsa,MGoal))
     /\ ((request(A1Goal,A2Goal,serveur_alice_nsa,MGoal,SID1)
           /\ request(A1Goal,A2Goal,serveur_alice_nsa,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property secrecy_of_secretInfo (MGoal,ASGoal) :=
 [] ((secret(MGoal,secretInfo,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state authentication_on_alice_serveur_nas (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,alice_serveur_nas,MGoal,SID) &
 not(witness(A2Goal,A1Goal,alice_serveur_nas,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_alice_serveur_nas (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,alice_serveur_nas,MGoal,SID1).
 request(A1Goal,A2Goal,alice_serveur_nas,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_serveur_alice_nsa (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,serveur_alice_nsa,MGoal,SID) &
 not(witness(A2Goal,A1Goal,serveur_alice_nsa,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_serveur_alice_nsa (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,serveur_alice_nsa,MGoal,SID1).
 request(A1Goal,A2Goal,serveur_alice_nsa,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state secrecy_of_secretInfo (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,secretInfo,ASGoal) &
 not(contains(i,ASGoal))


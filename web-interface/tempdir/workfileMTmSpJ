role alice ( A, S, B                       : agent,
							          K    : symmetric_key,
			                    Succ, H1   : hash_func,
			                  M, AR, Ws  : text,
             SND_SA, RCV_SA,SND_BA, RCV_BA : channel(dy))

played_by A
def=
     local	   Na, Ok, R1  : text,		               
	                 State : nat,
		            Kd, Ks : symmetric_key

     const id  : text

     init  State := 0

	 transition
	 1. State   = 0 /\ RCV_SA(start) =|>
	    State' := 2 /\ SND_SA(A.B.id.M)
					
	 2. State   = 2 /\ RCV_SA(A.B.AR'.Ws'.{Kd'}_K') =|>
	    State' := 4 /\ Na' := new()
		            /\ SND_BA(A.B.id.AR.Ws.Na')
		
	 3. State   = 4 /\ RCV_BA(A.B.H1(Kd.R1'.Na').R1') =|> 
	    State' := 6 /\ SND_BA(A.B.H1(Kd.R1'.Succ(Na')).Ok)
                    /\ Ks' := H(Kd.Na'.R1')

	 4. State   = 6 /\ RCV_BA(A.B.Ok) =|>  
	    State' := 8 /\ request(A,B,na,Na)
                    /\ witness(A,B,na,Na') 
                    /\ secret(Ks,kd,{A,B})

end role

%%ROLE SERVER

role server (A, S           : agent,
                     K, Kc  : symmetric_key,
			             M  : text,
             SND_AS, RCV_AS : channel(dy))

played_by S
def= 

     local State  : nat,
           AR, Ws : text,
		   Kd     : symmetric_key,
		   Hash   : hash_func

init State  := 1

transition

1. State  = 1 /\ RCV_AS(A.{id.M'}_K') =|>
   State':=	3 /\ Ws' := new() /\ AR' := new() /\ Kd' := Hash(Kc.id.AR'.Ws')
              /\ SND_AS(A.AR'.Ws'.{Kd'}_K') 
			  /\ secret(K', Kd', {A,S})

end role

%%ROLE BOB

role bob( A, B           : agent,
		  Succ, H1       : hash_func,
		  AR, Ws         : text,
		  Kc             : symmetric_key,
		  SND_AB, RCV_AB : channel(dy))

played_by B
def= 

local      State   : nat,
	       Kd, Ks  : symmetric_key,
	       H       : hash_func,
       Na, Ok, R1  : text		   

init State  := 5

transition

1. State   =  5 /\ RCV_AB(A.B.id.AR'.Ws'.Na') =|>
   State' :=  7 /\ R1' := new() /\ Kd' := H(Kc.id.AR'.Ws')
                /\ SND_AB(A.B.H1(Kd.Na'.R1').R1')

2. State   = 7  /\ RCV_AB(A.B.H1(Kd.R1'.Succ(Na')).Ok) =|>
   State' := 9  /\ SND_AB(A.B.Ok) /\ Ks' := H(Kd.Na'.R1')
			    /\ witness(B, A, na, Na')
			    /\ secret(Kd, Ks, {A,B})

end role

%%ROLE SESSION

role session ( A, S, B           : agent,
               M, AR, Ws         : text,
			   H                 : hash_func,
               K, Kc             : symmetric_key)
def=

    local			  
		SSA, RSA, 
        SBA, RBA,
        SAS, RAS,
		SAB, RAB   : channel(dy)

	composition

	     alice (A, S, B, K, H, M, AR, Ws, SSA, RSA, SBA, RBA)
	/\	 server(A, S, K, Kc, M, SAS, RAS)
    /\   bob   (A, B, H, AR, Ws, Kc,  SAB, RAB)

end role

role environment()
def=
   const               a, b, s      : agent,
                 kc, k, ka, ki      : symmetric_key,
                             h      : hash_func,
                 id, na, m, ar, ws  : text,
                        na, k1      : protocol_id

	intruder_knowledge = {a, b, s, ki, ws, ar, m}

composition
       session(a, s, b,  k, h, m, ar, ws)
    /\ session(a, i, s, ki, h, m, ar, ws)
    /\ session(i, b, ki, ar, ws, id)

end role

goal
%%    secrecy_of kd
%%    authentication_on na
 %secrecy of the shared keys
 secrecy_of kd, ks
 
 authentication_on id  
 authentication_on na

end goal

environment()
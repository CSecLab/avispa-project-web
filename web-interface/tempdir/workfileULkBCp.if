%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileULkBCp

section signature:

state_tag: agent * agent * agent * symmetric_key * hash_func * text * nat * text * text * text * text * text * text * text * text * set(agent) * set(agent) * nat -> fact
state_server: agent * agent * agent * symmetric_key * hash_func * text * nat * text * text * text * text * text * text * text * text * set(agent) * set(agent) * nat -> fact
state_reader: agent * agent * agent * nat * text * text * text * text * text * nat -> fact


section types:

sec_tid2, sec_ksb2, r1, r2, sec_tid1, sec_ksb1: protocol_id
h, Hash: hash_func
MGoal, start: message
ASGoal, Set_71, Set_70, Set_49, Set_47, Dummy_Set_71, Dummy_Set_70, Dummy_Set_49, Dummy_Set_47: set(agent)
ksb, ksi, Ksb, Dummy_Ksb: symmetric_key
set_146, set_145, set_143, set_142, set_141, set_140, set_138, set_137, set_134, set_133, set_131, set_130, set_124, set_123, set_113, set_112: set
tid, tidi, A1, A2, A3, A4, TIDN, KsbN, R1, R2, TID, Dummy_KsbN, Dummy_TIDN, Dummy_R2, Dummy_TID, Dummy_A4, Dummy_A3, Dummy_A2, Dummy_A1, Dummy_R1, dummy_nonce: text
A2Goal, A1Goal, a, s, b, B, A, S, i: agent
SID, State, 17, 16, 12, 11, 9, 8, 7, 5, 3, 2, 1, 0, 4, Dummy_State, SID2, SID1: nat


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(s).
 iknows(b).
 iknows(h).
 iknows(ksi).
 iknows(tidi).
 iknows(i).
 state_reader(a,s,b,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,3).
 state_server(s,a,b,ksb,h,tid,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_112,set_113,4).
 state_tag(b,a,s,ksb,h,tid,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_123,set_124,5).
 state_reader(a,s,b,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,7).
 state_server(s,a,b,ksb,h,tid,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_130,set_131,8).
 state_tag(b,a,s,ksb,h,tid,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_133,set_134,9).
 state_reader(a,s,i,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,11).
 state_server(s,a,i,ksi,h,tidi,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_137,set_138,12).
 state_server(s,i,b,ksi,h,tidi,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_142,set_143,16).
 state_tag(b,i,s,ksi,h,tidi,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_145,set_146,17)


section rules:

step step_0 (A,S,B,Dummy_R1,A1,A2,A3,A4,SID,R1) :=
 state_reader(A,S,B,0,Dummy_R1,A1,A2,A3,A4,SID).
 iknows(start)
=[exists R1]=>
 state_reader(A,S,B,1,R1,A1,A2,A3,A4,SID).
 iknows(R1)

step step_1 (A,S,B,R1,Dummy_A1,Dummy_A2,Dummy_A3,A4,SID,A1,A2,A3) :=
 state_reader(A,S,B,1,R1,Dummy_A1,Dummy_A2,Dummy_A3,A4,SID).
 iknows(pair(A1,pair(A2,A3)))
 =>
 state_reader(A,S,B,2,R1,A1,A2,A3,A4,SID).
 iknows(pair(R1,pair(A1,pair(A2,A3))))

step step_2 (A,S,B,R1,A1,A2,A3,Dummy_A4,SID,A4) :=
 state_reader(A,S,B,2,R1,A1,A2,A3,Dummy_A4,SID).
 iknows(A4)
 =>
 state_reader(A,S,B,3,R1,A1,A2,A3,A4,SID).
 iknows(A4)

step step_3 (S,A,B,Ksb,Hash,Dummy_TID,R1,Dummy_R2,Dummy_A1,Dummy_A2,Dummy_A3,Dummy_A4,TIDN,KsbN,Set_47,Set_49,SID,A1,A2) :=
 state_server(S,A,B,Ksb,Hash,Dummy_TID,0,R1,Dummy_R2,Dummy_A1,Dummy_A2,Dummy_A3,Dummy_A4,TIDN,KsbN,Set_47,Set_49,SID).
 iknows(pair(R1,pair(A1,pair(A2,A3))))
 =>
 state_server(S,A,B,Ksb,Hash,xor(A2,xor(Ksb,xor(A1,apply(Hash,xor(Ksb,R1))))),1,R1,xor(A1,apply(Hash,xor(Ksb,R1))),A1,A2,apply(Hash,pair(xor(A2,xor(Ksb,xor(A1,apply(Hash,xor(Ksb,R1))))),pair(R1,pair(xor(A1,apply(Hash,xor(Ksb,R1))),Ksb)))),apply(Hash,xor(Dummy_TID,xor(R1,xor(Dummy_R2,Ksb)))),TIDN,KsbN,Set_47,Set_49,SID).
 request(S,B,r2,xor(A1,apply(Hash,xor(Ksb,R1))),SID).
 iknows(apply(Hash,xor(Dummy_TID,xor(R1,xor(Dummy_R2,Ksb)))))

step step_4 (S,A,B,Dummy_Ksb,Hash,Dummy_TID,R1,R2,A1,A2,A3,A4,Dummy_TIDN,Dummy_KsbN,Dummy_Set_47,Dummy_Set_49,SID) :=
 state_server(S,A,B,Dummy_Ksb,Hash,Dummy_TID,1,R1,R2,A1,A2,A3,A4,Dummy_TIDN,Dummy_KsbN,Dummy_Set_47,Dummy_Set_49,SID).
 witness(S,B,r1,R1)
 =>
 state_server(S,A,B,apply(Hash,pair(Dummy_Ksb,pair(R1,R2))),Hash,xor(Dummy_TID,xor(R1,R2)),2,R1,R2,A1,A2,A3,A4,xor(Dummy_TID,xor(R1,R2)),apply(Hash,pair(Dummy_Ksb,pair(R1,R2))),Dummy_Set_47,Dummy_Set_49,SID).
 secret(Dummy_TID,sec_tid1,Dummy_Set_47).
 secret(Dummy_Ksb,sec_ksb1,Dummy_Set_49).
 contains(S,Dummy_Set_47).
 contains(B,Dummy_Set_47).
 contains(S,Dummy_Set_49).
 contains(B,Dummy_Set_49)

step step_5 (B,A,S,Ksb,Hash,TID,Dummy_R1,Dummy_R2,Dummy_A1,Dummy_A2,Dummy_A3,A4,TIDN,KsbN,Set_70,Set_71,SID,R1,R2) :=
 state_tag(B,A,S,Ksb,Hash,TID,0,Dummy_R1,Dummy_R2,Dummy_A1,Dummy_A2,Dummy_A3,A4,TIDN,KsbN,Set_70,Set_71,SID).
 iknows(R1)
=[exists R2]=>
 state_tag(B,A,S,Ksb,Hash,TID,1,R1,R2,xor(apply(Hash,xor(Ksb,R1)),R2),xor(Ksb,xor(R2,TID)),apply(Hash,pair(TID,pair(Dummy_R1,pair(R2,Ksb)))),A4,TIDN,KsbN,Set_70,Set_71,SID).
 iknows(pair(xor(apply(Hash,xor(Ksb,R1)),R2),pair(xor(Ksb,xor(R2,TID)),apply(Hash,pair(TID,pair(Dummy_R1,pair(R2,Ksb))))))).
 witness(B,S,r2,R2)

step step_6 (B,A,S,Dummy_Ksb,Hash,Dummy_TID,R1,R2,A1,A2,A3,Dummy_A4,Dummy_TIDN,Dummy_KsbN,Dummy_Set_70,Dummy_Set_71,SID) :=
 state_tag(B,A,S,Dummy_Ksb,Hash,Dummy_TID,1,R1,R2,A1,A2,A3,Dummy_A4,Dummy_TIDN,Dummy_KsbN,Dummy_Set_70,Dummy_Set_71,SID).
 iknows(A4)
 =>
 state_tag(B,A,S,apply(Hash,pair(Dummy_Ksb,pair(R1,R2))),Hash,xor(Dummy_TID,xor(R1,R2)),2,R1,R2,A1,A2,A3,apply(Hash,xor(Dummy_TID,xor(R1,xor(R2,Dummy_Ksb)))),xor(Dummy_TID,xor(R1,R2)),apply(Hash,pair(Dummy_Ksb,pair(R1,R2))),Dummy_Set_70,Dummy_Set_71,SID).
 request(B,S,r1,R1,SID).
 secret(Dummy_TID,sec_tid2,Dummy_Set_70).
 secret(Dummy_Ksb,sec_ksb2,Dummy_Set_71).
 contains(S,Dummy_Set_70).
 contains(B,Dummy_Set_70).
 contains(S,Dummy_Set_71).
 contains(B,Dummy_Set_71)


section properties:

property secrecy_of_sec_tid1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_tid1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_ksb1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_ksb1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_tid2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_tid2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_ksb2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_ksb2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_r1 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,r1,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,r1,MGoal))
     /\ ((request(A1Goal,A2Goal,r1,MGoal,SID1)
           /\ request(A1Goal,A2Goal,r1,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_r2 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,r2,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,r2,MGoal))
     /\ ((request(A1Goal,A2Goal,r2,MGoal,SID1)
           /\ request(A1Goal,A2Goal,r2,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sec_tid1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_tid1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_ksb1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_ksb1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_tid2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_tid2,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_ksb2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_ksb2,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_r1 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,r1,MGoal,SID) &
 not(witness(A2Goal,A1Goal,r1,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_r1 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,r1,MGoal,SID1).
 request(A1Goal,A2Goal,r1,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_r2 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,r2,MGoal,SID) &
 not(witness(A2Goal,A1Goal,r2,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_r2 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,r2,MGoal,SID1).
 request(A1Goal,A2Goal,r2,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


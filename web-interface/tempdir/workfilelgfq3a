	
%%HLPSL:
role client(A, S: agent,
	    PSK: hash(agent.agent),
	    PRF,MIC1,MIC2: hash_func,
	    SND, RCV: channel (dy))
played_by A
def=

  local  State : nat, 
         T, Ns, Nc,ID : text
         AK     : hash(hash(agent.agent).agent.text.text)
         AuthS  : hash(hash(hash(agent.agent).agent.text.text).text)

  const  sec_PSK,sec_AK : protocol_id

  init   State := 0

  transition 

  1. State = 0   /\ RCV(start) 
     =|>
     State' := 1 /\ SND(A)

  2. State = 1   /\ RCV(Ns'.T'.S)
     =|>
     State' := 2 /\ Nc' := new()
                 /\ AK' := PRF(PSK.S.Nc'.T')
                 /\ SND(Nc'.MIC1(AK'.Ns')) 
                 /\ witness(A,S,autha,MIC1(AK'.Ns')) 
                 /\ secret(PSK,sec_PSK,{A,S})
                 /\ secret(AK',sec_AK,{A,S})
  
   3. State = 2   /\ RCV(ID'.MIC2(AK'.Nc'))
      =|>
      State' := 3 /\ AuthS' := MIC2(AK'.Nc')
                  /\ request(S,A,auths,MIC2(AK'.Nc'))
                  
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 	

role server(A,S : agent,
            PSK: hash(agent.agent),
	    PRF,MIC1,MIC2: hash_func,
	    SND, RCV: channel (dy))
played_by S
def=

  local State : nat,
        T, Ns, Nc,ID : text
        AK    : hash(hash(agent.agent).agent.text.text)
        AuthA : hash(hash(hash(agent.agent).agent.text.text).text)
  const  sec_PSK,sec_AK : protocol_id
  init  State := 0

  transition 
   1. State = 0   /\ RCV(A') 
      =|>
      State' := 1 /\ Ns' := new()
                  /\ T' := new()
                  /\ SND(Ns'.T'.S)

   2. State = 1   /\ RCV(Nc'.MIC1(AK'.Ns')) 
                  /\ AK' := PRF(PSK.S.Nc'.T')
      =|>
      State' := 2 /\ AuthA' := MIC1(AK'.Ns') 
                  /\ request(S,A,autha,MIC1(AK'.Ns'))
                  /\ ID' := new()
                  /\ SND(ID'.MIC2(AK'.Nc'))
                  /\ witness(S,A,auths,MIC2(AK'.Nc')) 
                  /\ secret(PSK,sec_PSK,{A,S})
                  /\ secret(AK',sec_AK,{A,S})
                  
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 	

role session(A, S: agent,
             PRF,MIC1,MIC2: hash_func)
def=

  local PSK: hash(agent.agent),
        SNDA, SNDS, RCVA, RCVS: channel (dy)

  init PSK := K(A.S)

  composition
       client(A,S,PSK,PRF,MIC1,MIC2,SNDA,RCVA)
    /\ server(A,S,PSK,PRF,MIC1,MIC2,SNDS,RCVS)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 	

role environment()
def=

 const a, s : agent,
       prf, mic1,mic2 : hash_func,
       autha,auths : protocol_id

 intruder_knowledge = {a,s,i,f}

 composition
      session(a,s,k,f)
   /\ session(i,s,k,f)
   /\ session(a,s,k,f)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal

  %secrecy_of PSK
  secrecy_of sec_PSK,sec_AK % Addresses G12

  %Server authenticates Client on auth
  authentication_on autha  % Addresses G1, G2, G3
  authentication_on auths
end goal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

environment()
 
 % A i B su agenti Alice i Bob 
 % Na i Nb su client i server random number
 % Ka i Kb su javni kljucevi
 % Ks je javni kljuc trece strane S
 % Agenti imaju sertifikate u formi {X,Kx}inv(Ks)
 % Sid je sesijski ID
 % PRF je pseudo-random generator 
 % Usr username od Alice
 % Pass password od Alice
 % email or sms, email ili sms od Alice
 % Nb random number od servera


 % 0. A -> B: A, Na, Sid, Pa	         	Pa je predložena lista kriptografskih algoritama od agenta A
 % 1. B -> A: Nb, Sid, Pb		        Pb je izbor kriptografskih algoritama agenta B
 % 2. B -> A: {B, Kb}inv(Ks)		        opciona certificate exchange
 % 3. A -> B: {A, Ka}inv(Ks)		        opciona certificate exchange
 % 4. A -> B: {PMS}Kb			        PMS je pre-master kljuc generisan od A
 % 5. A -> B: {H(Nb,B,PMS)}inv(Ka)	        optional certificate verify message
 % 6. A -> B: {Finished}Keygen(A, Na, Nb, M)    gdje je M = PRF(PMS,Na,Nb)
 %			                                Finished = H(M,messages) za sve poruke 0 - 5
 % 7. B -> A: {Finished}Keygen(B, Na, Nb, M)
 % 8. A -> B: {Usr,Pass,E}Keygen(A, Na, Nb, M)
 % 9. B -> A: {Code1}Keygen(B, Na, Nb, M)
 % 10. A -> B: {Code2}Keygen(A, Na, Nb, M)
 % 11. A -> B: {Page}                           ako je Code1=Code2 salje se stranica Login posto je TLS_uniqueA=TLS_uniqueB



role alice(A, B : agent,  
           H, PRF, KeyGen: hash_func,
           Ka, Ks: public_key,  
           SND, RCV: channel (dy))
played_by A
def=

   local Na, Sid, Pa, PMS: text,
         Nb: text,
         State: nat,
         Finished: hash(hash(text.text.text).agent.agent.text.text.text),
         ClientK, ServerK: hash(agent.text.text.hash(text.text.text)),
         Kb: public_key,
         M: hash(text.text.text),
         Code1, Code2: hash(text.text),
	 Usr, Pass, E, Login, Page, TLS_uniqueA, TLS_uniqueB, R: text

   const sec_clientk, sec_serverk, sec_passwd, sec_code1, sec_code2 : protocol_id

   init  State := 0

   transition

   1.  State = 0
       /\ RCV(start)
       =|>
       State' := 2
       /\ Na' := new()
       /\ Pa' := new()
       /\ Sid' := new()
       /\ SND(A.Na'.Sid'.Pa')

   2.  State = 2
       /\ RCV(Nb'.Sid.Pa.{B.Kb'}_(inv(Ks)))
       =|>
       State' := 4
       /\ PMS' := new()
       /\ M' := PRF(PMS'.Na.Nb')
       /\ Finished' := H(PRF(PMS'.Na.Nb').A.B.Na.Pa.Sid)
       /\ ClientK' := KeyGen(A.Na.Nb'.PRF(PMS'.Na.Nb'))
       /\ ServerK' := KeyGen(B.Na.Nb'.PRF(PMS'.Na.Nb'))
       /\ TLS_uniqueA' := new()
       /\ SND({PMS'}_Kb'.{A.Ka}_(inv(Ks)).
              {H(Nb'.B.PMS')}_(inv(Ka)).   
              {H(PRF(PMS'.Na.Nb').A.B.Na.Pa.Sid)}_KeyGen(A.Na.Nb'.PRF(PMS'.Na.Nb')))     
       /\ witness(A,B,na_nb2,Na.Nb')

   4.  State = 4
       /\ RCV({Finished}_ServerK.{Login'}_ServerK)
       =|>
       State' := 6
       /\ SND({Usr.Pass.E}_ClientK)
       /\ witness(A,B,na_nb3,Usr.Pass.E)
       /\ request(A,B,na_nb1,Na.Nb)
       /\ secret(ClientK,sec_clientk,{A,B})
       /\ secret(ServerK,sec_serverk,{A,B})
       /\ secret(Usr.Pass.E,sec_passwd,{A,B})

   5.  State = 6
       /\ RCV({Code1'}_ServerK)
       =|>
       State' := 8
       /\ Code2':= H(Code1'.TLS_uniqueA)
       /\ SND({Code2'}_ClientK)
       /\ witness(A,B,na_nb5,Code2')
       /\ secret(Code2',sec_code2,{A,B})

   6.  State = 8
       /\ RCV({Page}_ServerK)
       =|>
       State' := 10
       /\ request(A,B,na_nb4,Code1)

end role


role bob(A, B : agent,
         H, PRF, KeyGen: hash_func,
         Kb, Ks: public_key,
         SND, RCV: channel (dy))
played_by B
def=

   local Na, Nb, Sid, Pa, PMS: text,
         State: nat,
         ClientK, ServerK: hash(agent.text.text.hash(text.text.text)),
         Ka: public_key,
         Code1, Code2: hash(text.text),
         Usr, Pass, E, Login, Page, TLS_uniqueA, TLS_uniqueB, R: text

   init  State := 1

   transition

   1.  State = 1
       /\ RCV(A.Na'.Sid'.Pa')
       =|>
       State' := 3
       /\ Nb' := new()
       /\ SND(Nb'.Sid'.Pa'.{B.Kb}_(inv(Ks)))
       /\ witness(B,A,na_nb1,Na'.Nb')

   2.  State = 3
       /\ RCV({PMS'}_Kb.{A.Ka'}_(inv(Ks)).
              {H(Nb.B.PMS')}_(inv(Ka')).
              {H(PRF(PMS'.Na.Nb).A.B.Na.Pa.Sid)}_KeyGen(A.Na.Nb.PRF(PMS'.Na.Nb)))
       =|>
       State' := 5
       /\ ServerK' := KeyGen(B.Na.Nb.PRF(PMS'.Na.Nb))
       /\ TLS_uniqueB' := new()
       /\ SND(({H(PRF(PMS'.Na.Nb).A.B.Na.Pa.Sid)}_KeyGen(B.Na.Nb.PRF(PMS'.Na.Nb))).{Login}_KeyGen(B.Na.Nb.PRF(PMS'.Na.Nb)))
       /\ request(B,A,na_nb2,Na.Nb)
    
    3. State = 5
       /\ RCV({Usr.Pass.E}_ClientK)
       =|>
       State' := 7
       /\ R' := new()
       /\ Code1' := H(R'.TLS_uniqueB)
       /\ SND({Code1'}_ServerK)
       /\ witness(B,A,na_nb4,Code1')
       /\ secret(Code1',sec_code1,{A,B})
   
   4. State = 7
      /\ RCV({Code2'}_ClientK)
      =|>
      State' := 9
      /\ equal(Code1,Code2')
      /\ SND({Page}_ServerK)
      /\ request(B,A,na_nb3,Usr.Pass.E)
      /\ request(B,A,na_nb5,Code2')

end role


role session(A,B: agent,
             Ka, Kb, Ks: public_key,
             H, PRF, KeyGen: hash_func)
def=

   local  SA, SB, RA, RB: channel (dy)

   composition
                alice(A,B,H,PRF,KeyGen,Ka,Ks,Code2,SA,RA)
           /\   bob(A,B,H,PRF,KeyGen,Kb,Ks,Code1,SB,RB)

end role



role environment()
def=

   const na_nb1, na_nb2, na_nb3, na_nb4, na_nb5 : protocol_id,
         h, prf, keygen, Code1, Code2 : hash_func,
         a, b           : agent,
         ka, kb, ki, ks : public_key

   intruder_knowledge = { a, b, ka, kb, ks, ki, inv(ki), Code1, Code2,
                          {i.ki}_(inv(ks)) }  

   composition
        session(a,b,ka,kb,ks,Code1,Code2,h,prf,keygen)
    /\  session(a,i,ka,ki,ks,Code2,h,prf,keygen)
    /\  session(i,b,ki,kb,ks,Code1,h,prf,keygen)

end role


goal

  secrecy_of sec_clientk,sec_serverk,sec_code1,sec_code2  % Addresses G7
  %Alice authenticates Bob on na_nb1
  authentication_on na_nb1  % Addresses G1, G2, G3, G7, G10
  %Bob authenticates Alice on na_nb2
  authentication_on na_nb2  % Addresses G1, G2, G3, G7, G10
  %Alice authenticates Bob on na_nb3
  authentication_on na_nb3  % Addresses G1, G2, G3, G7, G10
  %Bob authenticates Alice on na_nb4
  authentication_on na_nb4  % Addresses G1, G2, G3, G7, G10

end goal


environment()


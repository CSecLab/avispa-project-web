%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role user (U, S : agent,
SKus : symmetric_key,
H : hash_func,
Snd, Rcv: channel(dy))
played_by U
def=
local State : nat,
Idi,A,PWi,Z, Ni, Y,Na,CID,Bi,Ci,Nb,Ack,Ni_new,PWi_new: text
const abc1,abc2,user_server_na,server_user_a,server_user_id,server_user_nb : protocol_id

init
State := 0 

transition

%Registration phase user
1. State = 0 /\ Rcv(start) 
=|>
State' := 2 
/\Idi' := new()
/\Snd({Idi'}_SKus) %send id instead of password step1
/\secret({Idi'}, abc1, {U,S})
/\secret({SKus}, abc2, {U,S})
/\witness(U,S,server_user_id,Idi')

%2.State = 2 /\ Rcv({PWi.H.Ni'.Y'}_SKus)
%=|>
%State' := 4

%Login phase user
3.State = 2 /\ Rcv({PWi'.H.Ni'.Y'}_SKus)
=|>
State' := 6
/\Na' := new()
/\witness(U,S,user_server_na,Na')  % User U has freshly generated the value Na for server S
/\Z' := xor(H(PWi'),H(xor(Ni',xor(Y',Na'))))
/\CID' := xor(Idi,Z')
/\Snd(Idi.CID'.Ni'.Na')

%Verification phase user
4.State = 6 /\ Rcv({A'.Nb'}_SKus)
=|>
Z' := H(xor(xor(H(PWi),Y),Nb'))
/\request(U,S,server_user_a,A')
/\request(U,S,server_user_nb,Nb')
/\State' := 8

%Password updation user
5.State = 8
=|>
State' := 10
/\PWi_new' := new()
/\Ni_new' := xor(Ni,xor(H(PWi),H(PWi_new')))
/\Ni' := Ni_new'

end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


role server (U, S : agent,
SKus : symmetric_key,
H: hash_func,
Snd, Rcv: channel(dy))
played_by S
def=
local 
State : nat,
PWi, Idi,Idi1, A,Ni, Y,X,Na,CID,Bi,Ci,Nb,HPWi,Ack: text
const abc1,abc2,user_server_na,server_user_id,server_user_a,server_user_nb: protocol_id

init
State := 1

transition
%Registration phase server
1. State = 1 /\ Rcv({Idi'}_SKus) 
=|>
State' := 3
/\X' := new() %secret key of server
/\PWi' := new() %password choosen
/\secret(X',abc1,{S})
/\Y' := new() %secret number to insert in user's smart card
/\secret(Y',abc2,{U,S})
/\Ni' := xor(Idi',xor(H(PWi'),H(X'))) %nonce step2
/\Snd({PWi'.H.Ni'.Y'}_SKus) %step3 and step4

%Verification phase server
2.State=3 /\ Rcv(Idi'.CID'.Ni'.Na')
=|>
State' := 5
/\Nb' := new()
/\PWi' := xor(Idi',xor(CID',H(xor(Ni',xor(Y,Na')))))
/\Idi1' := xor(Ni',xor(H(X),H(PWi')))
/\request(S,U,user_server_na,Na') % Server acceptance of value that was generated by User U
/\request(S,U,server_user_id,Idi1')%verify????????
/\A' := H(xor(Nb',xor(H(PWi'),Y)))
/\Snd({A'.Nb'}_SKus)
/\witness(S,U,server_user_nb,Nb')
/\witness(S,U,server_user_a,A')
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role session(U, S : agent)
def=
local 
SKus : symmetric_key,
H : hash_func,
SU,SS,RU,RS:channel(dy),
PWi, X,Y,Ni: text
const abc1,abc2 : protocol_id
composition
user(U,S,SKus,H,SU,RU)
/\server(U,S,SKus,H,SS,RS)
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role environment ()
def=
const u,s : agent,
h: hash_func,
abc1,abc2,user_server_na,server_user_id,server_user_nb,server_user_a: protocol_id
intruder_knowledge={u,s,h}
composition
session(u,s)
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


goal
	secrecy_of abc1
	secrecy_of abc2
	authentication_on user_server_na
	authentication_on server_user_nb
	authentication_on server_user_id
	authentication_on server_user_a
	
end goal
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

environment()





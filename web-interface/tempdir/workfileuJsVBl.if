%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileuJsVBl

section signature:

state_bob: agent * agent * agent * symmetric_key * nat * text * text * text * symmetric_key * nat -> fact
state_server: agent * agent * agent * symmetric_key * symmetric_key * nat * text * text * text * symmetric_key * set(agent) * nat -> fact
state_alice: agent * agent * agent * symmetric_key * nat * text * text * symmetric_key * scrypt(symmetric_key,pair(symmetric_key,pair(agent,text))) * nat -> fact


section types:

sec_k, alice_bob_nb, bob_alice_K_AB: protocol_id
MGoal, start: message
Dummy_Token, Token: scrypt(symmetric_key,pair(symmetric_key,pair(agent,text)))
K_BS, Dummy_K_AB, K_AB, dummy_sk, K_AS, k_as, k_bs, ki: symmetric_key
set_96, set_107, set_105: set
4, SID, Dummy_State, 3, State, SID2, SID1, 2, 1, 0, 13, 12, 8, 7, 5: nat
A, S, B, dummy_agent, A2Goal, A1Goal, a, b, s, i: agent
Set_43, ASGoal, Dummy_Set_43: set(agent)
Dummy_Ns, Dummy_Nb, Dummy_Na, Na, Ns, Nb2, dummy_nonce, Nb, Dummy_Nb2: text


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(s).
 iknows(b).
 iknows(ki).
 iknows(i).
 state_alice(a,s,b,k_as,0,dummy_nonce,dummy_nonce,dummy_sk,scrypt(dummy_sk,pair(dummy_sk,pair(dummy_agent,dummy_nonce))),3).
 state_server(s,a,b,k_as,k_bs,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,set_96,4).
 state_bob(b,a,s,k_bs,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,5).
 state_alice(a,s,i,k_as,0,dummy_nonce,dummy_nonce,dummy_sk,scrypt(dummy_sk,pair(dummy_sk,pair(dummy_agent,dummy_nonce))),7).
 state_server(s,a,i,k_as,ki,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,set_105,8).
 state_server(s,i,b,ki,k_bs,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,set_107,12).
 state_bob(b,i,s,k_bs,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,13)


section rules:

step step_0 (A,S,B,K_AS,Dummy_Na,Nb,K_AB,Token,SID,Na) :=
 state_alice(A,S,B,K_AS,0,Dummy_Na,Nb,K_AB,Token,SID).
 iknows(start)
=[exists Na]=>
 state_alice(A,S,B,K_AS,1,Na,Nb,K_AB,Token,SID).
 iknows(pair(A,pair(B,Na)))

step step_1 (A,S,B,K_AS,Na,Nb,Dummy_K_AB,Dummy_Token,SID,K_AB,Token) :=
 state_alice(A,S,B,K_AS,1,Na,Nb,Dummy_K_AB,Dummy_Token,SID).
 iknows(scrypt(K_AS,pair(B,pair(Na,pair(K_AB,Token)))))
 =>
 state_alice(A,S,B,K_AS,2,Na,Nb,K_AB,Token,SID).
 iknows(Token).
 request(A,B,bob_alice_K_AB,K_AB,SID)

step step_2 (A,S,B,K_AS,Na,Dummy_Nb,K_AB,Token,SID,Nb) :=
 state_alice(A,S,B,K_AS,2,Na,Dummy_Nb,K_AB,Token,SID).
 iknows(scrypt(K_AB,Nb))
 =>
 state_alice(A,S,B,K_AS,3,Na,Nb,K_AB,Token,SID).
 iknows(scrypt(K_AB,xor(Nb,1))).
 witness(A,B,alice_bob_nb,Nb)

step step_3 (S,A,B,K_AS,K_BS,Dummy_Na,Dummy_Ns,Nb2,K_AB,Set_43,SID,Na,Ns) :=
 state_server(S,A,B,K_AS,K_BS,0,Dummy_Na,Dummy_Ns,Nb2,K_AB,Set_43,SID).
 iknows(pair(A,pair(B,Na)))
=[exists Ns]=>
 state_server(S,A,B,K_AS,K_BS,1,Na,Ns,Nb2,K_AB,Set_43,SID).
 iknows(scrypt(K_BS,pair(A,Ns)))

step step_4 (S,A,B,K_AS,K_BS,Na,Ns,Dummy_Nb2,Dummy_K_AB,Dummy_Set_43,SID,Nb2,K_AB) :=
 state_server(S,A,B,K_AS,K_BS,1,Na,Ns,Dummy_Nb2,Dummy_K_AB,Dummy_Set_43,SID).
 iknows(scrypt(K_BS,pair(A,pair(Ns,Nb2))))
=[exists K_AB]=>
 state_server(S,A,B,K_AS,K_BS,2,Na,Ns,Nb2,K_AB,Dummy_Set_43,SID).
 iknows(scrypt(K_AS,pair(B,pair(Na,pair(K_AB,scrypt(K_BS,pair(K_AB,pair(A,Nb2)))))))).
 contains(A,Dummy_Set_43).
 contains(B,Dummy_Set_43).
 contains(S,Dummy_Set_43)

step step_5 (B,A,S,K_BS,Nb,Dummy_Nb2,Dummy_Ns,K_AB,SID,Nb2,Ns) :=
 state_bob(B,A,S,K_BS,0,Nb,Dummy_Nb2,Dummy_Ns,K_AB,SID).
 iknows(scrypt(K_BS,pair(A,Ns)))
=[exists Nb2]=>
 state_bob(B,A,S,K_BS,1,Nb,Nb2,Ns,K_AB,SID).
 iknows(scrypt(K_BS,pair(A,pair(Ns,Nb2))))

step step_6 (B,A,S,K_BS,Dummy_Nb,Nb2,Ns,Dummy_K_AB,SID,Nb,K_AB) :=
 state_bob(B,A,S,K_BS,1,Dummy_Nb,Nb2,Ns,Dummy_K_AB,SID).
 iknows(scrypt(K_BS,pair(K_AB,pair(A,Nb2))))
=[exists Nb]=>
 state_bob(B,A,S,K_BS,2,Nb,Nb2,Ns,K_AB,SID).
 iknows(scrypt(K_AB,Nb)).
 witness(B,A,bob_alice_K_AB,K_AB)

step step_7 (B,A,S,K_BS,Nb,Nb2,Ns,K_AB,SID) :=
 state_bob(B,A,S,K_BS,2,Nb,Nb2,Ns,K_AB,SID).
 iknows(scrypt(K_AB,xor(Nb,1)))
 =>
 state_bob(B,A,S,K_BS,3,Nb,Nb2,Ns,K_AB,SID).
 request(B,A,alice_bob_nb,Nb,SID)


section properties:

property secrecy_of_k (MGoal,ASGoal) :=
 [] ((secret(MGoal,k,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_alice_bob_nb (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,alice_bob_nb,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,alice_bob_nb,MGoal))
     /\ ((request(A1Goal,A2Goal,alice_bob_nb,MGoal,SID1)
           /\ request(A1Goal,A2Goal,alice_bob_nb,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_bob_alice_K_AB (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,bob_alice_K_AB,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,bob_alice_K_AB,MGoal))
     /\ ((request(A1Goal,A2Goal,bob_alice_K_AB,MGoal,SID1)
           /\ request(A1Goal,A2Goal,bob_alice_K_AB,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_k (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,k,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_alice_bob_nb (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,alice_bob_nb,MGoal,SID) &
 not(witness(A2Goal,A1Goal,alice_bob_nb,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_alice_bob_nb (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,alice_bob_nb,MGoal,SID1).
 request(A1Goal,A2Goal,alice_bob_nb,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_bob_alice_K_AB (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,bob_alice_K_AB,MGoal,SID) &
 not(witness(A2Goal,A1Goal,bob_alice_K_AB,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_bob_alice_K_AB (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,bob_alice_K_AB,MGoal,SID1).
 request(A1Goal,A2Goal,bob_alice_K_AB,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


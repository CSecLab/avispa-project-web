% A -> B : Na   
% B -> A : {Na}_Kab
% send is witness
% who authenticates is request
% in B there should be witness (B, A, ...)
% in A there should be request (A, B, ...)




role alice(
A,B                     :agent,
Kab                         :symmetric_key,
SND_A,RCV_A   :channel(dy))

played_by A def=

local
 State                    :nat,
 Na                        :text


 init State :=0 

 transition 

0. State  =  0 /\ RCV_A(start) =|>
   State' :=  2  /\  Na' := new()
                     /\ SND_A (Na') 

2. State   = 2 /\ RCV_A ({Na}_Kab) =|>   
    State' := 4  /\ request (A,B,alice_bob_na,Na)   

end role



role bob(
A,B                                     :agent,
Kab                                     :symmetric_key,
SND_B,RCV_B                   :channel(dy)) played_by B def=

local
 State                       :nat,
 Na                      :text

init
 State :=1

transition 

4. State  =1  /\  RCV_B(Na') =|>  State' :=3 /\  SND_B({Na'}_Kab) 
                                                               /\ witness (B,A,alice_bob_na, Na)    
       
end role


role session(
 A, B                                            : agent,
 Kab                                         : symmetric_key)

def=

local 
    SA, RA,
    SB, RB : channel(dy)

composition

              alice (A,B,Kab,SA,RA)
          /\  bob (A,B,Kab, SB,RB)
     
end role



role environment()
      def=

 const a,b, i                                          : agent,
 kab,kib, kai                                          : symmetric_key,
 alice_bob_na                              : protocol_id

  intruder_knowledge={a,b,kib,kai}

   composition
      
     session(a,b,kab)
  %  /\ session(a,i,kai)
 %  /\session(i,b,kib)

end role

goal
  % secrecy_of skab
   authentication_on alice_bob_na
end goal


environment()


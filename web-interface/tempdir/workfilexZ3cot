role alice(
A,B,S : agent,
Kas: symmetric_key,
SND,RCV: channel(dy))
played_by  A def=
local
Kab:message,
State,Ta:nat,
M,Na:text
init 
State := 0
transition
1.State = 0 
/\RCV(start) =|> State' := 2 
/\ Kab':= new() 
/\ Ta':= new() 
/\ SND(A,{Kab'.Ta'.B}_Kas) 
/\ secret(Kab',Kab,{A,B,S})
/\request(A,S,alice_server_Kas,Kas)
2.State=2 /\ RCV({B}_Kab) =|> State':= 6/\ Na':=new() /\ SND ({A.Na'}_Kab)  /\ request(A,B,alice_bob_na,Na')
3.State=6 /\ RCV({B.M'}_Kab) =|> State':= 12 
end role
role bob(
A,B,S : agent,
Kbs : symmetric_key,
SND,RCV: channel(dy))
played_by B def=
local
Kab:message,
State,Ts:nat,
M,Na:text
init 
State:=5
transition
1.State= 5 
/\ RCV({A.Kab.Ts}_Kbs) =|> State':= 7/\ witness(B,S,server_bob_Kbs,Kbs)
2.State= 7 /\ RCV({A.Na}_Kab) =|> State':= 9 /\ M':= xor(Na',1)
3.State= 9 /\  SND({B.M'}_Kab) =|> State':= 11 /\ witness(B,A,alice_bob_na,Na')
end role
role server(
A,B,S : agent,
Kas,Kbs: symmetric_key,
SND,RCV: channel(dy))
played_by S def=
local
Kab:message,
State,Ts,Ta: nat
init 
State:=1
transition
1.State= 1 /\ RCV(A,{B.Kab'.Ta'}_Kas) =|> State':= 3 /\ Ts':= new() /\ witness(S,A,alice_server_Kas,Kas)
2.State= 3 /\  SND({A.Kab'.Ts'}_Kbs) /\ SND({B}_Kab') =|> State':= 5/\request(S,B,server_bob_Kbs,Kbs)
end role
role session(A,B,S :agent,
Kas,Kbs  :symmetric_key) def=
local
Sa, Ra, Sb, Rb , Ss, Rs : channel (dy) 
composition  alice( A,B,S,Kas,Sa,Ra) /\ bob(B,A,S,Kbs,Sb,Rb) /\ server(S,A,B,Kas,Kbs,Ss,Rs)
end role
role environment()
def=
const 
a,b,s :agent,
server_bob_Kbs, alice_bob_na, alice_server_Kas : protocol_id,
kas,kbs,kab : symmetric_key
intruder_knowledge = {a,b,s,kab}
composition
session(a,b,s,kas,kbs)
/\ session(i,b,s,kas,kab)
/\ session(a,i,s,kab,kbs)
end role
goal
secrecy_of kab
authentication_on server_bob_Kbs
authentication_on alice_bob_na
authentication_on alice_server_Kas
end goal
environment()

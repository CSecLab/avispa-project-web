role alice(claimer, verifier: agent,
Sab: symmetric-key, 
HASH, Sum, Multi: hash-func, 
SND, RCV: channel (dy))
played_by claimer def = 
local State: nat,
%IDa, IDb 
D, Sui, Sai, T1, T2, Mui, Mi, TMi, MAC: text,
Ui: symmetric_key,
Init State:=0
Const bob_alice_tmi, bob_alice_mac, bob_alice_auth,
Sec1, sec2: protocol_id
transition
1.	State = 0 /\ RCV(start) =|>
% creating the message to be sent Mi
State':=1 /\ 
/\Mi':= new()
/\ Sui' := new()
%creating the secret share Ui
/\ Ui' := new()
%creating the share authenticator Sai
/\ Sai' := HASH (Sui)
/\ T1' := new()
/\ T2' := xor(T1', D)
/\ TMi := new()
/\ Mui' := xor(Ui', HASH(xor(TMi', T2'))
%creating the MAC part of the message MS1
/\ MAC' := HASH(Ui'.claimer.verifier.Sai'.Mi'.Mui'.TMi')
/\ SND( claimer.verifier.Sai'.Mi'.Mui'.TMi'.MAC')
% claimer has freshly generated the timestamp on the message
/\ witness (claimer, verifier, bob_alice_tmi, tmi')
% claimer has generated a MAC on the message using the secret share Ui as a key
/\ witness (claimer, verifier, bob_alice_MAC, MAC')
%Claimer generated the authenticator using the secret share ui that belongs to the secret S
/\ witness (claimer, verifier, bob_alice_auth, auth')
/\secret (Sab, sec1, {alice,bob})
/\ secret (Ui', sec2, {alice, bob})
/\ secret (D', sec3, {alice, bob})
end role

role bob (claimer, verifier: agent,  
Sab: symmetric-key, 
HASH, Sum, Multi: hash-func, 
SND, RCV: channel (dy))
played_by verifier def = 
local State: nat,
%IDa, IDb, 
D, Sui, Sai, T1, T2, Mui, Mi, TMi, MAC: text,
Ui: symmetric_key,
Init State:=2
Const bob_alice_tmi, bob_alice_mac, bob_alice_auth,
Sec1, sec2: protocol_id
transition
1.	State = 0 /\ RCV(claimer.verifier.Sai.Mi.Mui.TMi.MAC) =|>
% reading the current time of the machine
State' := 1 /\ TMi' := new()
% Bob's acceptance of the timestamp TMi generated by Alice
/\ request (verifier, claimer, bob_alice_tmi, TMi')
% checking the freshness of Mui by first revealing the share Ui
T1' := new()
/\ T2' := Multi(T1'.D)
Ui':=xor(Mui.HASH(xor(TMi'.T2'))
%checking the authenticity of the received MAC
%/\ MAC':= HASH (Ui'.IDa.IDb.Sai.Mi.Mui.TMi')
/\ MAC':= HASH (Ui'.claimer.verifier.Sai.Mi.Mui.TMi')
/\ request(verifier, claimer, bob_alice_tmi, TMi')
/\ request(verifier, claimer, bob_alice_mac, MAC')
%checking the authenticity of the share Ui'
/\ Sai':= SUB(Ui'.Sab)
/\ Auth':=HASH(Sai')
/\ request(verifier, claimer, bob_alice_auth, Auth')
/\ secret (Sab, sec1, {alice,bob})
/\ secret (Ui', sec2, {alice, bob})
/\ secret (D', sec3, {alice, bob})
End role
role session(claimer,verifier: agent,
	     Sab: symmetric_key,
HASH, Sum, Multi: hash-func)

def=

  local SND, RCV: channel (dy)

  composition
     alice(claimer,verifier,Sab,HASH, Sum, Multi)
  /\ bob(claimer,verifier,Sab,HASH, Sum, Multi)

end role

role environment ()
def =
const claimer, verifier: agent,
Sab: symmetric_key,
HASH, Sum, Multi: hash_func,
Sai, Mi, Mui, TMi, MAC: text,
bob_alice_tmi, bob_alice_mac, bob_alice-auth,
sec1, sec2, sec3: protocol_id
Intruder-knowledge := {claimer, verifier, Sai, Mi, Mui, TMi, MAC} 
Composition
session(claimer, verifier, Sab, HASH, Sum, Multi)
/\ session(claimer, verifier, Sab, HASH, Sum, Multi)
End role
Goal
secrecy_of sec1
secrecy_of sec2
secrecy_of sec3
authentication_on bob-alice_tmi
authentication_on bob-alice_mac
authentication_on bob-alice_auth

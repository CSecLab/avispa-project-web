role alice (	A, S, B : agent,
		K_AS: symmetric_key,
		SND_AS, SND_AB, RCV_AS, RCV_AB : channel(dy))
played_by A
def=
	local 	State: nat,
		Na, Nb: text,
		K_AB: symmetric_key,
		Token_Server: {symmetric_key.agent.text}_symmetric_key,
		Token_Bob: {agent.text}_symmetric_key
			
	init 	State :=0
	transition	
	1. 	State=0 /\ RCV_AB(start) =|>
		State':=1 /\
		SND_AB(A)
	
	2. 	State=1 /\ RCV_AB(Token_Bob') =|>
		State':=2 /\ 
		Na':=new() /\
		SND_AS(A.B.Na'.Token_Bob)
		
	3. 	State=2 /\ RCV_AS({B.Na.K_AB'.Token_Server'}_K_AS) =|>
		State':=3 /\
		SND_AB(Token_Server') /\
		request(A, B, bob_alice_K_AB, K_AB')
		
	4. 	State=3 /\ RCV_AB({Nb'}_K_AB) =|>
		State':=4 /\ 
		SND_AB({xor(Nb', 1)}_K_AB) /\
		witness(A, B, alice_bob_nb, Nb')
		
end role
		
role server(	A, S, B: agent,
		K_AS, K_BS: symmetric_key,
		SND_AS, RCV_AS : channel(dy))
played_by S
def=
	local	State: nat,
		Na, Ns: text,
		K_AB: symmetric_key
			
	init 	State :=0
	transition
	1. 	State = 0 /\ RCV_AS(A.B.Na'.{A.Ns'}_K_BS) =|>
		State' := 1 /\ 
		K_AB' := new() /\
		SND_AS({B.Na.K_AB'.{K_AB'.A.Ns'}_K_BS}_K_AS)
		/\ secret(K_AB',sec_k,{A, B, S})

end role

role bob(	A, S, B: agent,
		K_BS: symmetric_key,
		SND_AB, RCV_AB: channel(dy))
played_by B
def=
	local	State: nat,
		Nb, Ns: text,
		K_AB: symmetric_key
			
	init 	State := 0
	transition
	1.	State = 0 /\ RCV_AB(A) =|>
		State' := 1 /\
		Ns':= new() /\
		SND_AB({A.Ns'}_K_BS)
		
	2.	State = 1 /\ RCV_AB({K_AB'.A.Ns}_K_BS) =|>
		State' := 2 /\
		Nb' := new() /\
		SND_AB({Nb'}_K_AB') /\
		witness(B, A, bob_alice_K_AB, K_AB')
		
		
	3. 	State = 2 /\ RCV_AB({xor(Nb, 1)}_K_AB) =|>
		State' := 3 /\ request(B,A, alice_bob_nb, Nb)
		
end role

role session(	A, S, B : agent,
		K_AS, K_BS: symmetric_key)
def=

	local 	SAS, SBS, SAB,
		RAS, RBS, RAB : channel(dy)
			
	composition
		alice (A, S, B, K_AS, SAS, SAB, RAS, RAB) /\
		server (A, S, B, K_AS, K_BS, SAS, RAS) /\
		bob (A, S, B, K_BS, SAB, RAB)
		
end role

role environment()
def=

	const a, b, s: agent,
	      k_as, k_bs, ki: symmetric_key,
	      alice_bob_nb, bob_alice_K_AB, sec_k: protocol_id
		  
	intruder_knowledge = {a, s, b, ki}
	
	composition
		session(a, s, b, k_as, k_bs) /\
		session(a, s, i, k_as, ki) /\
		session(i, s, b, ki, k_bs)
		
end role

goal
	secrecy_of sec_k
	authentication_on alice_bob_nb
	authentication_on bob_alice_K_AB
end goal

environment()
		
		

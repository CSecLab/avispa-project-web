%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilerq6hpe

section signature:

state_responder: agent * agent * public_key * public_key * hash_func * nat * text * text * text * text * text * text * text * set(text) * nat -> fact
state_initiator: agent * agent * public_key * public_key * hash_func * nat * text * text * text * text * text * text * set(text) * nat -> fact


section types:

Set_45, Dummy_Set_45, Set_27, Dummy_Set_27: set(text)
a_b, b_a, sub2, kab: protocol_id
set_81, set_79, set_74, set_64: set
UIDA, SK, TM, TK, TS, R, Kba, Dummy_Kba, Dummy_SK, Dummy_R, Dummy_TS, Dummy_TK, dummy_nonce: text
ASGoal: set(agent)
State, 7, 6, 4, SID, 1, 0, Dummy_State, 3: nat
start, MGoal: message
Hash, h: hash_func
APubKey, BPubKey, aPubKey, bPubKey: public_key
A, B, a, b, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(i).
 state_initiator(a,b,aPubKey,bPubKey,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_64,3).
 state_responder(b,a,aPubKey,bPubKey,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_74,4).
 state_initiator(a,b,aPubKey,bPubKey,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_79,6).
 state_responder(b,a,aPubKey,bPubKey,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_81,7)


section rules:

step step_0 (A,B,APubKey,BPubKey,Hash,UIDA,SK,Dummy_TK,Dummy_TS,Dummy_R,Kba,Set_27,SID,TS,R) :=
 state_initiator(A,B,APubKey,BPubKey,Hash,0,UIDA,SK,Dummy_TK,Dummy_TS,Dummy_R,Kba,Set_27,SID).
 iknows(start)
=[exists TS,R]=>
 state_initiator(A,B,APubKey,BPubKey,Hash,1,UIDA,SK,pair(Dummy_R,apply(Hash,UIDA)),TS,R,Kba,Set_27,SID).
 iknows(crypt(APubKey,pair(Dummy_TS,pair(Dummy_TK,UIDA))))

step step_1 (A,B,APubKey,BPubKey,Hash,UIDA,Dummy_SK,TK,TS,R,Kba,Dummy_Set_27,SID) :=
 state_initiator(A,B,APubKey,BPubKey,Hash,1,UIDA,Dummy_SK,TK,TS,R,Kba,Dummy_Set_27,SID).
 iknows(crypt(APubKey,Kba))
 =>
 state_initiator(A,B,APubKey,BPubKey,Hash,1,UIDA,pair(kab,TS),TK,TS,R,Kba,Dummy_Set_27,SID).
 secret(Dummy_Set_27,kab,A).
 iknows(scrypt(TK,Dummy_SK)).
 contains(Kba,Dummy_Set_27)

step step_2 (B,A,APubKey,BPubKey,Hash,UIDA,SK,TM,TK,TS,Dummy_R,Dummy_Kba,Dummy_Set_45,SID,R) :=
 state_responder(B,A,APubKey,BPubKey,Hash,0,UIDA,SK,TM,TK,TS,Dummy_R,Dummy_Kba,Dummy_Set_45,SID).
 iknows(crypt(APubKey,pair(TS,pair(TK,UIDA))))
=[exists R]=>
 state_responder(B,A,APubKey,BPubKey,Hash,1,UIDA,SK,TM,TK,TS,R,pair(Dummy_R,apply(Hash,pair(TK,UIDA))),Dummy_Set_45,SID).
 secret(Dummy_Set_45,sub2,B).
 iknows(crypt(BPubKey,Dummy_Kba)).
 contains(pair(Dummy_R,apply(Hash,pair(TK,UIDA))),Dummy_Set_45)

step step_3 (B,A,APubKey,BPubKey,Hash,UIDA,Dummy_SK,TM,TK,TS,R,Kba,Set_45,SID) :=
 state_responder(B,A,APubKey,BPubKey,Hash,1,UIDA,Dummy_SK,TM,TK,TS,R,Kba,Set_45,SID).
 iknows(scrypt(TK,kab))
 =>
 state_responder(B,A,APubKey,BPubKey,Hash,1,UIDA,pair(kab,TS),TM,TK,TS,R,Kba,Set_45,SID).
 iknows(scrypt(TK,Dummy_SK))


section properties:

property secrecy_of_sub2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sub2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_kab (MGoal,ASGoal) :=
 [] ((secret(MGoal,kab,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state secrecy_of_sub2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sub2,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_kab (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,kab,ASGoal) &
 not(contains(i,ASGoal))


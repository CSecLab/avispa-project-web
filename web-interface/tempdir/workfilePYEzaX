



role server (U, S : agent,
SKus : symmetric_key,
H: hash_func,
Snd, Rcv: channel(dy))




played_by S
def=
local 
State : nat,
Na,CID,Bi,passwordi,Nb,HPWi,Ack,Ni, Y,X,Ci,: text
const user_server_na,server_user_nb,subs1,subs2 : protocol_id
init State := 1
transition
1. State = 1 /\Rcv({passwordi'}_SKus) =|>
State':=3
/\X':=new()
/\secret(X',subs1,{S})
/\Y':=new()
/\secret(Y',subs2,{U,S})
/\Ni':=xor(passwordi',X')
/\Snd({passwordi'.H.Ni'.Y'}_SKus)
2.State=3/\Rcv(CID'.Ni'.Ci'.Na')=|>
State':=5
/\Nb':=new()




/\request(S,U,user_server_na,Na') 



end role




role session(U, S : agent)
def=
local 
SKus : symmetric_key,
H : hash_func,
SU,SS,RU,RS:channel(dy),
passwordi, X,Y,Ni: text
const subs1,subs2 : protocol_id
composition
user(U,S,SKus,H,SU,RU)
/\server(U,S,SKus,H,SS,RS)
end role




role environment ()
def=
const u,s : agent,
h: hash_func,
subs1,subs2,user_server_na,server_user_nb : protocol_id


intruder_knowledge={u,s,h}
composition
session(u,s)
end role








role user (U, S : agent,
SKus : symmetric_key,
H : hash_func,
Snd, Rcv: channel(dy))



played_by U
def=
local State : nat,
passwordi, Ni, Y,Na,CID,Bi,Ci,Nb,Ack,Ni_new,PWi_new: text
const subs1,subs2,user_server_na,server_user_nb : protocol_id
init 
State := 0



transition
1. State = 0 /\Rcv(start) =|>
State' := 2 /\passwordi' := new()
/\Snd({passwordi'}_SKus)
/\secret({passwordi'}, subs1, {U,S})
/\secret({SKus}, subs2, {U,S})



2.State = 2 /\Rcv({passwordi.H.Ni'.Y'}_SKus)
=|>State':= 4



3.State=4 /\Rcv({passwordi'.H.Ni'.Y'}_SKus)=|>
State':=6
/\Na':=new()
/\witness(U,S,user_server_na,Na')  
/\CID':=xor(H(passwordi'),H(xor(Ni',xor(Y',Na'))))
/\Bi':=H(xor(CID',H(passwordi)))
/\Ci':=H(xor(Na',xor(Ni',xor(Bi',Y'))))
/\Snd(CID'.Ni'.Ci'.Na')



4.State=6=|>
State':=8
/\PWi_new':=new()
/\Ni_new':=xor(Ni',xor(H(passwordi),H(PWi_new')))
/\Ni':=Ni_new'
end role







goal
	secrecy_of subs1
	secrecy_of subs2
	authentication_on user_server_na
	authentication_on server_user_nb
end goal

environment()

role alice (A,B: agent,
K: symmetric_key,
Mac:hash_func,
Snd,Rcv: channel(dy))
played_by A
def=
local State : nat,
Na,Nb,N: text
const sec_k1 : protocol_id
init State := 0 % initialisation
transition
1. State = 0
/\ Rcv(start)
=|>
State' := 1
/\ Na' := new()
/\ Nb' := new()
/\ N' := new()
/\ Snd(Na'.Nb'.N'.Mac(Na'.Nb'.N'))
2. State = 1
/\ Rcv({Na.Nb.N}_K.Mac(Na.Nb))
=|>
State' := 2
/\ Snd(Mac(Na.Nb))

end role

role bob (A,B: agent,
K: symmetric_key,
Mac:hash_func,
Snd,Rcv: channel(dy))
played_by B
def=
local State : nat,
Na,Nb,N: text
const sec_k2 : protocol_id
init State := 0
transition
1. State = 0 /\ Rcv(Na'.Nb'.N'.Mac(Na'.Nb'.N'))
=|>
State' := 1

/\ Snd({Na.Nb.N}_K.Mac(Na.Nb))
/\ witness(B,A,nb,Nb')
/\ secret(Nb',sec_k2,{A,B})
2. State = 1 /\ Rcv(Mac(Na.Nb))
=|>
State' := 2
/\ request(A,B,na,Na)
end role

role session(A,B: agent,
K: symmetric_key,
Mac:hash_func)
def=
local SA, RA, SB, RB: channel (dy)
composition
alice(A,B,K,Mac,SA,RA)
/\ bob(A,B,K,Mac,SB,RB)
end role
role environment()
def=
const a, b, i : agent,
k,ki: symmetric_key,
mac:hash_func,
na, nb : protocol_id
intruder_knowledge={i,ki}
composition
session(a,b,k,mac)
/\ session(a,i,k,mac)
end role
goal
secrecy_of sec_k1, sec_k2
authentication_on nb
authentication_on na
end goal
environment()
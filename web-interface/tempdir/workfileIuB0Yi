%% PROTOCOL: ISO1 Public Key Unilateral Authentication Protocol
%% VARIANT: one-pass unilateral authentication
%% PURPOSE: A client authenticates himself to a server by sending a digital signature.
%% REFERENCE:
%% egin{itemize}
%% item cite{clark97survey,ISO-IEC-9798-3}
%% end{itemize}
%% MODELER:
%% egin{itemize}
%% item Haykal Tej, Siemens CT IC 3, 2003 and
%% item Luca Compagna et al, AI-Lab DIST University of Genova, November 2004
%% end{itemize}
%% ALICE_BOB:
%% egin{verbatim}
%%   1. A -> B : {PKa,A}inv(PKs), Na, B, Text,{Na,B,Text}inv(PKa)
%% end{verbatim}
%% PROBLEMS: 1
%% CLASSIFICATION: G1, G2
%% ATTACKS: 
%% The intruder can attack this protocol by simple eavesdropping
%% and replaying the digital signatures.
%% egin{verbatim}
%% i     -> (a,6) : start
%% (a,6) -> i     : pka,a,{pka,a}inv(pks),na(a,6),b,ctext,
%%                  {na(a,6),b,ctext}inv(pka)
%% i     -> (b,4) : pka,a,{pka,a}inv(pks),na(a,6),b,ctext,
%%                  {na(a,6),b,ctext}inv(pka)
%% i     -> (b,7) : pka,a,{pka,a}inv(pks),na(a,6),b,ctext,
%%                  {na(a,6),b,ctext}inv(pka)
%% end{verbatim}
%% NOTES:
%% 
%% erb!inv(PKs)! is the private key of the server erb!C!; 
%% erb!{PKa,A}inv(PKs)! is the certificate of agent erb!A!.
%%
%% If one would like to use the same server public key for each
%% session, then permutation on erb!Pks! should be avoided.
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 	
%% HLPSL:
role alice(
A,B : agent,
K : symmetric_key,
Hash : hash_func,
SND,RCV : channel(dy))
played_by A def=
local
State : nat,
Na,Nb : text,
K1 : message
init
State := 0
transition
1. State = 0 / RCV(start) =|>
State’:= 2 / Na’ := new()
/ SND({Na’}_K)
2. State = 2 / RCV({Nb’}_K) =|>
State’:= 4 / K1’ := Hash(Na.Nb’)
/ SND({Nb’}_K1’)
/ witness(A,B,bob_alice_nb,Nb’)
end role

——————————————————————————————————————————
role bob(
A,B : agent,
K : symmetric_key,
Hash : hash_func,
SND,RCV : channel(dy))
played_by B def=
local
State : nat,
Nb,Na : text,
K1 : message
init
State := 1
transition
1. State = 1 / RCV({Na’}_K) =|>
State’:= 3 / Nb’ := new()
/ SND({Nb’}_K)
/ K1’:= Hash(Na’.Nb’)
/ secret(K1’,k1,{A,B})
2. State = 3 / RCV({Nb}_K1) =|>
State’:= 5 / request(B,A,bob_alice_nb,Nb)
end role
——————————————————————————————————————————
role session(
A,B : agent,
K : symmetric_key,
Hash : hash_func)
def=
local SA, SB, RA, RB : channel (dy)
composition
alice(A,B,K,Hash,SA,RA)
/ bob (A,B,K,Hash,SB,RB)
end role
——————————————————————————————————————————
role environment()
def=
const
bob_alice_nb,
k1 : protocol_id,
kab,kai,kib : symmetric_key,
a,b : agent,
h : hash_func
intruder_knowledge = {a,b,h,kai,kib}
composition
session(a,b,kab,h)
/ session(a,i,kai,h)
/ session(i,b,kib,h)
end role
——————————————————————————————————————————
goal
secrecy_of k1
authentication_on bob_alice_nb
end goal
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

environment() 
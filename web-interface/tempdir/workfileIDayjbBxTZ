%%HLPSL:
role client (A,S,B   : agent,
           	P, Ppub : symmetric_key,
	   	Union, Pred, Ebilinear : hash_func, 
                Ra, Rs, Rb : text,              
           	SND_SA, RCV_SA, SND_BA, RCV_BA: channel(dy))
played_by A
def=
           
  local State  : nat,

          
          Na, Nb : text,          
          
          Ida, Qida1, Qida2, Ua1, Ua2, Wa, Va,  Authab, Ids, Us, Usa1, Usa2, Usb1, Usb2, Hsb, Vsb, Authsa, Authsb, Idb, Qidb1, Qidb2, Ub1, Ub2, Wb, Vb, Authba : message,
         
          Ss, Dida1, Dida2, Kab, Ksa, Ksb, Kba, Didb1, Didb2, Dids, Skab :  symmetric_key

          const dida1, dida2, didb1, didb2, dids, ksa, ksb, kab, kba, skab :protocol_id

  init  State := 0

  transition

   1. State   = 0 / RCV_BA(start) =|>
      State' := 1 / Ra':= new()
                  / Ua1':= Pred(Ra, P)
                  / Ua2':= Pred(Ra, Qida2)
                  / Wa':= Pred(Ua1, Ua2)
                  / Va':= Union(Pred(Pred(Ra, Dida1), Wa), Dida2)
                  / SND_SA(A.S.Ida.Idb.Ua1.Ua2.Va.Qida1)
                  / secret(Dida1, dida1, {A, S})
                  / secret(Dida2, dida2, {A, S})
                  / witness(A, S, a_s_dida1, Dida1)
                  / witness(A, S, a_s_dida2, Dida2)

   2. State   = 8 / RCV_SA(S.A.Na'.Authsa'.Idb.Us'.Usa1'.Usa2'.Nb'.Authsb')                   
                  / Ksa' = Pred(Ss, Ua2)
                  / Authsa'= Union(Ida, Idb, Ua1, Ua2, Va, Na, Ksa, Us, Usa1, Usa2)  =|> 
      State' := 9 / Kab':= Ebilinear(Pred(Ra, Ppub), Pred(Ra, Dida2), Pred(Usa1, Usa2))
                  / Authab':= Union(Ida, Idb, Us, Kab)
                  / SND_BA(A.B.Nb.Authsb.Authab)
                  / request(S, A, s_a_ksa, Ksa)
                  / secret(Kab, kab, {A, B})                  
                  / witness(A, B, a_b_kab, Kab)
                  

   3. State   = 12 / RCV_BA(B.A.Authba')                    
                   / Kba'= Ebilinear(Pred(Usb1, Usb2), Pred(Rb, Ppub), Pred(Rb, Didb2))
                   / Authba'= Union(Ida, Idb, Us, Kba, Authab) =|> 
      State' := 13 / Skab':= Union(Ida, Idb, Us, Kab, Authab, Authba) 
                   / request(B,A,b_a_kba, Kba)
                   / secret(Skab, skab, {A, S, B})
                   
                                    

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role authentication_server (A,S,B : agent,
                P, Ppub : symmetric_key,
		Union, Pred, Ebilinear : hash_func,
                Ra, Rs, Rb : text,
                SND_AS, RCV_AS, SND_BS, RCV_BS: channel(dy))
played_by S
def=
           
  local State  : nat,

          Na, Nb : text,   
          
          Ida, Qida1, Qida2, Ua1, Ua2, Wa, Va,  Authab, Ids, Us, Usa1, Usa2, Usb1, Usb2, Hsb, Vsb, Authsa, Authsb, Idb, Qidb1, Qidb2, Ub1, Ub2, Wb, Vb, Authba : message,
          
          Ss, Dida1, Dida2, Kab, Ksa, Ksb, Kba, Didb1, Didb2, Dids, Skab :  symmetric_key

          const dida1, dida2, didb1, didb2, dids, ksa, ksb, kab, kba, skab :protocol_id                                         
              

  init  State := 2

  transition

   1. State   = 2 / RCV_AS(A.S.Ida.Idb.Ua1'.Ua2'.Va'.Qida1)  =|>  
      State' := 3 / Rs':= new()
                  / Us':= Pred(Rs, P)
                  / Usb1':= Pred(Rs, Ua1)
                  / Usb2':= Pred(Rs, Ua2)
                  / Hsb':= Union(Ida, Idb, Us, Usb1, Usb2)
                  / Vsb':= Union(Pred(Rs, Ppub), Pred(Hsb, Dids))
                  / SND_BS(S.B.Ida.Us.Usb1.Usb2.Vsb)
                  / wrequest(A, S, a_s_dida1, Dida1)
                  / wrequest(A, S, a_s_dida2, Dida2)
                  / secret(Dids, dids, {S, B})                  
	          / witness(S, B, s_b_dids, Dids)
                  

   2. State   = 6 / RCV_BS(B.S.Idb.Ub1'.Ub2'.Vb'.Qidb1) =|>
      State' := 7 / Usa1':= Pred(Rs, Ub1)
                  / Usa2':= Pred(Rs, Ub2)
                  / Ksa':= Pred(Ss, Ua2)
                  / Ksb':= Pred(Ss, Ub2)
                  / Na':= new()
                  / Nb':= new()
                  / Authsa':= Union(Ida, Idb, Ua1, Ua2, Va, Na, Ksa, Us, Usa1, Usa2)
                  / Authsb':= Union(Ida, Idb, Ub1, Ub2, Vb, Nb, Ksb, Us, Usb1, Usb2)
                  / SND_AS(S.A.Na.Authsa.Idb.Us.Usa1.Usa2.Nb.Authsb)
                  / wrequest(B, S, b_s_didb1, Didb1)
                  / wrequest(B, S, b_s_didb2, Didb2)
                  / secret(Ss, ss, {S, A})
                  / secret(Ss, ss, {S, B})	      
		  / secret(Ksa, ksa,{A,S})
                  / secret(Ksb, ksb,{B,S})
                  / witness(S, A, s_a_ksa, Ksa)
                  / witness(S, B, s_b_ksb, Ksb)
                  

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role application_server (A,S,B : agent,
                P, Ppub : symmetric_key,
		Union, Pred, Ebilinear : hash_func,
                Ra, Rs, Rb : text,
                SND_SB, RCV_SB, SND_AB, RCV_AB: channel(dy))
played_by B
def=
           
  local State  : nat,

          Na, Nb : text,      
          
          Ida, Qida1, Qida2, Ua1, Ua2, Wa, Va,  Authab, Ids, Us, Usa1, Usa2, Usb1, Usb2, Hsb, Vsb, Authsa, Authsb, Idb, Qidb1, Qidb2, Ub1, Ub2, Wb, Vb, Authba :message,     

          Ss, Dida1, Dida2, Kab, Ksa, Ksb, Kba, Didb1, Didb2, Dids, Skab : symmetric_key

          const dida1, dida2, didb1, didb2, dids, ksa, ksb, kab, kba, skab :protocol_id

  init  State := 4

  transition

   1. State   = 4 / RCV_SB(S.B.Ida.Us'.Usb1'.Usb2'.Vsb')  =|>
      State' := 5 / Rb':= new()
                  / Ub1':= Pred(Rb, P)
                  / Ub2':= Pred(Rb, Qidb2)
                  / Wb':= Pred(Ub1, Ub2)                 
                  / Vb':= Union(Pred(Pred(Rb, Didb1), Wb), Didb2)
                  / SND_SB(B.S.Idb.Ub1.Ub2.Vb.Qidb1) 
                  / wrequest(S, B, s_b_dids, Dids) 
                  / secret(Didb1, didb1, {S, B})
                  / secret(Didb2, didb2, {S, B})
	          / witness(B, S, b_s_didb1, Didb1)
                  / witness(B, S, b_s_didb2, Didb2)
                  

   2. State   = 10 / RCV_AB(A.B.Nb'.Authsb'.Authab')                   
                   / Ksb'= Pred(Ss, Ub2)  
                   / Authsb'= Union(Ida, Idb, Ub1, Ub2, Vb, Nb, Ksb, Us, Usb1, Usb2)
                   / Kab'= Ebilinear(Pred(Ra, Ppub), Pred(Ra, Dida2), Pred(Usa1, Usa2))
                   / Authab'= Union(Ida, Idb, Us, Kab)        =|>
      State' := 11 / Kba':= Ebilinear(Pred(Usb1, Usb2), Pred(Rb, Ppub), Pred(Rb, Didb2))                 
                   / Authba':= Union(Ida, Idb, Us, Kba, Authab) 
                   / Skab':= Union(Ida, Idb, Us, Kab, Authab, Authba)
                   / SND_AB(B.A.Authba)
                   / request(S, B, s_b_ksb, Ksb)
                   / request(A, B, a_b_kab, Kab)
                   / secret(Kba, kba, {A, B})                 
                   / secret(Skab, skab, {A, S, B})                  
	           / witness(B,A,b_a_kba, Kba) 	
                  	  

end role

%%%%%%%%%%%%%%%%%%%%%%%%%
role session(A, S, B: agent,
	     P, Ppub : symmetric_key,
             Ra, Rs, Rb : text,
	     Union, Pred, Ebilinear: hash_func)
def=

  local 
        SSA, RSA, SBA, RBA, SAS, RAS, SBS, RBS, SSB, RSB, SAB, RAB : channel (dy)

  composition

           client(A, S, B, P, Ppub, Union, Pred, Ebilinear, Ra, Rs, Rb, SSA, RSA, SBA, RBA)
           /uthentication_server(A, S, B, P, Ppub, Union, Pred, Ebilinear, Ra, Rs, Rb, SAS, RAS, SBS, RBS)
           /pplication_server(A, S, B, P, Ppub, Union, Pred, Ebilinear, Ra, Rs, Rb, SSB, RSB, SAB, RAB)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%
role environment()
def=

  const a, s, b : agent,
        p, ppub : symmetric_key,
        ra, rs, rb, ri  : text,
        union, pred, ebilinear : hash_func,        
        a_s_dida2, s_b_dids, b_s_didb2, s_a_ksa, s_b_ksb, a_b_kab, b_a_kba : protocol_id

  intruder_knowledge = {a, s, b, p, ppub, union, pred, ebilinear, ri}

  composition

	   session(a, s, b, p, ppub, ra, rs, rb, union, pred, ebilinear)         
	/ session(a, s, i, p, ppub, ra, rs, ri, union, pred, ebilinear) 
        / session(i, s, b, p, ppub, ri, rs, rb, union, pred, ebilinear) 
 

end role



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal


 secrecy_of ss, dida1, dida2, didb1, didb2, dids, ksa, ksb, kab, kba
                         

 authentication_on a_s_dida1
 authentication_on a_s_dida2
 authentication_on s_b_dids
 authentication_on b_s_didb1
 authentication_on b_s_didb2
 authentication_on s_a_ksa 
 authentication_on s_b_ksb
 authentication_on a_b_kab
 authentication_on b_a_kba
  
end goal
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

environment()


 
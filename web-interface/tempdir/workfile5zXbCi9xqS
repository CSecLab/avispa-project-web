role alice( A,B :agent,
		Ka,Kb:symmetric_key,
		Hash:hash_func,
		SND,RCV:channel(dy))
	played_by A def=
		local State: nat,
			Na, Nb: text
		init State:= 0
		transition
			1. State=0 /\ RCV(start)=|>
				State':=2 /\ Na':=new()
					/\ Nb':=new()
					/\ SND({Na'.Nb'}_Kb)
					/\ witness(A,B,alice_bob_na,Na')
			2. State=2 /\ RCV({xor(Na,A).Nb}_Ka)=|>
				State':=4 /\ SND(Hash(A,B))
					/\wrequest(A,B,bob_alice_nb,Nb)
end role

role bob(A,B: agent,
	Ka,Kb:symmetric_key,
		Hash:hash_func,
		SND,RCV:channel(dy))
	played_by B def=
		local State: nat,
			Na, Nb: text
		init State:= 1
		transition
			1. State=1 /\ RCV({Na'.Nb'}_Kb)=|>
				State':=3 /\ SND({xor(Na',A).Nb'}_Ka)
					/\ witness(A,B,bob_alice_nb,Nb')
					/\secret(Ka,ka,{A,B})
			2. State=3 /\ RCV(Hash(A,B))=|>
				State':=5 /\ wrequest(A,B,alice__bob_na,Na)
end role	

role session(A,B: agent,
		Ka,Kb:symmetric_key,
		Hash:hash_func)
	def=
	local SA,RA,SB,RB: channel(dy)
	composition alice(A,B,Ka,Kb,Hash,SA,RA)
		/\ bob(A,B,Ka,Kb,Hash,SB,RB)
end role

role environment()
	def=
	const alice_bob_na,bob_alice_nb,na:protocol_id,
		a,b,i:agent,
		ka,kb,ki:symmetric_key,
		h:hash_func
	intruder_knowledge={a,b,i,ki,inv(na)}	
	composition session(a,b,ka,kb,h)
		/\ session(a,i,ka,ki,h)
		/\ session(i,b,ki,kb,h)
end role

goal
	secrecy_of ka
	authentication_on alice_bob_na,bob_alice_nb
end goal

environment()

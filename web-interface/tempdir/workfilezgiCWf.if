%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilezgiCWf

section signature:

state_base_station: agent * agent * symmetric_key * public_key * hash_func * nat * text * text * nat -> fact
state_subscriber_Station: agent * agent * symmetric_key * public_key * hash_func * nat * text * text * set(agent) * nat -> fact


section types:

set_82, set_80, set_69: set
nb, na, sec_kab1: protocol_id
Na, Nb, Dummy_Nb, Dummy_Na, dummy_nonce: text
Dummy_Set_23, Set_23, ASGoal: set(agent)
State, 10, 6, 4, SID, 3, Dummy_State, 2, SID2, 1, SID1, 0: nat
start, MGoal: message
H, hab, hai, hib: hash_func
Kb, kb, ki: public_key
Pass, passab, passai, passib: symmetric_key
B, A, Dummy_A, A2Goal, A1Goal, a, i, b: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(hai).
 iknows(hib).
 iknows(ki).
 iknows(kai).
 iknows(kbi).
 iknows(i).
 state_subscriber_Station(a,b,passab,kb,hab,0,dummy_nonce,dummy_nonce,set_69,3).
 state_base_station(b,a,passab,kb,hab,0,dummy_nonce,dummy_nonce,4).
 state_subscriber_Station(a,i,passai,ki,hai,0,dummy_nonce,dummy_nonce,set_80,6).
 state_base_station(b,i,passib,kb,hib,0,dummy_nonce,dummy_nonce,10)


section rules:

step step_0 (A,B,Pass,Kb,H,Na,Nb,Set_23,SID) :=
 state_subscriber_Station(A,B,Pass,Kb,H,0,Na,Nb,Set_23,SID).
 iknows(start)
 =>
 state_subscriber_Station(A,B,Pass,Kb,H,1,Na,Nb,Set_23,SID).
 iknows(A)

step step_1 (A,B,Pass,Kb,H,Dummy_Na,Dummy_Nb,Dummy_Set_23,SID,Na,Nb) :=
 state_subscriber_Station(A,B,Pass,Kb,H,1,Dummy_Na,Dummy_Nb,Dummy_Set_23,SID).
 iknows(Nb)
=[exists Na]=>
 state_subscriber_Station(A,B,Pass,Kb,H,2,Na,Nb,Dummy_Set_23,SID).
 iknows(apply(H,pair(Pass,pair(Na,pair(Nb,A))))).
 witness(A,B,na,Na).
 secret(Pass,sec_Pass,Dummy_Set_23).
 contains(A,Dummy_Set_23).
 contains(B,Dummy_Set_23)

step step_2 (A,B,Pass,Kb,H,Na,Nb,Set_23,SID) :=
 state_subscriber_Station(A,B,Pass,Kb,H,2,Na,Nb,Set_23,SID).
 iknows(crypt(inv(kb),Na))
 =>
 state_subscriber_Station(A,B,Pass,Kb,H,3,Na,Nb,Set_23,SID).
 request(A,B,nb,Nb,SID)

step step_3 (B,Dummy_A,Pass,Kb,H,Na,Dummy_Nb,SID,A,Nb) :=
 state_base_station(B,Dummy_A,Pass,Kb,H,0,Na,Dummy_Nb,SID).
 iknows(A)
=[exists Nb]=>
 state_base_station(B,A,Pass,Kb,H,1,Na,Nb,SID).
 iknows(Nb).
 witness(B,Dummy_A,nb,Nb)

step step_4 (B,A,Pass,Kb,H,Dummy_Na,Nb,SID,Na) :=
 state_base_station(B,A,Pass,Kb,H,1,Dummy_Na,Nb,SID).
 iknows(apply(H,pair(Pass,pair(Na,pair(Nb,A)))))
 =>
 state_base_station(B,A,Pass,Kb,H,2,Na,Nb,SID).
 iknows(crypt(inv(Kb),Na)).
 request(B,A,na,Na,SID)


section properties:

property secrecy_of_sec_Pass (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_Pass,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_nb (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,nb,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,nb,MGoal))
     /\ ((request(A1Goal,A2Goal,nb,MGoal,SID1)
           /\ request(A1Goal,A2Goal,nb,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_na (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,na,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,na,MGoal))
     /\ ((request(A1Goal,A2Goal,na,MGoal,SID1)
           /\ request(A1Goal,A2Goal,na,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sec_Pass (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_Pass,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_nb (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,nb,MGoal,SID) &
 not(witness(A2Goal,A1Goal,nb,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_nb (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,nb,MGoal,SID1).
 request(A1Goal,A2Goal,nb,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_na (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,na,MGoal,SID) &
 not(witness(A2Goal,A1Goal,na,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_na (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,na,MGoal,SID1).
 request(A1Goal,A2Goal,na,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


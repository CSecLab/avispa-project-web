role alice	(A,B,S : agent,
			Kas : symmetric_key,
			SSA,RSA,SBA,RBA : channel(dy))
	played_by A def=

	local	State 			: nat,
			Na,Nb 			: text,
			MesageServer	: {symmetric_key.agent.text}_symmetric_key,
			MesageBob 		: {agent.text}_symmetric_key,
			Kab				: symmetric_key

	init State := 0

	transition
	0. 	State = 0 /\ RBA(start) =|>
		State' := 1 /\ SBA(A)

	1.	State = 1 /\ RBA(MesageBob') =|>
		State' := 2 /\ Na':= new()
					/\ SSA(A.B.Na'.MesageBob')
					%/\ witness(A,B,alice_bob_na,Na')

	2. 	State = 2 /\ RSA({Na.B.Kab'.MesageServer'}_Kas) =|>
		State' := 3 /\ SBA(MesageServer')

					/\ secret(Kab',k,{A,B,S})

	3. 	State 	= 3 /\ RBA({Nb'}_Kab) =|>
		State' := 4 /\ SBA({A.Nb'}_Kab)
					/\ request(A,B, alice_bob_nb, Nb')
					%/\ witness(A,B, bob_alice_nb, Nb')
end role

role bob	(A,B,S : agent,
			Kbs : symmetric_key,
			SAB,RAB : channel(dy))
	played_by B def=

	local 	State : nat,
			Na,Nb : text,
			Kab : symmetric_key

	init State := 0

	transition
		0.	State = 0 	/\ RAB(A) =|>
			State' := 1 /\ Nb' := new()
						/\ SAB({A.Nb'}_Kbs)


		1. 	State = 1 	/\ RAB({Kab'.A.Nb}_Kbs) =|>
			State' := 2 /\ Nb':=new()
						/\ SAB({Nb'}_Kab')
						/\ witness(B, A, alice_bob_nb, Nb')
						/\ secret(Kab',k,{A,B,S})
						%/\ request(A,B, bob_alice_nb, Nb')
						
		2. 	State = 2 /\ RAB({A.Nb}_Kab) =|>
			State':=3 



end role

role server	(A,B,S : agent,
			Kas,Kbs : symmetric_key,
			SAS,RAS : channel(dy))
	played_by S 
	def=

	local 	State : nat,
			Kab : symmetric_key,
			Na,Nb : text

	const
		k : protocol_id

	init State := 0

	transition
	0. 	State = 0 	/\ RAS(A.B.Na'.{A.Nb'}_Kbs) =|>
		State' := 1 /\ Kab' := new()
					/\ SAS({Na'.B.Kab'.{Kab'.A.Nb'}_Kbs}_Kas)
					/\ secret(Kab',kab,{A,B,S})

end role

%% SSA,RSA,SBA,RBA,SAS,RAS,SAB,RAB : channel(dy)


role session	(A, B, S : agent,
				Kas, Kbs : symmetric_key)
	def=

	local	SSA, RSA, 
			SBA, RBA, 
			SAS, RAS, 
			SAB, RAB : channel (dy)

	composition

        alice (A, S, B, Kas,      SSA, RSA, SBA, RBA) 
     /\ server(A, S, B, Kas, Kbs, SAS, RAS)
     /\ bob   (A, S, B, Kbs,      SAB, RAB)
end role


role environment()
	def=
		const 	a, b, s 	: agent,
				ka, kb, ki 	: symmetric_key,
				alice_bob_nb, bob_alice_nb, kab	: protocol_id

	intruder_knowledge = {a, b, s, ki}

	composition

        session(a,b,s,ka,kb)
     /\ session(a,i,s,ka,ki)
     /\ session(i,b,s,ki,kb)

end role


goal
	secrecy_of k
	authentication_on alice_bob_nb
	authentication_on bob_alice_nb
end goal


environment()


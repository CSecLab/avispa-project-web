%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileXZLvsF

section signature:

state_host: agent * agent * agent * public_key * public_key * public_key * hash_func * nat * crypt(public_key,crypt(inv(public_key),pair(text,text))) * crypt(public_key,crypt(inv(public_key),pair(text,text))) * pair(crypt(public_key,crypt(inv(public_key),pair(text,text))),crypt(public_key,crypt(inv(public_key),pair(text,text)))) * crypt(public_key,crypt(inv(public_key),pair(text,text))) * crypt(public_key,crypt(inv(public_key),pair(text,pair(text,text)))) * pair(crypt(public_key,crypt(inv(public_key),pair(text,text))),crypt(public_key,crypt(inv(public_key),pair(text,pair(text,text))))) * text * text * text * text * text * text * text * nat -> fact
state_board: agent * agent * agent * public_key * public_key * public_key * hash_func * nat * crypt(public_key,crypt(inv(public_key),pair(text,text))) * crypt(public_key,crypt(inv(public_key),pair(text,text))) * pair(crypt(public_key,crypt(inv(public_key),pair(text,text))),crypt(public_key,crypt(inv(public_key),pair(text,text)))) * text * text * text * text * text * crypt(public_key,crypt(inv(public_key),pair(text,text))) * crypt(public_key,crypt(inv(public_key),pair(text,pair(text,text)))) * pair(crypt(public_key,crypt(inv(public_key),pair(text,text))),crypt(public_key,crypt(inv(public_key),pair(text,pair(text,text))))) * crypt(inv(public_key),hash_func) * nat -> fact
state_user: agent * agent * agent * public_key * public_key * public_key * hash_func * nat * crypt(public_key,crypt(inv(public_key),pair(text,text))) * crypt(public_key,crypt(inv(public_key),pair(text,text))) * pair(crypt(public_key,crypt(inv(public_key),pair(text,text))),crypt(public_key,crypt(inv(public_key),pair(text,text)))) * text * text * text * text * set(agent) * set(agent) * set(agent) * set(agent) * nat -> fact


section types:

Res_all: pair(crypt(public_key,crypt(inv(public_key),pair(text,text))),crypt(public_key,crypt(inv(public_key),pair(text,pair(text,text)))))
Res_board: crypt(public_key,crypt(inv(public_key),pair(text,pair(text,text))))
Sig, Dummy_Sig: crypt(inv(public_key),hash_func)
Uhoa, N1, N1_, N2, N4, T, M, N2_, N3, Dummy_T, Dummy_N1_, Dummy_M, Dummy_N4, Dummy_N2_, Dummy_N3, Dummy_N2, Dummy_N1, Dummy_Uhoa, dummy_nonce: text
Req_all, Dummy_Req_all: pair(crypt(public_key,crypt(inv(public_key),pair(text,text))),crypt(public_key,crypt(inv(public_key),pair(text,text))))
set_167, set_166, set_165, set_164, set_161, set_160, set_159, set_158, set_155, set_154, set_153, set_152, set_123, set_122, set_121, set_120: set
Dummy_Set_35, Dummy_Set_33, Set_35, Dummy_Set_31, Dummy_Set_28, Set_33, Set_31, Set_28, ASGoal: set(agent)
Res_user, Req_board, Req_host, Dummy_Res_user, Dummy_Req_board, Dummy_Req_host: crypt(public_key,crypt(inv(public_key),pair(text,text)))
start, MGoal: message
4, State, 17, 16, 6, 5, 13, 2, 11, 8, 7, SID, Dummy_State, 3, 1: nat
host_board_n2, n3, n2, n1, uhoa, n4: protocol_id
Hash, dummy_hash, hf: hash_func
Ku, Kh, Kb, dummy_pk, ku, kh, kb, ki: public_key
U, H, B, u, h, b, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(u).
 iknows(h).
 iknows(b).
 iknows(hf).
 iknows(ku).
 iknows(kh).
 iknows(kb).
 iknows(ki).
 iknows(i).
 state_user(u,h,b,ku,kh,kb,hf,1,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),pair(crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce)))),dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_120,set_121,set_122,set_123,3).
 state_board(b,u,h,ku,kh,kb,hf,2,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),pair(crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce)))),dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,pair(dummy_nonce,dummy_nonce)))),pair(crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,pair(dummy_nonce,dummy_nonce))))),crypt(inv(dummy_pk),dummy_hash),4).
 state_host(h,u,b,ku,kh,kb,hf,3,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),pair(crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce)))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,pair(dummy_nonce,dummy_nonce)))),pair(crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,pair(dummy_nonce,dummy_nonce))))),dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,5).
 state_user(u,i,b,ku,ki,kb,hf,1,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),pair(crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce)))),dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_152,set_153,set_154,set_155,7).
 state_board(b,u,i,ku,ki,kb,hf,2,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),pair(crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce)))),dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,pair(dummy_nonce,dummy_nonce)))),pair(crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,pair(dummy_nonce,dummy_nonce))))),crypt(inv(dummy_pk),dummy_hash),8).
 state_user(u,h,i,ku,kh,ki,hf,1,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),pair(crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce)))),dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_158,set_159,set_160,set_161,11).
 state_host(h,u,i,ku,kh,ki,hf,3,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),pair(crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce)))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,pair(dummy_nonce,dummy_nonce)))),pair(crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,pair(dummy_nonce,dummy_nonce))))),dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,13).
 state_board(b,i,h,ki,kh,kb,hf,2,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),pair(crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce)))),dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,pair(dummy_nonce,dummy_nonce)))),pair(crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,pair(dummy_nonce,dummy_nonce))))),crypt(inv(dummy_pk),dummy_hash),16).
 state_host(h,i,b,ki,kh,kb,hf,3,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),pair(crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce)))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,pair(dummy_nonce,dummy_nonce)))),pair(crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nonce))),crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,pair(dummy_nonce,dummy_nonce))))),dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,17)


section rules:

step step_0 (U,H,B,Ku,Kh,Kb,Hash,Dummy_Req_host,Dummy_Req_board,Req_all,Dummy_Uhoa,Dummy_N1,Dummy_N2,Dummy_N3,Dummy_Set_28,Dummy_Set_31,Dummy_Set_33,Dummy_Set_35,SID,Uhoa,N1,N2,N3) :=
 state_user(U,H,B,Ku,Kh,Kb,Hash,1,Dummy_Req_host,Dummy_Req_board,Req_all,Dummy_Uhoa,Dummy_N1,Dummy_N2,Dummy_N3,Dummy_Set_28,Dummy_Set_31,Dummy_Set_33,Dummy_Set_35,SID).
 iknows(start)
=[exists N3,N2,N1,Uhoa]=>
 state_user(U,H,B,Ku,Kh,Kb,Hash,3,crypt(Kh,crypt(inv(Ku),pair(Uhoa,N1))),crypt(Kb,crypt(inv(Ku),pair(N2,N3))),Req_all,Uhoa,N1,N2,N3,Dummy_Set_28,Dummy_Set_31,Dummy_Set_33,Dummy_Set_35,SID).
 secret(Uhoa,uhoa,Dummy_Set_28).
 secret(N1,n1,Dummy_Set_31).
 secret(N2,n2,Dummy_Set_33).
 secret(N3,n3,Dummy_Set_35).
 iknows(pair(crypt(Kh,crypt(inv(Ku),pair(Uhoa,N1))),crypt(Kb,crypt(inv(Ku),pair(N2,N3))))).
 iknows(crypt(Kh,crypt(inv(Ku),pair(N1,N2)))).
 contains(U,Dummy_Set_28).
 contains(H,Dummy_Set_28).
 contains(U,Dummy_Set_31).
 contains(H,Dummy_Set_31).
 contains(U,Dummy_Set_33).
 contains(B,Dummy_Set_33).
 contains(U,Dummy_Set_35).
 contains(B,Dummy_Set_35)

step step_1 (B,U,H,Ku,Kh,Kb,Hash,Dummy_Req_host,Req_board,Dummy_Req_all,Dummy_N2,N2_,Dummy_N3,N4,M,Res_user,Res_board,Res_all,Dummy_Sig,SID,Req_host,N2,N3) :=
 state_board(B,U,H,Ku,Kh,Kb,Hash,2,Dummy_Req_host,Req_board,Dummy_Req_all,Dummy_N2,N2_,Dummy_N3,N4,M,Res_user,Res_board,Res_all,Dummy_Sig,SID).
 iknows(pair(Req_host,crypt(Kb,crypt(inv(Ku),pair(N2,N3)))))
 =>
 state_board(B,U,H,Ku,Kh,Kb,Hash,5,Req_host,Req_board,pair(Req_host,crypt(Kb,crypt(inv(Ku),pair(N2,N3)))),N2,N2_,N3,N4,M,Res_user,Res_board,Res_all,crypt(inv(Kb),apply(Hash,pair(Req_host,crypt(Kb,crypt(inv(Ku),pair(N2,N3)))))),SID).
 iknows(pair(pair(Req_host,crypt(Kb,crypt(inv(Ku),pair(N2,N3)))),crypt(inv(Kb),apply(Hash,pair(Req_host,crypt(Kb,crypt(inv(Ku),pair(N2,N3))))))))

step step_2 (B,U,H,Ku,Kh,Kb,Hash,Req_host,Req_board,Req_all,N2,Dummy_N2_,N3,Dummy_N4,Dummy_M,Dummy_Res_user,Res_board,Res_all,Sig,SID,N2_,N4,M,Res_user) :=
 state_board(B,U,H,Ku,Kh,Kb,Hash,5,Req_host,Req_board,Req_all,N2,Dummy_N2_,N3,Dummy_N4,Dummy_M,Dummy_Res_user,Res_board,Res_all,Sig,SID).
 iknows(pair(Res_user,crypt(Kb,crypt(inv(Kh),pair(M,pair(N2_,N4))))))
 =>
 state_board(B,U,H,Ku,Kh,Kb,Hash,6,Req_host,Req_board,Req_all,N2,N2_,N3,N4,M,Res_user,Res_board,Res_all,Sig,SID)

step step_3 (H,U,B,Ku,Kh,Kb,Hash,Req_host,Req_board,Req_all,Res_user,Res_board,Res_all,Dummy_Uhoa,Dummy_N1,Dummy_N1_,Dummy_N2,Dummy_N4,Dummy_T,Dummy_M,SID,Uhoa,N1,N1_,N2,N4,T,M) :=
 state_host(H,U,B,Ku,Kh,Kb,Hash,3,Req_host,Req_board,Req_all,Res_user,Res_board,Res_all,Dummy_Uhoa,Dummy_N1,Dummy_N1_,Dummy_N2,Dummy_N4,Dummy_T,Dummy_M,SID).
 iknows(pair(crypt(Kh,crypt(inv(Ku),pair(Uhoa,N1))),pair(Req_board,crypt(inv(Kb),apply(Hash,Req_all))))).
 iknows(crypt(Kh,crypt(inv(Ku),pair(N1_,N2))))
=[exists N4,M,T]=>
 state_host(H,U,B,Ku,Kh,Kb,Hash,4,Req_host,Req_board,Req_all,Res_user,Res_board,Res_all,Uhoa,N1,N1_,N2,N4,T,M,SID).
 iknows(pair(crypt(Ku,crypt(inv(Kh),pair(xor(T,M),N1))),crypt(Kb,crypt(inv(Kh),pair(M,pair(N2,N4))))))


section properties:

property secrecy_of_uhoa (MGoal,ASGoal) :=
 [] ((secret(MGoal,uhoa,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_n1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,n1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_n2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,n2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_n3 (MGoal,ASGoal) :=
 [] ((secret(MGoal,n3,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state secrecy_of_uhoa (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,uhoa,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_n1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,n1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_n2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,n2,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_n3 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,n3,ASGoal) &
 not(contains(i,ASGoal))


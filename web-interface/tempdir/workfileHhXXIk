%%- S- sensor ,SP- Service Provider  
%%HLPSL:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  Secure Communication Protocol 2%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role sensor(S, SP  : agent, H : hash_func, PuS,PuSP  : public_key, Snd,Rec: channel(dy))   %% Sensor
    played_by S
    def=

      local  	State     : nat,
		MsgK	  : symmetric_key,
		Msg 	  : text

	
      init State := 0
      transition

       1. State = 0
          /\ Rec(start) =|>
          State' := 1 
          /\ MsgK' := new()
	  /\ Snd( {MsgK'.{H({Msg}_MsgK')}_inv(PuS)}_PuSP) 	
	  /\ witness(S,SP,sig,{H({Msg}_MsgK')}_inv(PuS)) 
       3.  State = 1
	    /\ Rec({Msg}_MsgK') =|>
	    State' := 3
	  /\ secret(MsgK',sk2,{SP,S})
    
	
    end role

%% service provider Role
role serviceprovider(SP,S: agent,H : hash_func,PuS,PuSP  : public_key,Snd,Rec: channel(dy))  % service provider
    played_by SP
    def=
      local  State     : nat,
	     MsgK       : symmetric_key,
	     Msg       : text


      const sk1: protocol_id
      init State := 0

      transition

       1. State = 0
          /\ Rec( {MsgK'.{H({Msg}_MsgK')}_inv(PuS)}_PuSP) =|>
	  State' := 1
	 /\ Snd({Msg}_MsgK')
	
 
         	 
end role

role session (S, SP : agent,H : hash_func, PuS,PuSP  : public_key) def=

      local SS, RS, SSP, RSP: channel (dy)
      composition

             		 sensor(S,SP,H,PuS,PuSP,SS,RS)

         
    end role

role environment() def=

      const  sig : protocol_id,
      s,sp,i         : agent,
      h: hash_func,
      pus, pusp, ki : public_key
      intruder_knowledge={i,s,sp,pus,pusp}   

      composition

            session(s,sp,h,pus,pusp)

     
    end role
   goal

secrecy_of sk1
authentication_on sig % G1, G2, G3 ,G18

end goal
environment()


role alice(
A,B		:agent,
Kab		:symmetric_key,
SND,RCV 	:channel(dy))

played_by A def=

local
 State		:nat,
  Na		:text

 init 
  State := 0

transition

1. State =0 /\ RCV(start)=|>
   State':=2 /\ Na':=new()
	    /\ SND(Na')
 
2. State =2 /\RCV({Na}_Kab)=|>
   State':=4 /\request(A,B,alice_bob_na,Na)
 
end role

role bob(
A,B		:agent,
Kab		:symmetric_key,
SND,RCV  	:channel(dy))

played_by B def=

local
 State		:nat,
 Na		:text


init
 State:=1

transition
1. State =1 /\RCV(Na')=|>
   State':=3 /\SND({Na'}_Kab)
	 %  /\secret(Kab,k,{A,B})
	   /\witness(B,A,alice_bob_na,Na')
end role

role session(
A,B		:agent,
Kab		:symmetric_key)

def=
local SA,SB,RA,RB : channel(dy)

composition
 alice(A,B,Kab,SA,RA)
/\bob(A,B,Kab,SB,RB)

end role

role environment()

def=

const
alice_bob_na 	:protocol_id,
kab,kai,kib            :symmetric_key,
a,b		:agent

intruder_knowledge={a,b,kai,kib}

composition
 session(a,b,kab)
/\ session(a,b,kab)
/\session(a,i,kai)
/\session(i,b,kib)

end role

goal
authentication_on  alice_bob_na
end goal

environment()

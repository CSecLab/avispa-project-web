role alice (Ui, Sj   : agent,
            SKuisj : symmetric_key,
            %H is the ome-way hash function
            % BH is the BioHashing function
            H  : hash_func,
            BH : hash_func,
            Snd, Rcv: channel(dy))
% Player by the initiator: the user Ui
played_by Ui
def=
 local State  : nat,
       IDi, PWi, Ni, BIOi, X, Tr, PSK : text,
       SIDj, N1, N2 : text
 const alice_bob_n1,  bob_alice_n2, 
       subs1, subs2, subs3 : protocol_id
init  State := 0
transition
 1. State = 0   /\ Rcv(start) =|>
    State' := 1 /\ secret({PWi, BIOi, Ni}, subs2, Ui)
                /\ secret({IDi}, subs3, {Ui,Sj})
                /\ secret({X, PSK, Tr}, subs1, Sj)
% Login phase                
                /\ N1' := new()
% Send the login request message < Zi, M1, M2, M3 > to Sj
                /\ Snd( xor(PSK,H(IDi.X.Tr)).
                       xor(H(PSK), N1').
                       xor(IDi, H(N1'.H(H(IDi.X.Tr)))).
                       H(IDi.N1'.H(H(IDi.X.Tr))) )
% Ui has freshly generated the value N1 for Sj
                /\ witness(Ui, Sj, alice_bob_n1, N1')
%Authentication phase
% Receive the authentication request message
%  from Sj
3. State = 1  /\ Rcv(SIDj.xor(N2',H(IDi.N1')).
                     H(H(IDi.SIDj.H(H(IDi.X.Tr)).
                     N1'.N2'). N1'. N2'))  =|> 
% Send the message < M6 > to Sj
   State' := 2 /\ Snd(H(H(IDi.SIDj.H(H(IDi.X.Tr)).
                     N1'.N2'). N1'. N2'))
% Ui's acceptance of the value N2 generated for Ui by Sj 
               /\ request(Sj, Ui, bob_alice_n2, N2')               
end role


%%%%%%%%%%%%%%%%%%%%% 
role  bob ( Ui, Sj   : agent,
            SKuisj : symmetric_key,
            %H is the ome-way hash function
            % BH is the BioHashing function
            H  : hash_func,
            BH : hash_func,
            Snd, Rcv: channel(dy))
% Player by the responder: the server Sj
played_by Sj
def=
 local State  : nat,
       IDi, PWi, Ni, BIOi, X, Tr, PSK : text,
       SIDj, N1, N2 : text
 const alice_bob_n1,  bob_alice_n2, 
       subs1, subs2, subs3 : protocol_id
init  State := 0
 transition
% Login phase
% Receive the login request message  from Ui
1. State  = 0 /\ Rcv(xor(PSK,H(IDi.X.Tr)).
                     xor(H(PSK), N1').
                     xor(IDi, H(N1'.H(H(IDi.X.Tr)))).
                     H(IDi.N1'.H(H(IDi.X.Tr)))) =|> 
% Authentication phase
 State' := 1 /\ secret({PWi, BIOi, Ni}, subs2, Ui)
             /\ secret({IDi}, subs3, {Ui,Sj})
             /\ secret({X, PSK, Tr}, subs1, Sj)
             /\  N2' := new()
% Send the authentication request message to Ui
             /\ Snd (SIDj.xor(N2',H(IDi.N1')).
                     H(H(IDi.SIDj.H(H(IDi.X.Tr)).
                     N1'.N2'). N1'. N2'))
% Sj has freshly generated the value N2 for Ui
             /\ witness(Sj, Ui, bob_alice_n2, N2')
% Receive the message < M6 > to from Ui
3. State = 1 /\ Rcv(H(H(IDi.SIDj.H(H(IDi.X.Tr)).
                     N1'.N2'). N1'. N2')) =|> 
% Sj's acceptance of the value N1 generated for Sj by Ui 
 State' := 2 /\ request(Ui, Sj, alice_bob_n1, N1')
end role

%%%%%%%%%%%%%%%%%%%%%%%%%

role session(Ui, Sj: agent,
             SKuisj : symmetric_key,
             H : hash_func,
             BH : hash_func)
def=

  local  SI, SJ, RI, RJ: channel (dy)
  
  composition
            alice(Ui, Sj, SKuisj, H, BH, SI, RI)
        /\  bob  (Ui, Sj, SKuisj, H, BH, SJ, RJ)
end role 

%%%%%%%%%%%%%%%%%%%%%%%%%%%


role environment()
def=
  const ui, sj: agent,
        skuisj : symmetric_key,
        h    : hash_func,
        bh   : hash_func,
        pwi, bioi, x, idi, sidj, n1, n2 : text, 
        alice_bob_n1,  bob_alice_n2,
        subs1, subs2, subs3 : protocol_id
  intruder_knowledge = {ui, sj, bh, h}
  composition
	   session(ui, sj, skuisj, h, bh) 
	/\ session(ui, sj, skuisj, h, bh) 
end role

goal
  secrecy_of subs1
  secrecy_of subs2
  secrecy_of subs3
  authentication_on alice_bob_n1 
  authentication_on bob_alice_n2   
end goal
environment()


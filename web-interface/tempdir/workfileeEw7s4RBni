role role_A (A:agent,B:agent,KA:public_key,KB:public_key,SND,RCV:channel(dy))
played_by A
def=
	local
		State:nat,NA:text,NB:text
	init
		State := 0
	transition
		1. State=0 / RCV(start) =|> State':=1 / NA':=new() / witness(A,B,auth_1,NA') / SND({NA'.A}_KB) 
		2. State=1 / RCV({NA.NB'}_KA) =|> State':=2 / SND({NB'}_KB)
end role

role role_B (B:agent,A:agent,KA:public_key,KB:public_key,SND,RCV:channel(dy))
played_by B
def=
	local
		State:nat,NA:text,NB:text
	init
		State := 0
	transition
		1. State=0 / RCV({NA'.A}_KB) =|> State':=1 / request(B,A,auth_1,NA') / NB':=new() / witness(B,A,auth_2,NB') / SND({NA'.NB'}_KA) 
		3. State=1 / RCV({NB}_KB) =|> State':=2
end role

role session1(B:agent,A:agent,KA:public_key,KB:public_key)
def=
	local
		SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_B (B,A,KA,KB,SND2,RCV2) / role_A(A,B,KA,KB,SND1,RCV1)
end role

role environment()
def=
	const
		hash_0:function,ka:public_key,bob:agent,alice:agent,kb:public_key,auth_1:protocol_id,auth_2:protocol_id
	intruder_knowledge = {alice,bob,ka,kb}
	composition
		session1(bob,alice,ka,kb)
end role

goal
        	authentication_on auth_1
	authentication_on auth_2
end goal

environment()
 
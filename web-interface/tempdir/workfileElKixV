role role_C(C:agent,SM:agent,KPc:public_key,KPs:public_key,SND,RCV:channel(dy))
played_by C
def=
	local
		State:nat,Na:text,Nb:text,Kc:symmetric_key
	init
		State := 0
	transition
		1. State=0 /\ RCV(start) =|> State':=1 /\ Na':=new() /\ SND({Na'.KPc}_KPs)
		2. State=1 /\ RCV({Na.Nb'}_KPc) =|> State':=2 /\ SND({Nb'}_KPs) /\ Kc':=new() /\ secret(Kc',sec_1,{}) /\ SND({Kc'.{Kc'}_inv(KPc)}_KPs)
end role

role role_SM(SM:agent,C:agent,KPs:public_key,SND,RCV:channel(dy))
played_by SM
def=
	local
		State:nat,Na:text,Nb:text,Kc:symmetric_key,KPc:public_key
	init
		State := 0
	transition
		1. State=0 /\ RCV({Na'.KPc'}_KPs) =|> State':=1 /\ Nb':=new() /\ SND({Na'.Nb'}_KPc')
		3. State=1 /\ RCV({Nb}_KPs) =|> State':=2
		4. State=2 /\ RCV({Kc'.{Kc'}_inv(KPc)}_KPs) =|> State':=3 /\ secret(Kc',sec_1,{})
end role

role session1(KPc:public_key,SM:agent,C:agent,KPs:public_key)
def=
	local
		SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_SM(SM,C,KPs,SND2,RCV2) /\ role_C(C,SM,KPc,KPs,SND1,RCV1)
end role

role environment()
def=
	const
		hash_0:function,client:agent,kc:public_key,serveurMessage:agent,ks:public_key,sec_1:protocol_id
	intruder_knowledge = {}
	composition
		session1(kc,serveurMessage,client,ks)
end role

goal
	secrecy_of sec_1
end goal

environment()

role alice( A,B : agent,
			Hash : hash_func,
			K: symmetric_key,
			SND, RCV :channel(dy))
	played_by A def=
		local State: nat, 
		Ka, Kb : symmetric_key,
		Na, Nb : text,
		K1 : message
		
		init State := 0
		
		transition
		
		step0. 	State 	=  0 	/\ RCV(start) =|>
				State' 	:= 2 	/\ Na' := new() 
								/\ SND({Na'})
			  
		step2. 	State 	=  2  	/\ RCV(Nb') =|>
				State' 	:= 4  	/\ Kb' := Na.Nb' 
								/\ K' := new() /\ SND({K'}_Kb')
								/\  witness(A,B,bob_alice_na,Na)
								/\  request(A,B,bob_alice_nb,Nb')
			  
		step4. 	State  =  4		/\ RCV(K1') =|>
				State' := 6  	/\ secret(K', k, {A,B})
			  
end role
			  
			  
role bob( A,B : agent,
		  Hash : hash_func,
		  K: symmetric_key,
		  SND, RCV: channel(dy))
		  
		  played_by B def=
		  local State: nat, 
		  Ka, Kb: symmetric_key,
		  Na, Nb: text,
		  K1: message
		  
		  init State := 1
		  
		  transition
		  step1.	State =  1 	/\ RCV(Na') =|>
					State' := 3 	/\ Nb' := new() /\ SND({Nb'})
									/\ Ka' := Na'.Nb'
									/\ witness(B,A, alice_bob_na, Na')
									/\ request(B,A, alice_bob_nb, Nb')
		  step3.	State = 3  	
								/\ RCV({K}_Ka') =|>
					State':= 5 	/\ K1' := Hash(K)
								/\ SND(K1')
					 
end role


role session(A, B : agent, Hash : hash_func, K: symmetric_key) def=
	local SAB, RAB, SBA, RBA : channel (dy)
	composition
	    alice(A, B, Hash, K, SAB, RAB)
	  /\ bob (A, B, Hash, K, SBA, RBA)
end role


role environment()
 def= 

	const alice_bob_k, alice_bob_na, alice_bob_nb : protocol_id,
		  a, b : agent,
		  k : symmetric_key,
		  h : hash_func
		  
		  intruder_knowledge = {a, b, h}
		  
		  composition
		  
		  session(a, b, h, k) /\
		  session(a, i, h, k) /\
		  session(i, b, h, k)

end role

goal
		  
	secrecy_of alice_bob_k
	authentication_on alice_bob_nb
	authentication_on alice_bob_na
		  
end goal
	
environment()  
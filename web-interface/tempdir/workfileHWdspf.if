%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileHWdspf

section signature:

state_bob: agent * agent * agent * symmetric_key * hash_func * nat * text * text * message * set(agent) * nat -> fact
state_gateway: agent * agent * agent * symmetric_key * hash_func * nat * text * text * message * nat -> fact
state_alice: agent * agent * agent * symmetric_key * hash_func * nat * text * text * message * nat -> fact


section types:

Hash, h: hash_func
K, kagb, kagi, kaib, kigb: symmetric_key
Dummy_Set_53, ASGoal, Set_53: set(agent)
bob_alice_nb, k1: protocol_id
A, B, G, A2Goal, A1Goal, a, b, g, i: agent
Dummy_K1, dummy_msg, K1, MGoal, start: message
7, State, 5, SID, 4, 16, Dummy_State, 3, 14, 12, 10, SID2, SID1, 2, 1, 0, 17, 11, 9: nat
Nb, Dummy_Nb, Dummy_Na, dummy_nonce, Na: text
set_95, set_106, set_104, set_100: set


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(g).
 iknows(h).
 iknows(kagi).
 iknows(kaib).
 iknows(kigb).
 iknows(i).
 state_alice(a,b,g,kagb,h,0,dummy_nonce,dummy_nonce,dummy_msg,3).
 state_gateway(g,a,b,kagb,h,10,dummy_nonce,dummy_nonce,dummy_msg,4).
 state_bob(b,a,g,kagb,h,1,dummy_nonce,dummy_nonce,dummy_msg,set_95,5).
 state_alice(a,g,i,kagi,h,0,dummy_nonce,dummy_nonce,dummy_msg,7).
 state_bob(g,a,i,kagi,h,1,dummy_nonce,dummy_nonce,dummy_msg,set_100,9).
 state_alice(a,i,b,kaib,h,0,dummy_nonce,dummy_nonce,dummy_msg,11).
 state_gateway(b,a,i,kaib,h,10,dummy_nonce,dummy_nonce,dummy_msg,12).
 state_gateway(b,i,g,kigb,h,10,dummy_nonce,dummy_nonce,dummy_msg,16).
 state_bob(g,i,b,kigb,h,1,dummy_nonce,dummy_nonce,dummy_msg,set_106,17)


section rules:

step step_0 (A,B,G,K,Hash,Dummy_Na,Nb,K1,SID,Na) :=
 state_alice(A,B,G,K,Hash,0,Dummy_Na,Nb,K1,SID).
 iknows(start)
=[exists Na]=>
 state_alice(A,B,G,K,Hash,2,Na,Nb,K1,SID).
 iknows(scrypt(K,Na))

step step_1 (A,B,G,K,Hash,Na,Dummy_Nb,Dummy_K1,SID,Nb) :=
 state_alice(A,B,G,K,Hash,2,Na,Dummy_Nb,Dummy_K1,SID).
 iknows(scrypt(K,Nb))
 =>
 state_alice(A,B,G,K,Hash,4,Na,Nb,apply(Hash,pair(Na,Nb)),SID).
 iknows(scrypt(Dummy_K1,Nb)).
 witness(A,B,bob_alice_nb,Nb)

step step_2 (G,A,B,K,Hash,Dummy_Na,Nb,K1,SID,Na) :=
 state_gateway(G,A,B,K,Hash,10,Dummy_Na,Nb,K1,SID).
 iknows(scrypt(K,Na))
 =>
 state_gateway(G,A,B,K,Hash,12,Na,Nb,K1,SID).
 iknows(scrypt(K,Na))

step step_3 (G,A,B,K,Hash,Na,Dummy_Nb,K1,SID,Nb) :=
 state_gateway(G,A,B,K,Hash,12,Na,Dummy_Nb,K1,SID).
 iknows(scrypt(K,Nb))
 =>
 state_gateway(G,A,B,K,Hash,14,Na,Nb,K1,SID).
 iknows(scrypt(K,Nb))

step step_4 (G,A,B,K,Hash,Na,Dummy_Nb,K1,SID,Nb) :=
 state_gateway(G,A,B,K,Hash,14,Na,Dummy_Nb,K1,SID).
 iknows(scrypt(K1,Nb))
 =>
 state_gateway(G,A,B,K,Hash,16,Na,Nb,K1,SID).
 iknows(scrypt(K1,Nb))

step step_5 (B,A,G,K,Hash,Dummy_Na,Dummy_Nb,Dummy_K1,Dummy_Set_53,SID,Na,Nb) :=
 state_bob(B,A,G,K,Hash,1,Dummy_Na,Dummy_Nb,Dummy_K1,Dummy_Set_53,SID).
 iknows(scrypt(K,Na))
=[exists Nb]=>
 state_bob(B,A,G,K,Hash,3,Na,Nb,apply(Hash,pair(Na,Nb)),Dummy_Set_53,SID).
 iknows(scrypt(K,Nb)).
 secret(Dummy_K1,k1,Dummy_Set_53).
 contains(A,Dummy_Set_53).
 contains(B,Dummy_Set_53)

step step_6 (B,A,G,K,Hash,Na,Nb,K1,Set_53,SID) :=
 state_bob(B,A,G,K,Hash,3,Na,Nb,K1,Set_53,SID).
 iknows(scrypt(K1,Nb))
 =>
 state_bob(B,A,G,K,Hash,5,Na,Nb,K1,Set_53,SID).
 request(B,A,bob_alice_nb,Nb,SID)


section properties:

property secrecy_of_k1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,k1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_bob_alice_nb (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,bob_alice_nb,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,bob_alice_nb,MGoal))
     /\ ((request(A1Goal,A2Goal,bob_alice_nb,MGoal,SID1)
           /\ request(A1Goal,A2Goal,bob_alice_nb,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_k1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,k1,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_bob_alice_nb (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,bob_alice_nb,MGoal,SID) &
 not(witness(A2Goal,A1Goal,bob_alice_nb,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_bob_alice_nb (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,bob_alice_nb,MGoal,SID1).
 request(A1Goal,A2Goal,bob_alice_nb,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


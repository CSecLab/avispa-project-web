%%%%%% HLPSL CODE

	role user (userid,   S : agent,  
	SKus : symmetric_key,  
	H : hash_func,  
	Snd,   Rcv: channel(dy))


	played_by userid
	def=
	local State : nat,  
	PWi,   Ni,   Y,  Na,   cide,   Bi,   Ci,   Nb,   Ack,   Ni_new,   PWi_new: text
	const temps1,  temps2,  user_server_na,  server_user_nb : protocol_id
	init 
	State := 0

	transition
	1. State = 0 /\Rcv(start) =|>
	State' := 2 /\PWi' := new()
	/\Snd({PWi'}_SKus)
	/\secret({PWi'}, temps1,   {userid,  S})
	/\secret({SKus}, temps2,   {userid,  S})

	2.State = 2 /\Rcv({PWi.H.Ni'.Y'}_SKus)
	=|>State':= 4

	3.State=4 /\Rcv({PWi'.H.Ni'.Y'}_SKus)=|>
	State':=6
	/\Na':=new()
	/\witness(userid,  S,  user_server_na,  Na')  % User userid has freshly generated the value Na for server S
	/\cide':=xor(H(PWi'),H(xor(Ni',xor(Y',Na'))))
	/\Bi':=H(xor(cide',H(PWi)))
	/\Ci':=H(xor(Na',xor(Ni',xor(Bi',Y'))))
	/\Snd(cide'.Ni'.Ci'.Na')

	4.State=6=|>
	State':=8
	/\PWi_new':=new()
	/\Ni_new':=xor(Ni',xor(H(PWi),H(PWi_new')))
	/\Ni':=Ni_new'
	end role


	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	role server (userid,   S : agent,  
	SKus : symmetric_key,  
	H: hash_func,  
	Snd,   Rcv: channel(dy))

	played_by S
	def=
	local 
	State : nat,  
	PWi,   Ni,   Y,   X,   Na,   cide,   Bi,   Ci,   Nb,   HPWi,   Ack : text
	const temps1,  temps2,  user_server_na,  server_user_nb : protocol_id
	init State := 1

	transition
	1. State = 1 /\Rcv({PWi'}_SKus) =|>
	State':=3
	/\X':=new()
	/\secret(X',temps1,{S})
	/\Y':=new()
	/\secret(Y',temps2,{userid,  S})
	/\Ni':=xor(H(PWi'),H(X'))
	/\Snd({PWi'.H.Ni'.Y'}_SKus)
	2.State=3/\Rcv(cide'.Ni'.Ci'.Na')=|>
	State':=5
	/\Nb':=new()

	%/\H(PWi'):=xor(cide',H(Ni',xor(Y1,  Na')))
	%/\Bi':=H(xor(cide',H(PWi')))
	%/\Ci':=H(xor(Na',xor(Ni',xor(Bi',Y'))))
	/\request(S,  userid,  user_server_na,  Na') % Server acceptance of value that was generated by User userid
	end role
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	role session(userid,   S : agent)
	def=
	local 
	SKus : symmetric_key,  
	H : hash_func,  
	SU,  SS,  RU,  RS:channel(dy),
	PWi,   X,  Y,  Ni: text
	const temps1,  temps2 : protocol_id
	composition
	user(userid,  S,  SKus,  H,  SU,  RU)
	/\server(userid,  S,  SKus,  H,  SS,  RS)
	end role
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	role environment ()
	def=
	const u,  s : agent,  
	h: hash_func,  
	temps1,  temps2,  user_server_na,  server_user_nb : protocol_id


	intruder_knowledge={u,  s,  h}
	composition
	session(u,  s)
	end role

	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	goal
		secrecy_of temps1
		secrecy_of temps2
		authentication_on user_server_na
		authentication_on server_user_nb
	end goal
	environment()

role	user(
	U, B				:	agent,
	Ku, Kb				:	public_key,
	SND_B, RCV_B			:	channel(dy)
	)
	
	played_by U
	
	def=
	
	local
		State			:	nat,
		ReqH			:	message,
		S1, N2			:	text
	
	init
		State	:=	1
		
	transition
	1.	State	=	1 /\ RCV_B(start)	=|>
		State'	:=	3 /\ N2' := new()
				  /\ S1' := new()
				  /\ ReqH' := new()
				  /\ SND_B(ReqH'.{{S1'.N2'}_Ku}_Kb)
				  /\ secret(N2', n2, {U, B})
				  /\ request(U, B, user_board_s1, S1')

end role


role	board(
	U, B				:	agent,
	Ku, Kb				:	public_key,
	SND_U, RCV_U			:	channel(dy)
	)
	
	played_by B
	
	def=
	
	local
		State	:	nat,
		ReqH	:	message,
		S1, N2	:	text
	
	init
		State	:=	2
	
	transition
	2.	State	=	2 /\ RCV_U(ReqH'.{{S1'.N2'}_Ku}_Kb)	=|>
		State'	:=	4 /\ witness(B, U, user_board_s1, S1')

end role


role	session(
	U, B		:	agent,
	Ku, Kb		:	public_key
	)
	
	def=
	
	local
		U2B, B2U	:	channel(dy)
		
	composition
		user(U, B, Ku, Kb, U2B, B2U) /\
		board(U, B, Ku, Kb, B2U, U2B)

end role


role environment()
	
	def=
	
	const
		user_board_s1	:	protocol_id,
		u, b, i		:	agent,
		ku, kb, ki	:	public_key
		
	intruder_knowledge	=	{u, b, i, ku, kb, ki}
	
	composition
		session(u, b, ku, kb)
%		/\
%		session(u, i, b, ku, ki, kb) /\
%		session(u, h, b, ku, kh, ki) /\
%		session(i, h, b, ki, kh, kb)

end role


goal

	secrecy_of n2
	authentication_on user_host_s1

end goal


%


environment()
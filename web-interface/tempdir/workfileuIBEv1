role eU (U,H,M: agent,              
        IMSI, AMF, Valf1, Valf2, Valf3, Valf4, Valf5:text,
        K: symmetric_key,
        F1, F2, F3,F4, F5:hash_func,
        SND,RCV:channel(dy))
played_by U
def=
        local
                State:nat,
                SQN ,RAND : text,
                Prmf2 , Prmf3, Prmf4, Prmf5 : symmetric_key.text,
                Prmf1: symmetric_key.text.text.text

                const imsii,imsi2,sq,imsi3,ue_mme_vf1, ue_hss_vf4, mme_ue_vf2 : protocol_id

        init
                State := 0
        transition
                1. State=0 /\ RCV(start) =|> State':=1  /\ SND(IMSI)  
                                                /\ secret(IMSI ,imsi2, {H, U})
						/\witness(U,M,imsi3,IMSI)
						/\ request(M,U,imsii,IMSI)
						
                4. State=1 /\ RCV(RAND'.xor(SQN',F5(Prmf5')).AMF'.F1(Prmf1')) =|> State':=2  
                                                                        /\SND(F2(K.RAND'))  
                                                                        /\ witness (U,M, ue_mme_vf1,Valf1)
																		/\ request (U,M, mme_ue_vf2,F2(K.RAND')) 
                                                                         
									/\ secret (SQN,sq,{U,H})
                                                                                
end role



role mME(M, H, U:agent,
                SNID:text,
                F1, F2, F3,F4, F5:hash_func,
               
                SND,RCV:channel(dy))
played_by M
def=
        local
                State:nat,IMSI:text ,AMF:text,SQN:text,K:symmetric_key,RAND, Valf1, Valf2, Valf3, Valf4, Valf5:text,
                Prmf2 , Prmf3, Prmf4, Prmf5 : symmetric_key.text,   
                Prmf1: symmetric_key.text.text.text
              
                
        init
                State := 0

        transition
                1. State=0 /\ RCV(IMSI) =|> State':=1 
                                                /\ SND(IMSI.SNID)
                
                3. State=1 /\ RCV(RAND'.F2(Prmf2').F3(Xvf3').F4(Prmf4').xor(SQN',F5(Prmf5')).AMF'.F1(Prmf1')) =|> State':=2  
                                                                                                                        /\ SND(RAND'.xor(SQN',F5(Prmf5')).AMF'.F1(Prmf1')) 
                                                                                                                        /\ request (M,U, ue_mme_vf1,F1(Prmf1'))



                5. State=2 /\ RCV(F2(K.RAND'))
				/\ F2(K.RAND')=F2(K.RAND) =|>
				 State':=3 /\ witness(M, U, mme_ue_vf2, F2(K.RAND')) 
					/\ request(U,M, mme_ue_vf2,F2(K.RAND'))
								
end role



role hSS(H, M, U:agent,
        AMF, Valf1, Valf2, Valf3, Valf4, Valf5:text, 
        K: symmetric_key,
        F1, F2, F3, F4, F5:hash_func,
        SND,RCV:channel(dy))
played_by H
def=
        local
                State:nat, RAND, SNID:text,SQN:text,IMSI:text
        init
                State := 0
        transition
                2. State=0 /\ RCV(IMSI'.SNID') =|> State':=1  
                                                        /\ SQN':=new()
                                                        /\ RAND':=new()
                                                       
                                                        /\ Valf1':=F1(K.SQN'.RAND'.AMF)
                                                        /\ Valf2':=F2(K.RAND')
                                                        /\ Valf3':=F3(K.RAND')
                                                        /\ Valf4':=F4(K.RAND')
                                                        /\ Valf5':=F5(K.RAND')
                                                        /\ SND(RAND'.Vf2'.Vf3'.Vf4'.xor(SQN',Vf5').AMF.Valf1')
                                                        /\ secret(Valf2', vf2, {U,H})     
                                                        

end role



role session(
        H ,M ,U:agent, 
        SNID, IMSI, AMF, RAND, Vf1, Vf2, Vf3, Vf4, Vf5: text,
        K:symmetric_key,
        F1 ,F2 ,F3 ,F4, F5: hash_func
        )
def=
        local
                SND3, RCV3, SND2, RCV2, SND1, RCV1 : channel(dy)
        composition
                   hSS(H, M, U, AMF, Vf1, Vf2, Vf3, Vf4, Vf5,K, F1, F2, F3, F4, F5, SND3, RCV3)      
                /\ mME(M, H, U, SNID, F1, F2, F3, F4, F5, SND2, RCV2) 
                /\ eU(U, H, M, IMSI, AMF, Vf1, Vf2, Vf3, Vf4, Vf5, K, F1, F2, F3, F4, F5, SND1, RCV1)
end role



role environment()
def=
        const
                
                amf:text,
                k, ki:symmetric_key,imsi:text, snid:text, 
                mme:agent,hss:agent,ue:agent,
                f1, f2, f3,f4, f5: hash_func,
                rand:text,const_1:text,
                
                valf1,valf2,valf3,valf4,valf5:text
                
                
        
intruder_knowledge = {ki, snid, f1, f2, f3, f4, f5}
        composition
                session(hss, mme,ue, snid,imsi,amf,rand,vf1,vf2,vf3,vf4,vf5,k,f1,f2,f3,f4,f5)

end role


goal
        authentication_on mme
        authentication_on ue
		secrecy_of imsi
	
        
end goal

environment()


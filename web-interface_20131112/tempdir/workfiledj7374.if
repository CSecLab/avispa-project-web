%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfiledj7374

section signature:

state_aserole: agent * hash_func * hash_func * public_key * nat * text * text * agent * agent * public_key * public_key * public_key * nat -> fact
state_rerole: agent * agent * hash_func * hash_func * public_key * public_key * public_key * nat * public_key * agent * text * text * text * text * text * set(agent) * nat -> fact
state_acerole: agent * agent * hash_func * hash_func * public_key * public_key * nat * public_key * public_key * agent * text * text * text * text * set(agent) * nat -> fact


section types:

sec_ace_re, sec_re_ace, sec_m_key: protocol_id
f, prf, F, Prf: hash_func
SID2, SID1, SID, State, 13, 4, 11, 9, 3, 8, 2, 5, 1, 0, Dummy_State: nat
cresult, ACENonce, RENonce, AKMaterial, MACKeyre, Result, cexplain, caksa, Dummy_MACKeyre, Dummy_Result, Dummy_AKMaterial, Dummy_RENonce, Dummy_ACENonce, dummy_nonce: text
kacee, kaces, kree, kres, kase, kie, kis, KREe, KREs, KACE, KASE, Dummy_KACE, Dummy_KREs, Dummy_KREe, dummy_pk: public_key
set_133, set_131, set_128, set_127, set_118, set_103: set
A2Goal, A1Goal, ace, re, ase, RE, ACE, ASE, Dummy_ACE, Dummy_RE, dummy_agent, i: agent
Set_54, Set_30, Dummy_Set_54, Dummy_Set_30, ASGoal: set(agent)
start, MGoal: message


section inits:

initial_state init1 := 
 iknows(start).
 iknows(ace).
 iknows(re).
 iknows(ase).
 iknows(kase).
 iknows(kie).
 iknows(kis).
 iknows(inv(kie)).
 iknows(inv(kis)).
 iknows(f).
 iknows(prf).
 iknows(crypt(inv(kase),pair(i,kie))).
 iknows(crypt(inv(kase),pair(i,kis))).
 iknows(i).
 state_acerole(ace,ase,f,prf,kaces,kase,0,dummy_pk,dummy_pk,dummy_agent,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_103,3).
 state_rerole(re,ase,f,prf,kree,kres,kase,0,dummy_pk,dummy_agent,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_118,4).
 state_aserole(ase,f,prf,kase,0,dummy_nonce,dummy_nonce,dummy_agent,dummy_agent,dummy_pk,dummy_pk,dummy_pk,5).
 state_rerole(re,ase,f,prf,kree,kres,kase,0,dummy_pk,dummy_agent,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_128,8).
 state_aserole(ase,f,prf,kase,0,dummy_nonce,dummy_nonce,dummy_agent,dummy_agent,dummy_pk,dummy_pk,dummy_pk,9).
 state_acerole(ace,ase,f,prf,kaces,kase,0,dummy_pk,dummy_pk,dummy_agent,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_131,11).
 state_aserole(ase,f,prf,kase,0,dummy_nonce,dummy_nonce,dummy_agent,dummy_agent,dummy_pk,dummy_pk,dummy_pk,13)


section rules:

step step_0 (ACE,ASE,F,Prf,KACE,KASE,KREe,KREs,RE,ACENonce,RENonce,AKMaterial,Result,Set_30,SID) :=
 state_acerole(ACE,ASE,F,Prf,KACE,KASE,0,KREe,KREs,RE,ACENonce,RENonce,AKMaterial,Result,Set_30,SID).
 iknows(start)
 =>
 state_acerole(ACE,ASE,F,Prf,KACE,KASE,1,KREe,KREs,RE,ACENonce,RENonce,AKMaterial,Result,Set_30,SID).
 iknows(pair(crypt(inv(KASE),pair(ACE,KACE)),crypt(inv(KACE),crypt(inv(KASE),pair(ACE,KACE)))))

step step_1 (ACE,ASE,F,Prf,KACE,KASE,Dummy_KREe,Dummy_KREs,Dummy_RE,Dummy_ACENonce,Dummy_RENonce,AKMaterial,Result,Set_30,SID,KREe,KREs,RE,ACENonce,RENonce) :=
 state_acerole(ACE,ASE,F,Prf,KACE,KASE,1,Dummy_KREe,Dummy_KREs,Dummy_RE,Dummy_ACENonce,Dummy_RENonce,AKMaterial,Result,Set_30,SID).
 iknows(pair(RENonce,pair(crypt(inv(KASE),pair(RE,KREs)),pair(crypt(inv(KASE),pair(RE,KREe)),crypt(inv(KREs),pair(RENonce,pair(crypt(inv(KASE),pair(RE,KREs)),crypt(inv(KASE),pair(RE,KREe)))))))))
=[exists ACENonce]=>
 state_acerole(ACE,ASE,F,Prf,KACE,KASE,2,KREe,KREs,RE,ACENonce,RENonce,AKMaterial,Result,Set_30,SID).
 iknows(pair(ACENonce,pair(RENonce,pair(crypt(inv(KASE),pair(RE,KREs)),pair(crypt(inv(KASE),pair(RE,KREe)),pair(crypt(inv(KASE),pair(ACE,KACE)),crypt(inv(KACE),pair(ACENonce,pair(RENonce,pair(crypt(inv(KASE),pair(RE,KREs)),pair(crypt(inv(KASE),pair(RE,KREe)),crypt(inv(KASE),pair(ACE,KACE))))))))))))).
 witness(ACE,RE,sec_re_ace,ACENonce)

step step_2 (ACE,ASE,F,Prf,KACE,KASE,KREe,KREs,RE,ACENonce,RENonce,Dummy_AKMaterial,Dummy_Result,Dummy_Set_30,SID,AKMaterial,Result) :=
 state_acerole(ACE,ASE,F,Prf,KACE,KASE,2,KREe,KREs,RE,ACENonce,RENonce,Dummy_AKMaterial,Dummy_Result,Dummy_Set_30,SID).
 iknows(pair(ACENonce,pair(RENonce,pair(Result,crypt(inv(KASE),pair(ACENonce,pair(RENonce,Result)))))))
=[exists AKMaterial]=>
 state_acerole(ACE,ASE,F,Prf,KACE,KASE,3,KREe,KREs,RE,ACENonce,RENonce,AKMaterial,Result,Dummy_Set_30,SID).
 iknows(pair(ACENonce,pair(RENonce,pair(Result,pair(crypt(inv(KASE),pair(ACENonce,pair(RENonce,Result))),pair(caksa,pair(crypt(KREe,AKMaterial),crypt(inv(KACE),pair(ACENonce,pair(RENonce,pair(Result,pair(crypt(inv(KASE),pair(ACENonce,pair(RENonce,Result))),pair(caksa,crypt(KREe,AKMaterial)))))))))))))).
 secret(AKMaterial,sec_m_key,Dummy_Set_30).
 contains(ACE,Dummy_Set_30).
 contains(RE,Dummy_Set_30)

step step_3 (ACE,ASE,F,Prf,KACE,KASE,KREe,KREs,RE,ACENonce,RENonce,AKMaterial,Result,Set_30,SID) :=
 state_acerole(ACE,ASE,F,Prf,KACE,KASE,3,KREe,KREs,RE,ACENonce,RENonce,AKMaterial,Result,Set_30,SID).
 iknows(pair(ACENonce,pair(caksa,apply(F,pair(apply(Prf,pair(AKMaterial,pair(ACENonce,pair(RENonce,cexplain)))),pair(ACENonce,caksa))))))
 =>
 state_acerole(ACE,ASE,F,Prf,KACE,KASE,4,KREe,KREs,RE,ACENonce,RENonce,AKMaterial,Result,Set_30,SID).
 request(ACE,RE,sec_ace_re,RENonce,SID)

step step_4 (RE,ASE,F,Prf,KREe,KREs,KASE,Dummy_KACE,Dummy_ACE,ACENonce,Dummy_RENonce,AKMaterial,MACKeyre,Result,Set_54,SID,KACE,ACE,RENonce) :=
 state_rerole(RE,ASE,F,Prf,KREe,KREs,KASE,0,Dummy_KACE,Dummy_ACE,ACENonce,Dummy_RENonce,AKMaterial,MACKeyre,Result,Set_54,SID).
 iknows(pair(crypt(inv(KASE),pair(ACE,KACE)),crypt(inv(KACE),crypt(inv(KASE),pair(ACE,KACE)))))
=[exists RENonce]=>
 state_rerole(RE,ASE,F,Prf,KREe,KREs,KASE,1,KACE,ACE,ACENonce,RENonce,AKMaterial,MACKeyre,Result,Set_54,SID).
 iknows(pair(RENonce,pair(crypt(inv(KASE),pair(RE,KREs)),pair(crypt(inv(KASE),pair(RE,KREe)),crypt(inv(KREs),pair(RENonce,pair(crypt(inv(KASE),pair(RE,KREs)),crypt(inv(KASE),pair(RE,KREe))))))))).
 witness(RE,ACE,sec_ace_re,RENonce)

step step_5 (RE,ASE,F,Prf,KREe,KREs,KASE,KACE,ACE,Dummy_ACENonce,RENonce,Dummy_AKMaterial,Dummy_MACKeyre,Dummy_Result,Dummy_Set_54,SID,ACENonce,AKMaterial,Result) :=
 state_rerole(RE,ASE,F,Prf,KREe,KREs,KASE,1,KACE,ACE,Dummy_ACENonce,RENonce,Dummy_AKMaterial,Dummy_MACKeyre,Dummy_Result,Dummy_Set_54,SID).
 iknows(pair(ACENonce,pair(RENonce,pair(Result,pair(crypt(inv(KASE),pair(ACENonce,pair(RENonce,Result))),pair(caksa,pair(crypt(KREe,AKMaterial),crypt(inv(KACE),pair(ACENonce,pair(RENonce,pair(Result,pair(crypt(inv(KASE),pair(ACENonce,pair(RENonce,Result))),pair(caksa,crypt(KREe,AKMaterial))))))))))))))
 =>
 state_rerole(RE,ASE,F,Prf,KREe,KREs,KASE,2,KACE,ACE,ACENonce,RENonce,AKMaterial,apply(Prf,pair(AKMaterial,pair(ACENonce,pair(RENonce,cexplain)))),Result,Dummy_Set_54,SID).
 iknows(pair(ACENonce,pair(caksa,apply(F,pair(apply(Prf,pair(AKMaterial,pair(ACENonce,pair(RENonce,cexplain)))),pair(Dummy_ACENonce,caksa)))))).
 request(RE,ACE,sec_re_ace,ACENonce,SID).
 secret(AKMaterial,sec_m_key,Dummy_Set_54).
 contains(ACE,Dummy_Set_54).
 contains(RE,Dummy_Set_54)

step step_6 (ASE,F,Prf,KASE,Dummy_ACENonce,Dummy_RENonce,Dummy_RE,Dummy_ACE,Dummy_KREe,Dummy_KREs,Dummy_KACE,SID,ACENonce,RENonce,RE,ACE,KREe,KREs,KACE) :=
 state_aserole(ASE,F,Prf,KASE,0,Dummy_ACENonce,Dummy_RENonce,Dummy_RE,Dummy_ACE,Dummy_KREe,Dummy_KREs,Dummy_KACE,SID).
 iknows(pair(ACENonce,pair(RENonce,pair(crypt(inv(KASE),pair(RE,KREs)),pair(crypt(inv(KASE),pair(RE,KREe)),pair(crypt(inv(KASE),pair(ACE,KACE)),crypt(inv(KACE),pair(ACENonce,pair(RENonce,pair(crypt(inv(KASE),pair(RE,KREs)),pair(crypt(inv(KASE),pair(RE,KREe)),crypt(inv(KASE),pair(ACE,KACE)))))))))))))
 =>
 state_aserole(ASE,F,Prf,KASE,1,ACENonce,RENonce,RE,ACE,KREe,KREs,KACE,SID).
 iknows(pair(ACENonce,pair(RENonce,pair(cresult,crypt(inv(KASE),pair(ACENonce,pair(RENonce,cresult)))))))


section properties:

property authentication_on_sec_re_ace (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,sec_re_ace,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,sec_re_ace,MGoal))
     /\ ((request(A1Goal,A2Goal,sec_re_ace,MGoal,SID1)
           /\ request(A1Goal,A2Goal,sec_re_ace,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_sec_ace_re (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,sec_ace_re,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,sec_ace_re,MGoal))
     /\ ((request(A1Goal,A2Goal,sec_ace_re,MGoal,SID1)
           /\ request(A1Goal,A2Goal,sec_ace_re,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property secrecy_of_sec_m_key (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_m_key,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state authentication_on_sec_re_ace (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,sec_re_ace,MGoal,SID) &
 not(witness(A2Goal,A1Goal,sec_re_ace,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_sec_re_ace (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,sec_re_ace,MGoal,SID1).
 request(A1Goal,A2Goal,sec_re_ace,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_sec_ace_re (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,sec_ace_re,MGoal,SID) &
 not(witness(A2Goal,A1Goal,sec_ace_re,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_sec_ace_re (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,sec_ace_re,MGoal,SID1).
 request(A1Goal,A2Goal,sec_ace_re,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state secrecy_of_sec_m_key (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_m_key,ASGoal) &
 not(contains(i,ASGoal))


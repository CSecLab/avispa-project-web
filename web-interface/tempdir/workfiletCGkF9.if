%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfiletCGkF9

section signature:

state_server: agent * agent * hash_func * symmetric_key * nat * text * text * text * text * text * text * text * text * text * text * text * text * text * set(agent) * set(agent) * nat -> fact
state_user: agent * agent * hash_func * symmetric_key * nat * text * text * text * text * text * text * text * text * text * text * text * text * set(text) * set(agent) * set(symmetric_key) * set(agent) * nat -> fact


section types:

MGoal, start: message
subs1, subs2, user_server_na, server_user_nb: protocol_id
set_98, set_97, set_96, set_95, set_128, set_127, set_126, set_125, set_124, set_123, set_116, set_115: set
kug, kia, Kus: symmetric_key
h, hi, H: hash_func
Set_35, Dummy_Set_35: set(symmetric_key)
ASGoal, Set_64, Set_63, Set_36, Set_33, Dummy_Set_64, Dummy_Set_63, Dummy_Set_36, Dummy_Set_33: set(agent)
Set_32, Dummy_Set_32: set(text)
A2Goal, A1Goal, u, s, U, S, i: agent
dummy_nonce, Ni, Nin, Ui, Bi, Ci, CID, Na, Nb, Ack, Y, X, PWi, PWin, Dummy_Nb, Dummy_X, Dummy_Nin, Dummy_PWin, Dummy_Na, Dummy_CID, Dummy_Ci, Dummy_Bi, Dummy_Y, Dummy_Ni, Dummy_PWi: text
3, SID, SID2, SID1, 5, State, 8, 6, 4, 2, 1, 0, Dummy_State: nat


section inits:

initial_state init1 := 
 iknows(start).
 iknows(u).
 iknows(s).
 iknows(kia).
 iknows(i).
 state_user(u,s,h,kug,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_95,set_96,set_97,set_98,3).
 state_server(u,s,h,kug,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_115,set_116,4)


section rules:

step step_0 (U,S,H,Kus,Dummy_PWi,PWin,Ni,Nin,Ui,Bi,Ci,CID,Na,Nb,Ack,Y,Dummy_Set_32,Dummy_Set_33,Dummy_Set_35,Dummy_Set_36,SID,PWi) :=
 state_user(U,S,H,Kus,0,Dummy_PWi,PWin,Ni,Nin,Ui,Bi,Ci,CID,Na,Nb,Ack,Y,Dummy_Set_32,Dummy_Set_33,Dummy_Set_35,Dummy_Set_36,SID).
 iknows(start)
=[exists PWi]=>
 state_user(U,S,H,Kus,2,PWi,PWin,Ni,Nin,Ui,Bi,Ci,CID,Na,Nb,Ack,Y,Dummy_Set_32,Dummy_Set_33,Dummy_Set_35,Dummy_Set_36,SID).
 iknows(scrypt(Kus,PWi)).
 secret(Dummy_Set_32,subs1,Dummy_Set_33).
 secret(Dummy_Set_35,subs2,Dummy_Set_36).
 contains(PWi,Dummy_Set_32).
 contains(U,Dummy_Set_33).
 contains(S,Dummy_Set_33).
 contains(Kus,Dummy_Set_35).
 contains(U,Dummy_Set_36).
 contains(S,Dummy_Set_36)

step step_1 (U,S,H,Kus,PWi,PWin,Dummy_Ni,Nin,Ui,Bi,Ci,CID,Na,Nb,Ack,Dummy_Y,Set_32,Set_33,Set_35,Set_36,SID,Ni,Y) :=
 state_user(U,S,H,Kus,2,PWi,PWin,Dummy_Ni,Nin,Ui,Bi,Ci,CID,Na,Nb,Ack,Dummy_Y,Set_32,Set_33,Set_35,Set_36,SID).
 iknows(scrypt(Kus,pair(PWi,pair(H,pair(Ni,Y)))))
 =>
 state_user(U,S,H,Kus,4,PWi,PWin,Ni,Nin,Ui,Bi,Ci,CID,Na,Nb,Ack,Y,Set_32,Set_33,Set_35,Set_36,SID)

step step_2 (U,S,H,Kus,PWi,PWin,Ni,Nin,Ui,Dummy_Bi,Dummy_Ci,Dummy_CID,Dummy_Na,Nb,Ack,Y,Set_32,Set_33,Set_35,Set_36,SID,Na) :=
 state_user(U,S,H,Kus,4,PWi,PWin,Ni,Nin,Ui,Dummy_Bi,Dummy_Ci,Dummy_CID,Dummy_Na,Nb,Ack,Y,Set_32,Set_33,Set_35,Set_36,SID)
=[exists Na]=>
 state_user(U,S,H,Kus,6,PWi,PWin,Ni,Nin,Ui,apply(H,xor(xor(apply(H,PWi),apply(H,xor(Ni,xor(Y,Na)))),apply(H,PWi))),apply(H,xor(Na,xor(Ni,xor(apply(H,xor(xor(apply(H,PWi),apply(H,xor(Ni,xor(Y,Na)))),apply(H,PWi))),Y)))),xor(apply(H,PWi),apply(H,xor(Ni,xor(Y,Na)))),Na,Nb,Ack,Y,Set_32,Set_33,Set_35,Set_36,SID).
 witness(U,S,user_server_na,Na).
 iknows(pair(xor(apply(H,PWi),apply(H,xor(Ni,xor(Y,Na)))),pair(Ni,pair(apply(H,xor(Na,xor(Ni,xor(apply(H,xor(xor(apply(H,PWi),apply(H,xor(Ni,xor(Y,Na)))),apply(H,PWi))),Y)))),Na))))

step step_3 (U,S,H,Kus,PWi,Dummy_PWin,Dummy_Ni,Dummy_Nin,Ui,Bi,Ci,CID,Na,Nb,Ack,Y,Set_32,Set_33,Set_35,Set_36,SID,PWin) :=
 state_user(U,S,H,Kus,6,PWi,Dummy_PWin,Dummy_Ni,Dummy_Nin,Ui,Bi,Ci,CID,Na,Nb,Ack,Y,Set_32,Set_33,Set_35,Set_36,SID)
=[exists PWin]=>
 state_user(U,S,H,Kus,8,PWi,PWin,xor(Ni,xor(apply(H,PWi),apply(H,PWin))),xor(xor(Ni,xor(apply(H,PWi),apply(H,PWin))),xor(apply(H,PWi),apply(H,PWin))),Ui,Bi,Ci,CID,Na,Nb,Ack,Y,Set_32,Set_33,Set_35,Set_36,SID)

step step_4 (S,U,H,Kus,Dummy_State,Dummy_PWi,PWin,Dummy_Ni,Nin,Ui,Bi,Ci,CID,Na,Nb,Ack,Dummy_Y,Dummy_X,Dummy_Set_63,Dummy_Set_64,SID,PWi,Y,X) :=
 state_server(S,U,H,Kus,Dummy_State,Dummy_PWi,PWin,Dummy_Ni,Nin,Ui,Bi,Ci,CID,Na,Nb,Ack,Dummy_Y,Dummy_X,Dummy_Set_63,Dummy_Set_64,SID).
 iknows(scrypt(Kus,PWi))
=[exists Y,X]=>
 state_server(S,U,H,Kus,3,PWi,PWin,xor(apply(H,PWi),apply(H,X)),Nin,Ui,Bi,Ci,CID,Na,Nb,Ack,Y,X,Dummy_Set_63,Dummy_Set_64,SID).
 secret(X,subs1,Dummy_Set_63).
 secret(Y,subs2,Dummy_Set_64).
 iknows(scrypt(Kus,pair(PWi,pair(H,pair(xor(apply(H,PWi),apply(H,X)),Y))))).
 contains(S,Dummy_Set_63).
 contains(U,Dummy_Set_64).
 contains(S,Dummy_Set_64)

step step_5 (S,U,H,Kus,PWi,PWin,Dummy_Ni,Nin,Ui,Bi,Dummy_Ci,Dummy_CID,Dummy_Na,Dummy_Nb,Ack,Y,X,Set_63,Set_64,SID,Ni,Ci,CID,Na,Nb) :=
 state_server(S,U,H,Kus,3,PWi,PWin,Dummy_Ni,Nin,Ui,Bi,Dummy_Ci,Dummy_CID,Dummy_Na,Dummy_Nb,Ack,Y,X,Set_63,Set_64,SID).
 iknows(pair(CID,pair(Ni,pair(Ci,Na))))
=[exists Nb]=>
 state_server(S,U,H,Kus,5,PWi,PWin,Ni,Nin,Ui,Bi,Ci,CID,Na,Nb,Ack,Y,X,Set_63,Set_64,SID).
 request(S,U,user_server_na,Na,SID)


section properties:

property secrecy_of_subs1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,subs1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_subs2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,subs2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_user_server_na (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,user_server_na,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,user_server_na,MGoal))
     /\ ((request(A1Goal,A2Goal,user_server_na,MGoal,SID1)
           /\ request(A1Goal,A2Goal,user_server_na,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_subs1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,subs1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_subs2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,subs2,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_user_server_na (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,user_server_na,MGoal,SID) &
 not(witness(A2Goal,A1Goal,user_server_na,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_user_server_na (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,user_server_na,MGoal,SID1).
 request(A1Goal,A2Goal,user_server_na,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


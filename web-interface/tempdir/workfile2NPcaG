
%% HLPSL:

role alice(A; B; S : agent, SND, RCV : channel(dy),
          H : hash func,
          P A : symmetric key,
          G : text)

played by A def=
  local State : nat,
      X; Z : text,UA : public key,
      GY , Key, L : message,
  const sec m Key : protocol id
  init State := 0

  transition
  1. State = 0^RCV(start)= | >
  State':= 1 ^ X' := new() ^ SND(xor(exp(G; X'), H(P A:A:B)))
 
  2. State = 1 ^ RCV (xor(exp(GY '; Z'),H(P A:A:B:exp(G; X).exp(UA'; Z'))):L) = | >
State':= 2 ^ Key' := exp(exp(GY',Z'),X) ^ SND(H(A:B:Key')) ^ witness(A; B; key1; Key')

3. State = 2 ^ RCV (A:B:Key) = | >
State':= 3 ^ request(A; B; key; Key) ^ secret(Key; sec m Key; A; B)

end role

role bob (A, B, S : agent,
          SND, RCV : channel(dy),
          H : hash func,
          P A, P B : symmetric key,
          G :text)

played by B
def = local State : nat,
    X; Y; Z : text,
    GX; GY : message,
    UB :public key,
    Key :message,
    FM1: hash(symmetric-key.agent.agent.message.message).message,
    FM2: hash(symmetric-key.agent.agent.message.message).message

    const sec v Key : protocol id
    init State := 0
    transition

1. State = 0 ^ RCV (xor(exp(G; X'), H(P A:A:B))) = | >
    State':= 1 ^ Y':= new() ^ SND(xor(exp(G; X'),H(P A:A:B)):xor(exp(G; Y '); H(P B:A:B)))

2. State = 1 ^ RCV (xor(exp(GY; Z'); FM1').xor(exp(GX'; Z'); FM2')) = | >
State':= 2 ^ SND(xor(exp(GY; Z'); FM1'))

3. State = 2 ^ RCV (H(A:B:exp(exp(GX'; Z'); Y )))= | >
State':= 3 ^ Key':= exp(exp(GX'; Z'); Y )^ SND(H(A:B:Key')) ^ request(B; A; key1; Key) ^ secret(Key; sec v Key; B; A)^ witness(B; A; key; Key')

end role


role server (A, B, S : agent,
              SND; RCV : channel(dy),
              H : hash func,
              P A; P B : symmetric key,
              G : text)
played by S

def=local State : nat,
    X; Y; Z : text,
    UA; UB : public key,
    GX; GY : message
    init State := 0

transition

1. State = 0 ^ RCV (xor(exp(G; X'),H(P A:A:B)).xor(exp(G; Y '); H(P B:A:B)))= | >
State':= 1 ^ Z':= new()^ UA':= new()^ UB':= new()^ GY ':= new()^ GX':= new()^ SND(xor(exp(GY '; Z'),H(P A:A:B:exp(G; X').exp(UA'; Z')).exp(G; Z')).xor(exp(GX'; Z'), 
H(P B:A:B:exp(G; Y ').exp(UB'; Z')):exp(G; Z')))

end role


role session( A; B; S : agent,
              H : hash func,
              P A; P B : symmetric key,
              UA; UB :public key,
              G : text)
  
  def=local SND; RCV : channel (dy)
  composition
  alice(A; B; S; SND; RCV; H; P A; G)
  ^ bob(A; B; S; SND; RCV; H; P A; P B; G)
  ^ server(A; B; S; SND; RCV; H; P A; P B; G)

end role

role environment()

def= consta; b; s : agent,
    h : hash func,
    key; key1 : protocol id,
    pa; pb; pi :symmetric key,
    ua; ub; ui :public key,
    g : text
  intruder knowledge = {a; b; s; g; h; pi; ua; ub; ui}

composition
session(b; a; s; h; pa; pb; ua; ub; g)
^ session(i; b; s; h; pi; pb; ui; ub; g)
^ session(a; i; s; h; pa; pi; ua; ui; g)

end role


goal

authentication on key
authentication on key1
secrecy of sec m Key, sec v Key

end goal

environment()
role alice (  A,B : agent,
              P0  : public_key,  %P0 testator's public key 
              P1  : public_key,  %P1 conservator's public key 
              P2  : public_key,  %P2 bank's public key 
              P3  : public_key,  %P3 beneficary's public key 
              P4  : public_key,  %P4 court's public key  
              H   : hash_func,
              F   : hash_func,
          SND,RCV : channel(dy) )
played_by A
def=
   local  State   : nat,
          Ni, N   : text,
          S0,S1   : text,
          K       : text,
          T       : text,
          Z1,Z2,Zi: text,
          Z       : text,
          W       : text,
          Dlist   : text,
          Clist   : text,
          Cw      : text,
          Ki      : text,
          %P0      : public_key,  %P0 testator's public key 
          %P1      : public_key,  %P1 conservator's public key 
          %P2      : public_key,  %P2 bank's public key 
          %P3      : public_key,  %P3 beneficary's public key 
          %P4      : public_key,  %P4 court's public key  
          MUL     : hash_func

const alice_bob_na, bob_alice_nb : protocol_id

init State := 0
transition
1. State   = 0 /\ RCV(start) =|>
   State' := 2 /\ W'  := new()   % Will
               /\ K'  := new()   % Will secret key
               /\ Dlist':= new() % list
               /\ T'  := new()   % timestamp
               /\ S0' := {W'.T'}_inv(P0) %signed 
               /\ S1' := {Dlist'.T'}_inv(P0) %signed
               /\ Clist' := {Dlist.T'.S1'}_P1 % encrypted list
               /\ Z1' := {K'}_P4  %encryped key for court 
               /\ Z2' := {K'}_P0  %encryped key for testator
               /\ Ki' := F(K'.Ni.N.P0') %secret sharing function
               /\ Zi' := {Ki'}_P3      %encrypted secret key
               /\ Z'  := Z1'.Z2'.Zi' % a set of key
               /\ Cw' := {W'.S0'}_K'    %encryped signed Will
               /\ SND(Cw'.Clist'.Z')  %send to Bank
               /\ SND(Clist')         %send to conservator
               /\ witness(A,B,bob_alice_nb,Clist')
end role 

role bob (    A,B : agent,
              P0  : public_key,  %P0 testator's public key 
              P1  : public_key,  %P1 conservator's public key 
               H  : hash_func,
               F  : hash_func,
         SND, RCV : channel(dy))
played_by B  
% as conservator
def=
   local  State   : nat,
          Clist   : text,
          Dlist   : text,
          %P0      : public_key,  %P0 testator's public key 
          %P1      : public_key,  %P1 conservator's public key 
          %P2      : public_key,  %P2 bank's public key 
          %P3      : public_key,  %P3 beneficary's public key 
          %P4      : public_key,  %P4 court's public key  
          MUL     : hash_func

init State := 1
transition
1. State   = 1 /\ RCV(Clist') =|>
   State' := 3 /\ Dlist' := {Clist'}_inv(P1)
               /\ witness(A,B,alice_bob_na,Clist)
               /\ request(B,A,bob_alice_nb,Dlist)
end role

role session (A,  B : agent,
              P0,P1 : public_key)
def=
   local SA, RA, SB, RB: channel (dy)
composition
       alice(A,B,P0,P1,SA,RA)
       /\   bob(B,A,P1,P0,SB,RB)
end role

role environment()
def=
   const a, b ,i       : agent,
         p0, p1, ki    : public_key,
         bob_alice_na, 
         alice_bob_nb,
         na, nb        : protocol_id
intruder_knowledge = {a, b, i, p0, p1, ki, inv(ki)}

composition
    session(a,b,p0,p1)
 /\ session(a,i,p0,ki)
end role

goal
secrecy_of na, nb
authentication_on alice_bob_nb
authentication_on bob_alice_na
end goal

environment()

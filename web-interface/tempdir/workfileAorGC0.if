%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileAorGC0

section signature:

state_sensorNode: agent * agent * public_key * public_key * nat * symmetric_key * text * text * text * text * text * text * set(symmetric_key) * set(agent) * nat -> fact
state_user: agent * agent * hash_func * public_key * public_key * text * nat * symmetric_key * text * text * text * text * text * text * text * set(text) * set(symmetric_key) * set(agent) * nat -> fact


section types:

Dummy_Set_51, Set_51: set(text)
MGoal, start: message
h, H: hash_func
sub1, alice_bob, bob_alice, sub2, sub3: protocol_id
Dummy_KS, dummy_sk, KS: symmetric_key
dummy_pk, userpubkey, snpubkey, SNPubKey, UserPubKey: public_key
set_100, set_99, set_85, set_84, set_83, set_111, set_110, set_108, set_107, set_106: set
Dummy_Set_54, ASGoal, Set_54, Set_29, Dummy_Set_29: set(agent)
Dummy_Set_53, Set_53, Set_28, Dummy_Set_28: set(symmetric_key)
Dummy_MSG2, Dummy_MSG, Dummy_TS, Dummy_R, Dummy_TK, dummy_nonce, uaid, TK, R, TS, UIDA, KAB, MSG2, MSG, UAID, Dummy_KAB: text
A2Goal, A1Goal, sn, User, SNode, user, i: agent
Dummy_State, 3, SID, SID2, SID1, State, 2, 1, 0, 7, 6, 4: nat


section inits:

initial_state init1 := 
 iknows(start).
 iknows(user).
 iknows(sn).
 iknows(h).
 iknows(uaid).
 iknows(userpubkey).
 iknows(snpubkey).
 iknows(i).
 state_user(user,sn,h,dummy_pk,dummy_pk,dummy_nonce,0,dummy_sk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_83,set_84,set_85,3).
 state_sensorNode(sn,user,dummy_pk,dummy_pk,0,dummy_sk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_99,set_100,4).
 state_user(user,sn,h,dummy_pk,dummy_pk,dummy_nonce,0,dummy_sk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_106,set_107,set_108,6).
 state_sensorNode(sn,user,dummy_pk,dummy_pk,0,dummy_sk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_110,set_111,7)


section rules:

step step_0 (User,SNode,H,UserPubKey,SNPubKey,UAID,KS,Dummy_TK,Dummy_R,Dummy_TS,UIDA,KAB,MSG2,MSG,Dummy_Set_51,Set_53,Set_54,SID,R,TS) :=
 state_user(User,SNode,H,UserPubKey,SNPubKey,UAID,0,KS,Dummy_TK,Dummy_R,Dummy_TS,UIDA,KAB,MSG2,MSG,Dummy_Set_51,Set_53,Set_54,SID).
 iknows(start)
=[exists TS,R]=>
 state_user(User,SNode,H,UserPubKey,SNPubKey,UAID,1,KS,pair(R,apply(h,UIDA)),R,TS,UIDA,KAB,MSG2,MSG,Dummy_Set_51,Set_53,Set_54,SID).
 secret(Dummy_Set_51,sub1,User).
 iknows(crypt(inv(UserPubKey),pair(TS,pair(pair(R,apply(h,UIDA)),UIDA)))).
 witness(User,SNode,alice_bob,pair(R,apply(h,UIDA))).
 request(SNode,User,bob_alice,KAB,SID).
 contains(R,Dummy_Set_51)

step step_1 (User,SNode,H,UserPubKey,SNPubKey,UAID,Dummy_KS,TK,R,TS,UIDA,KAB,MSG2,Dummy_MSG,Set_51,Dummy_Set_53,Dummy_Set_54,SID,KS,MSG) :=
 state_user(User,SNode,H,UserPubKey,SNPubKey,UAID,1,Dummy_KS,TK,R,TS,UIDA,KAB,MSG2,Dummy_MSG,Set_51,Dummy_Set_53,Dummy_Set_54,SID).
 iknows(crypt(inv(SNPubKey),KS))
=[exists MSG]=>
 state_user(User,SNode,H,UserPubKey,SNPubKey,UAID,2,KS,TK,R,TS,UIDA,KAB,MSG2,MSG,Set_51,Dummy_Set_53,Dummy_Set_54,SID).
 secret(Dummy_Set_53,sub3,Dummy_Set_54).
 iknows(scrypt(KS,MSG)).
 contains(KS,Dummy_Set_53).
 contains(User,Dummy_Set_54).
 contains(SNode,Dummy_Set_54)

step step_2 (User,SNode,H,UserPubKey,SNPubKey,UAID,Dummy_KS,TK,R,TS,UIDA,KAB,Dummy_MSG2,MSG,Set_51,Set_53,Set_54,SID,KS,MSG2) :=
 state_user(User,SNode,H,UserPubKey,SNPubKey,UAID,2,Dummy_KS,TK,R,TS,UIDA,KAB,Dummy_MSG2,MSG,Set_51,Set_53,Set_54,SID).
 iknows(scrypt(KS,MSG2))
 =>
 state_user(User,SNode,H,UserPubKey,SNPubKey,UAID,3,KS,TK,R,TS,UIDA,KAB,MSG2,MSG,Set_51,Set_53,Set_54,SID)

step step_3 (SNode,User,UserPubKey,SNPubKey,Dummy_KS,Dummy_KAB,Dummy_TS,Dummy_TK,UIDA,MSG,MSG2,Set_28,Set_29,SID,KAB,TS,TK) :=
 state_sensorNode(SNode,User,UserPubKey,SNPubKey,0,Dummy_KS,Dummy_KAB,Dummy_TS,Dummy_TK,UIDA,MSG,MSG2,Set_28,Set_29,SID).
 iknows(crypt(inv(UserPubKey),pair(TS,pair(TK,UIDA))))
=[exists KAB]=>
 state_sensorNode(SNode,User,UserPubKey,SNPubKey,1,pair(KAB,TS),KAB,TS,TK,UIDA,MSG,MSG2,Set_28,Set_29,SID).
 iknows(crypt(inv(SNPubKey),pair(KAB,TS))).
 witness(SNode,User,bob_alice,KAB).
 request(User,SNode,alice_bob,TK,SID)

step step_4 (SNode,User,UserPubKey,SNPubKey,Dummy_KS,KAB,TS,TK,UIDA,Dummy_MSG,Dummy_MSG2,Dummy_Set_28,Dummy_Set_29,SID,KS,MSG,MSG2) :=
 state_sensorNode(SNode,User,UserPubKey,SNPubKey,1,Dummy_KS,KAB,TS,TK,UIDA,Dummy_MSG,Dummy_MSG2,Dummy_Set_28,Dummy_Set_29,SID).
 iknows(scrypt(KS,MSG))
=[exists MSG2]=>
 state_sensorNode(SNode,User,UserPubKey,SNPubKey,2,KS,KAB,TS,TK,UIDA,MSG,MSG2,Dummy_Set_28,Dummy_Set_29,SID).
 secret(Dummy_Set_28,sub3,Dummy_Set_29).
 iknows(scrypt(KS,MSG2)).
 contains(KS,Dummy_Set_28).
 contains(User,Dummy_Set_29).
 contains(SNode,Dummy_Set_29)


section properties:

property secrecy_of_sub1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sub1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sub2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sub2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sub3 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sub3,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_alice_bob (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,alice_bob,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,alice_bob,MGoal))
     /\ ((request(A1Goal,A2Goal,alice_bob,MGoal,SID1)
           /\ request(A1Goal,A2Goal,alice_bob,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_bob_alice (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,bob_alice,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,bob_alice,MGoal))
     /\ ((request(A1Goal,A2Goal,bob_alice,MGoal,SID1)
           /\ request(A1Goal,A2Goal,bob_alice,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sub1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sub1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sub2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sub2,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sub3 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sub3,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_alice_bob (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,alice_bob,MGoal,SID) &
 not(witness(A2Goal,A1Goal,alice_bob,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_alice_bob (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,alice_bob,MGoal,SID1).
 request(A1Goal,A2Goal,alice_bob,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_bob_alice (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,bob_alice,MGoal,SID) &
 not(witness(A2Goal,A1Goal,bob_alice,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_bob_alice (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,bob_alice,MGoal,SID1).
 request(A1Goal,A2Goal,bob_alice,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


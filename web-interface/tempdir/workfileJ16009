%% PROTOCOL: Franklin-Reiter Fair Exchange
%% DATE: 16 July 2008
%% UPDATED: 16 July 2008
%% MODELER: Bailey Basile
%% DESCRIPTION:
%%	X -> Y : x1
%%	Y -> X : y1
%%	X -> Z : f(Kx).f(Ky).Kx*x1^-1.f(y1)
%%	Y -> Z : f(Ky).f(Kx).Ky*y1^-1.f(x1)
%%	Z checks: ax = by = F(cx,dy)
%%		ay = bx = F(cy,dx)
%%	Z -> X : Kx*x1^-1
%%	Z -> Y : Ky*y1^-1
%%	Knowledge: f, f(Kx), f(Ky)
%%	Goals: secrecy of Kx, Ky, inv x1, inv y1
%%		authentication on kx, ky		
%%	Abstractions/ Notes:
%%		let's make x1,y1 public keys
%%		x,y send each other the inverses so they can decrypt the kx,ky
%%		kx,ky don't have to be keys, message will work
%%		so Z gets {Kx}_x1 and {Ky}_y1 but can't read them b/c doesn't have the inv
%%		Z can verify that

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role alice ( 	A, B, C		: agent,	% role AKA X
		Kx		: message,
		F		: hash_func,
		F(Ky)		: hash_func(message),
		RCV,SND		: channel(dy)) 
played_by A
def=
	local State : nat,
	X1,Y1	: public_key

					
init State := 0

transition
	1.	State = 0 	/\ RCV(start) =|>

		State' := 2	/\ X1' := new()
				/\ SND(X1')
				/\ secret(X1',x1,{A,B,C})
				/\ witness(A,B,bob_alice_x1,X1')

	2.	State =	2	/\ RCV(Y1') =|>
		State' := 4	/\ SND(F(Kx).F(Ky).{Kx}_X1.F(Y1'))
				/\ secret(Kx,kx,{A,B})
				/\ witness(A,B,bob_alice_kx,Kx)
				/\ wrequest(A,B,alice_bob_y1,Y1')

	3. 	State = 4	/\ RCV({Ky'}_Y1) =|>
		State' = 6	/\ wrequest(A,B,alice_bob_Ky,Ky')

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role bob ( 	A, B, C		: agent,	% role AKA Y
		Kx		: message,
		F		: hash_func,
		F(Kx)		: hash_func(message),
		RCV,SND		: channel(dy)) 
played_by A
def=
	local State : nat,
	X1,Y1	: public_key

					
init State := 0

transition
	1.	State = 0 	/\ RCV(start) =|>

		State' := 2	/\ Y1' := new()
				/\ SND(Y1')
				/\ secret(Y1',y1,{A,B,C})
				/\ witness(B,A,alice_bob_y1,Y1')

	2.	State =	2	/\ RCV(X1') =|>
		State' := 4	/\ SND(F(Ky).F(Kx).{Ky}_Y1.F(X1'))
				/\ secret(Ky,ky,{A,B})
				/\ witness(B,A,alice_bob_ky,Ky)
				/\ wrequest(B,A,bob_alice_x1,X1')

	3. 	State = 4	/\ RCV({Kx'}_X1) =|>
		State' = 6	/\ wrequest(B,A,bob_alice_kx,Kx')

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role charlie ( 	A, B, C		: agent,	% role AKA Z
		F		: hash_func,
		RCV,SND		: channel(dy)) 
played_by A
def=
	local State : nat,
		: public_key

					
init State := 0

transition
	1.	State = 0 	/\ RCV(X1') /\ RCV(Y1')
				/\ RCV(F(Ky').F(Kx').{Ky'}_Y1'.F(X1')) 
				/\ RCV(F(Kx').F(Ky').{Kx'}_X1'.F(Y1'))  =|>
		State' := 2	/\ SND({Ky'}_Y1')
				/\ SND({Kx'}_X1')

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role session (	A,B,C :agent,
		Kx1,Ky1	: message,
		F	: hash_func,
		F(Kx), F(Ky) : hash_func(message))

def=
	local RA,SA,RB,SB,RC,SC : channel(dy)

composition
	alice(A,B,C,Kx1,F,F(Ky),RA,SA)
	/\bob(A,B,C,Ky1,F,F(Kx),RB,SB)
	/\charlie(A,B,C,F,RC,SC)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role environment ()

def=
	const kx,ky,x1,y1,
	alice_bob_y1, alice_bob_ky,
	bob_alice_x1, bob_alice_kx : protocol_id,
	a,b,c			:agent,
	f			: hash_func,
	f(kx),f(ky)		: hash_func(message),
	kx1,ky1			: message

intruder_knowledge = {a, b, c, f, f(kx), f(ky)}

composition
	session(a,b,c,kx1,ky1,f,f(kx),f(ky))

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal
	secrecy_of kx
	secrecy_of ky
	secrecy_of x1
	secrecy_of y1
	weak_authentication_on alice_bob_y1
	weak_authentication_on alice_bob_ky
	weak_authentication_on bob_alice_x1
	weak_authentication_on bob_alice_kx
end goal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

environment()


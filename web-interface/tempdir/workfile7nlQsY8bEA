%% PROTOCOL: NSPK: Needham-Schroeder Public-Key Protocol
%% VARIANT: original version (of 1978) without key server
%% PURPOSE: Two-party mutual autentication
%% MODELER: David von Oheimb, Siemens CT IC 3, January 2005
%% ALICE_BOB:
%%egin{verbatim}
%% 1. A  - {Na.A}_Kb ----> B
%% 2. A  B
%%end{verbatim}
%% PROBLEMS: 3
%% CLASSIFICATION: G1, G3, G12
%% ATTACKS: Man-in-the-middle attack,
%% where in the first session Alice talks with the intruder as desired
%% and in the second session Bob wants to talk with Alice but actually
%% talks to the intruder. Therefore, also the nonce Nb gets leaked.
%%egin{verbatim}
%% 1.1  A  - {Na.A}_Ki --> i   	
%% 2.1                     i(A)  - {Na.A}_Kb  -> B   	
%% 2.2                     i(A)  B
%%end{verbatim}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%HLPSL:
role alice (A, B: agent,             
            K : symmetric_key,  
            Hash : hash_func,
            SND, RCV: channel (dy)) 
played_by A def=

  local State : nat, 
        Na, Nb: text
        K1 : message

  init State := 0

  transition  
   
    1.  State  = 0 / RCV(start) =|> 
	State':= 2 / Na' := new() / SND({Na'}_K)
		   

    2.  State  = 2 / RCV({Nb'}_K) =|> 
	State':= 4 / K1’ := Hash(Na.Nb')
                   / SND({Nb'}_K1') 
		   / witness(A,B,bob_alice_nb,Nb')

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role bob(A, B: agent,      
         K : symmetric_key,
         Hash : hash_func,   
         SND, RCV: channel (dy)) 
played_by B def=

  local State : nat, 
	Na, Nb: text
        K1 : message

  init State := 1

  transition 

    1.  State  = 1 / RCV({Na'}_K) =|> 
	State':= 3 / Nb' := new() 
                   / SND({Nb'}_K)
                   / K1':= Hash(Na'.Nb')
		   / secret(K1',k1,{A,B}) 
		

    3.  State  = 3 / RCV({Nb}_K1) =|> 
	State':= 5 / request(B,A,bob_alice_nb,Nb)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role session(A, B: agent, K : symmetric_key,
             Hash : hash_func) 
def=

  local SA, RA, SB, RB: channel (dy)

  composition 

	alice(A,B,K,Hash,SA,RA)
     / bob  (A,B,K,Hash,SB,RB)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role environment() def=

    const 
         bob_alice_nb,
         k1 : protocol_id,
         kab,kai,kib : symmetric_key,
         a,b : agent,
         h : hash_func

    intruder_knowledge = {a, b, h, kai, kib}

    composition

	session(a,b,kab,h)
     / session(a,i,kai,h)
     / session(i,b,kib,h)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal

  secrecy_of k1
  authentication_on bob_alice_nb
end goal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

environment() 
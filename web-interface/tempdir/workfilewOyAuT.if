%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilewOyAuT

section signature:

state_keymanager: agent * agent * message * nat * message * message * nat -> fact
state_keyowner: agent * agent * message * nat * message * message * nat -> fact


section types:

k1, key_file: protocol_id
MGoal, mab, mia, mib, UINFO, KEYFILE, M, start, Dummy_UINFO, dummy_msg: message
4, 1, State, 3, 2, 10, 0, 6, SID, Dummy_State, SID2, SID1: nat
a, b, A, B, A2Goal, i, A1Goal: agent
ASGoal: set(agent)


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(mab).
 iknows(i).
 state_keyowner(a,b,mab,0,dummy_msg,dummy_msg,3).
 state_keymanager(b,a,mab,0,dummy_msg,dummy_msg,4).
 state_keyowner(a,i,mia,0,dummy_msg,dummy_msg,6).
 state_keymanager(b,i,mib,0,dummy_msg,dummy_msg,10)


section rules:

step step_0 (A,B,M,Dummy_UINFO,KEYFILE,SID,UINFO) :=
 state_keyowner(A,B,M,0,Dummy_UINFO,KEYFILE,SID).
 iknows(start)
=[exists UINFO]=>
 state_keyowner(A,B,M,2,UINFO,KEYFILE,SID).
 iknows(Dummy_UINFO)

step step_1 (A,B,M,UINFO,KEYFILE,SID) :=
 state_keyowner(A,B,M,2,UINFO,KEYFILE,SID).
 iknows(KEYFILE)
 =>
 state_keyowner(A,B,M,3,UINFO,KEYFILE,SID).
 witness(A,B,key_file,KEYFILE)

step step_2 (B,A,M,UINFO,KEYFILE,SID) :=
 state_keymanager(B,A,M,1,UINFO,KEYFILE,SID).
 iknows(UINFO)
 =>
 state_keymanager(B,A,M,4,UINFO,KEYFILE,SID).
 iknows(KEYFILE)


section properties:

property secrecy_of_k1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,k1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_key_file (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,key_file,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,key_file,MGoal))
     /\ ((request(A1Goal,A2Goal,key_file,MGoal,SID1)
           /\ request(A1Goal,A2Goal,key_file,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_k1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,k1,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_key_file (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,key_file,MGoal,SID) &
 not(witness(A2Goal,A1Goal,key_file,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_key_file (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,key_file,MGoal,SID1).
 request(A1Goal,A2Goal,key_file,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileZvaDHP

section signature:

state_server: agent * agent * symmetric_key * symmetric_key * symmetric_key * hash_func * nat * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * set(agent) * set(agent) * set(agent) * set(agent) * nat -> fact
state_user: agent * agent * symmetric_key * symmetric_key * hash_func * nat * text * text * text * text * text * text * text * text * text * text * text * text * text * text * set(agent) * set(agent) * set(agent) * set(agent) * set(agent) * set(agent) * nat -> fact


section types:

k1, f_n, y_k, z_k, m_k, p_p, s_p, e_m, g_m, h_m, a_m, b_m, d_d: protocol_id
set_150, set_149, set_148, set_147, set_122, set_121, set_120, set_119, set_118, set_117: set
Set_84, Set_83, Set_82, Set_80, Dummy_Set_84, Dummy_Set_83, Dummy_Set_82, Dummy_Set_80, Set_46, Dummy_Set_46, Set_43, Set_42, Set_41, Set_39, Dummy_Set_43, Set_37, Dummy_Set_42, Dummy_Set_41, Dummy_Set_39, Dummy_Set_37, ASGoal: set(agent)
start, MGoal: message
Exp_tm, P1, P2, P22, P3, P4, N2, Da, Ti, Un1, Pass1, Ra, Ai, Ai1, Xa, Ga, Dummy_N2, Ck, Dummy_P22, Dummy_Exp_tm, Dummy_Xa, Dummy_Ai1, Dummy_Ra, Dummy_P44, Dummy_Ai, Dummy_Da, Dummy_P4, Dummy_P3, Dummy_Ti, Dummy_P2, Dummy_P1, Dummy_Ck2, Dummy_Ga, Dummy_N1, Dummy_Ck, Dummy_Pass1, Dummy_Un1, dummy_nonce, P44, N1, Ck2: text
7, 5, State, 4, SID, 6, 3, 2, 1, 0, Dummy_State: nat
Hash, h: hash_func
U, S, u, s, i: agent
k19, K, Ea, Sk, kab, kai, kib, k11, k12, k13, k14, k15, k16, k17, k18: symmetric_key


section inits:

initial_state init1 := 
 iknows(start).
 iknows(u).
 iknows(s).
 iknows(h).
 iknows(kai).
 iknows(kib).
 iknows(i).
 state_user(u,s,kab,k13,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_117,set_118,set_119,set_120,set_121,set_122,3).
 state_server(s,u,kab,k11,k12,h,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_147,set_148,set_149,set_150,4)


section rules:

step step_0 (U,S,K,Ea,Hash,Dummy_Un1,Dummy_Pass1,Ck,N1,Ga,Ck2,P1,P2,Ti,P3,P4,Da,Ai,P44,Dummy_Set_37,Dummy_Set_39,Set_41,Set_42,Set_43,Set_46,SID,Un1,Pass1) :=
 state_user(U,S,K,Ea,Hash,0,Dummy_Un1,Dummy_Pass1,Ck,N1,Ga,Ck2,P1,P2,Ti,P3,P4,Da,Ai,P44,Dummy_Set_37,Dummy_Set_39,Set_41,Set_42,Set_43,Set_46,SID).
 iknows(start)
=[exists Pass1,Un1]=>
 state_user(U,S,K,Ea,Hash,2,Un1,Pass1,Ck,N1,Ga,Ck2,P1,P2,Ti,P3,P4,Da,Ai,P44,Dummy_Set_37,Dummy_Set_39,Set_41,Set_42,Set_43,Set_46,SID).
 iknows(scrypt(K,pair(Un1,Pass1))).
 secret(Pass1,g_m,Dummy_Set_37).
 secret(Un1,h_m,Dummy_Set_39).
 contains(U,Dummy_Set_37).
 contains(S,Dummy_Set_37).
 contains(U,Dummy_Set_39).
 contains(S,Dummy_Set_39)

step step_1 (U,S,K,Ea,Hash,Dummy_Un1,Pass1,Dummy_Ck,Dummy_N1,Dummy_Ga,Dummy_Ck2,Dummy_P1,Dummy_P2,Ti,P3,P4,Da,Ai,P44,Set_37,Set_39,Dummy_Set_41,Dummy_Set_42,Dummy_Set_43,Set_46,SID,Un1,Ck,N1,Ga) :=
 state_user(U,S,K,Ea,Hash,2,Dummy_Un1,Pass1,Dummy_Ck,Dummy_N1,Dummy_Ga,Dummy_Ck2,Dummy_P1,Dummy_P2,Ti,P3,P4,Da,Ai,P44,Set_37,Set_39,Dummy_Set_41,Dummy_Set_42,Dummy_Set_43,Set_46,SID).
 iknows(scrypt(K,Ck))
=[exists Un1,Ga,N1]=>
 state_user(U,S,K,Ea,Hash,4,Un1,Pass1,Ck,N1,Ga,scrypt(K,scrypt(K,Ck)),exp(N1,Dummy_Ga),exp(Dummy_N1,scrypt(K,scrypt(K,Ck))),Ti,P3,P4,Da,Ai,P44,Set_37,Set_39,Dummy_Set_41,Dummy_Set_42,Dummy_Set_43,Set_46,SID).
 iknows(scrypt(Ea,pair(Un1,pair(exp(N1,Dummy_Ga),exp(Dummy_N1,scrypt(K,scrypt(K,Ck))))))).
 secret(Un1,e_m,Dummy_Set_41).
 secret(exp(N1,Dummy_Ga),a_m,Dummy_Set_42).
 secret(exp(Dummy_N1,scrypt(K,scrypt(K,Ck))),b_m,Dummy_Set_43).
 contains(U,Dummy_Set_41).
 contains(S,Dummy_Set_41).
 contains(U,Dummy_Set_42).
 contains(S,Dummy_Set_42).
 contains(U,Dummy_Set_43).
 contains(S,Dummy_Set_43)

step step_2 (U,S,K,Ea,Hash,Un1,Dummy_Pass1,Ck,N1,Ga,Ck2,P1,P2,Dummy_Ti,Dummy_P3,Dummy_P4,Dummy_Da,Dummy_Ai,Dummy_P44,Set_37,Set_39,Set_41,Set_42,Set_43,Dummy_Set_46,SID,Pass1,Ti,P3,P4,Da) :=
 state_user(U,S,K,Ea,Hash,4,Un1,Dummy_Pass1,Ck,N1,Ga,Ck2,P1,P2,Dummy_Ti,Dummy_P3,Dummy_P4,Dummy_Da,Dummy_Ai,Dummy_P44,Set_37,Set_39,Set_41,Set_42,Set_43,Dummy_Set_46,SID).
 iknows(scrypt(K,pair(Ti,pair(P3,P4))))
=[exists Da,Pass1]=>
 state_user(U,S,K,Ea,Hash,6,Un1,Pass1,Ck,N1,Ga,Ck2,P1,P2,Ti,P3,P4,Da,apply(Hash,xor(Ti,Pass1)),exp(P3,apply(Hash,xor(Ti,Pass1))),Set_37,Set_39,Set_41,Set_42,Set_43,Dummy_Set_46,SID).
 iknows(scrypt(K,Da)).
 contains(U,Dummy_Set_46).
 contains(S,Dummy_Set_46)

step step_3 (S,U,K,Ea,Sk,Hash,Dummy_Un1,Dummy_Pass1,Dummy_Ra,Dummy_Ai,Dummy_Ai1,Dummy_Xa,Dummy_Ga,Dummy_Ck,Dummy_Exp_tm,P1,P2,P22,P3,P4,N2,Da,Dummy_Ti,Dummy_Set_80,Set_82,Set_83,Set_84,SID,Un1,Pass1,Ra,Xa,Ga,Exp_tm) :=
 state_server(S,U,K,Ea,Sk,Hash,1,Dummy_Un1,Dummy_Pass1,Dummy_Ra,Dummy_Ai,Dummy_Ai1,Dummy_Xa,Dummy_Ga,Dummy_Ck,Dummy_Exp_tm,P1,P2,P22,P3,P4,N2,Da,Dummy_Ti,Dummy_Set_80,Set_82,Set_83,Set_84,SID).
 iknows(scrypt(K,pair(Un1,Pass1)))
=[exists Exp_tm,Ga,Xa,Ra]=>
 state_server(S,U,K,Ea,Sk,Hash,3,Un1,Pass1,Ra,apply(Hash,xor(xor(Ra,apply(Hash,Xa)),Pass1)),exp(apply(Hash,xor(xor(Ra,apply(Hash,Xa)),Pass1)),Ga),Xa,Ga,apply(Hash,pair(apply(Hash,pair(Ra,Xa)),apply(Hash,pair(Exp_tm,Un1)))),Exp_tm,P1,P2,P22,P3,P4,N2,Da,xor(Ra,apply(Hash,Xa)),Dummy_Set_80,Set_82,Set_83,Set_84,SID).
 iknows(scrypt(K,apply(Hash,pair(apply(Hash,pair(Ra,Xa)),apply(Hash,pair(Exp_tm,Un1)))))).
 secret(apply(Hash,pair(apply(Hash,pair(Ra,Xa)),apply(Hash,pair(Exp_tm,Un1)))),f_n,Dummy_Set_80).
 contains(U,Dummy_Set_80).
 contains(S,Dummy_Set_80)

step step_4 (S,U,K,Ea,Sk,Hash,Dummy_Un1,Dummy_Pass1,Dummy_Ra,Dummy_Ai,Ai1,Dummy_Xa,Dummy_Ga,Dummy_Ck,Dummy_Exp_tm,Dummy_P1,Dummy_P2,Dummy_P22,Dummy_P3,Dummy_P4,Dummy_N2,Da,Dummy_Ti,Set_80,Dummy_Set_82,Dummy_Set_83,Dummy_Set_84,SID,Un1,Pass1,Xa,Ga,Exp_tm,P1,P2,N2) :=
 state_server(S,U,K,Ea,Sk,Hash,3,Dummy_Un1,Dummy_Pass1,Dummy_Ra,Dummy_Ai,Ai1,Dummy_Xa,Dummy_Ga,Dummy_Ck,Dummy_Exp_tm,Dummy_P1,Dummy_P2,Dummy_P22,Dummy_P3,Dummy_P4,Dummy_N2,Da,Dummy_Ti,Set_80,Dummy_Set_82,Dummy_Set_83,Dummy_Set_84,SID).
 iknows(scrypt(Ea,pair(Un1,pair(P1,P2))))
=[exists Pass1,N2,Ga,Exp_tm,Xa]=>
 state_server(S,U,K,Ea,Sk,Hash,5,Un1,Pass1,xor(xor(Ra,apply(Hash,Xa)),apply(Hash,Xa)),apply(Hash,xor(xor(xor(xor(Ra,apply(Hash,Xa)),apply(Hash,Xa)),apply(Hash,Xa)),Pass1)),Ai1,Xa,Ga,apply(Hash,pair(xor(xor(Ra,apply(Hash,Xa)),apply(Hash,Xa)),pair(Xa,pair(Exp_tm,Un1)))),Exp_tm,P1,P2,exp(P1,apply(Hash,pair(xor(xor(Ra,apply(Hash,Xa)),apply(Hash,Xa)),pair(Xa,pair(Exp_tm,Un1))))),exp(N2,Ga),exp(N2,apply(Hash,xor(xor(xor(xor(Ra,apply(Hash,Xa)),apply(Hash,Xa)),apply(Hash,Xa)),Pass1))),N2,Da,xor(xor(xor(Ra,apply(Hash,Xa)),apply(Hash,Xa)),apply(Hash,Xa)),Set_80,Dummy_Set_82,Dummy_Set_83,Dummy_Set_84,SID).
 iknows(scrypt(K,pair(xor(xor(xor(Ra,apply(Hash,Xa)),apply(Hash,Xa)),apply(Hash,Xa)),pair(exp(N2,Ga),exp(N2,apply(Hash,xor(xor(xor(xor(Ra,apply(Hash,Xa)),apply(Hash,Xa)),apply(Hash,Xa)),Pass1))))))).
 secret(xor(xor(xor(Ra,apply(Hash,Xa)),apply(Hash,Xa)),apply(Hash,Xa)),y_k,Dummy_Set_82).
 secret(exp(N2,Ga),p_p,Dummy_Set_83).
 secret(exp(N2,apply(Hash,xor(xor(xor(xor(Ra,apply(Hash,Xa)),apply(Hash,Xa)),apply(Hash,Xa)),Pass1))),s_p,Dummy_Set_84).
 contains(U,Dummy_Set_82).
 contains(S,Dummy_Set_82).
 contains(U,Dummy_Set_83).
 contains(S,Dummy_Set_83).
 contains(U,Dummy_Set_84).
 contains(S,Dummy_Set_84)

step step_5 (S,U,K,Ea,Sk,Hash,Un1,Pass1,Ra,Ai,Ai1,Xa,Ga,Ck,Exp_tm,P1,P2,P22,P3,P4,N2,Dummy_Da,Ti,Set_80,Set_82,Set_83,Set_84,SID,Da) :=
 state_server(S,U,K,Ea,Sk,Hash,5,Un1,Pass1,Ra,Ai,Ai1,Xa,Ga,Ck,Exp_tm,P1,P2,P22,P3,P4,N2,Dummy_Da,Ti,Set_80,Set_82,Set_83,Set_84,SID).
 iknows(scrypt(K,Da))
 =>
 state_server(S,U,K,Ea,Sk,Hash,7,Un1,Pass1,Ra,Ai,Ai1,Xa,Ga,Ck,Exp_tm,P1,P2,P22,P3,P4,N2,Da,Ti,Set_80,Set_82,Set_83,Set_84,SID)


section properties:

property secrecy_of_k1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,k1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_e_m (MGoal,ASGoal) :=
 [] ((secret(MGoal,e_m,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_g_m (MGoal,ASGoal) :=
 [] ((secret(MGoal,g_m,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_h_m (MGoal,ASGoal) :=
 [] ((secret(MGoal,h_m,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_f_n (MGoal,ASGoal) :=
 [] ((secret(MGoal,f_n,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_y_k (MGoal,ASGoal) :=
 [] ((secret(MGoal,y_k,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_z_k (MGoal,ASGoal) :=
 [] ((secret(MGoal,z_k,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_m_k (MGoal,ASGoal) :=
 [] ((secret(MGoal,m_k,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_p_p (MGoal,ASGoal) :=
 [] ((secret(MGoal,p_p,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_s_p (MGoal,ASGoal) :=
 [] ((secret(MGoal,s_p,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_a_m (MGoal,ASGoal) :=
 [] ((secret(MGoal,a_m,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_b_m (MGoal,ASGoal) :=
 [] ((secret(MGoal,b_m,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state secrecy_of_k1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,k1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_e_m (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,e_m,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_g_m (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,g_m,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_h_m (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,h_m,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_f_n (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,f_n,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_y_k (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,y_k,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_z_k (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,z_k,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_m_k (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,m_k,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_p_p (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,p_p,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_s_p (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,s_p,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_a_m (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,a_m,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_b_m (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,b_m,ASGoal) &
 not(contains(i,ASGoal))


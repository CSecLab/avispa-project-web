%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileqxB3hV

section signature:

state_role_USIM: agent * symmetric_key * agent * agent * agent * public_key * symmetric_key * symmetric_key * public_key * agent * nat * hash_func * text * hash_func * hash_func * text * message * apply(hash_func,pair(symmetric_key,pair(text,text))) * apply(hash_func,pair(symmetric_key,text)) * text * text * text * apply(hash_func,pair(symmetric_key,pair(symmetric_key,pair(public_key,text)))) * apply(hash_func,pair(symmetric_key,pair(symmetric_key,text))) * apply(hash_func,pair(text,pair(apply(hash_func,pair(symmetric_key,pair(symmetric_key,pair(public_key,text)))),text))) * apply(hash_func,pair(text,pair(apply(hash_func,pair(symmetric_key,pair(symmetric_key,text))),text))) * text * text * nat -> fact
state_role_MME: agent * symmetric_key * agent * agent * public_key * nat * hash_func * hash_func * text * hash_func * text * message * apply(hash_func,pair(symmetric_key,pair(text,text))) * apply(hash_func,pair(symmetric_key,text)) * symmetric_key * text * public_key * text * text * nat -> fact
state_role_HSS: agent * symmetric_key * agent * agent * agent * agent * public_key * public_key * symmetric_key * symmetric_key * public_key * nat * hash_func * apply(hash_func,pair(symmetric_key,pair(symmetric_key,text))) * apply(hash_func,pair(symmetric_key,pair(symmetric_key,pair(public_key,text)))) * text * text * text * set(pair(apply(hash_func,pair(symmetric_key,pair(symmetric_key,pair(public_key,text)))),pair(apply(hash_func,pair(symmetric_key,pair(symmetric_key,text))),text))) * set(agent) * set(pair(public_key,pair(text,pair(text,text)))) * set(agent) * nat -> fact
state_role_HIU: agent * agent * agent * public_key * public_key * public_key * nat * text * text * set(agent) * nat -> fact
state_role_AAAWLAN: agent * agent * agent * agent * agent * public_key * public_key * nat * hash_func * public_key * text * apply(hash_func,pair(symmetric_key,pair(symmetric_key,text))) * apply(hash_func,pair(symmetric_key,pair(symmetric_key,pair(public_key,text)))) * text * apply(hash_func,pair(text,pair(apply(hash_func,pair(symmetric_key,pair(symmetric_key,pair(public_key,text)))),text))) * apply(hash_func,pair(text,pair(apply(hash_func,pair(symmetric_key,pair(symmetric_key,text))),text))) * text * text * nat -> fact
state_role_AP: agent * agent * public_key * agent * nat * apply(hash_func,pair(text,pair(apply(hash_func,pair(symmetric_key,pair(symmetric_key,pair(public_key,text)))),text))) * apply(hash_func,pair(text,pair(apply(hash_func,pair(symmetric_key,pair(symmetric_key,text))),text))) * text * text * nat -> fact


section types:

Set_121, Dummy_Set_121: set(pair(public_key,pair(text,pair(text,text))))
Set_118, Dummy_Set_118: set(pair(apply(hash_func,pair(symmetric_key,pair(symmetric_key,pair(public_key,text)))),pair(apply(hash_func,pair(symmetric_key,pair(symmetric_key,text))),text)))
set_254, set_253, set_252, set_251, set_246: set
HK, Dummy_HK: apply(hash_func,pair(text,pair(apply(hash_func,pair(symmetric_key,pair(symmetric_key,pair(public_key,text)))),text)))
LID, Dummy_LID: apply(hash_func,pair(symmetric_key,pair(symmetric_key,text)))
HID, Dummy_HID: apply(hash_func,pair(text,pair(apply(hash_func,pair(symmetric_key,pair(symmetric_key,text))),text)))
LK, Dummy_LK: apply(hash_func,pair(symmetric_key,pair(symmetric_key,pair(public_key,text))))
RES, Dummy_RES: apply(hash_func,pair(symmetric_key,text))
MAC, Dummy_MAC: apply(hash_func,pair(symmetric_key,pair(text,text)))
Set_136, Set_122, Set_119, Dummy_Set_122, Dummy_Set_119, Dummy_Set_136, ASGoal: set(agent)
AUTH, Dummy_AUTH, start, dummy_msg, MGoal: message
PW, RAND1, accessaccepteapsuccess, accessrequesteapolresponse, acessrequestEAPresponsePW, accesschallengeeaprequestMD5challenge, Nreauth, N2, N1, hssid, RAND, SQN, Dummy_RAND, Dummy_SQN, imsi, Dummy_N1, naiwlan, akaidentity, akachallenge, akanotification, Dummy_Nreauth, eapolrequestidentity, eapolresponse, eapmethod, Dummy_N2, ksderivation, eaprequestMD5challenge, eapresponseMD5challengePW, eapsuccess, Dummy_PW, Dummy_RAND1, dummy_nonce: text
F, F2, F1, F5, dummy_hash: hash_func
State, 8, SID, 7, 6, 5, 4, 3, 2, 1, 0, Dummy_State, SID2, SID1: nat
sec_n1, auth_3, sec_n3, sec_n2, auth_11, auth_5, auth_6, auth_1, auth_2, auth_4: protocol_id
IK, CK, K, Dummy_CK, dummy_sk, k, ik, ck: symmetric_key
KWLAN, Ki, KHSS, Dummy_Ki, dummy_pk, ki, khss, kwlan: public_key
USIM, AAAWLAN, AP, HSS, HIU, MME, A2Goal, A1Goal, usim, aaawlan, hss, hiu, mme, ap, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(usim).
 iknows(mme).
 iknows(hss).
 iknows(hiu).
 iknows(aaawlan).
 iknows(ap).
 iknows(khss).
 iknows(kwlan).
 iknows(i).
 state_role_AP(ap,aaawlan,kwlan,usim,0,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,3).
 state_role_AAAWLAN(aaawlan,hiu,hss,usim,ap,kwlan,khss,0,dummy_hash,dummy_pk,dummy_nonce,dummy_msg,dummy_msg,dummy_nonce,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,4).
 state_role_HIU(hiu,hss,aaawlan,kwlan,khss,ki,0,dummy_nonce,dummy_nonce,set_246,5).
 state_role_HSS(hss,k,mme,usim,hiu,aaawlan,kwlan,khss,ck,ik,ki,0,dummy_hash,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,dummy_nonce,set_251,set_252,set_253,set_254,6).
 state_role_MME(mme,k,usim,hss,khss,0,dummy_hash,dummy_hash,dummy_nonce,dummy_hash,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_sk,dummy_nonce,dummy_pk,dummy_nonce,dummy_nonce,7).
 state_role_USIM(usim,k,mme,hss,aaawlan,khss,ck,ik,ki,ap,0,dummy_hash,dummy_nonce,dummy_hash,dummy_hash,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,8)


section rules:

step step_0 (AP,AAAWLAN,KWLAN,USIM,HK,HID,RAND1,PW,SID) :=
 state_role_AP(AP,AAAWLAN,KWLAN,USIM,0,HK,HID,RAND1,PW,SID).
 iknows(start)
 =>
 state_role_AP(AP,AAAWLAN,KWLAN,USIM,1,HK,HID,RAND1,PW,SID).
 iknows(eapolrequestidentity)

step step_1 (AP,AAAWLAN,KWLAN,USIM,HK,Dummy_HID,RAND1,PW,SID,HID) :=
 state_role_AP(AP,AAAWLAN,KWLAN,USIM,1,HK,Dummy_HID,RAND1,PW,SID).
 iknows(apply(eapolresponse,HID))
 =>
 state_role_AP(AP,AAAWLAN,KWLAN,USIM,2,HK,HID,RAND1,PW,SID).
 iknows(apply(accessrequesteapolresponse,HID))

step step_2 (AP,AAAWLAN,KWLAN,USIM,Dummy_HK,HID,Dummy_RAND1,PW,SID,HK,RAND1) :=
 state_role_AP(AP,AAAWLAN,KWLAN,USIM,2,Dummy_HK,HID,Dummy_RAND1,PW,SID).
 iknows(apply(accesschallengeeaprequestMD5challenge,scrypt(HK,RAND1)))
 =>
 state_role_AP(AP,AAAWLAN,KWLAN,USIM,3,HK,HID,RAND1,PW,SID).
 iknows(apply(eaprequestMD5challenge,scrypt(HK,RAND1)))

step step_3 (AP,AAAWLAN,KWLAN,USIM,Dummy_HK,HID,RAND1,Dummy_PW,SID,HK,PW) :=
 state_role_AP(AP,AAAWLAN,KWLAN,USIM,3,Dummy_HK,HID,RAND1,Dummy_PW,SID).
 iknows(apply(eapresponseMD5challengePW,scrypt(HK,PW)))
 =>
 state_role_AP(AP,AAAWLAN,KWLAN,USIM,4,HK,HID,RAND1,PW,SID).
 iknows(apply(acessrequestEAPresponsePW,scrypt(HK,PW)))

step step_4 (AP,AAAWLAN,KWLAN,USIM,HK,HID,RAND1,PW,SID) :=
 state_role_AP(AP,AAAWLAN,KWLAN,USIM,4,HK,HID,RAND1,PW,SID).
 iknows(eapsuccess)
 =>
 state_role_AP(AP,AAAWLAN,KWLAN,USIM,5,HK,HID,RAND1,PW,SID).
 iknows(eapsuccess)

step step_5 (AP,AAAWLAN,KWLAN,USIM,HK,HID,RAND1,PW,SID) :=
 state_role_AP(AP,AAAWLAN,KWLAN,USIM,5,HK,HID,RAND1,PW,SID).
 iknows(accessaccepteapsuccess)
 =>
 state_role_AP(AP,AAAWLAN,KWLAN,USIM,6,HK,HID,RAND1,PW,SID).
 iknows(eapsuccess)

step step_6 (AP,AAAWLAN,KWLAN,USIM,HK,HID,RAND1,PW,SID) :=
 state_role_AP(AP,AAAWLAN,KWLAN,USIM,6,HK,HID,RAND1,PW,SID).
 iknows(ksderivation)
 =>
 state_role_AP(AP,AAAWLAN,KWLAN,USIM,7,HK,HID,RAND1,PW,SID).
 iknows(ksderivation)

step step_7 (AAAWLAN,HIU,HSS,USIM,AP,KWLAN,KHSS,F,Dummy_Ki,Dummy_N2,LID,LK,Nreauth,HK,HID,RAND1,PW,SID,Ki,N2) :=
 state_role_AAAWLAN(AAAWLAN,HIU,HSS,USIM,AP,KWLAN,KHSS,0,F,Dummy_Ki,Dummy_N2,LID,LK,Nreauth,HK,HID,RAND1,PW,SID).
 iknows(crypt(KWLAN,pair(Ki,N2)))
 =>
 state_role_AAAWLAN(AAAWLAN,HIU,HSS,USIM,AP,KWLAN,KHSS,1,F,Ki,N2,LID,LK,Nreauth,HK,HID,RAND1,PW,SID)

step step_8 (AAAWLAN,HIU,HSS,USIM,AP,KWLAN,KHSS,F,Ki,Dummy_N2,Dummy_LID,Dummy_LK,Dummy_Nreauth,Dummy_HK,Dummy_HID,RAND1,PW,SID,N2,LID,LK,Nreauth) :=
 state_role_AAAWLAN(AAAWLAN,HIU,HSS,USIM,AP,KWLAN,KHSS,1,F,Ki,Dummy_N2,Dummy_LID,Dummy_LK,Dummy_Nreauth,Dummy_HK,Dummy_HID,RAND1,PW,SID).
 iknows(pair(hssid,crypt(KWLAN,pair(LK,pair(LID,Nreauth)))))
 =>
 state_role_AAAWLAN(AAAWLAN,HIU,HSS,USIM,AP,KWLAN,KHSS,2,F,Ki,N2,LID,LK,Nreauth,apply(F,pair(N2,pair(LK,Nreauth))),apply(F,pair(N2,pair(LID,Nreauth))),RAND1,PW,SID)

step step_9 (AAAWLAN,HIU,HSS,USIM,AP,KWLAN,KHSS,F,Ki,N2,LID,LK,Nreauth,HK,Dummy_HID,Dummy_RAND1,PW,SID,HID,RAND1) :=
 state_role_AAAWLAN(AAAWLAN,HIU,HSS,USIM,AP,KWLAN,KHSS,2,F,Ki,N2,LID,LK,Nreauth,HK,Dummy_HID,Dummy_RAND1,PW,SID).
 iknows(apply(accessrequesteapolresponse,HID))
=[exists RAND1]=>
 state_role_AAAWLAN(AAAWLAN,HIU,HSS,USIM,AP,KWLAN,KHSS,3,F,Ki,N2,LID,LK,Nreauth,HK,HID,RAND1,PW,SID).
 iknows(apply(accesschallengeeaprequestMD5challenge,scrypt(HK,RAND1))).
 witness(AAAWLAN,USIM,auth_5,RAND1)

step step_10 (AAAWLAN,HIU,HSS,USIM,AP,KWLAN,KHSS,F,Ki,N2,LID,LK,Nreauth,Dummy_HK,HID,RAND1,Dummy_PW,SID,HK,PW) :=
 state_role_AAAWLAN(AAAWLAN,HIU,HSS,USIM,AP,KWLAN,KHSS,3,F,Ki,N2,LID,LK,Nreauth,Dummy_HK,HID,RAND1,Dummy_PW,SID).
 iknows(apply(acessrequestEAPresponsePW,scrypt(HK,PW)))
 =>
 state_role_AAAWLAN(AAAWLAN,HIU,HSS,USIM,AP,KWLAN,KHSS,4,F,Ki,N2,LID,LK,Nreauth,HK,HID,RAND1,PW,SID).
 request(AAAWLAN,USIM,auth_6,PW,SID).
 iknows(eapsuccess).
 iknows(accessaccepteapsuccess)

step step_11 (HIU,HSS,AAAWLAN,KWLAN,KHSS,Ki,Dummy_N1,Dummy_N2,Dummy_Set_136,SID,N1,N2) :=
 state_role_HIU(HIU,HSS,AAAWLAN,KWLAN,KHSS,Ki,0,Dummy_N1,Dummy_N2,Dummy_Set_136,SID).
 iknows(apply(akaidentity,pair(naiwlan,N1)))
=[exists N2]=>
 state_role_HIU(HIU,HSS,AAAWLAN,KWLAN,KHSS,Ki,1,N1,N2,Dummy_Set_136,SID).
 witness(HIU,HSS,auth_3,N2).
 iknows(crypt(KHSS,pair(Ki,pair(N1,N2)))).
 iknows(crypt(KWLAN,pair(Ki,N2))).
 secret(N2,sec_n1,Dummy_Set_136).
 contains(HIU,Dummy_Set_136).
 contains(HSS,Dummy_Set_136).
 contains(AAAWLAN,Dummy_Set_136)

step step_12 (HSS,K,MME,USIM,HIU,AAAWLAN,KWLAN,KHSS,CK,IK,Ki,F,LID,LK,N2,Dummy_N1,Nreauth,Set_118,Set_119,Set_121,Set_122,SID,N1) :=
 state_role_HSS(HSS,K,MME,USIM,HIU,AAAWLAN,KWLAN,KHSS,CK,IK,Ki,0,F,LID,LK,N2,Dummy_N1,Nreauth,Set_118,Set_119,Set_121,Set_122,SID).
 iknows(apply(akaidentity,pair(naiwlan,imsi)))
=[exists N1]=>
 state_role_HSS(HSS,K,MME,USIM,HIU,AAAWLAN,KWLAN,KHSS,CK,IK,Ki,1,F,LID,LK,N2,N1,Nreauth,Set_118,Set_119,Set_121,Set_122,SID).
 iknows(apply(akaidentity,pair(naiwlan,N1)))

step step_13 (HSS,K,MME,USIM,HIU,AAAWLAN,KWLAN,KHSS,CK,IK,Ki,F,Dummy_LID,Dummy_LK,Dummy_N2,Dummy_N1,Dummy_Nreauth,Dummy_Set_118,Dummy_Set_119,Dummy_Set_121,Dummy_Set_122,SID,N2,N1,Nreauth) :=
 state_role_HSS(HSS,K,MME,USIM,HIU,AAAWLAN,KWLAN,KHSS,CK,IK,Ki,1,F,Dummy_LID,Dummy_LK,Dummy_N2,Dummy_N1,Dummy_Nreauth,Dummy_Set_118,Dummy_Set_119,Dummy_Set_121,Dummy_Set_122,SID).
 iknows(crypt(KHSS,pair(Ki,pair(N1,N2))))
=[exists Nreauth]=>
 state_role_HSS(HSS,K,MME,USIM,HIU,AAAWLAN,KWLAN,KHSS,CK,IK,Ki,2,F,apply(F,pair(CK,pair(IK,N1))),apply(F,pair(CK,pair(IK,pair(Ki,N1)))),N2,N1,Nreauth,Dummy_Set_118,Dummy_Set_119,Dummy_Set_121,Dummy_Set_122,SID).
 request(HSS,HIU,auth_3,N2,SID).
 iknows(pair(hssid,crypt(KWLAN,pair(apply(F,pair(CK,pair(IK,pair(Ki,N1)))),pair(apply(F,pair(CK,pair(IK,N1))),Nreauth))))).
 secret(Dummy_Set_118,sec_n2,Dummy_Set_119).
 iknows(apply(akanotification,scrypt(CK,pair(Ki,pair(N1,pair(N2,Nreauth)))))).
 secret(Dummy_Set_121,sec_n3,Dummy_Set_122).
 contains(pair(apply(F,pair(CK,pair(IK,pair(Ki,N1)))),pair(apply(F,pair(CK,pair(IK,N1))),Nreauth)),Dummy_Set_118).
 contains(HSS,Dummy_Set_119).
 contains(AAAWLAN,Dummy_Set_119).
 contains(pair(Ki,pair(Dummy_N1,pair(N2,Nreauth))),Dummy_Set_121).
 contains(HSS,Dummy_Set_122).
 contains(MME,Dummy_Set_122).
 contains(USIM,Dummy_Set_122)

step step_14 (MME,K,USIM,HSS,KHSS,F5,F1,Dummy_SQN,F2,Dummy_RAND,Dummy_AUTH,Dummy_MAC,RES,CK,N2,Ki,N1,Nreauth,SID,SQN,RAND) :=
 state_role_MME(MME,K,USIM,HSS,KHSS,0,F5,F1,Dummy_SQN,F2,Dummy_RAND,Dummy_AUTH,Dummy_MAC,RES,CK,N2,Ki,N1,Nreauth,SID).
 iknows(apply(akaidentity,pair(imsi,naiwlan)))
=[exists RAND,SQN]=>
 state_role_MME(MME,K,USIM,HSS,KHSS,1,F5,F1,SQN,F2,RAND,apply(F1,pair(K,pair(SQN,RAND))),apply(F1,pair(K,pair(SQN,RAND))),RES,CK,N2,Ki,N1,Nreauth,SID).
 iknows(apply(akachallenge,pair(RAND,pair(apply(F1,pair(K,pair(SQN,RAND))),apply(F1,pair(K,pair(SQN,RAND))))))).
 witness(MME,USIM,auth_1,SQN)

step step_15 (MME,K,USIM,HSS,KHSS,F5,F1,SQN,F2,Dummy_RAND,AUTH,Dummy_MAC,Dummy_RES,CK,N2,Ki,N1,Nreauth,SID,RAND,MAC) :=
 state_role_MME(MME,K,USIM,HSS,KHSS,1,F5,F1,SQN,F2,Dummy_RAND,AUTH,Dummy_MAC,Dummy_RES,CK,N2,Ki,N1,Nreauth,SID).
 iknows(apply(akachallenge,pair(apply(F2,pair(K,RAND)),MAC)))
 =>
 state_role_MME(MME,K,USIM,HSS,KHSS,2,F5,F1,SQN,F2,RAND,AUTH,MAC,apply(F2,pair(K,RAND)),CK,N2,Ki,N1,Nreauth,SID).
 request(MME,USIM,auth_2,apply(F2,pair(K,RAND)),SID).
 iknows(apply(akaidentity,pair(naiwlan,imsi)))

step step_16 (MME,K,USIM,HSS,KHSS,F5,F1,SQN,F2,RAND,AUTH,MAC,RES,Dummy_CK,Dummy_N2,Dummy_Ki,Dummy_N1,Dummy_Nreauth,SID,CK,N2,Ki,N1,Nreauth) :=
 state_role_MME(MME,K,USIM,HSS,KHSS,2,F5,F1,SQN,F2,RAND,AUTH,MAC,RES,Dummy_CK,Dummy_N2,Dummy_Ki,Dummy_N1,Dummy_Nreauth,SID).
 iknows(apply(akanotification,scrypt(CK,pair(Ki,pair(N1,pair(N2,Nreauth))))))
 =>
 state_role_MME(MME,K,USIM,HSS,KHSS,3,F5,F1,SQN,F2,RAND,AUTH,MAC,RES,CK,N2,Ki,N1,Nreauth,SID).
 iknows(apply(akanotification,scrypt(CK,pair(Ki,pair(N1,pair(N2,Nreauth))))))

step step_17 (USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,F1,SQN,F2,F,RAND,AUTH,MAC,RES,N2,N1,Nreauth,LK,LID,HK,HID,RAND1,PW,SID) :=
 state_role_USIM(USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,0,F1,SQN,F2,F,RAND,AUTH,MAC,RES,N2,N1,Nreauth,LK,LID,HK,HID,RAND1,PW,SID).
 iknows(start)
 =>
 state_role_USIM(USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,1,F1,SQN,F2,F,RAND,AUTH,MAC,RES,N2,N1,Nreauth,LK,LID,HK,HID,RAND1,PW,SID).
 iknows(apply(akaidentity,pair(imsi,naiwlan)))

step step_18 (USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,F1,Dummy_SQN,F2,F,Dummy_RAND,Dummy_AUTH,Dummy_MAC,Dummy_RES,N2,N1,Nreauth,LK,LID,HK,HID,RAND1,PW,SID,SQN,RAND,AUTH) :=
 state_role_USIM(USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,1,F1,Dummy_SQN,F2,F,Dummy_RAND,Dummy_AUTH,Dummy_MAC,Dummy_RES,N2,N1,Nreauth,LK,LID,HK,HID,RAND1,PW,SID).
 iknows(apply(akachallenge,pair(RAND,pair(AUTH,apply(F1,pair(K,pair(SQN,RAND)))))))
 =>
 state_role_USIM(USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,2,F1,SQN,F2,F,RAND,AUTH,apply(F1,pair(K,pair(SQN,RAND))),apply(F2,pair(K,RAND)),N2,N1,Nreauth,LK,LID,HK,HID,RAND1,PW,SID).
 request(USIM,MME,auth_1,SQN,SID).
 witness(USIM,MME,auth_2,apply(F2,pair(K,RAND))).
 iknows(apply(akachallenge,pair(apply(F2,pair(K,RAND)),apply(F1,pair(K,pair(SQN,RAND))))))

step step_19 (USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,F1,SQN,F2,F,RAND,AUTH,MAC,RES,Dummy_N2,Dummy_N1,Dummy_Nreauth,Dummy_LK,Dummy_LID,Dummy_HK,Dummy_HID,RAND1,PW,SID,N2,N1,Nreauth) :=
 state_role_USIM(USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,2,F1,SQN,F2,F,RAND,AUTH,MAC,RES,Dummy_N2,Dummy_N1,Dummy_Nreauth,Dummy_LK,Dummy_LID,Dummy_HK,Dummy_HID,RAND1,PW,SID).
 iknows(apply(akanotification,scrypt(CK,pair(Ki,pair(N1,pair(N2,Nreauth))))))
 =>
 state_role_USIM(USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,3,F1,SQN,F2,F,RAND,AUTH,MAC,RES,N2,N1,Nreauth,apply(F,pair(CK,pair(IK,pair(Ki,N1)))),apply(F,pair(CK,pair(IK,N1))),apply(F,pair(N2,pair(apply(F,pair(CK,pair(IK,pair(Ki,N1)))),Nreauth))),apply(F,pair(N2,pair(apply(F,pair(CK,pair(IK,N1))),Nreauth))),RAND1,PW,SID)

step step_20 (USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,F1,SQN,F2,F,RAND,AUTH,MAC,RES,N2,N1,Nreauth,LK,LID,HK,HID,RAND1,PW,SID) :=
 state_role_USIM(USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,3,F1,SQN,F2,F,RAND,AUTH,MAC,RES,N2,N1,Nreauth,LK,LID,HK,HID,RAND1,PW,SID).
 iknows(eapolrequestidentity)
 =>
 state_role_USIM(USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,4,F1,SQN,F2,F,RAND,AUTH,MAC,RES,N2,N1,Nreauth,LK,LID,HK,HID,RAND1,PW,SID).
 iknows(apply(eapolresponse,HID))

step step_21 (USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,F1,SQN,F2,F,RAND,AUTH,MAC,RES,N2,N1,Nreauth,LK,LID,Dummy_HK,HID,Dummy_RAND1,Dummy_PW,SID,HK,RAND1,PW) :=
 state_role_USIM(USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,4,F1,SQN,F2,F,RAND,AUTH,MAC,RES,N2,N1,Nreauth,LK,LID,Dummy_HK,HID,Dummy_RAND1,Dummy_PW,SID).
 iknows(apply(eaprequestMD5challenge,scrypt(HK,RAND1)))
=[exists PW]=>
 state_role_USIM(USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,5,F1,SQN,F2,F,RAND,AUTH,MAC,RES,N2,N1,Nreauth,LK,LID,HK,HID,RAND1,PW,SID).
 request(USIM,AAAWLAN,auth_5,RAND1,SID).
 iknows(apply(eapresponseMD5challengePW,scrypt(HK,PW))).
 witness(USIM,AAAWLAN,auth_6,PW)

step step_22 (USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,F1,SQN,F2,F,RAND,AUTH,MAC,RES,N2,N1,Nreauth,LK,LID,HK,HID,RAND1,PW,SID) :=
 state_role_USIM(USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,5,F1,SQN,F2,F,RAND,AUTH,MAC,RES,N2,N1,Nreauth,LK,LID,HK,HID,RAND1,PW,SID).
 iknows(eapsuccess)
 =>
 state_role_USIM(USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,6,F1,SQN,F2,F,RAND,AUTH,MAC,RES,N2,N1,Nreauth,LK,LID,HK,HID,RAND1,PW,SID)

step step_23 (USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,F1,SQN,F2,F,RAND,AUTH,MAC,RES,N2,N1,Nreauth,LK,LID,HK,HID,RAND1,PW,SID) :=
 state_role_USIM(USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,6,F1,SQN,F2,F,RAND,AUTH,MAC,RES,N2,N1,Nreauth,LK,LID,HK,HID,RAND1,PW,SID).
 iknows(eapsuccess)
 =>
 state_role_USIM(USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,7,F1,SQN,F2,F,RAND,AUTH,MAC,RES,N2,N1,Nreauth,LK,LID,HK,HID,RAND1,PW,SID).
 iknows(ksderivation)

step step_24 (USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,F1,SQN,F2,F,RAND,AUTH,MAC,RES,N2,N1,Nreauth,LK,LID,HK,HID,RAND1,PW,SID) :=
 state_role_USIM(USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,7,F1,SQN,F2,F,RAND,AUTH,MAC,RES,N2,N1,Nreauth,LK,LID,HK,HID,RAND1,PW,SID).
 iknows(ksderivation)
 =>
 state_role_USIM(USIM,K,MME,HSS,AAAWLAN,KHSS,CK,IK,Ki,AP,8,F1,SQN,F2,F,RAND,AUTH,MAC,RES,N2,N1,Nreauth,LK,LID,HK,HID,RAND1,PW,SID)


section properties:

property authentication_on_auth_1 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth_1,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth_1,MGoal))
     /\ ((request(A1Goal,A2Goal,auth_1,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth_1,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_auth_2 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth_2,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth_2,MGoal))
     /\ ((request(A1Goal,A2Goal,auth_2,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth_2,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_auth_3 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth_3,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth_3,MGoal))
     /\ ((request(A1Goal,A2Goal,auth_3,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth_3,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property weak_authentication_on_auth_4 (A1Goal,A2Goal,MGoal,SID) :=
 [] ((wrequest(A1Goal,A2Goal,auth_4,MGoal,SID)
      /\ ~ equal(A2Goal,i))
     => witness(A2Goal,A1Goal,auth_4,MGoal))

property authentication_on_auth_5 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth_5,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth_5,MGoal))
     /\ ((request(A1Goal,A2Goal,auth_5,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth_5,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_auth_6 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth_6,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth_6,MGoal))
     /\ ((request(A1Goal,A2Goal,auth_6,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth_6,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property secrecy_of_sec_n1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_n1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_n2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_n2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_n3 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_n3,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state authentication_on_auth_1 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth_1,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_1,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth_1 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth_1,MGoal,SID1).
 request(A1Goal,A2Goal,auth_1,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_auth_2 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth_2,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_2,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth_2 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth_2,MGoal,SID1).
 request(A1Goal,A2Goal,auth_2,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_auth_3 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth_3,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_3,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth_3 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth_3,MGoal,SID1).
 request(A1Goal,A2Goal,auth_3,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state weak_authentication_on_auth_4 (A1Goal,A2Goal,MGoal,SID) :=
 wrequest(A1Goal,A2Goal,auth_4,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_4,MGoal)) &
 not(equal(A2Goal,i))

attack_state authentication_on_auth_5 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth_5,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_5,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth_5 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth_5,MGoal,SID1).
 request(A1Goal,A2Goal,auth_5,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_auth_6 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth_6,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_6,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth_6 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth_6,MGoal,SID1).
 request(A1Goal,A2Goal,auth_6,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state secrecy_of_sec_n1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_n1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_n2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_n2,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_n3 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_n3,ASGoal) &
 not(contains(i,ASGoal))


%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileYxovs04tlo

section signature:

state_tag: agent * agent * hash_func * hash_func * symmetric_key * nat * text * text * text * text * text * text * text * text * text * set(agent) * set(agent) * set(agent) * nat -> fact
state_reader: agent * agent * hash_func * hash_func * symmetric_key * nat * text * text * text * text * text * text * text * text * text * set(agent) * set(agent) * set(agent) * nat -> fact


section types:

MGoal, start: message
secret_id, identity_tag, hash_identity, interm, final_prng: protocol_id
Dummy_U, Dummy_M, Dummy_N, Dummy_V, Dummy_H, Dummy_Nt, Dummy_Id, Dummy_Nr, Dummy_S, dummy_nonce, S, Id, H, Nr, Nt, M, N, V, U: text
k, K: symmetric_key
h, p, Hash, PRNG: hash_func
Dummy_State, 3, SID, SID2, SID1, 6, 4, 0, State, 5, 1, 2: nat
set_87, set_86, set_85, set_106, set_105, set_104: set
A2Goal, A1Goal, t, r, T, R, i: agent
ASGoal, Set_60, Set_58, Set_57, Set_34, Set_33, Set_31, Dummy_Set_60, Dummy_Set_58, Dummy_Set_57, Dummy_Set_34, Dummy_Set_33, Dummy_Set_31: set(agent)


section inits:

initial_state init1 := 
 iknows(start).
 iknows(t).
 iknows(r).
 iknows(h).
 iknows(p).
 iknows(i).
 state_reader(r,t,h,p,k,2,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_85,set_86,set_87,3).
 state_tag(t,r,h,p,k,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_104,set_105,set_106,4)


section rules:

step step_0 (R,T,Hash,PRNG,K,Dummy_S,Dummy_Nr,Nt,H,Dummy_Id,V,N,M,U,Set_31,Set_33,Set_34,SID,S,Nr,Id) :=
 state_reader(R,T,Hash,PRNG,K,2,Dummy_S,Dummy_Nr,Nt,H,Dummy_Id,V,N,M,U,Set_31,Set_33,Set_34,SID).
 iknows(scrypt(K,pair(S,Id)))
=[exists Nr]=>
 state_reader(R,T,Hash,PRNG,K,3,S,Nr,Nt,H,Id,V,N,M,U,Set_31,Set_33,Set_34,SID).
 iknows(Nr)

step step_1 (R,T,Hash,PRNG,K,Dummy_S,Nr,Dummy_Nt,Dummy_H,Id,Dummy_V,Dummy_N,Dummy_M,Dummy_U,Dummy_Set_31,Dummy_Set_33,Dummy_Set_34,SID,Nt) :=
 state_reader(R,T,Hash,PRNG,K,3,Dummy_S,Nr,Dummy_Nt,Dummy_H,Id,Dummy_V,Dummy_N,Dummy_M,Dummy_U,Dummy_Set_31,Dummy_Set_33,Dummy_Set_34,SID).
 iknows(pair(V,pair(H,Nt)))
 =>
 state_reader(R,T,Hash,PRNG,K,5,xor(Dummy_S,apply(Hash,pair(Dummy_S,apply(PRNG,pair(Dummy_S,Nr))))),Nr,Nt,apply(Hash,Id),Id,apply(PRNG,pair(Dummy_S,pair(Nr,Nt))),apply(PRNG,apply(PRNG,pair(Dummy_S,Nr))),apply(PRNG,pair(Dummy_S,Nr)),apply(Hash,pair(Dummy_S,apply(PRNG,pair(Dummy_S,Nr)))),Dummy_Set_31,Dummy_Set_33,Dummy_Set_34,SID).
 iknows(apply(PRNG,apply(PRNG,pair(Dummy_S,Nr)))).
 secret(apply(PRNG,pair(Dummy_S,Nr)),interm,Dummy_Set_34).
 witness(R,T,final_prng,apply(PRNG,apply(PRNG,pair(Dummy_S,Nr)))).
 contains(R,Dummy_Set_31).
 contains(T,Dummy_Set_31).
 contains(R,Dummy_Set_33).
 contains(T,Dummy_Set_33).
 contains(T,Dummy_Set_34).
 contains(R,Dummy_Set_34)

step step_2 (T,R,Hash,PRNG,K,Dummy_S,Dummy_Id,H,Nr,Nt,M,N,V,U,Set_57,Set_58,Set_60,SID,S,Id) :=
 state_tag(T,R,Hash,PRNG,K,0,Dummy_S,Dummy_Id,H,Nr,Nt,M,N,V,U,Set_57,Set_58,Set_60,SID).
 iknows(start)
=[exists Id,S]=>
 state_tag(T,R,Hash,PRNG,K,1,S,Id,H,Nr,Nt,M,N,V,U,Set_57,Set_58,Set_60,SID).
 iknows(scrypt(K,pair(S,Id)))

step step_3 (T,R,Hash,PRNG,K,S,Id,Dummy_H,Dummy_Nr,Dummy_Nt,M,N,Dummy_V,U,Dummy_Set_57,Dummy_Set_58,Set_60,SID,Nr,Nt) :=
 state_tag(T,R,Hash,PRNG,K,1,S,Id,Dummy_H,Dummy_Nr,Dummy_Nt,M,N,Dummy_V,U,Dummy_Set_57,Dummy_Set_58,Set_60,SID).
 iknows(Nr)
=[exists Nt]=>
 state_tag(T,R,Hash,PRNG,K,4,S,Id,apply(Hash,Id),Nr,Nt,M,N,apply(PRNG,pair(S,pair(Nr,Nt))),U,Dummy_Set_57,Dummy_Set_58,Set_60,SID).
 iknows(pair(apply(PRNG,pair(S,pair(Nr,Nt))),pair(apply(Hash,Id),Nt))).
 contains(R,Dummy_Set_57).
 contains(T,Dummy_Set_57).
 contains(R,Dummy_Set_58).
 contains(T,Dummy_Set_58)

step step_4 (T,R,Hash,PRNG,K,Dummy_S,Id,H,Nr,Nt,Dummy_M,Dummy_N,V,Dummy_U,Set_57,Set_58,Dummy_Set_60,SID) :=
 state_tag(T,R,Hash,PRNG,K,4,Dummy_S,Id,H,Nr,Nt,Dummy_M,Dummy_N,V,Dummy_U,Set_57,Set_58,Dummy_Set_60,SID).
 iknows(N)
 =>
 state_tag(T,R,Hash,PRNG,K,6,xor(Dummy_S,apply(Hash,pair(Dummy_S,apply(PRNG,pair(Dummy_S,Nr))))),Id,H,Nr,Nt,apply(PRNG,pair(Dummy_S,Nr)),apply(PRNG,apply(PRNG,pair(Dummy_S,Nr))),V,apply(Hash,pair(Dummy_S,apply(PRNG,pair(Dummy_S,Nr)))),Set_57,Set_58,Dummy_Set_60,SID).
 secret(apply(PRNG,pair(Dummy_S,Nr)),interm,Dummy_Set_60).
 request(T,R,final_prng,apply(PRNG,apply(PRNG,pair(Dummy_S,Nr))),SID).
 contains(T,Dummy_Set_60).
 contains(R,Dummy_Set_60)


section properties:

property secrecy_of_interm (MGoal,ASGoal) :=
 [] ((secret(MGoal,interm,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_final_prng (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,final_prng,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,final_prng,MGoal))
     /\ ((request(A1Goal,A2Goal,final_prng,MGoal,SID1)
           /\ request(A1Goal,A2Goal,final_prng,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_interm (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,interm,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_final_prng (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,final_prng,MGoal,SID) &
 not(witness(A2Goal,A1Goal,final_prng,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_final_prng (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,final_prng,MGoal,SID1).
 request(A1Goal,A2Goal,final_prng,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilen2ceXL

section signature:

state_sensornodeB: agent * agent * hash_func * public_key * public_key * nat * text * text * text * text * text * text * text * nat -> fact
state_userA: agent * agent * hash_func * public_key * public_key * nat * text * text * text * text * text * text * text * set(agent) * nat -> fact


section types:

set_76: set
k1, b_a, a_b: protocol_id
Dummy_Set_30, Set_30, ASGoal: set(agent)
start, MGoal: message
UIDA, SIDB, TS, TK, Msg1, Msg, SK, Dummy_Msg1, Dummy_Msg, Dummy_SK, Dummy_TK, Dummy_TS, dummy_nonce, sidb, uida, sk, tk, r: text
State, 4, SID, 3, Dummy_State, 2, SID2, SID1, 1, 0: nat
Pub_a, Pub_b, pub_a, pub_b: public_key
H, h: hash_func
A, B, A2Goal, A1Goal, a, b, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(h).
 iknows(pub_a).
 iknows(pub_b).
 iknows(i).
 state_userA(a,b,h,pub_a,pub_b,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_76,3).
 state_sensornodeB(b,a,h,pub_a,pub_b,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,4)


section rules:

step step_0 (A,B,H,Pub_a,Pub_b,Dummy_TS,Dummy_TK,SK,SIDB,UIDA,Msg,Msg1,Set_30,SID,TS) :=
 state_userA(A,B,H,Pub_a,Pub_b,0,Dummy_TS,Dummy_TK,SK,SIDB,UIDA,Msg,Msg1,Set_30,SID).
 iknows(start)
=[exists TS]=>
 state_userA(A,B,H,Pub_a,Pub_b,1,TS,apply(h,UIDA),SK,SIDB,UIDA,Msg,Msg1,Set_30,SID).
 iknows(crypt(inv(Pub_a),pair(TS,pair(apply(h,UIDA),UIDA)))).
 witness(A,B,a_b,UIDA)

step step_1 (A,B,H,Pub_a,Pub_b,TS,TK,Dummy_SK,SIDB,UIDA,Msg,Msg1,Dummy_Set_30,SID,SK) :=
 state_userA(A,B,H,Pub_a,Pub_b,1,TS,TK,Dummy_SK,SIDB,UIDA,Msg,Msg1,Dummy_Set_30,SID).
 iknows(crypt(inv(Pub_b),SIDB))
=[exists SK]=>
 state_userA(A,B,H,Pub_a,Pub_b,2,TS,TK,SK,SIDB,UIDA,Msg,Msg1,Dummy_Set_30,SID).
 request(B,A,b_a,SIDB,SID).
 secret(SK,k1,Dummy_Set_30).
 iknows(SK).
 contains(A,Dummy_Set_30).
 contains(B,Dummy_Set_30)

step step_2 (A,B,H,Pub_a,Pub_b,TS,TK,SK,SIDB,UIDA,Dummy_Msg,Msg1,Set_30,SID,Msg) :=
 state_userA(A,B,H,Pub_a,Pub_b,2,TS,TK,SK,SIDB,UIDA,Dummy_Msg,Msg1,Set_30,SID).
 iknows(crypt(inv(Pub_b),SIDB))
=[exists Msg]=>
 state_userA(A,B,H,Pub_a,Pub_b,3,TS,TK,SK,SIDB,UIDA,Msg,Msg1,Set_30,SID).
 iknows(scrypt(SK,Msg))

step step_3 (B,A,H,Pub_a,Pub_b,UIDA,SIDB,Dummy_TS,Dummy_TK,Msg1,Msg,SK,SID,TS,TK) :=
 state_sensornodeB(B,A,H,Pub_a,Pub_b,0,UIDA,SIDB,Dummy_TS,Dummy_TK,Msg1,Msg,SK,SID).
 iknows(crypt(inv(Pub_a),pair(TS,pair(TK,UIDA))))
 =>
 state_sensornodeB(B,A,H,Pub_a,Pub_b,1,UIDA,SIDB,TS,TK,Msg1,Msg,SK,SID).
 request(A,B,a_b,UIDA,SID).
 iknows(crypt(inv(Pub_b),SIDB)).
 witness(B,A,b_a,SIDB)

step step_4 (B,A,H,Pub_a,Pub_b,UIDA,SIDB,TS,TK,Dummy_Msg1,Dummy_Msg,SK,SID,Msg1,Msg) :=
 state_sensornodeB(B,A,H,Pub_a,Pub_b,1,UIDA,SIDB,TS,TK,Dummy_Msg1,Dummy_Msg,SK,SID).
 iknows(scrypt(SK,Msg))
=[exists Msg1]=>
 state_sensornodeB(B,A,H,Pub_a,Pub_b,2,UIDA,SIDB,TS,TK,Msg1,Msg,SK,SID).
 iknows(scrypt(SK,Msg1))


section properties:

property secrecy_of_k1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,k1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_a_b (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,a_b,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,a_b,MGoal))
     /\ ((request(A1Goal,A2Goal,a_b,MGoal,SID1)
           /\ request(A1Goal,A2Goal,a_b,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_b_a (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,b_a,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,b_a,MGoal))
     /\ ((request(A1Goal,A2Goal,b_a,MGoal,SID1)
           /\ request(A1Goal,A2Goal,b_a,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_k1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,k1,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_a_b (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,a_b,MGoal,SID) &
 not(witness(A2Goal,A1Goal,a_b,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_a_b (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,a_b,MGoal,SID1).
 request(A1Goal,A2Goal,a_b,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_b_a (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,b_a,MGoal,SID) &
 not(witness(A2Goal,A1Goal,b_a,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_b_a (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,b_a,MGoal,SID1).
 request(A1Goal,A2Goal,b_a,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


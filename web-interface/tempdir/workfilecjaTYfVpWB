role pke_A( A,B :agent,
        Snd,Rcv:channel(dy),
        Kab:symmetric_key)
played_by A def=
local
  Na,Nb:text,
  State:nat
const
  auth_ab: protocol_id

init
State:=0
transition

1.State =0 /\Rcv(start)=|>
  State':=1/\Na':=new()
           /\Snd({A.Na'}_Kab)
            /\ witness(A,B,auth_as,Kab',na,Na')
2.State =1/\Rcv({Na,Nb}_Kab)
          /\Nb':=new()
          /\Snd({Nb}_KAB)
          /\request(A,B,nb,Nb')
end role


role pke_B( B,A:agent,
        snd,Rcv:channel(dy),
        Kab:symmetric_key)
played_by B def=
local
  Na,Nb:text,
  State:nat
const
  auth_ab: protocol_id

init
State:=0
transition
1.State =0 /\ Rcv({A.Na}_Kab)=|>
State':=1
           /\Nb':=new()
           /\Snd({Na'.Nb'}_Kab) 
           /\witness(B,A,nb,Nb')
2.State =1 /\ Rcv({Nb}_Kab)=|>
           /\ witness(B,A,auth_as,Kab')
           /\ request(B,A,na,Na)
end role



 role session( A,B:agent,
        
        Kab:symmetric_key)
 def=
local SA, RA,SB,RB: channel(dy)

composition

pke_A(A,B,Kab,SA,RA)
/\pke_B(B,A,Kab,SB,RB)
end role


role environment
def=
const a,b :agent,
      kab: symmetric_key,
      na,nb :protocol_id

intruder_knowledge={a,b}

composition
  session(a,b,Kab)
/\session(b,a,Kab)

end role


goal
authentication_on na
authentication_on nb

end goal
          

        
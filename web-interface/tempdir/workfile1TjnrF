role alice (Ui, S: agent,
SKas : symmetric_key,
% H is hash function
H,Mul: hash_func, 
Snd, Rcv: channel(dy))
played_by Ui
def=
local State : nat,
IDi, PWi, Ri, PWRi, D, E, N1, N2, Tu, Ts,P,Q,N: text,
CIDi, REGi, Yi, Xi, Zi, Di, Li: message,
Inc : hash_func
const alice_server, subs1, subs2, subs3, subs4: protocol_id
init State :=0
transition
1. State = 0 /\ Rcv(start) =|>
State' := 1  /\ Ri' := new() %line 16
/\ PWRi' := H(PWi.Ri')
/\ Snd({IDi.PWRi'}_SKas)
/\ secret({PWi}, subs1, Ui)
2. State = 1 /\ Rcv({REGi'.Yi'.N.E}_SKas) =|>
State' := 2 /\ N1' := new()
/\ Tu' := new()
/\ CIDi' := xor(REGi,PWRi)
/\ Di' := H(CIDi'.PWRi.Tu'.N1')
/\ Li' := exp((Di'.N1'),E) 
/\ Snd(IDi.Li'.Yi'.Tu')
/\ witness(Ui, S, alice_server, N1') 
/\secret({N1'},subs3,{Ui,S})
3. State = 2 /\ Rcv(Xi'.Zi'.Tu') =|>
State' := 3 /\ request(Ui,S,server_alice,N2)
end role
%******************************
role server (S, Ui: agent,
SKas : symmetric_key,
% H is hash function
H, Mul : hash_func,
Snd, Rcv: channel(dy) )
played_by S
def=
local State : nat,
IDi, PWi, Ri, PWRi, D, E, N1, N2, Tu, Ts, P,Q,N: text,
CIDi, REGi, Yi, Xi, Zi, Di, Li: message,
Inc : hash_func
const alice_server, server_alice, subs1, subs2, subs3, subs4: protocol_id
init State :=0
transition
1. State = 0 /\ Rcv(IDi.PWRi') =|>
State' := 1 /\ P' := new()
/\ Q' := new()
/\ E' := new()
/\ N' := Mul(p,q)
/\ D' := inv(E')
/\ CIDi' := H(IDi.D')
/\ REGi' := H(CIDi'.PWRi')
/\ Yi' := xor (CIDi',PWRi')
/\ secret({D'}, subs2, {S})
/\ Snd({REGi'.Yi'.N'.E'}_SKas)

2. State = 1 /\ Rcv(IDi.Li'.Yi'.Tu') =|>
State' := 2 /\ N2' := new()
/\ N1' := new()
/\ Ts' := new()
/\ Xi' := H(N2'.PWRi)
/\ Zi' := xor(N1', N2') % line 60
/\ witness(S, Ui, server_alice, N2') 
/\secret({N2'},subs4,{Ui,S})
/\ Snd(Xi'.Zi'.Ts')
end role

role session(Ui, S: agent,
SKas : symmetric_key,
H, Mul: hash_func)
def=
local SI, SJ, RI, RJ: channel (dy)
composition
alice(Ui, S, SKas, H, Mul, SI, RI)   %line71
/\ server(Ui, S, SKas, H, Mul, SJ, RJ)
end role
role environment()
def=
const ui, s: agent,
skas : symmetric_key,
h, mul: hash_func,
idi, pwi, ri, pwri, d, e, n1, n2, tu, ts, p,q,n, regi,yi: text,
alice_server_n1, server_alice_n2, subs1, subs2, subs3, subs4: protocol_id
intruder_knowledge = {ui, s, h, mul, regi, yi, n, e,idi,li,tu}
composition
session( ui, s, skas, h, mul)
/\ session(s, ui, skas, h, mul)
end role
goal
secrecy_of subs1
secrecy_of subs2
secrecy_of subs3
secrecy_of subs4
authentication_on alice_server_n1
authentication_on server_alice_n2
end goal
environment()

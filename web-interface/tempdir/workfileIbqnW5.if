%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileIbqnW5

section signature:

state_cert_agency2: agent * agent * agent * public_key * public_key * public_key * hash_func * nat * crypt(inv(public_key),pair(agent,public_key)) * crypt(inv(public_key),message) * crypt(inv(public_key),pair(message,pair(agent,pair(agent,agent)))) * nat -> fact
state_int_log_server_n: agent * agent * public_key * public_key * hash_func * nat * crypt(inv(public_key),pair(agent,public_key)) * crypt(inv(public_key),pair(message,pair(agent,pair(agent,agent)))) * nat -> fact
state_int_log_server1: agent * agent * agent * agent * public_key * public_key * public_key * public_key * hash_func * nat * crypt(inv(public_key),pair(agent,public_key)) * crypt(inv(public_key),pair(message,pair(agent,pair(agent,agent)))) * nat -> fact
state_cert_agency1: agent * agent * agent * agent * public_key * public_key * public_key * nat * crypt(inv(public_key),pair(agent,public_key)) * crypt(inv(public_key),pair(message,pair(agent,pair(agent,agent)))) * crypt(inv(public_key),crypt(inv(public_key),message)) * crypt(inv(public_key),message) * nat -> fact
state_domain: agent * agent * agent * agent * agent * public_key * public_key * nat * message * crypt(inv(public_key),pair(agent,public_key)) * crypt(inv(public_key),crypt(inv(public_key),crypt(inv(public_key),message))) * nat -> fact


section types:

ASGoal: set(agent)
H, h: hash_func
Dummy_Accept1, Accept1: crypt(inv(public_key),crypt(inv(public_key),message))
k4, k3, k5, k2, k1: protocol_id
Dummy_Accept2, Accept2: crypt(inv(public_key),crypt(inv(public_key),crypt(inv(public_key),message)))
Dummy_IRegReq, dummy_msg, MGoal, start, IRegReq: message
Kca2, Kils1, Kilsn, Kca1, dummy_pk, ka, kca1, kils1, kilsn, kca2, ki, Ka: public_key
RegReq, Dummy_RegReq: crypt(inv(public_key),pair(message,pair(agent,pair(agent,agent))))
Dummy_Accept, Dummy_SynAck, SynAck, Accept: crypt(inv(public_key),message)
CA2, CA1, ILS1, ILSN, dummy_agent, a, ca1, ils1, ilsn, ca2, c, A, C, i: agent
ARCert, Dummy_ARCert: crypt(inv(public_key),pair(agent,public_key))
7, 5, State, 13, 12, 11, 10, 6, SID, 4, Dummy_State, 3, 8, 9, 2, 1, 0: nat


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(ca1).
 iknows(ils1).
 iknows(ilsn).
 iknows(ca2).
 iknows(h).
 iknows(ki).
 iknows(i).
 state_domain(a,ca1,c,ca2,ils1,ka,kca1,0,dummy_msg,crypt(inv(dummy_pk),pair(dummy_agent,dummy_pk)),crypt(inv(dummy_pk),crypt(inv(dummy_pk),crypt(inv(dummy_pk),dummy_msg))),3).
 state_cert_agency1(ca1,ca2,a,ils1,kca1,kca2,ka,1,crypt(inv(dummy_pk),pair(dummy_agent,dummy_pk)),crypt(inv(dummy_pk),pair(dummy_msg,pair(dummy_agent,pair(dummy_agent,dummy_agent)))),crypt(inv(dummy_pk),crypt(inv(dummy_pk),dummy_msg)),crypt(inv(dummy_pk),dummy_msg),4).
 state_int_log_server1(ils1,ilsn,ca1,ca2,kils1,kilsn,kca1,kca2,h,2,crypt(inv(dummy_pk),pair(dummy_agent,dummy_pk)),crypt(inv(dummy_pk),pair(dummy_msg,pair(dummy_agent,pair(dummy_agent,dummy_agent)))),5).
 state_int_log_server_n(ilsn,ils1,kilsn,kils1,h,3,crypt(inv(dummy_pk),pair(dummy_agent,dummy_pk)),crypt(inv(dummy_pk),pair(dummy_msg,pair(dummy_agent,pair(dummy_agent,dummy_agent)))),6).
 state_cert_agency2(ca2,ca1,ils1,kca2,kils1,kilsn,h,7,crypt(inv(dummy_pk),pair(dummy_agent,dummy_pk)),crypt(inv(dummy_pk),dummy_msg),crypt(inv(dummy_pk),pair(dummy_msg,pair(dummy_agent,pair(dummy_agent,dummy_agent)))),7).
 state_cert_agency1(ca1,ca2,i,ils1,kca1,kca2,ki,1,crypt(inv(dummy_pk),pair(dummy_agent,dummy_pk)),crypt(inv(dummy_pk),pair(dummy_msg,pair(dummy_agent,pair(dummy_agent,dummy_agent)))),crypt(inv(dummy_pk),crypt(inv(dummy_pk),dummy_msg)),crypt(inv(dummy_pk),dummy_msg),10).
 state_int_log_server1(ils1,ilsn,ca1,ca2,kils1,kilsn,kca1,kca2,h,2,crypt(inv(dummy_pk),pair(dummy_agent,dummy_pk)),crypt(inv(dummy_pk),pair(dummy_msg,pair(dummy_agent,pair(dummy_agent,dummy_agent)))),11).
 state_int_log_server_n(ilsn,ils1,kilsn,kils1,h,3,crypt(inv(dummy_pk),pair(dummy_agent,dummy_pk)),crypt(inv(dummy_pk),pair(dummy_msg,pair(dummy_agent,pair(dummy_agent,dummy_agent)))),12).
 state_cert_agency2(ca2,ca1,ils1,kca2,kils1,kilsn,h,7,crypt(inv(dummy_pk),pair(dummy_agent,dummy_pk)),crypt(inv(dummy_pk),dummy_msg),crypt(inv(dummy_pk),pair(dummy_msg,pair(dummy_agent,pair(dummy_agent,dummy_agent)))),13)


section rules:

step step_0 (A,CA1,C,CA2,ILS1,Ka,Kca1,Dummy_IRegReq,Dummy_ARCert,Accept2,SID) :=
 state_domain(A,CA1,C,CA2,ILS1,Ka,Kca1,0,Dummy_IRegReq,Dummy_ARCert,Accept2,SID).
 iknows(start)
 =>
 state_domain(A,CA1,C,CA2,ILS1,Ka,Kca1,2,crypt(inv(Ka),pair(crypt(inv(Kca1),pair(A,Ka)),pair(CA1,pair(CA2,ILS1)))),crypt(inv(Kca1),pair(A,Ka)),Accept2,SID).
 iknows(crypt(inv(Ka),pair(crypt(inv(Kca1),pair(A,Ka)),pair(CA1,pair(CA2,ILS1)))))

step step_1 (A,CA1,C,CA2,ILS1,Ka,Kca1,IRegReq,ARCert,Dummy_Accept2,SID,Accept2) :=
 state_domain(A,CA1,C,CA2,ILS1,Ka,Kca1,9,IRegReq,ARCert,Dummy_Accept2,SID).
 iknows(Accept2)
 =>
 state_domain(A,CA1,C,CA2,ILS1,Ka,Kca1,11,IRegReq,ARCert,Accept2,SID).
 iknows(pair(ARCert,Accept2))

step step_2 (CA1,CA2,A,ILS1,Kca1,Kca2,Ka,ARCert,Dummy_RegReq,Accept1,SynAck,SID,RegReq) :=
 state_cert_agency1(CA1,CA2,A,ILS1,Kca1,Kca2,Ka,1,ARCert,Dummy_RegReq,Accept1,SynAck,SID).
 iknows(RegReq)
 =>
 state_cert_agency1(CA1,CA2,A,ILS1,Kca1,Kca2,Ka,3,ARCert,RegReq,Accept1,SynAck,SID).
 iknows(RegReq)

step step_3 (CA1,CA2,A,ILS1,Kca1,Kca2,Ka,ARCert,RegReq,Dummy_Accept1,Dummy_SynAck,SID,Accept1,SynAck) :=
 state_cert_agency1(CA1,CA2,A,ILS1,Kca1,Kca2,Ka,8,ARCert,RegReq,Dummy_Accept1,Dummy_SynAck,SID).
 iknows(crypt(inv(Kca2),pair(Accept1,SynAck)))
 =>
 state_cert_agency1(CA1,CA2,A,ILS1,Kca1,Kca2,Ka,10,ARCert,RegReq,Accept1,SynAck,SID).
 iknows(crypt(inv(Kca1),Accept1))

step step_4 (ILS1,ILSN,CA1,CA2,Kils1,Kilsn,Kca1,Kca2,H,ARCert,Dummy_RegReq,SID,RegReq) :=
 state_int_log_server1(ILS1,ILSN,CA1,CA2,Kils1,Kilsn,Kca1,Kca2,H,2,ARCert,Dummy_RegReq,SID).
 iknows(RegReq)
 =>
 state_int_log_server1(ILS1,ILSN,CA1,CA2,Kils1,Kilsn,Kca1,Kca2,H,4,ARCert,RegReq,SID).
 iknows(crypt(inv(Kils1),RegReq))

step step_5 (ILS1,ILSN,CA1,CA2,Kils1,Kilsn,Kca1,Kca2,H,ARCert,Dummy_RegReq,SID,RegReq) :=
 state_int_log_server1(ILS1,ILSN,CA1,CA2,Kils1,Kilsn,Kca1,Kca2,H,4,ARCert,Dummy_RegReq,SID).
 iknows(crypt(inv(Kilsn),apply(H,RegReq)))
 =>
 state_int_log_server1(ILS1,ILSN,CA1,CA2,Kils1,Kilsn,Kca1,Kca2,H,6,ARCert,RegReq,SID).
 iknows(crypt(inv(Kils1),apply(H,RegReq)))

step step_6 (ILS1,ILSN,CA1,CA2,Kils1,Kilsn,Kca1,Kca2,H,ARCert,Dummy_RegReq,SID,RegReq) :=
 state_int_log_server1(ILS1,ILSN,CA1,CA2,Kils1,Kilsn,Kca1,Kca2,H,6,ARCert,Dummy_RegReq,SID).
 iknows(crypt(inv(Kilsn),apply(H,RegReq)))
 =>
 state_int_log_server1(ILS1,ILSN,CA1,CA2,Kils1,Kilsn,Kca1,Kca2,H,8,ARCert,RegReq,SID).
 iknows(crypt(inv(Kils1),pair(crypt(inv(Kils1),apply(H,ARCert)),pair(RegReq,crypt(inv(Kilsn),apply(H,RegReq))))))

step step_7 (ILSN,ILS1,Kilsn,Kils1,H,ARCert,Dummy_RegReq,SID,RegReq) :=
 state_int_log_server_n(ILSN,ILS1,Kilsn,Kils1,H,3,ARCert,Dummy_RegReq,SID).
 iknows(crypt(inv(Kils1),RegReq))
 =>
 state_int_log_server_n(ILSN,ILS1,Kilsn,Kils1,H,5,ARCert,RegReq,SID).
 iknows(crypt(inv(Kilsn),apply(H,RegReq)))

step step_8 (ILSN,ILS1,Kilsn,Kils1,H,ARCert,Dummy_RegReq,SID,RegReq) :=
 state_int_log_server_n(ILSN,ILS1,Kilsn,Kils1,H,5,ARCert,Dummy_RegReq,SID).
 iknows(crypt(inv(Kils1),apply(H,RegReq)))
 =>
 state_int_log_server_n(ILSN,ILS1,Kilsn,Kils1,H,7,ARCert,RegReq,SID).
 iknows(crypt(inv(Kilsn),apply(H,RegReq)))

step step_9 (CA2,CA1,ILS1,Kca2,Kils1,Kilsn,H,ARCert,Dummy_Accept,Dummy_RegReq,SID,Accept,RegReq) :=
 state_cert_agency2(CA2,CA1,ILS1,Kca2,Kils1,Kilsn,H,7,ARCert,Dummy_Accept,Dummy_RegReq,SID).
 iknows(crypt(inv(Kils1),pair(Accept,pair(RegReq,crypt(inv(Kilsn),apply(H,RegReq))))))
 =>
 state_cert_agency2(CA2,CA1,ILS1,Kca2,Kils1,Kilsn,H,9,ARCert,Accept,RegReq,SID).
 iknows(pair(crypt(inv(Kca2),Accept),crypt(inv(Kca2),crypt(inv(Kilsn),apply(H,RegReq)))))


section properties:

property secrecy_of_k1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,k1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_k2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,k2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_k3 (MGoal,ASGoal) :=
 [] ((secret(MGoal,k3,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_k4 (MGoal,ASGoal) :=
 [] ((secret(MGoal,k4,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_k5 (MGoal,ASGoal) :=
 [] ((secret(MGoal,k5,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state secrecy_of_k1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,k1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_k2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,k2,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_k3 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,k3,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_k4 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,k4,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_k5 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,k5,ASGoal) &
 not(contains(i,ASGoal))


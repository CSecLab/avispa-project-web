%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfiletqyGz3hHId

section signature:

state_server: agent * agent * symmetric_key * hash_func * hash_func * hash_func * nat * text * text * text * text * text * text * text * text * text * message * message * message * message * hash_func * set(text) * set(agent) * set(message) * set(agent) * nat -> fact
state_alice: agent * agent * symmetric_key * hash_func * hash_func * hash_func * nat * text * text * text * text * text * text * text * text * text * message * message * message * message * hash_func * set(message) * set(agent) * nat -> fact


section types:

Set_67, Dummy_Set_67: set(text)
Set_69, Set_37, Dummy_Set_69, Dummy_Set_37: set(message)
State, 7, 3, 6, 2, 1, 0, 4, SID, Dummy_State: nat
h, gen, ren, Inc, H, GEN, REN, dummy_hash: hash_func
skas, SKas: symmetric_key
idi, fi, bi, ri, x, n1, n2, gi, d, pi, ti, ei, IDi, Ri, Fi, Bi, Ti, X, Ei, N1, N2, Dummy_N2, Dummy_Ei, Dummy_N1, Dummy_Ti, Dummy_Bi, Dummy_Ri, dummy_nonce: text
set_141, set_140, set_139, set_138, set_136, set_135, set_128, set_127, set_126, set_125, set_106, set_105: set
Set_70, Set_68, Set_38, Dummy_Set_70, Dummy_Set_68, Dummy_Set_38, ASGoal: set(agent)
D, Gi, Pi, SK, start, Dummy_SK, Dummy_Pi, Dummy_D, Dummy_Gi, dummy_msg, MGoal: message
ui, s, S, Ui, i: agent
server_alice, alice_server, subs1, subs2, subs3, alice_server_n1, server_alice_n2: protocol_id


section inits:

initial_state init1 := 
 iknows(start).
 iknows(ui).
 iknows(s).
 iknows(h).
 iknows(gen).
 iknows(ren).
 iknows(ti).
 iknows(pi).
 iknows(d).
 iknows(idi).
 iknows(i).
 state_alice(ui,s,skas,h,gen,ren,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_hash,set_105,set_106,3).
 state_server(ui,s,skas,h,gen,ren,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_hash,set_125,set_126,set_127,set_128,4).
 state_alice(s,ui,skas,h,gen,ren,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_hash,set_135,set_136,6).
 state_server(s,ui,skas,h,gen,ren,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_hash,set_138,set_139,set_140,set_141,7)


section rules:

step step_0 (Ui,S,SKas,H,GEN,REN,IDi,Ri,Bi,Fi,Ti,N1,N2,X,Ei,Gi,D,Pi,SK,Inc,Set_37,Set_38,SID) :=
 state_alice(Ui,S,SKas,H,GEN,REN,0,IDi,Ri,Bi,Fi,Ti,N1,N2,X,Ei,Gi,D,Pi,SK,Inc,Set_37,Set_38,SID).
 iknows(start)
 =>
 state_alice(Ui,S,SKas,H,GEN,REN,1,IDi,Ri,Bi,Fi,Ti,N1,N2,X,Ei,Gi,D,Pi,SK,Inc,Set_37,Set_38,SID).
 iknows(scrypt(SKas,pair(IDi,Fi)))

step step_1 (Ui,S,SKas,H,GEN,REN,IDi,Dummy_Ri,Dummy_Bi,Fi,Dummy_Ti,Dummy_N1,N2,X,Dummy_Ei,Dummy_Gi,Dummy_D,Pi,SK,Inc,Dummy_Set_37,Dummy_Set_38,SID,Bi,Ti,N1,Ei) :=
 state_alice(Ui,S,SKas,H,GEN,REN,1,IDi,Dummy_Ri,Dummy_Bi,Fi,Dummy_Ti,Dummy_N1,N2,X,Dummy_Ei,Dummy_Gi,Dummy_D,Pi,SK,Inc,Dummy_Set_37,Dummy_Set_38,SID).
 iknows(scrypt(SKas,pair(Ti,pair(Ei,Bi))))
=[exists N1]=>
 state_alice(Ui,S,SKas,H,GEN,REN,2,IDi,apply(H,pair(Fi,Dummy_Bi)),Bi,Fi,Ti,N1,N2,X,Ei,xor(apply(H,pair(Fi,Dummy_Bi)),Dummy_Ti),apply(H,pair(xor(apply(H,pair(Fi,Dummy_Bi)),Dummy_Ti),pair(apply(H,pair(Fi,Dummy_Bi)),N1))),Pi,SK,Inc,Dummy_Set_37,Dummy_Set_38,SID).
 iknows(pair(IDi,pair(Dummy_D,pair(Dummy_N1,Dummy_Ti)))).
 secret(Dummy_Set_37,subs1,Dummy_Set_38).
 contains(xor(apply(H,pair(Fi,Dummy_Bi)),Dummy_Ti),Dummy_Set_37).
 contains(Ui,Dummy_Set_38).
 contains(S,Dummy_Set_38)

step step_2 (Ui,S,SKas,H,GEN,REN,IDi,Ri,Bi,Fi,Ti,N1,Dummy_N2,X,Ei,Gi,D,Dummy_Pi,Dummy_SK,Inc,Set_37,Set_38,SID,N2,Pi) :=
 state_alice(Ui,S,SKas,H,GEN,REN,2,IDi,Ri,Bi,Fi,Ti,N1,Dummy_N2,X,Ei,Gi,D,Dummy_Pi,Dummy_SK,Inc,Set_37,Set_38,SID).
 iknows(pair(Pi,N2))
 =>
 state_alice(Ui,S,SKas,H,GEN,REN,3,IDi,Ri,Bi,Fi,Ti,N1,N2,X,Ei,Gi,D,Pi,apply(H,pair(Ri,pair(apply(H,pair(IDi,X)),pair(N1,Dummy_N2)))),Inc,Set_37,Set_38,SID)

step step_3 (S,Ui,SKas,H,GEN,REN,IDi,Dummy_Ri,Fi,Dummy_Bi,Dummy_Ti,X,Dummy_Ei,N1,N2,D,Gi,Pi,SK,Inc,Dummy_Set_67,Dummy_Set_68,Set_69,Set_70,SID) :=
 state_server(S,Ui,SKas,H,GEN,REN,0,IDi,Dummy_Ri,Fi,Dummy_Bi,Dummy_Ti,X,Dummy_Ei,N1,N2,D,Gi,Pi,SK,Inc,Dummy_Set_67,Dummy_Set_68,Set_69,Set_70,SID).
 iknows(pair(IDi,Fi))
 =>
 state_server(S,Ui,SKas,H,GEN,REN,1,IDi,apply(H,Fi),Fi,apply(H,Fi),xor(apply(H,pair(IDi,X)),apply(H,Fi)),X,apply(H,pair(IDi,apply(H,Fi))),N1,N2,D,Gi,Pi,SK,Inc,Dummy_Set_67,Dummy_Set_68,Set_69,Set_70,SID).
 secret(Dummy_Set_67,subs2,Dummy_Set_68).
 iknows(scrypt(SKas,pair(xor(apply(H,pair(IDi,X)),apply(H,Fi)),pair(apply(H,pair(IDi,apply(H,Fi))),apply(H,Fi))))).
 contains(X,Dummy_Set_67).
 contains(S,Dummy_Set_68)

step step_4 (S,Ui,SKas,H,GEN,REN,IDi,Ri,Fi,Bi,Ti,X,Ei,N1,Dummy_N2,D,Gi,Dummy_Pi,Dummy_SK,Inc,Set_67,Set_68,Dummy_Set_69,Dummy_Set_70,SID,N2) :=
 state_server(S,Ui,SKas,H,GEN,REN,1,IDi,Ri,Fi,Bi,Ti,X,Ei,N1,Dummy_N2,D,Gi,Dummy_Pi,Dummy_SK,Inc,Set_67,Set_68,Dummy_Set_69,Dummy_Set_70,SID).
 iknows(pair(IDi,pair(D,pair(N1,Ti))))
=[exists N2]=>
 state_server(S,Ui,SKas,H,GEN,REN,2,IDi,Ri,Fi,Bi,Ti,X,Ei,N1,N2,D,Gi,apply(H,pair(Dummy_SK,pair(apply(H,pair(IDi,X)),N2))),apply(H,pair(Ri,pair(apply(H,pair(IDi,X)),pair(N1,N2)))),Inc,Set_67,Set_68,Dummy_Set_69,Dummy_Set_70,SID).
 secret(Dummy_Set_69,subs3,Dummy_Set_70).
 iknows(pair(apply(H,pair(Dummy_SK,pair(apply(H,pair(IDi,X)),N2))),N2)).
 contains(apply(H,pair(Ri,pair(apply(H,pair(IDi,X)),pair(N1,N2)))),Dummy_Set_69).
 contains(Ui,Dummy_Set_70).
 contains(S,Dummy_Set_70)


section properties:

property secrecy_of_subs1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,subs1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_subs2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,subs2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_subs3 (MGoal,ASGoal) :=
 [] ((secret(MGoal,subs3,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state secrecy_of_subs1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,subs1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_subs2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,subs2,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_subs3 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,subs3,ASGoal) &
 not(contains(i,ASGoal))


%% PROTOCOL: Srinu Key Exchange
%% VARIANT: basic
%% PURPOSE: Encrypted key exchange
%% REFERENCE:
%% url{http://citeseer.ist.psu.edu/bellovin92encrypted.html}
%% MODELER:
%% begin{itemize}
%%   item Haykal Tej, Siemens CT IC 3, 2003
%%   item Sebastian M{"o}dersheim, ETH Z{"u}rich, December 2003
%% end{itemize}
%%
%% ALICE_BOB:
%% begin{verbatim}
%% A -> B : {Ea}_Kab        |    Key exchange part
%% B -> A : {{K}_Ea}_Kab    |
%% A -> B : {Ca}_K          |
%% B -> A : {Ca,Cb}_K       |    Challenge/Response
%% A -> B : {Cb}_K          |    Authentication part
%% end{verbatim}
%%
%% LIMITATIONS: None
%%
%% PROBLEMS: 3
%%
%% CLASSIFICATION: G2 G12
%%
%% ATTACKS: 
%% begin{verbatim}
%% i -> (a,3): start
%% (a,3) -> i: {Ea(1)}_kab
%% i -> (a,6): {Ea(1)}_kab
%% (a,6) -> i: {{K(2)}_Ea(1)}_kab 
%% i -> (a,3): {{K(2)}_Ea(1)}_kab
%% (a,3) -> i: {Na(3)}_K(2) witness(a,b,na,Na(3))
%% i -> (a,6): {Na(3)}_K(2)
%% (a,6) -> i: {Na(3),Nb(4)}_K(2) witness(a,b,nb,Nb(4))
%% i -> (a,3): {Na(3),Nb(4)}_K(2)
%% (a,3) -> i: {Nb(4)}_K(2)  request(a,b,nb,Nb(4))
%% end{verbatim}
%%
%% Parallel session attack, man-in-the-middle
%% between A as initiator and A as responder, attacker
%% masquerades as B, but no secret nonces are exposed.
%%
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%HLPSL:

role alice (Ui,Sj: agent,
               SKuisj: symmetric_key,
	       %H is the one-way hash function
               %BH is the Biohashing function
               H : hash_func,
		BH: hash_func,
               Snd,Rcv: channel(dy))
played_by Ui
def=

  local State   : nat,
	IDi, PWi, Ni, BIOi, X, Tr, PSK :text,
	SIDj, N1, N2:text,
	Xi,Yi, Zi, W1,W2:text

  const alice_bob_n1, bob_alice_n2, alice_bob_ni, alice_bob_tr,
	subs1,subs2,subs3,subs4,subs5: protocol_id
  init  State := 0
  transition
% User registration phase
   1. State = 0  /\ Rcv(start) =|> 
      State' := 1   /\ Ni' := new()
% Send the registration request message to Sj
      /\ W1':= H(PWi.Ni')
	  /\ W2':= H(xor(IDi,Ni'))
      /\ secret({PWi,BIOi,Ni'}, subs2, Ui)
      /\ secret({IDi}, subs3, {Ui, Sj})
      /\ Snd({IDi.W1'.W2'}_SKuisj)
% Ui has freshly generated the value Ni for Sj
      /\ witness(Ui, Sj, alice_bob_ni, Ni')
% Receive the registration acknowledgement message from Sj
   2. State = 1 /\ Rcv({xor(H(H(IDi.X.Tr')),H(PWi.Ni')).xor(H(PSK),H(xor(IDi,Ni'))).xor(PSK,H(IDi.X.Tr')).H}_SKuisj) =|> 
% Login phase
      State' := 2 /\secret({X,PSK,Tr'},Subs1,Sj)
      /\ N1' := new()
      /\ secret({N1'},subs4,Ui)
%send the login REQUEST message  to Sj
      /\ Snd(xor(PSK,H(IDi.X.Tr')).xor(H(PSK),N1').xor(IDi,H(N1'.H(H(IDi.X.Tr')))).H(IDi.N1'.H(H(IDi.X.Tr))))
% Ui has freshly generated the value N1 for Sj
      /\ witness(Ui,Sj,alice_bob_n1,N1')
% Authentication phase
% Receive the authentication request message  from Sj
   3. State = 2 /\ Rcv(SIDj.xor(N2',H(IDi.N1')).H(H(IDi.SIDj.H(H(IDi.X.Tr')).N1'.N2').N1'.N2')) =|>
% Send the message  to Sj   
      State' := 3 /\ Snd(H(H(IDi.SIDj.H(H(IDi.X.Tr')).N1'.N2').N1'.N2'))
% Ui's acceptance of the value N2 generated for Ui by Sj
      /\ request(Sj,Ui,bob_alice_n2,N2')
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role bob (Ui,Sj: agent,
               SKuisj: symmetric_key,
	       %H is the one-way hash function
               %BH is the Biohashing function
               H : hash_func,
		BH: hash_func,
               Snd,Rcv: channel(dy))
% played_by the responder: the server Sj
played_by Sj
def=

  local State   : nat,
	IDi, PWi, Ni, BIOi, X, Tr, PSK:text,
	SIDj,N1,N2:text
	
  const alice_bob_n1, bob_alice_n2, alice_bob_ni, alice_bob_tr,	subs1,subs2,subs3,subs4, subs5: protocol_id

  init  State := 0
  transition
% User registration phase
% Receive the registration request message  from Ui
   1. State = 0 /\ Rcv({IDi.H(PWi.Ni').H(xor(IDi,Ni'))}_SKuisj) =|> 
      State' := 1 /\ request(Ui,Sj,alice_bob_ni,Ni')
	  /\ Tr':=new()
      /\ secret({X,PSK,Tr},subs1,Sj)
      /\ secret({PWi,BIOi,Ni'},subs2,Ui)
      /\ secret({IDi},subs3,{Ui,Sj})
% Send the registration acknowledgement message to Ui 
      /\ Snd({xor(H(H(IDi.X.Tr)),H(PWi.Ni')).xor(H(PSK),H(xor(IDi,Ni'))).xor(PSK,H(IDi.X.Tr)).H}_SKuisj)
%Sj has freshly generated the value Tr for Ui
	  /\ witness(Sj,Ui,bob_alice_tr,Tr')
	  
% Login phase
% Receive the login request message  from Ui
   2. State = 1  /\ Rcv(xor(PSK,H(IDi.X.Tr)).xor(H(PSK),N1').xor(IDi,H(N1'.H(H(IDi.X.Tr)))).H(IDi.N1'.H(H(IDi.X.Tr)))) =|> 

% Authentication phase
      State' := 2 /\ N2' := new()
	  /\ secret ({N2'},subs5,Sj)
% Send the authentication request message to Ui
      /\ Snd(SIDj.xor(N2',H(IDi.N1')).H(H(IDi.SIDj.H(H(IDi.X.Tr)).N1'.N2').N1'.N2'))

% Sj has freshly generated the value N2 for Ui
      /\ witness(Sj,Ui,bob_alice_n2,N2')
% Receive the message  to from Ui
3. State=2 /\Rcv(H(H(IDi.SIDj.H(H(IDi.X.Tr)).N1'.N2').N1'.N2')) =|>
%Sj's acceptance of the value N1 generated for Sj by Ui
State' :=3  /\ request(Ui,Sj,alice_bob_n1,N1')

end role 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role session(Ui,Sj: agent,
	     SKuisj: symmetric_key,
	     H: hash_func,
	     BH: hash_func)
def=

  local SI, SJ, RI, RJ: channel (dy)

  composition
     alice(Ui,Sj,SKuisj,H,BH,SI,RI)
  /\ bob(Ui,Sj,SKuisj,H,BH,SJ,RJ)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


role environment()
def=

  const ui, sj   : agent,
        skuisj    : symmetric_key,
        h : hash_func, bh : hash_func, 
		pwi,bioi,x,idi,sidj,n1,n2: text,
        alice_bob_n1, bob_alice_n2,
        subs1,subs2, subs3 : protocol_id

  intruder_knowledge={ui,sj,bh,h}

  composition
      session(ui,sj,skuisj,h,bh)
   /\ session(ui,sj,skuisj,h,bh)
 
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal

 % Confidentiality (G12)
 secrecy_of subs1
 secrecy_of subs2
 secrecy_of subs3
 secrecy_of subs4
 secrecy_of subs5
 % Message authentication (G2)
 % EKE_Init authenticates EKE_Resp on nb
 authentication_on alice_bob_n1

 % Message authentication (G2)
 % EKE_Resp authenticates EKE_Init on na
 authentication_on bob_alice_tr
  authentication_on bob_alice_n2

end goal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

environment()
       


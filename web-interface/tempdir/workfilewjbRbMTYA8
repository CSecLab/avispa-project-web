
role role_P(P:agent,W:agent,K:symmetric_key,H:function,SND,RCV:channel(dy))
played_by P
def=
	local
		State:nat,Nr:text,Nbr:text,Nw:text,Seq:text
	init
		State := 0
	transition
		1. State=0 /\ RCV(start) =|> State':=1 /\ Nr':=new() /\ witness(P,W,auth_2,Nr') /\ SND(Nr'.P.{H(Nr'.P)}_K)
		2. State=1 /\ RCV({Nbr'.Nw'.W}_K.{H(Nr.Nw'.W)}_K) =|> State':=2 /\ secret(Nw',sec_3,{}) /\ Seq':=new() /\ SND(Seq'.{H(Nw'.Seq')}_H(K.Nw'))
end role

role role_W(W:agent,P:agent,K:symmetric_key,H:function,SND,RCV:channel(dy))
played_by W
def=
	local
		State:nat,Nr:text,Nbr:text,Nw:text,Seq:text
	init
		State := 0
	transition
		1. State=0 /\ RCV(Nr'.P.{H(Nr'.P)}_K) =|> State':=1 /\ Nw':=new() /\ secret(Nw',sec_3,{}) /\ Nbr':=new() /\ SND({Nbr'.Nw'.W}_K.{H(Nr'.Nw'.W)}_K)
		3. State=1 /\ RCV(Seq'.{H(Nw.Seq')}_H(K.Nw)) =|> State':=2 /\ secret(Nw',sec_3,{})
end role

role session1(W:agent,P:agent,K:symmetric_key,H:function)
def=
	local
		SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_W(W,P,K,H,SND2,RCV2) /\ role_P(P,W,K,H,SND1,RCV1)
end role

role environment()
def=
	const
		hash_0:function,const_1:symmetric_key,programmer:agent,wisp:agent,h:function,auth_1:protocol_id,auth_2:protocol_id,sec_3:protocol_id
	intruder_knowledge = {}
	composition
		session1(wisp,programmer,const_1,h)
end role

goal
	authentication_on auth_1
	authentication_on auth_2
	secrecy_of sec_3
	weak_authentication_on auth1
                weak_authentication_on auth2
 
end goal

environment()

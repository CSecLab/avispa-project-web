%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileJj0tVIlYZi

section signature:

state_tag: agent * agent * hash_func * symmetric_key * nat * text * text * message * message * message * nat -> fact
state_reader: agent * agent * hash_func * symmetric_key * nat * text * text * message * message * message * set(agent) * nat -> fact


section types:

sec, inter: protocol_id
set_77, set_64: set
Nr, Nt, Dummy_Nt, Dummy_Nr, dummy_nonce: text
5, 4, 3, State, 7, 6, SID, 2, Dummy_State, 1, 0, SID2, SID1: nat
Dummy_Set_22, Set_22, ASGoal: set(agent)
M, N, V, Dummy_N, Dummy_M, start, dummy_msg, MGoal: message
H, h: hash_func
S, s: symmetric_key
T, R, A2Goal, A1Goal, t, r, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(t).
 iknows(r).
 iknows(h).
 iknows(i).
 state_reader(r,t,h,s,0,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,set_64,3).
 state_tag(t,r,h,s,3,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,4).
 state_reader(r,t,h,s,0,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,set_77,6).
 state_tag(t,r,h,s,3,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,7)


section rules:

step step_0 (R,T,H,S,Dummy_Nr,Nt,V,M,N,Set_22,SID,Nr) :=
 state_reader(R,T,H,S,0,Dummy_Nr,Nt,V,M,N,Set_22,SID).
 iknows(start)
=[exists Nr]=>
 state_reader(R,T,H,S,1,Nr,Nt,V,M,N,Set_22,SID).
 iknows(Nr)

step step_1 (R,T,H,S,Nr,Dummy_Nt,V,Dummy_M,Dummy_N,Dummy_Set_22,SID,Nt) :=
 state_reader(R,T,H,S,1,Nr,Dummy_Nt,V,Dummy_M,Dummy_N,Dummy_Set_22,SID).
 iknows(Nt)
 =>
 state_reader(R,T,H,S,2,Nr,Nt,V,apply(H,pair(S,pair(Nr,Nt))),apply(H,apply(H,pair(S,pair(Nr,Nt)))),Dummy_Set_22,SID).
 iknows(apply(H,apply(H,pair(S,pair(Nr,Nt))))).
 secret(apply(H,pair(S,pair(Nr,Nt))),inter,Dummy_Set_22).
 witness(R,T,sec,apply(H,pair(S,pair(Nr,Nt)))).
 contains(T,Dummy_Set_22).
 contains(R,Dummy_Set_22)

step step_2 (T,R,H,S,Dummy_Nr,Dummy_Nt,Dummy_M,Dummy_N,V,SID,Nr,Nt) :=
 state_tag(T,R,H,S,3,Dummy_Nr,Dummy_Nt,Dummy_M,Dummy_N,V,SID).
 iknows(Nr)
=[exists Nt]=>
 state_tag(T,R,H,S,4,Nr,Nt,apply(H,pair(S,pair(Nr,Nt))),apply(H,apply(H,pair(S,pair(Nr,Nt)))),V,SID).
 iknows(Nt)

step step_3 (T,R,H,S,Nr,Nt,M,N,V,SID) :=
 state_tag(T,R,H,S,4,Nr,Nt,M,N,V,SID).
 iknows(N)
 =>
 state_tag(T,R,H,S,5,Nr,Nt,M,N,V,SID).
 request(T,R,sec,M,SID)


section properties:

property secrecy_of_inter (MGoal,ASGoal) :=
 [] ((secret(MGoal,inter,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_sec (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,sec,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,sec,MGoal))
     /\ ((request(A1Goal,A2Goal,sec,MGoal,SID1)
           /\ request(A1Goal,A2Goal,sec,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_inter (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,inter,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_sec (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,sec,MGoal,SID) &
 not(witness(A2Goal,A1Goal,sec,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_sec (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,sec,MGoal,SID1).
 request(A1Goal,A2Goal,sec,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


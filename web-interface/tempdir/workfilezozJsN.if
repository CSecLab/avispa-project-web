%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilezozJsN

section signature:

state_bob: agent * agent * hash_func * hash_func * hash_func * hash_func * hash_func * hash_func * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * nat * public_key * public_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * text * text * text * text * message * message * message * message * message * message * message * message * set * nat -> fact
state_alice: agent * agent * hash_func * hash_func * hash_func * hash_func * hash_func * hash_func * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * nat * public_key * public_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * text * text * text * text * message * message * message * message * message * message * message * message * set * nat -> fact


section types:

ASGoal: set(agent)
Ra1, Ra2, Rb1, Rb2, Dummy_Rb2, Dummy_Rb1, Dummy_Ra2, Dummy_Ra1, dummy_nonce: text
CertA, CertB, Tb1, Tb2, Ta1, Ta2, Sb, Sa, Dummy_CertA, Dummy_Sb, Dummy_Tb2, Dummy_Tb1, Dummy_CertB, Dummy_Sa, Dummy_Ta2, Dummy_Ta1, start, dummy_msg, MGoal: message
Ya, Yb, dummy_pk: public_key
3, 10, 6, State, 4, SID, 2, 1, Dummy_State, 0, SID2, SID1: nat
Xb, K1, K2, K3, K4, K5, K6, K7, K8, K9, Kb1, Kb2, Ka1, Ka2, P, Dummy_K9, Dummy_K8, Dummy_K7, Dummy_K6, Dummy_K5, Dummy_K4, Dummy_K3, Dummy_K2, Dummy_K1, dummy_sk, Xa, kb1, kb2, ka1, ka2, ki1, ki2, p: symmetric_key
Minus, Union, Pred, Succ, Expr, Ebilinear, minus, union, pred, succ, expr, ebilinear: hash_func
B, A, b, a, A2Goal, A1Goal, i: agent
key_id2, pxa, key_id1, pxb: protocol_id
set_179, set_178, set_177, set_175, Dummy_Set_101, set_168, Dummy_Set_54, Set_54, set_141, Set_101: set


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(ki1).
 iknows(ki2).
 iknows(minus).
 iknows(union).
 iknows(pred).
 iknows(succ).
 iknows(expr).
 iknows(ebilinear).
 iknows(p).
 iknows(i).
 state_alice(a,b,minus,union,pred,succ,expr,ebilinear,ka1,ka2,kb1,kb2,p,0,dummy_pk,dummy_pk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_141,3).
 state_bob(b,a,minus,union,pred,succ,expr,ebilinear,ka1,ka2,kb1,kb2,p,1,dummy_pk,dummy_pk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_168,4).
 state_alice(a,i,minus,union,pred,succ,expr,ebilinear,ka1,ka2,ki1,ki2,p,0,dummy_pk,dummy_pk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_175,6).
 state_bob(b,i,minus,union,pred,succ,expr,ebilinear,ki1,ki2,kb1,kb2,p,1,dummy_pk,dummy_pk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_179,10)


section rules:

step step_0 (A,B,Minus,Union,Pred,Succ,Expr,Ebilinear,Ka1,Ka2,Kb1,Kb2,P,Ya,Yb,Xa,K1,K2,K3,K4,K5,K6,K7,K8,K9,Dummy_Ra1,Dummy_Ra2,Rb1,Rb2,CertA,CertB,Dummy_Ta1,Dummy_Ta2,Tb1,Tb2,Dummy_Sa,Sb,Set_54,SID,Ra1,Ra2) :=
 state_alice(A,B,Minus,Union,Pred,Succ,Expr,Ebilinear,Ka1,Ka2,Kb1,Kb2,P,0,Ya,Yb,Xa,K1,K2,K3,K4,K5,K6,K7,K8,K9,Dummy_Ra1,Dummy_Ra2,Rb1,Rb2,CertA,CertB,Dummy_Ta1,Dummy_Ta2,Tb1,Tb2,Dummy_Sa,Sb,Set_54,SID).
 iknows(start)
=[exists Ra2,Ra1]=>
 state_alice(A,B,Minus,Union,Pred,Succ,Expr,Ebilinear,Ka1,Ka2,Kb1,Kb2,P,2,Ya,Yb,Xa,K1,K2,K3,K4,K5,K6,K7,K8,K9,Ra1,Ra2,Rb1,Rb2,CertA,CertB,apply(Pred,pair(Dummy_Ra1,P)),apply(Pred,pair(Dummy_Ra2,P)),Tb1,Tb2,apply(Minus,pair(apply(Pred,pair(apply(Pred,pair(Ka1,Ka2)),Xa)),apply(Union,pair(apply(Pred,pair(Dummy_Ra1,Ka1)),apply(Pred,pair(Dummy_Ra2,Ka2)))))),Sb,Set_54,SID).
 iknows(pair(Dummy_Ta1,pair(Dummy_Ta2,pair(Dummy_Sa,CertA))))

step step_1 (A,B,Minus,Union,Pred,Succ,Expr,Ebilinear,Ka1,Ka2,Kb1,Kb2,P,Ya,Yb,Xa,Dummy_K1,Dummy_K2,Dummy_K3,Dummy_K4,Dummy_K5,Dummy_K6,Dummy_K7,Dummy_K8,Dummy_K9,Ra1,Ra2,Rb1,Rb2,CertA,Dummy_CertB,Ta1,Ta2,Dummy_Tb1,Dummy_Tb2,Sa,Dummy_Sb,Dummy_Set_54,SID,CertB,Tb1,Tb2) :=
 state_alice(A,B,Minus,Union,Pred,Succ,Expr,Ebilinear,Ka1,Ka2,Kb1,Kb2,P,2,Ya,Yb,Xa,Dummy_K1,Dummy_K2,Dummy_K3,Dummy_K4,Dummy_K5,Dummy_K6,Dummy_K7,Dummy_K8,Dummy_K9,Ra1,Ra2,Rb1,Rb2,CertA,Dummy_CertB,Ta1,Ta2,Dummy_Tb1,Dummy_Tb2,Sa,Dummy_Sb,Dummy_Set_54,SID).
 iknows(pair(Tb1,pair(Tb2,pair(apply(minus,pair(apply(Pred,pair(apply(Pred,pair(Kb1,Kb2)),Yb)),apply(Union,pair(apply(Pred,pair(Rb1,Kb1)),apply(Pred,pair(Rb2,Kb2)))))),CertB))))
 =>
 state_alice(A,B,Minus,Union,Pred,Succ,Expr,Ebilinear,Ka1,Ka2,Kb1,Kb2,P,4,Ya,Yb,Xa,apply(Expr,pair(apply(Ebilinear,pair(Dummy_Tb1,Dummy_Tb1)),apply(Pred,pair(Ra1,Ra1)))),apply(Expr,pair(apply(Ebilinear,pair(Dummy_Tb1,Dummy_Tb2)),apply(Pred,pair(Ra1,Ra1)))),apply(Expr,pair(apply(Ebilinear,pair(Dummy_Tb2,Dummy_Tb2)),apply(Pred,pair(Ra1,Ra1)))),apply(Expr,pair(apply(Ebilinear,pair(Dummy_Tb1,Dummy_Tb1)),apply(Pred,pair(Ra1,Ra2)))),apply(Expr,pair(apply(Ebilinear,pair(Dummy_Tb1,Dummy_Tb2)),apply(Pred,pair(Ra1,Ra2)))),apply(Expr,pair(apply(Ebilinear,pair(Dummy_Tb2,Dummy_Tb2)),apply(Pred,pair(Ra1,Ra2)))),apply(Expr,pair(apply(Ebilinear,pair(Dummy_Tb1,Dummy_Tb1)),apply(Pred,pair(Ra2,Ra2)))),apply(Expr,pair(apply(Ebilinear,pair(Dummy_Tb1,Dummy_Tb2)),apply(Pred,pair(Ra2,Ra2)))),apply(Expr,pair(apply(Ebilinear,pair(Dummy_Tb2,Dummy_Tb2)),apply(Pred,pair(Ra2,Ra2)))),Ra1,Ra2,Rb1,Rb2,CertA,CertB,Ta1,Ta2,Tb1,Tb2,Sa,apply(minus,pair(apply(Pred,pair(apply(Pred,pair(Kb1,Kb2)),Yb)),apply(Union,pair(apply(Pred,pair(Rb1,Kb1)),apply(Pred,pair(Rb2,Kb2)))))),Dummy_Set_54,SID).
 secret(Xa,key_id1,Dummy_Set_54).
 request(A,B,pxa,Xa,SID).
 contains(a,Dummy_Set_54).
 contains(b,Dummy_Set_54)

step step_2 (B,A,Minus,Union,Pred,Succ,Expr,Ebilinear,Kb1,Kb2,Ka1,Ka2,P,Ya,Yb,Xb,Dummy_K1,Dummy_K2,Dummy_K3,Dummy_K4,Dummy_K5,Dummy_K6,Dummy_K7,Dummy_K8,Dummy_K9,Ra1,Ra2,Dummy_Rb1,Dummy_Rb2,Dummy_CertA,CertB,Dummy_Tb1,Tb2,Dummy_Ta1,Dummy_Ta2,Dummy_Sb,Dummy_Sa,Dummy_Set_101,SID,Rb1,Rb2,CertA,Ta1) :=
 state_bob(B,A,Minus,Union,Pred,Succ,Expr,Ebilinear,Kb1,Kb2,Ka1,Ka2,P,1,Ya,Yb,Xb,Dummy_K1,Dummy_K2,Dummy_K3,Dummy_K4,Dummy_K5,Dummy_K6,Dummy_K7,Dummy_K8,Dummy_K9,Ra1,Ra2,Dummy_Rb1,Dummy_Rb2,Dummy_CertA,CertB,Dummy_Tb1,Tb2,Dummy_Ta1,Dummy_Ta2,Dummy_Sb,Dummy_Sa,Dummy_Set_101,SID).
 iknows(pair(Ta1,pair(Ta2,pair(apply(Minus,pair(apply(Pred,pair(apply(Pred,pair(Ka1,Ka2)),Ya)),apply(Union,pair(apply(Pred,pair(Ra1,Ka1)),apply(Pred,pair(Ra2,Ka2)))))),CertA))))
=[exists Rb2,Rb1]=>
 state_bob(B,A,Minus,Union,Pred,Succ,Expr,Ebilinear,Kb1,Kb2,Ka1,Ka2,P,3,Ya,Yb,Xb,apply(Expr,pair(apply(Ebilinear,pair(Dummy_Ta1,Dummy_Ta1)),apply(Pred,pair(Dummy_Rb1,Dummy_Rb1)))),apply(Expr,pair(apply(Ebilinear,pair(Dummy_Ta1,Dummy_Ta1)),apply(Pred,pair(Dummy_Rb1,Dummy_Rb2)))),apply(Expr,pair(apply(Ebilinear,pair(Dummy_Ta1,Dummy_Ta1)),apply(Pred,pair(Dummy_Rb2,Dummy_Rb2)))),apply(Expr,pair(apply(Ebilinear,pair(Dummy_Ta1,Dummy_Ta2)),apply(Pred,pair(Dummy_Rb1,Dummy_Rb1)))),apply(Expr,pair(apply(Ebilinear,pair(Dummy_Ta1,Dummy_Ta2)),apply(Pred,pair(Dummy_Rb1,Dummy_Rb2)))),apply(Expr,pair(apply(Ebilinear,pair(Dummy_Ta1,Dummy_Ta2)),apply(Pred,pair(Dummy_Rb2,Dummy_Rb2)))),apply(Expr,pair(apply(Ebilinear,pair(Dummy_Ta2,Dummy_Ta2)),apply(Pred,pair(Dummy_Rb1,Dummy_Rb1)))),apply(Expr,pair(apply(Ebilinear,pair(Dummy_Ta2,Dummy_Ta2)),apply(Pred,pair(Dummy_Rb1,Dummy_Rb2)))),apply(Expr,pair(apply(Ebilinear,pair(Dummy_Ta2,Dummy_Ta2)),apply(Pred,pair(Dummy_Rb2,Dummy_Rb2)))),Ra1,Ra2,Rb1,Rb2,CertA,CertB,apply(Pred,pair(Dummy_Rb1,P)),Tb2,Ta1,apply(Pred,pair(Dummy_Rb2,P)),apply(minus,pair(apply(Pred,pair(apply(Pred,pair(Kb1,Kb2)),Xb)),apply(Union,pair(apply(Pred,pair(Dummy_Rb1,Kb1)),apply(Pred,pair(Dummy_Rb2,Kb2)))))),apply(Minus,pair(apply(Pred,pair(apply(Pred,pair(Ka1,Ka2)),Ya)),apply(Union,pair(apply(Pred,pair(Ra1,Ka1)),apply(Pred,pair(Ra2,Ka2)))))),Dummy_Set_101,SID).
 iknows(pair(Dummy_Tb1,pair(Tb2,pair(Dummy_Sb,CertB)))).
 secret(Xb,key_id2,Dummy_Set_101).
 request(B,A,pxb,Xb,SID).
 contains(b,Dummy_Set_101).
 contains(a,Dummy_Set_101)


section properties:

property secrecy_of_key_id1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,key_id1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_key_id2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,key_id2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_pxa (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,pxa,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,pxa,MGoal))
     /\ ((request(A1Goal,A2Goal,pxa,MGoal,SID1)
           /\ request(A1Goal,A2Goal,pxa,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_pxb (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,pxb,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,pxb,MGoal))
     /\ ((request(A1Goal,A2Goal,pxb,MGoal,SID1)
           /\ request(A1Goal,A2Goal,pxb,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_key_id1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,key_id1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_key_id2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,key_id2,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_pxa (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,pxa,MGoal,SID) &
 not(witness(A2Goal,A1Goal,pxa,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_pxa (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,pxa,MGoal,SID1).
 request(A1Goal,A2Goal,pxa,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_pxb (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,pxb,MGoal,SID) &
 not(witness(A2Goal,A1Goal,pxb,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_pxb (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,pxb,MGoal,SID1).
 request(A1Goal,A2Goal,pxb,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


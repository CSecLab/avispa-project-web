%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileEilEtc

section signature:

state_sed_or_esi: agent * agent * hash_func * hash_func * hash_func * hash_func * symmetric_key * symmetric_key * message * message * public_key * message * message * nat * message * message * message * message * message * message * public_key * public_key * symmetric_key * set(agent) * nat -> fact
state_sed: agent * agent * hash_func * hash_func * hash_func * hash_func * symmetric_key * symmetric_key * message * message * public_key * message * message * nat * message * message * message * message * message * message * public_key * public_key * symmetric_key * set(agent) * nat -> fact


section types:

set_132, set_115: set
5, 7, State, 6, 3, 4, 2, 1, SID, 8, 0, Dummy_State, SID2, SID1: nat
Set_69, Set_39, Dummy_Set_69, Dummy_Set_39, ASGoal: set(agent)
mac, ecc, kdf1, kdf2, MAC, ECC, KDF1, KDF2: hash_func
link_key, mac_u, mac_v: protocol_id
pu, pv, cu, cv, EPv, MACu, MACv, Z, MK, Cu, Mu, Mv, Cv, Pv, Dummy_EPv, Dummy_Cu, start, Dummy_MK, EPu, Dummy_Z, Dummy_MACv, Dummy_MACu, Dummy_EPu, Dummy_Cv, dummy_msg, Pu, MGoal, mu, mv: message
Eu, Ev, CA, Dummy_Ev, Dummy_Eu, dummy_pk, ca: public_key
u, v, V, U, A2Goal, A1Goal, i: agent
Kl, Knwk, Ktcl, Dummy_Kl, dummy_sk, ktcl, kn: symmetric_key


section inits:

initial_state init1 := 
 iknows(start).
 iknows(u).
 iknows(v).
 iknows(mac).
 iknows(ca).
 iknows(cu).
 iknows(cv).
 iknows(pu).
 iknows(pv).
 iknows(mu).
 iknows(mv).
 iknows(i).
 state_sed(u,v,mac,ecc,kdf1,kdf2,kn,ktcl,cu,pu,ca,mu,mv,0,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_pk,dummy_pk,dummy_sk,set_115,3).
 state_sed_or_esi(v,u,mac,ecc,kdf1,kdf2,kn,ktcl,cv,pv,ca,mu,mv,1,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_pk,dummy_pk,dummy_sk,set_132,4)


section rules:

step step_0 (U,V,MAC,ECC,KDF1,KDF2,Knwk,Ktcl,Cu,Pu,CA,Mu,Mv,Cv,EPu,MACu,MACv,Z,MK,Eu,Ev,Kl,Set_39,SID) :=
 state_sed(U,V,MAC,ECC,KDF1,KDF2,Knwk,Ktcl,Cu,Pu,CA,Mu,Mv,0,Cv,EPu,MACu,MACv,Z,MK,Eu,Ev,Kl,Set_39,SID).
 iknows(start)
 =>
 state_sed(U,V,MAC,ECC,KDF1,KDF2,Knwk,Ktcl,Cu,Pu,CA,Mu,Mv,2,Cv,EPu,MACu,MACv,Z,MK,Eu,Ev,Kl,Set_39,SID).
 iknows(scrypt(Knwk,Cu))

step step_1 (U,V,MAC,ECC,KDF1,KDF2,Knwk,Ktcl,Cu,Pu,CA,Mu,Mv,Dummy_Cv,Dummy_EPu,MACu,MACv,Z,MK,Dummy_Eu,Ev,Kl,Set_39,SID,Cv,EPu,Eu) :=
 state_sed(U,V,MAC,ECC,KDF1,KDF2,Knwk,Ktcl,Cu,Pu,CA,Mu,Mv,2,Dummy_Cv,Dummy_EPu,MACu,MACv,Z,MK,Dummy_Eu,Ev,Kl,Set_39,SID).
 iknows(scrypt(Knwk,Cv))
=[exists EPu,Eu]=>
 state_sed(U,V,MAC,ECC,KDF1,KDF2,Knwk,Ktcl,Cu,Pu,CA,Mu,Mv,4,Cv,EPu,MACu,MACv,Z,MK,Eu,Ev,Kl,Set_39,SID).
 iknows(scrypt(Knwk,Eu))

step step_2 (U,V,MAC,ECC,KDF1,KDF2,Knwk,Ktcl,Cu,Pu,CA,Mu,Mv,Cv,EPu,Dummy_MACu,Dummy_MACv,Dummy_Z,Dummy_MK,Eu,Dummy_Ev,Dummy_Kl,Dummy_Set_39,SID,Ev) :=
 state_sed(U,V,MAC,ECC,KDF1,KDF2,Knwk,Ktcl,Cu,Pu,CA,Mu,Mv,4,Cv,EPu,Dummy_MACu,Dummy_MACv,Dummy_Z,Dummy_MK,Eu,Dummy_Ev,Dummy_Kl,Dummy_Set_39,SID).
 iknows(scrypt(Knwk,Ev))
 =>
 state_sed(U,V,MAC,ECC,KDF1,KDF2,Knwk,Ktcl,Cu,Pu,CA,Mu,Mv,6,Cv,EPu,apply(MAC,pair(apply(KDF2,apply(ECC,pair(Pu,pair(Eu,pair(EPu,pair(Cv,pair(Ev,CA))))))),pair(Mu,pair(U,pair(V,pair(Eu,Ev)))))),apply(MAC,pair(apply(KDF2,apply(ECC,pair(Pu,pair(Eu,pair(EPu,pair(Cv,pair(Ev,CA))))))),pair(Mv,pair(U,pair(V,pair(Eu,Ev)))))),apply(ECC,pair(Pu,pair(Eu,pair(EPu,pair(Cv,pair(Ev,CA)))))),apply(KDF2,apply(ECC,pair(Pu,pair(Eu,pair(EPu,pair(Cv,pair(Ev,CA))))))),Eu,Ev,apply(KDF1,apply(ECC,pair(Pu,pair(Eu,pair(EPu,pair(Cv,pair(Ev,CA))))))),Dummy_Set_39,SID).
 secret(apply(KDF1,apply(ECC,pair(Pu,pair(Eu,pair(EPu,pair(Cv,pair(Ev,CA))))))),link_key,Dummy_Set_39).
 iknows(scrypt(Knwk,apply(MAC,pair(apply(KDF2,apply(ECC,pair(Pu,pair(Eu,pair(EPu,pair(Cv,pair(Ev,CA))))))),pair(Mu,pair(U,pair(V,pair(Eu,Ev)))))))).
 contains(U,Dummy_Set_39).
 contains(V,Dummy_Set_39)

step step_3 (U,V,MAC,ECC,KDF1,KDF2,Knwk,Ktcl,Cu,Pu,CA,Mu,Mv,Cv,EPu,MACu,MACv,Z,MK,Eu,Ev,Kl,Set_39,SID) :=
 state_sed(U,V,MAC,ECC,KDF1,KDF2,Knwk,Ktcl,Cu,Pu,CA,Mu,Mv,6,Cv,EPu,MACu,MACv,Z,MK,Eu,Ev,Kl,Set_39,SID).
 iknows(scrypt(Knwk,MACv))
 =>
 state_sed(U,V,MAC,ECC,KDF1,KDF2,Knwk,Ktcl,Cu,Pu,CA,Mu,Mv,8,Cv,EPu,MACu,MACv,Z,MK,Eu,Ev,Kl,Set_39,SID)

step step_4 (V,U,MAC,ECC,KDF1,KDF2,Knwk,Ktcl,Cv,Pv,CA,Mu,Mv,Dummy_Cu,EPv,MACu,MACv,Z,MK,Eu,Ev,Kl,Set_69,SID,Cu) :=
 state_sed_or_esi(V,U,MAC,ECC,KDF1,KDF2,Knwk,Ktcl,Cv,Pv,CA,Mu,Mv,1,Dummy_Cu,EPv,MACu,MACv,Z,MK,Eu,Ev,Kl,Set_69,SID).
 iknows(scrypt(Knwk,Cu))
 =>
 state_sed_or_esi(V,U,MAC,ECC,KDF1,KDF2,Knwk,Ktcl,Cv,Pv,CA,Mu,Mv,3,Cu,EPv,MACu,MACv,Z,MK,Eu,Ev,Kl,Set_69,SID).
 iknows(scrypt(Knwk,Cv))

step step_5 (V,U,MAC,ECC,KDF1,KDF2,Knwk,Ktcl,Cv,Pv,CA,Mu,Mv,Cu,Dummy_EPv,Dummy_MACu,Dummy_MACv,Dummy_Z,Dummy_MK,Dummy_Eu,Dummy_Ev,Dummy_Kl,Dummy_Set_69,SID,EPv,Eu,Ev) :=
 state_sed_or_esi(V,U,MAC,ECC,KDF1,KDF2,Knwk,Ktcl,Cv,Pv,CA,Mu,Mv,3,Cu,Dummy_EPv,Dummy_MACu,Dummy_MACv,Dummy_Z,Dummy_MK,Dummy_Eu,Dummy_Ev,Dummy_Kl,Dummy_Set_69,SID).
 iknows(scrypt(Knwk,Eu))
=[exists EPv,Ev]=>
 state_sed_or_esi(V,U,MAC,ECC,KDF1,KDF2,Knwk,Ktcl,Cv,Pv,CA,Mu,Mv,5,Cu,EPv,apply(MAC,pair(apply(KDF2,apply(ECC,pair(Pv,pair(Ev,pair(EPv,pair(Cu,pair(Eu,CA))))))),pair(Mu,pair(U,pair(V,pair(Eu,Ev)))))),apply(MAC,pair(apply(KDF2,apply(ECC,pair(Pv,pair(Ev,pair(EPv,pair(Cu,pair(Eu,CA))))))),pair(Mv,pair(U,pair(V,pair(Eu,Ev)))))),apply(ECC,pair(Pv,pair(Ev,pair(EPv,pair(Cu,pair(Eu,CA)))))),apply(KDF2,apply(ECC,pair(Pv,pair(Ev,pair(EPv,pair(Cu,pair(Eu,CA))))))),Eu,Ev,apply(KDF1,apply(ECC,pair(Pv,pair(Ev,pair(EPv,pair(Cu,pair(Eu,CA))))))),Dummy_Set_69,SID).
 secret(apply(KDF1,apply(ECC,pair(Pv,pair(Ev,pair(EPv,pair(Cu,pair(Eu,CA))))))),link_key,Dummy_Set_69).
 iknows(scrypt(Knwk,Ev)).
 contains(U,Dummy_Set_69).
 contains(V,Dummy_Set_69)

step step_6 (V,U,MAC,ECC,KDF1,KDF2,Knwk,Ktcl,Cv,Pv,CA,Mu,Mv,Cu,EPv,MACu,MACv,Z,MK,Eu,Ev,Kl,Set_69,SID) :=
 state_sed_or_esi(V,U,MAC,ECC,KDF1,KDF2,Knwk,Ktcl,Cv,Pv,CA,Mu,Mv,5,Cu,EPv,MACu,MACv,Z,MK,Eu,Ev,Kl,Set_69,SID).
 iknows(scrypt(Knwk,MACu))
 =>
 state_sed_or_esi(V,U,MAC,ECC,KDF1,KDF2,Knwk,Ktcl,Cv,Pv,CA,Mu,Mv,7,Cu,EPv,MACu,MACv,Z,MK,Eu,Ev,Kl,Set_69,SID).
 iknows(scrypt(Knwk,MACv))


section properties:

property secrecy_of_link_key (MGoal,ASGoal) :=
 [] ((secret(MGoal,link_key,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_mac_u (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,mac_u,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,mac_u,MGoal))
     /\ ((request(A1Goal,A2Goal,mac_u,MGoal,SID1)
           /\ request(A1Goal,A2Goal,mac_u,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_mac_v (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,mac_v,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,mac_v,MGoal))
     /\ ((request(A1Goal,A2Goal,mac_v,MGoal,SID1)
           /\ request(A1Goal,A2Goal,mac_v,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_link_key (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,link_key,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_mac_u (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,mac_u,MGoal,SID) &
 not(witness(A2Goal,A1Goal,mac_u,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_mac_u (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,mac_u,MGoal,SID1).
 request(A1Goal,A2Goal,mac_u,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_mac_v (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,mac_v,MGoal,SID) &
 not(witness(A2Goal,A1Goal,mac_v,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_mac_v (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,mac_v,MGoal,SID1).
 request(A1Goal,A2Goal,mac_v,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


role alice ( A, S, B    : agent,
				   K    : symmetric_key,
			 Succ, H1   : hash_func,
	     M, AR, Na1, Ws : text,
        SND_SA, RCV_SA,
		SND_BA, RCV_BA  : channel(dy))

played_by A
def=
     local	Lj, Na, Ok, R1  : text,		               
	                  State : nat,
		         Idr, Ks, Kd, Hk : symmetric_key,
                          H : hash_func
 
     const              id  : text,	 
           alice_bob_kd, ks,
           bob_alice_kd, kd : protocol_id

     init  State := 0

	 transition
	 1. State   = 0 /\ RCV_SA(start) =|>
	    State' := 2 /\ SND_SA(A.B.id.M)
					
	 2. State   = 2 /\ RCV_SA(A.B.AR'.Ws'.Na1'.{Hk'.Lj'.Kd'}_K) =|>
	    State' := 4 /\ Na' := new() 
		            /\ SND_BA(A.B.{id}_Hk'.AR'.Ws'.Na'.Na1')
                    /\ request(A, B, bob_alice_kd, Kd)

	 3. State   = 4 /\ RCV_BA(A.B.{R1'}_Idr.H1(Kd'.R1').H1(Na)) =|> 
	    State' := 6 /\ SND_BA(A.B.H1(R1'))
                    /\ Ks' := H(Na.R1')
                    /\ witness(A, B, bob_alice_kd, H1)
					/\ secret(Ks, ks, {A,B})

%%	 4. State   = 6 /\ RCV_BA(A.B.Ok') =|>  
%%	    State' := 8 /\ secret(Ks, ks, {A,B})

end role

%%ROLE SERVER

role server (A, B, S        : agent,
                     K, Kc  : symmetric_key,
			             M  : text,
             SND_AS, RCV_AS : channel(dy))

played_by S
def= 

     local     State  : nat,
      Na1, Lj, AR, Ws : text,
		   Hk, Kd     : symmetric_key,
		       Hash   : hash_func

init State  := 1

transition

1. State  = 1 /\ RCV_AS(A.{id.M}_K) =|>
   State':=	3 /\ Ws' := new() /\ AR' := new() 
              /\ Kd' := Hash(Kc.id.AR'.Ws')
			  /\ Lj' := new()
			  /\ Hk' := new()
			  /\ Na1':= new()
              /\ SND_AS(A.AR'.Ws'.Na1'.{Hk'.Lj'.Kd'}_K) 
			  /\ secret(Kd', bob_alice_kd, {A,S,B})
end role

%%ROLE BOB

role bob( A, B           : agent,
		  Succ, H1       : hash_func,
		  AR, Na1, Ws    : text,
		   Kc         : symmetric_key,
		  SND_AB, RCV_AB : channel(dy))

played_by B
def= 

local      State   : nat,
	   Idr, Hk, Ks, Kd  : symmetric_key,
	       H       : hash_func,
      Na, Ok, R1   : text		   

init State  := 5

transition

1. State   =  5 /\ RCV_AB(A.B.{id}_Hk.AR'.Ws'.Na') =|>
   State' :=  7 /\ R1' := new() /\ Kd' := H(Kc.id.AR.Ws)
				/\ Idr' := H(id.Na1')
                /\ SND_AB(A.B.{R1'}_Idr.H1(Kd'.R1').H1(Na))
                /\ witness(B, A, bob_alice_kd, Kd')
                /\ request(B, A, alice_bob_kd , H1)

2. State   = 7  /\ RCV_AB(A.B.H1(R1')) =|>
   State' := 9  /\ Ks' := H(Na.R1) /\ secret(Ks', ks, {A,B})

end role

%%ROLE SESSION

role session ( A, S, B           : agent,
               M, AR, Ws         : text,
			   Succ, H           : hash_func,
                   K, Kc         : symmetric_key)
def=

    local			  
		SSA, RSA, 
        SBA, RBA,
        SAS, RAS,
		SAB, RAB   : channel(dy)

	composition

	     alice (A, S, B, K, Succ, H, M, AR, Na1, Ws, SSA, RSA, SBA, RBA)
	/\	 server(A, B, S, K, Kc, M, SAS, RAS)
    /\   bob   (A, B, Succ, H, AR, Na1, Ws, Kc,  SAB, RAB)

end role

role environment()
def=
   const                 a, s, b      : agent,
                  ksi, kc, k, ka, ki  : symmetric_key,
                        succ,  h      : hash_func,
                   id, m, ar, ws      : text,
      bob_alice_r1, alice_bob_na      : protocol_id

	intruder_knowledge = {a, b, s, ki, ws, ar, m, succ, ksi}

composition
        session(a, s, b, m, ar, ws, succ, h,  k, kc)
     /\ session(i, s, b, m, ar, ws, succ, h, ki, kc)
%%     /\ session(i, b, succ, h, ar, ws)
%%     /\ session(a, b, succ, h, ar, ws)

end role

goal

 %secrecy of the shared keys
 secrecy_of ks, kd
 authentication_on bob_alice_kd  
 authentication_on alice_bob_na

end goal

environment()
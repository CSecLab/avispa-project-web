%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfiletdTlu1

section signature:

state_auth_server: agent * agent * hash_func * hash_func * hash_func * public_key * public_key * text * text * text * text * text * text * text * text * text * text * text * text * nat * apply(hash_func,pair(apply(hash_func,pair(text,pair(text,text))),pair(agent,pair(agent,pair(text,pair(text,text)))))) * apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text))))))) * apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text))))))) * public_key * set(agent) * set(agent) * nat -> fact
state_peer: agent * agent * hash_func * hash_func * hash_func * public_key * public_key * text * text * text * text * text * text * text * text * text * text * text * nat * apply(hash_func,pair(apply(hash_func,pair(text,pair(text,text))),pair(agent,pair(agent,pair(text,pair(text,text)))))) * apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text))))))) * apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text))))))) * public_key * nat -> fact


section types:

sec_clientK, sec_serverK, nps1, nps2: protocol_id
set_143, set_142, set_133, set_132: set
ClientK, ServerK, Dummy_ServerK, Dummy_ClientK: apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text)))))))
Finished, Dummy_Finished: apply(hash_func,pair(apply(hash_func,pair(text,pair(text,text))),pair(agent,pair(agent,pair(text,pair(text,text))))))
kp, ks, ki, kar, Ks, Kp, Kar, Dummy_Kp, Dummy_Ks, dummy_pk: public_key
Ccs, Pcertreq, Phellodone, Ns, Csus, VerNo, Csu, Pke, PMS, Np, SessID, start_eap_fast, respond_id, request_id, Dummy_Pkeyexchange, sid0, Dummy_Cciphspec, Dummy_Ccs, Pkeyexchange, Dummy_PMS, Dummy_Phellodone, Cciphspec, Dummy_Pcertreq, Dummy_Pke, Dummy_Csu, Dummy_VerNo, Dummy_Csus, Dummy_Ns, Dummy_SessID, Dummy_Np, dummy_nonce: text
9, 7, 5, 3, 1, State, 8, 6, 4, 2, 0, SID, Dummy_State, SID2, SID1: nat
Set_47, Set_45, Dummy_Set_47, Dummy_Set_45, ASGoal: set(agent)
start, dummy_msg, MGoal: message
p, s, S, P, A2Goal, A1Goal, i: agent
H, KeyGen, PRF, prf, h, keygen: hash_func


section inits:

initial_state init1 := 
 iknows(start).
 iknows(p).
 iknows(s).
 iknows(h).
 iknows(keygen).
 iknows(prf).
 iknows(kp).
 iknows(ks).
 iknows(kar).
 iknows(ki).
 iknows(inv(ki)).
 iknows(crypt(inv(kar),pair(i,ki))).
 iknows(i).
 state_peer(s,p,h,keygen,prf,kp,kar,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,1,dummy_msg,dummy_msg,dummy_msg,dummy_pk,3).
 state_auth_server(p,s,h,keygen,prf,ks,kar,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,0,dummy_msg,dummy_msg,dummy_msg,dummy_pk,set_132,set_133,4).
 state_peer(s,i,h,keygen,prf,ki,kar,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,1,dummy_msg,dummy_msg,dummy_msg,dummy_pk,6)


section rules:

step step_0 (P,S,H,KeyGen,PRF,Kp,Kar,Np,SessID,PMS,Ns,Csus,VerNo,Csu,Pke,Ccs,Pcertreq,Phellodone,Finished,ClientK,ServerK,Ks,SID) :=
 state_peer(P,S,H,KeyGen,PRF,Kp,Kar,Np,SessID,PMS,Ns,Csus,VerNo,Csu,Pke,Ccs,Pcertreq,Phellodone,1,Finished,ClientK,ServerK,Ks,SID).
 iknows(start)
 =>
 state_peer(P,S,H,KeyGen,PRF,Kp,Kar,Np,SessID,PMS,Ns,Csus,VerNo,Csu,Pke,Ccs,Pcertreq,Phellodone,3,Finished,ClientK,ServerK,Ks,SID).
 iknows(request_id)

step step_1 (P,S,H,KeyGen,PRF,Kp,Kar,Np,SessID,PMS,Ns,Csus,VerNo,Csu,Pke,Ccs,Pcertreq,Phellodone,Finished,ClientK,ServerK,Ks,SID) :=
 state_peer(P,S,H,KeyGen,PRF,Kp,Kar,Np,SessID,PMS,Ns,Csus,VerNo,Csu,Pke,Ccs,Pcertreq,Phellodone,3,Finished,ClientK,ServerK,Ks,SID).
 iknows(pair(respond_id,S))
 =>
 state_peer(P,S,H,KeyGen,PRF,Kp,Kar,Np,SessID,PMS,Ns,Csus,VerNo,Csu,Pke,Ccs,Pcertreq,Phellodone,5,Finished,ClientK,ServerK,Ks,SID).
 iknows(start_eap_fast)

step step_2 (P,S,H,KeyGen,PRF,Kp,Kar,Dummy_Np,Dummy_SessID,PMS,Dummy_Ns,Dummy_Csus,Dummy_VerNo,Dummy_Csu,Dummy_Pke,Ccs,Dummy_Pcertreq,Dummy_Phellodone,Finished,ClientK,ServerK,Ks,SID,Np,SessID,Ns,Csus,VerNo,Csu,Pke,Pcertreq,Phellodone) :=
 state_peer(P,S,H,KeyGen,PRF,Kp,Kar,Dummy_Np,Dummy_SessID,PMS,Dummy_Ns,Dummy_Csus,Dummy_VerNo,Dummy_Csu,Dummy_Pke,Ccs,Dummy_Pcertreq,Dummy_Phellodone,5,Finished,ClientK,ServerK,Ks,SID).
 iknows(pair(VerNo,pair(sid0,pair(Ns,Csus))))
=[exists Csu,Pke,Pcertreq,Phellodone,SessID,Np]=>
 state_peer(P,S,H,KeyGen,PRF,Kp,Kar,Np,SessID,PMS,Ns,Csus,VerNo,Csu,Pke,Ccs,Pcertreq,Phellodone,7,Finished,ClientK,ServerK,Ks,SID).
 iknows(pair(VerNo,pair(SessID,pair(Np,pair(Csu,pair(crypt(inv(Kar),pair(P,Kp)),pair(Pke,pair(Pcertreq,Phellodone)))))))).
 witness(P,S,nps1,pair(Ns,Np))

step step_3 (P,S,H,KeyGen,PRF,Kp,Kar,Np,SessID,Dummy_PMS,Ns,Csus,VerNo,Csu,Pke,Dummy_Ccs,Pcertreq,Phellodone,Dummy_Finished,Dummy_ClientK,Dummy_ServerK,Dummy_Ks,SID,PMS,Ccs,Ks) :=
 state_peer(P,S,H,KeyGen,PRF,Kp,Kar,Np,SessID,Dummy_PMS,Ns,Csus,VerNo,Csu,Pke,Dummy_Ccs,Pcertreq,Phellodone,7,Dummy_Finished,Dummy_ClientK,Dummy_ServerK,Dummy_Ks,SID).
 iknows(pair(crypt(inv(Kar),pair(S,Ks)),pair(crypt(Kp,PMS),pair(crypt(inv(Ks),apply(H,pair(Ns,pair(Np,pair(P,PMS))))),pair(Ccs,scrypt(apply(KeyGen,pair(S,pair(Ns,pair(Np,apply(PRF,pair(PMS,pair(Ns,Np))))))),apply(H,pair(apply(PRF,pair(PMS,pair(Ns,Np))),pair(S,pair(P,pair(Ns,pair(Csu,SessID))))))))))))
 =>
 state_peer(P,S,H,KeyGen,PRF,Kp,Kar,Np,SessID,PMS,Ns,Csus,VerNo,Csu,Pke,Ccs,Pcertreq,Phellodone,9,apply(H,pair(apply(PRF,pair(PMS,pair(Ns,Np))),pair(S,pair(P,pair(Ns,pair(Csu,SessID)))))),apply(KeyGen,pair(P,pair(Ns,pair(Np,apply(PRF,pair(PMS,pair(Ns,Np))))))),apply(KeyGen,pair(S,pair(Ns,pair(Np,apply(PRF,pair(PMS,pair(Ns,Np))))))),Ks,SID).
 iknows(pair(Ccs,scrypt(apply(KeyGen,pair(P,pair(Ns,pair(Np,apply(PRF,pair(PMS,pair(Ns,Np))))))),apply(H,pair(apply(PRF,pair(PMS,pair(Ns,Np))),pair(S,pair(P,pair(Ns,pair(Csu,SessID))))))))).
 request(P,S,nps2,pair(Ns,Np),SID)

step step_4 (S,P,H,KeyGen,PRF,Kar,Ks,Ns,Csus,PMS,SessID,Np,VerNo,Csu,Ccs,Pcertreq,Pkeyexchange,Phellodone,Cciphspec,Finished,ClientK,ServerK,Kp,Set_45,Set_47,SID) :=
 state_auth_server(S,P,H,KeyGen,PRF,Kar,Ks,Ns,Csus,PMS,SessID,Np,VerNo,Csu,Ccs,Pcertreq,Pkeyexchange,Phellodone,Cciphspec,0,Finished,ClientK,ServerK,Kp,Set_45,Set_47,SID).
 iknows(request_id)
 =>
 state_auth_server(S,P,H,KeyGen,PRF,Kar,Ks,Ns,Csus,PMS,SessID,Np,VerNo,Csu,Ccs,Pcertreq,Pkeyexchange,Phellodone,Cciphspec,2,Finished,ClientK,ServerK,Kp,Set_45,Set_47,SID).
 iknows(pair(respond_id,S))

step step_5 (S,P,H,KeyGen,PRF,Kar,Ks,Dummy_Ns,Csus,PMS,SessID,Np,Dummy_VerNo,Csu,Ccs,Pcertreq,Pkeyexchange,Phellodone,Dummy_Cciphspec,Finished,ClientK,ServerK,Kp,Set_45,Set_47,SID,Ns,VerNo,Cciphspec) :=
 state_auth_server(S,P,H,KeyGen,PRF,Kar,Ks,Dummy_Ns,Csus,PMS,SessID,Np,Dummy_VerNo,Csu,Ccs,Pcertreq,Pkeyexchange,Phellodone,Dummy_Cciphspec,2,Finished,ClientK,ServerK,Kp,Set_45,Set_47,SID).
 iknows(start_eap_fast)
=[exists VerNo,Cciphspec,Ns]=>
 state_auth_server(S,P,H,KeyGen,PRF,Kar,Ks,Ns,Csus,PMS,SessID,Np,VerNo,Csu,Ccs,Pcertreq,Pkeyexchange,Phellodone,Cciphspec,4,Finished,ClientK,ServerK,Kp,Set_45,Set_47,SID).
 iknows(pair(VerNo,pair(sid0,pair(Ns,Cciphspec))))

step step_6 (S,P,H,KeyGen,PRF,Kar,Ks,Ns,Csus,Dummy_PMS,Dummy_SessID,Dummy_Np,VerNo,Dummy_Csu,Ccs,Dummy_Pcertreq,Dummy_Pkeyexchange,Dummy_Phellodone,Dummy_Cciphspec,Dummy_Finished,Dummy_ClientK,Dummy_ServerK,Dummy_Kp,Set_45,Set_47,SID,PMS,SessID,Np,Csu,Pcertreq,Pkeyexchange,Phellodone,Cciphspec,Kp) :=
 state_auth_server(S,P,H,KeyGen,PRF,Kar,Ks,Ns,Csus,Dummy_PMS,Dummy_SessID,Dummy_Np,VerNo,Dummy_Csu,Ccs,Dummy_Pcertreq,Dummy_Pkeyexchange,Dummy_Phellodone,Dummy_Cciphspec,4,Dummy_Finished,Dummy_ClientK,Dummy_ServerK,Dummy_Kp,Set_45,Set_47,SID).
 iknows(pair(VerNo,pair(SessID,pair(Np,pair(Csu,pair(crypt(inv(Kar),pair(P,Kp)),pair(Pkeyexchange,pair(Pcertreq,Phellodone))))))))
=[exists Cciphspec,PMS]=>
 state_auth_server(S,P,H,KeyGen,PRF,Kar,Ks,Ns,Csus,PMS,SessID,Np,VerNo,Csu,Ccs,Pcertreq,Pkeyexchange,Phellodone,Cciphspec,6,apply(H,pair(apply(PRF,pair(PMS,pair(Ns,Np))),pair(S,pair(P,pair(Ns,pair(Csu,SessID)))))),apply(KeyGen,pair(P,pair(Ns,pair(Np,apply(PRF,pair(PMS,pair(Ns,Np))))))),apply(KeyGen,pair(S,pair(Ns,pair(Np,apply(PRF,pair(PMS,pair(Ns,Np))))))),Kp,Set_45,Set_47,SID).
 iknows(pair(crypt(inv(Kar),pair(S,Ks)),pair(crypt(Kp,PMS),pair(crypt(inv(Ks),apply(H,pair(Ns,pair(Np,pair(P,PMS))))),pair(Cciphspec,scrypt(apply(KeyGen,pair(S,pair(Ns,pair(Np,apply(PRF,pair(PMS,pair(Ns,Np))))))),apply(H,pair(apply(PRF,pair(PMS,pair(Ns,Np))),pair(S,pair(P,pair(Ns,pair(Csu,SessID)))))))))))).
 witness(S,P,nps2,pair(Ns,Np))

step step_7 (S,P,H,KeyGen,PRF,Kar,Ks,Ns,Csus,PMS,SessID,Np,VerNo,Csu,Ccs,Pcertreq,Pkeyexchange,Phellodone,Cciphspec,Finished,ClientK,ServerK,Kp,Dummy_Set_45,Dummy_Set_47,SID) :=
 state_auth_server(S,P,H,KeyGen,PRF,Kar,Ks,Ns,Csus,PMS,SessID,Np,VerNo,Csu,Ccs,Pcertreq,Pkeyexchange,Phellodone,Cciphspec,6,Finished,ClientK,ServerK,Kp,Dummy_Set_45,Dummy_Set_47,SID).
 iknows(pair(Ccs,scrypt(ClientK,Finished)))
 =>
 state_auth_server(S,P,H,KeyGen,PRF,Kar,Ks,Ns,Csus,PMS,SessID,Np,VerNo,Csu,Ccs,Pcertreq,Pkeyexchange,Phellodone,Cciphspec,8,Finished,ClientK,ServerK,Kp,Dummy_Set_45,Dummy_Set_47,SID).
 secret(ServerK,sec_serverK,Dummy_Set_45).
 secret(ClientK,sec_clientK,Dummy_Set_47).
 request(S,P,nps1,pair(Ns,Np),SID).
 contains(S,Dummy_Set_45).
 contains(P,Dummy_Set_45).
 contains(S,Dummy_Set_47).
 contains(P,Dummy_Set_47)


section properties:

property secrecy_of_sec_clientK (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_clientK,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_serverK (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_serverK,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_nps1 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,nps1,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,nps1,MGoal))
     /\ ((request(A1Goal,A2Goal,nps1,MGoal,SID1)
           /\ request(A1Goal,A2Goal,nps1,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_nps2 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,nps2,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,nps2,MGoal))
     /\ ((request(A1Goal,A2Goal,nps2,MGoal,SID1)
           /\ request(A1Goal,A2Goal,nps2,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sec_clientK (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_clientK,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_serverK (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_serverK,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_nps1 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,nps1,MGoal,SID) &
 not(witness(A2Goal,A1Goal,nps1,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_nps1 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,nps1,MGoal,SID1).
 request(A1Goal,A2Goal,nps1,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_nps2 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,nps2,MGoal,SID) &
 not(witness(A2Goal,A1Goal,nps2,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_nps2 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,nps2,MGoal,SID1).
 request(A1Goal,A2Goal,nps2,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


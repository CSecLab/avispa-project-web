role alice (Ui, SNj, GWS : agent,
Jgwns : symmetric_key,
SKubs : symmetric_key,
H : hash_func,
Snd, Rcv: channel(dy))
played_by Ui
def=
local State : nat,
IDi, SIDi, Ni, PWi, TS1, TS2, TS3, TS4, TS5, TS6 : text,
Jgwns, D, b,TCi, Ki,Kj,TCj, Kj : text,
X1, RPWi, M, Aj, F, SIDi, PKSj, Cj : text
const alice_server, server_bob, subs1,
subs2, subs3, subs4, subs5 : protocol_id
init State := 0
transition
1. State = 0 /\ Rcv(start) =|>

% Registration phase

State’ := 1/\ Ni’ := new()
/\ RPWi’ := H(IDi.Ni.PWi)
/\ Snd(Ui.GWS.{IDi.RPWi’}_SKubs)
/\ secret({d}, subs1, GWS)
/\ secret({PWi}, subs2, Ui)
/\ secret({Jgwns}, subs3, {GWS,Sn})
/\ secret({SKubs}, subs4, {Ui,GWS})
/\ secret({d,Ni}, subs5, {Ui,GWS})

% Receive the master key from the registration server Sj

2. State = 1 /\ Rcv({xor(H(IDi.D),H(IDi.Ni.PWi)).H(H(H(IDi.Ni.PWi).H(IDi.D).IDi)).Xor(Ni,H(Pwi.IDi))}_SKubs) =|>

% Login phase

State’ := 2 /\ T1’ := new()
/\ Ki’ := new()
/\ Hi’ := H(T1.Ki.IDi)
/\ Snd(Ui.GWS.
{IDi.Ki’.T1’.H(T1.Ki.IDi)}_({IDi.D}_SK))
/\ witness(Ui, GWS, alice_server, T1’)

% Authentication phase
% Receive the authentication request message

3. State = 2 /\ Rcv(Xor(SIDi,H(Ki.Kj)).H(SIDi.IDi.Kj.T5).Xor(Kj,H(Ki.T1)).T5)) =|>
State’ := 3
end role

role bob (Ui, GWN, SNj : agent,
H : hash_func,
SKuigwn : symmetric_key,
Snd, Rcv: channel(dy))
played_by SNj
def=
local State : nat,
IDi, SIDi, Ni, PWi, TS1, TS2, TS3, TS4, TS5, TS6, : text,
Jgwns, D, b,TCi, Ki,Kj,TCj, Kj : text,
X1, RPWi, M, Aj, F, SIDi, PKSj, Cj, : text

const server_bob_ts2, bob_server_ts3, alice_server_ts1,
subs1, subs2, subs3, subs4, subs5 : protocol_id
init State := 0
transition

1. State = 0 /\ Rcv(start) =|>

% Registration phase

State’ := 1/\ yi’ := new()
/\ Vi’ := H(SIDi.yi)
/\ Snd(Ui.GWS.{SIDi.Vi’}_SKubs)
/\ secret({d}, subs1, GWS)
/\ secret({Vi}, subs2, SNj)
/\ secret({Jgwns}, subs3, {GWS,SNj})
/\ secret({SKubs}, subs4, {SNj,GWS})
/\ secret({d,yi}, subs5, {SNj,GWS})


% Authentication and key agreement phase
% Receive the message from the GWN
1. State = 0 /\ Rcv({IDi.SIDj.Ki.T1.H(Ki.SIDj.IDi.T3.T1)}_(h(h(d.SIDi).Vi)_SK)) =|>
State’ := 1
/\ T4’ := new()
/\ T5’ := new()
/\ Kj’ := new()
/\ secret({PWi,Ki},subs1,Ui)
/\ secret({IDi},subs2,{Ui,GWN})
/\ secret({Kgwnu,jgwns,d},subs3,GWN)
/\ secret(Ki’,subs4,{GWN,Ui,SNj})
/\ secret(Kj,subs5,{GWN,Ui,SNj})
% Send the message to the Ui
/\ Snd(Xor(SIDi,H(Ki.Kj)).H(SIDi.IDi.Kj.T5).Xor(Kj,H(Ki.T1)).T5))
% SNj has freshly generated the value TS5 for GWN
/\ witness(SNj,ui,bob_server_T5’, T5’)
% SNj’s acceptance of the value T3 generated for SNj by GWN
/\ request(GWN, SNj, server_bob_ts2, TS2’)
end role

role server (Ui, GWN, SNj : agent,
H : hash_func,
SKuigwn : symmetric_key,
Snd, Rcv: channel(dy))
played_by GWN
def=
local State : nat,
IDi,IDg, SIDi, Ni, PWi, TS1, TS2, TS3, TS4, TS5, TS6, : text,
Jgwns, D, b,TCi, Ki,Kj,TCj, Kj : text,
X1, RPWi, M, Aj, F, SIDi, PKSj, Cj : text
const server_bob_ts2, bob_server_ts3, alice_server_ts1,
server_alice_ts4, server_alice_tidinew,
subs1, subs2, subs3, subs4, subs5 : protocol_id
init State := 0
transition
% Registration phase of user
1. State = 0 /\ Rcv({IDi.H(IDi.Ni.PWi)}_SKuigwn) =|>
State’ := 1 /\ secret({IDi.Ni.PWi},subs1,Ui)
/\ b’ := new()
/\ Snd({xor(H(IDi.D),H(IDi.Ni.PWi)).H(H(H(IDi.Ni.PWi).H(IDi.D).IDi))}_SKuigwn)
% Registration phase of sensor
1. State = 1 /\ Rcv ({SIDi.H(SIDi.y)})=|>
State’ := 2 /\ secret({SIDi.y},subs1,SNj)
/\Snd({xor(H(D.SIDi),H(SIDi.y))}_SKuigwn)


% Login phase: receive the login request message from Ui
2. State = 1 /\ Rcv({IDi.Ki’.T1’.H(T1.Ki.IDi)}_({IDi.D}_SK) =|>
State’ := 2 /\ TS3’ := new()
/\ secret({IDi},subs2,{Ui,GWN})
/\ secret({Jgwns,Xi},subs3,GWN)
/\ secret(Ki,subs4,{GWN,Ui,SNj})
/\ secret(Kj,subs5,{GWN,Ui,SNj})
/\ H1’ = H(T1.Ki.IDi)
/\ Jgwns’=H(H(d.SIDi).Vi)
/\ H2’ = H(Ki.IDg.IDi.T3.T1)

% Authentication and key agreement phase
/\ Snd(Ts3.{IDi.IDg.Ki.T1.H2’}_Jgwns’))

% GWN has freshly generated the value TS3 for SNj
/\ witness(GWN,SNj,server_bob_ts3, TS3’)

end role

role session(Ui,GWN,SNj: agent,
% H is hash function
H : hash_func,
SKuigwn: symmetric_key)
def=
local US, UR, SS, SR, VS, VR: channel (dy)
composition
alice(Ui, GWN, SNj, H, SKuigwn, US, UR)
/\ server(Ui, GWN, SNj, H, SKuigwn, SS, SR)
/\ bob(Ui, GWN, SNj, H, SKuigwn, VS, VR)
end role

role environment()
def=
const ui, gwn, snj : agent,
h : hash_func,
skuigwn: symmetric_key,
IDi, SIDj, ts1, ts2,
ts3, ts4, tidi, tidinew : text,
alice_server_ts1, server_bob_ts2,
bob_ali_ts3,
alice_server_tidi, server_alice_tidinew,
subs1, subs2, subs3, subs4, subs5 : protocol_id
intruder_knowledge ={idsnj,h}
composition
session(ui, gwn, snj, h, skuigwn)
/\session(ui, gwn, snj, h, skuigwn)
/\ session(ui, gwn, snj, h, skuigwn)
end role
goal
% subs1 represents that the password PWi and personal
% biometrics Bi are kept secret to the user Ui only.
secrecy_of subs1
% subs2 represents that the idenity IDi is
% kept secret to both Ui and GWN.
secrecy_of subs2
% subs3 represents that Kgwn?u, Kgwn?s, Xs and TEi
% are kept secret to the GWN only.
secrecy_of subs3
secrecy_of subs4
secrecy_of subs5
% Ui (the smart card) generates a timestamp TS1.
% When the GWN receives TS1 from the message from Ui,
% the GWN authenticates Ui based on TS1.
% Similarly for other protocols ids.
authentication_on alice_server_ts1
authentication_on server_bob_ts2
authentication_on bob_server_ts3
authentication_on server_alice_ts4
authentication_on alice_server_tidi
authentication_on server_alice_tidinew
end goal
environment()
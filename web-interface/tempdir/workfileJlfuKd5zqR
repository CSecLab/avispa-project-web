
role user (U, S: agent,             
            X: public_key,
	    H: hash_func,      
            SND, RCV: channel (dy)) 
played_by A def=

  local State : nat, 
        ID, PW: text,
	Bi, B: text, 
	RPWi, Tu:text, 
	T1, D2:text, 
	Fi, Vi: text, 
	TColSec, SK:text, 
	IMstar1new, IMstar2new:text, 
	V2: text

  init State := 0

  transition  
   %Registration Phase
    0.  State  = 0 /\ RCV(start) =|> 
	State':= 2 /\ ID'  := new()
		   /\ PW'  := new()
		   /\ Bi'  := new()
		   /\ B'   := new()
		   /\ RPWi':= H(H(ID',PW'), H(Bi')) 
		   /\ SND(ID'.H(H(ID',PW', B'),H(Bi')))
		   

    2.  State  = 2 /\ RCV(D1'.IM1'.IM2'.IM3'.xor(H(Xs'.{r'.CtrUi'}_Xs'), ID').CtrUi') =|> 
	State':= 4 /\ Tu' := new()
		   /\ T1' := new()
		   /\ D2' := xor(RPWi, B)
		   /\ Fi' := H(RPWi, B)
		   /\ X'  := xor(D1',H(H(ID,PW,b),H(Bi)))
		   /\ Vi' := H(X, IM1, IM2, {CtrUi'}_X',Tu',T1')
		   /\ SND(IM1'.IM2'.Tu'.{CtrUi'}_X'.Vi'.T1') %instead of sending just M1'

    3.  State   = 4 /\ RCV(Y1'.Y2'.Y3'.Tu'.T2') =|>
	State' := 6 /\ TColSec'    := new() %Computing second time for various T of functions
		    /\ SK'         := H(TColSec', CtrUi)
		    /\ IMstar1new' := xor(Y1, xor(H(SK', T1), H(ID, ctrUi)))
		    /\ IMstar2new' := xor(Y2, xor(H(SK', T2), H(ID, ctrUi)))
		    /\ V2'         := H(IMstar1new', IMstar2new')

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role server (U, S: agent,
	 Xs: public_key,      
	 H: hash_func,      
         SND, RCV: channel (dy)) 
played_by B def=

  local State : nat, 
	R, Xs: text, 
	CtrUi, Ki:text, 
	IM3, IM1: text, 
	IM4, D1: text, 
	Ki, TCol: text, 
	Kinew, IMstar1, V: text, 
	IMstar2, SK, Y1, Y2, Y3: text

  init State := 1

  transition 

    1.  State  = 1 /\ RCV(ID'.H(H(ID',PW', B'),H(Bi'))) =|> 
	State':= 3 /\ R'    := new() 
		   /\ Xs'   := new()
		   /\ CtrUi':= new()
		   %/\ Ki'   := {r'.CtrUi'}_Xs		   
		   /\ IM3'  := xor(H(Xs'), Ki')
		   /\ IM1'  := IM3'
		   %/\ IM4'  := xor(H(Xs', Ki'), ID')
		   /\ D1'   := xor(H(ID,Xs'), H(H(ID,PW, B),H(Bi)))
		   /\ SND(D1'.IM1'.IM2'.IM3'.xor(H(Xs'.{r'.CtrUi'}_Xs'), ID').CtrUi') 
		   

    3.  State  = 3 /\ RCV(IM1'.IM2'.Tu'.{CtrUi'}_X'.Vi'.T1') =|>
	%Leaving out the timestamp check
	%There is no method in AVISPA to check the equality of elements
	%so moving onto computing new elements 
	State':= 5 /\ Ki'      := xor(IM1',H(Xs))
		   /\ TCol'     := new() %This is a collection of Tu function that are successively used to compute SK
		   /\ rnew'    := new()
		   /\ V'       := new()
		   /\ T2'      := new() %second time_stamp
		   /\ Kinew'   := {rnew'.CtrUi'}_Xs
		   /\ IMstar1' := xor(H(Xs), Kinew')
		   /\ IMstar2' := xor(H(Xs, Kinew'), ID)
		   /\ SK'      := H(TCol',CtrUi')
		   /\ Y1'      := xor(xor(IMstar1', H(SK', T1')), H(ID, CtrUi')
		   /\ Y2'      := xor(xor(IMstar1', H(SK', T2')), H(ID, CtrUi'))
		   /\ Y3'      := H(SK', IMstar1', IMstar2', Tu', T2')
		   /\ SND(Y1'.Y2'.Y3'.Tu'.T2')


end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role session(USER, SERVER: agent, X, Xs: public_key) def=
	
  local SA, RA, SB, RB: channel (dy)

  composition 

	user(USER, SERVER, X, Xs,SA,RA)
     /\ server  (USER, SERVER, X, Xs,SB,RB)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role environment() def=

    const user, server	       : agent,
	  x, xs, ki   : public_key,
	  %na, nb,
	  %alice_bob_nb,
	  %bob_alice_na : protocol_id

    %intruder_knowledge = {user, server}

    composition

	session(user,server,x, xs)
     /\ session(user,i,x,ki)
     /\ session(i,server,ki,xs)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal

  %secrecy_of na, nb
  %authentication_on alice_bob_nb
  %authentication_on bob_alice_na

end goal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

environment()

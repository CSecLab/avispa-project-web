%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileycN0iB

section signature:

state_base_station: agent * agent * public_key * hash_func * nat * text * text * nat -> fact
state_subscriber_station: agent * agent * public_key * hash_func * nat * text * text * nat -> fact


section types:

nb, na: protocol_id
hab, hai, hib, H: hash_func
kb, ki, Kb: public_key
Na, Nb, Dummy_Nb, Dummy_Na, dummy_nonce: text
start, MGoal: message
State, 3, 2, 9, 1, 6, 0, 4, SID, Dummy_State, SID2, SID1: nat
a, b, B, A, Dummy_A, i, A2Goal, A1Goal: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(hai).
 iknows(hib).
 iknows(ki).
 iknows(i).
 state_subscriber_station(a,b,kb,hab,0,dummy_nonce,dummy_nonce,3).
 state_base_station(b,a,kb,hab,0,dummy_nonce,dummy_nonce,4).
 state_subscriber_station(a,i,ki,hai,0,dummy_nonce,dummy_nonce,6).
 state_subscriber_station(b,i,ki,hib,0,dummy_nonce,dummy_nonce,9)


section rules:

step step_0 (A,B,Kb,H,Na,Nb,SID) :=
 state_subscriber_station(A,B,Kb,H,0,Na,Nb,SID).
 iknows(start)
 =>
 state_subscriber_station(A,B,Kb,H,1,Na,Nb,SID).
 iknows(A)

step step_1 (A,B,Kb,H,Dummy_Na,Dummy_Nb,SID,Na,Nb) :=
 state_subscriber_station(A,B,Kb,H,1,Dummy_Na,Dummy_Nb,SID).
 iknows(Nb)
=[exists Na]=>
 state_subscriber_station(A,B,Kb,H,2,Na,Nb,SID).
 iknows(apply(H,pair(Na,pair(Nb,A)))).
 witness(A,B,na,Na)

step step_2 (A,B,Kb,H,Na,Nb,SID) :=
 state_subscriber_station(A,B,Kb,H,2,Na,Nb,SID).
 iknows(crypt(inv(Kb),Na))
 =>
 state_subscriber_station(A,B,Kb,H,3,Na,Nb,SID).
 request(A,B,nb,Nb,SID)

step step_3 (B,Dummy_A,Kb,H,Na,Dummy_Nb,SID,A,Nb) :=
 state_base_station(B,Dummy_A,Kb,H,0,Na,Dummy_Nb,SID).
 iknows(A)
=[exists Nb]=>
 state_base_station(B,A,Kb,H,1,Na,Nb,SID).
 iknows(Nb).
 witness(B,Dummy_A,nb,Nb)

step step_4 (B,A,Kb,H,Dummy_Na,Nb,SID,Na) :=
 state_base_station(B,A,Kb,H,1,Dummy_Na,Nb,SID).
 iknows(apply(H,pair(Na,pair(Nb,A))))
 =>
 state_base_station(B,A,Kb,H,2,Na,Nb,SID).
 iknows(crypt(inv(Kb),Na)).
 request(B,A,na,Na,SID)


section properties:

property authentication_on_nb (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,nb,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,nb,MGoal))
     /\ ((request(A1Goal,A2Goal,nb,MGoal,SID1)
           /\ request(A1Goal,A2Goal,nb,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_na (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,na,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,na,MGoal))
     /\ ((request(A1Goal,A2Goal,na,MGoal,SID1)
           /\ request(A1Goal,A2Goal,na,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state authentication_on_nb (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,nb,MGoal,SID) &
 not(witness(A2Goal,A1Goal,nb,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_nb (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,nb,MGoal,SID1).
 request(A1Goal,A2Goal,nb,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_na (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,na,MGoal,SID) &
 not(witness(A2Goal,A1Goal,na,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_na (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,na,MGoal,SID1).
 request(A1Goal,A2Goal,na,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


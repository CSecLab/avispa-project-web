%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileUEtS29

section signature:

state_privatekeygenerator: agent * agent * agent * agent * hash_func * nat * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * nat -> fact
state_correspondingnode: agent * agent * agent * agent * public_key * hash_func * nat * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * nat -> fact
state_homeagent: agent * agent * agent * agent * public_key * hash_func * nat * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * nat -> fact
state_mobilenode: agent * agent * agent * agent * public_key * hash_func * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * nat * nat -> fact


section types:

ASGoal: set(agent)
n1, n2: protocol_id
MGoal, start: message
Kcn, kcn: public_key
CoA, HAA, HoA, OldCoA, CNA, Dcn, RPP, KGCA, Blt, N0, Msglen, Type, DcnReq, SIDCN, K1, N1, N2, Dummy_N2, Dummy_N1, Dummy_N0, dummy_nonce: text
9, 7, 5, 2, State, 3, 1, 6, SID, 4, Dummy_State, 10, 8, 0: nat
Hashv, has: hash_func
MN, CN, HA, KGC, mn, cn, ha, kgc, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(i).
 state_mobilenode(mn,cn,ha,kgc,kcn,has,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,0,3).
 state_homeagent(kgc,mn,cn,ha,kcn,has,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,4).
 state_correspondingnode(cn,mn,ha,kgc,kcn,has,2,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,5).
 state_privatekeygenerator(kgc,mn,cn,ha,has,4,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,6)


section rules:

step step_0 (MN,KGC,CN,HA,Kcn,Hashv,CoA,HAA,HoA,OldCoA,CNA,RPP,Dcn,KGCA,Blt,Dummy_N0,Msglen,Type,DcnReq,SIDCN,K1,N1,N2,SID,N0) :=
 state_mobilenode(MN,KGC,CN,HA,Kcn,Hashv,CoA,HAA,HoA,OldCoA,CNA,RPP,Dcn,KGCA,Blt,Dummy_N0,Msglen,Type,DcnReq,SIDCN,K1,N1,N2,0,SID).
 iknows(start)
=[exists N0]=>
 state_mobilenode(MN,KGC,CN,HA,Kcn,Hashv,CoA,HAA,HoA,OldCoA,CNA,RPP,Dcn,KGCA,Blt,N0,Msglen,Type,DcnReq,SIDCN,K1,N1,N2,6,SID).
 iknows(pair(CoA,pair(HAA,pair(HoA,pair(OldCoA,pair(CNA,pair(crypt(Kcn,pair(CoA,pair(HoA,pair(Blt,pair(OldCoA,pair(N0,pair(Msglen,Type))))))),pair(RPP,KGCA)))))))).
 iknows(pair(CoA,pair(CNA,pair(OldCoA,pair(crypt(Kcn,pair(CoA,pair(HoA,pair(Blt,pair(OldCoA,pair(N0,pair(Msglen,Type))))))),pair(RPP,KGCA))))))

step step_1 (MN,KGC,CN,HA,Kcn,Hashv,CoA,HAA,HoA,OldCoA,CNA,RPP,Dcn,KGCA,Blt,N0,Msglen,Type,DcnReq,SIDCN,K1,Dummy_N1,Dummy_N2,SID,N1,N2) :=
 state_mobilenode(MN,KGC,CN,HA,Kcn,Hashv,CoA,HAA,HoA,OldCoA,CNA,RPP,Dcn,KGCA,Blt,N0,Msglen,Type,DcnReq,SIDCN,K1,Dummy_N1,Dummy_N2,6,SID).
 iknows(pair(CNA,pair(CoA,xor(N0,N1))))
=[exists N2]=>
 state_mobilenode(MN,KGC,CN,HA,Kcn,Hashv,CoA,HAA,HoA,OldCoA,CNA,RPP,Dcn,KGCA,Blt,N0,Msglen,Type,DcnReq,SIDCN,K1,N1,N2,8,SID).
 iknows(pair(CoA,pair(CNA,pair(crypt(Kcn,pair(Dummy_N1,N2)),RPP))))

step step_2 (MN,KGC,CN,HA,Kcn,Hashv,CoA,HAA,HoA,OldCoA,CNA,RPP,Dcn,KGCA,Blt,N0,Msglen,Type,DcnReq,SIDCN,K1,N1,N2,SID) :=
 state_mobilenode(MN,KGC,CN,HA,Kcn,Hashv,CoA,HAA,HoA,OldCoA,CNA,RPP,Dcn,KGCA,Blt,N0,Msglen,Type,DcnReq,SIDCN,K1,N1,N2,8,SID).
 iknows(pair(CNA,pair(CoA,apply(Hashv,N2))))
 =>
 state_mobilenode(MN,KGC,CN,HA,Kcn,Hashv,CoA,HAA,HoA,OldCoA,CNA,RPP,Dcn,KGCA,Blt,N0,Msglen,Type,DcnReq,SIDCN,K1,N1,N2,10,SID).
 iknows(pair(CNA,CoA))

step step_3 (HA,MN,KGC,CN,Kcn,Hashv,CoA,HAA,HoA,OldCoA,CNA,RPP,KGCA,Blt,Dummy_N0,Msglen,Type,Dcn,DcnReq,SIDCN,K1,N1,N2,SID,N0) :=
 state_homeagent(HA,MN,KGC,CN,Kcn,Hashv,1,CoA,HAA,HoA,OldCoA,CNA,RPP,KGCA,Blt,Dummy_N0,Msglen,Type,Dcn,DcnReq,SIDCN,K1,N1,N2,SID).
 iknows(pair(CoA,pair(HAA,pair(HoA,pair(OldCoA,pair(CNA,pair(crypt(Kcn,pair(CoA,pair(HoA,pair(Blt,pair(OldCoA,pair(N0,pair(Msglen,Type))))))),pair(RPP,KGCA))))))))
 =>
 state_homeagent(HA,MN,KGC,CN,Kcn,Hashv,3,CoA,HAA,HoA,OldCoA,CNA,RPP,KGCA,Blt,N0,Msglen,Type,Dcn,DcnReq,SIDCN,K1,N1,N2,SID).
 iknows(pair(HoA,pair(CNA,pair(OldCoA,pair(crypt(Kcn,pair(CoA,pair(HoA,pair(Blt,pair(OldCoA,pair(Dummy_N0,pair(Msglen,Type))))))),pair(RPP,KGCA))))))

step step_4 (CN,MN,HA,KGC,Kcn,Hashv,CoA,HAA,HoA,OldCoA,CNA,Dcn,RPP,KGCA,Blt,Dummy_N0,Msglen,Type,DcnReq,SIDCN,K1,N1,N2,SID,N0) :=
 state_correspondingnode(CN,MN,HA,KGC,Kcn,Hashv,2,CoA,HAA,HoA,OldCoA,CNA,Dcn,RPP,KGCA,Blt,Dummy_N0,Msglen,Type,DcnReq,SIDCN,K1,N1,N2,SID).
 iknows(pair(HoA,pair(CNA,pair(OldCoA,pair(crypt(Kcn,pair(CoA,pair(HoA,pair(Blt,pair(OldCoA,pair(N0,pair(Msglen,Type))))))),pair(RPP,KGCA))))))
 =>
 state_correspondingnode(CN,MN,HA,KGC,Kcn,Hashv,3,CoA,HAA,HoA,OldCoA,CNA,Dcn,RPP,KGCA,Blt,N0,Msglen,Type,DcnReq,SIDCN,K1,N1,N2,SID)

step step_5 (CN,MN,HA,KGC,Kcn,Hashv,CoA,HAA,HoA,OldCoA,CNA,Dcn,RPP,KGCA,Blt,Dummy_N0,Msglen,Type,DcnReq,SIDCN,K1,N1,N2,SID,N0) :=
 state_correspondingnode(CN,MN,HA,KGC,Kcn,Hashv,3,CoA,HAA,HoA,OldCoA,CNA,Dcn,RPP,KGCA,Blt,Dummy_N0,Msglen,Type,DcnReq,SIDCN,K1,N1,N2,SID).
 iknows(pair(CoA,pair(CNA,pair(OldCoA,pair(crypt(Kcn,pair(CoA,pair(HoA,pair(Blt,pair(OldCoA,pair(N0,pair(Msglen,Type))))))),pair(RPP,KGCA))))))
 =>
 state_correspondingnode(CN,MN,HA,KGC,Kcn,Hashv,5,CoA,HAA,HoA,OldCoA,CNA,Dcn,RPP,KGCA,Blt,N0,Msglen,Type,DcnReq,SIDCN,K1,N1,N2,SID).
 iknows(pair(CNA,pair(KGCA,DcnReq)))

step step_6 (CN,MN,HA,KGC,Kcn,Hashv,CoA,HAA,HoA,OldCoA,CNA,Dcn,RPP,KGCA,Blt,N0,Msglen,Type,DcnReq,SIDCN,K1,Dummy_N1,N2,SID,N1) :=
 state_correspondingnode(CN,MN,HA,KGC,Kcn,Hashv,5,CoA,HAA,HoA,OldCoA,CNA,Dcn,RPP,KGCA,Blt,N0,Msglen,Type,DcnReq,SIDCN,K1,Dummy_N1,N2,SID).
 iknows(pair(KGCA,pair(CNA,Dcn)))
=[exists N1]=>
 state_correspondingnode(CN,MN,HA,KGC,Kcn,Hashv,7,CoA,HAA,HoA,OldCoA,CNA,Dcn,RPP,KGCA,Blt,N0,Msglen,Type,DcnReq,SIDCN,K1,N1,N2,SID).
 iknows(pair(CNA,pair(CoA,xor(N0,N1))))

step step_7 (CN,MN,HA,KGC,Kcn,Hashv,CoA,HAA,HoA,OldCoA,CNA,Dcn,RPP,KGCA,Blt,N0,Msglen,Type,DcnReq,SIDCN,K1,N1,Dummy_N2,SID,N2) :=
 state_correspondingnode(CN,MN,HA,KGC,Kcn,Hashv,7,CoA,HAA,HoA,OldCoA,CNA,Dcn,RPP,KGCA,Blt,N0,Msglen,Type,DcnReq,SIDCN,K1,N1,Dummy_N2,SID).
 iknows(pair(CoA,pair(CNA,pair(crypt(Kcn,pair(N1,N2)),RPP))))
 =>
 state_correspondingnode(CN,MN,HA,KGC,Kcn,Hashv,9,CoA,HAA,HoA,OldCoA,CNA,Dcn,RPP,KGCA,Blt,N0,Msglen,Type,DcnReq,SIDCN,K1,N1,N2,SID).
 iknows(pair(CNA,pair(CoA,apply(Hashv,Dummy_N2))))

step step_8 (KGC,MN,CN,HA,Hashv,CoA,HAA,HoA,OldCoA,CNA,RPP,KGCA,Blt,N0,Msglen,Type,Dcn,DcnReq,SIDCN,K1,N1,N2,SID) :=
 state_privatekeygenerator(KGC,MN,CN,HA,Hashv,4,CoA,HAA,HoA,OldCoA,CNA,RPP,KGCA,Blt,N0,Msglen,Type,Dcn,DcnReq,SIDCN,K1,N1,N2,SID).
 iknows(pair(CNA,pair(KGCA,DcnReq)))
 =>
 state_privatekeygenerator(KGC,MN,CN,HA,Hashv,6,CoA,HAA,HoA,OldCoA,CNA,RPP,KGCA,Blt,N0,Msglen,Type,Dcn,DcnReq,SIDCN,K1,N1,N2,SID).
 iknows(pair(KGCA,pair(CNA,Dcn)))


section properties:

property secrecy_of_n1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,n1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_n2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,n2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state secrecy_of_n1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,n1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_n2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,n2,ASGoal) &
 not(contains(i,ASGoal))



role alice(
A,B	:agent,
Kab	:symmetric_key,
Hash	:hash_func,
SND,RCV :channel(dy))
played_by A def=

local
 State	:nat,
 Na,Nb	:text,
 M	:message

init
 State :=0

transition 

1. State =0 /\ RCV(start) =|>
   State' :=2 /\ Na' :=new()
	    /\  SND ({Na'}_Kab)

2. State =2 /\ RCV ({Nb'}_Kab) =|>
   State' := 4 /\ M' :=Hash(Na.Nb')
                /\ SND ({Nb'}_M')
                
end role

role bob(
     A,B		: agent,
     Kab       	: symmetric_key,
     Hash		: hash_func,
     SND,RCV	:channel (dy))
played_by B def=

local
    State		: nat,
    Nb,Na		: text,
    M		: message

init 
 State :=1

transition

1. State =1 /\ RCV ({Na'}_Kab) =|>
    State' :=3/\ Nb' :=new()
                 /\SND({Nb'}_Kab)
	    /\M' :=Hash(Na'.Nb')
	    /\secret(M',k1,{A,B})
2. State =3 /\ RCV ({Nb}_M) =|>
    State' :=5 /\ request (B,A,bob_alice_nb, Nb)

end role


role session(
A,B	: agent,
Kab	: symmetric_key,
Hash	: hash_func)
def=

local SA,SB,RA,RB : channel(dy)

composition

	alice (A,B,Kab,Hash,SA,RA)
           /\  bob (A,B,Kab,Hash,SB,RB)
end role

role environment()
def=


const
 bob_alice_nb,
 k1		: protocol_id,
kab, kai, kib	: symmetric_key,
a,b		: agent,
h		: hash_func

intruder_knowledge={a,b,h,kai,kib}

composition
	
	session(a,b,kab,h)
	/\session(a,i,kai,h)
	/\session(i,b,kib,h)

end role

goal
   secrecy_of k1
   authentication_on bob_alice_nb
end goal


environment()

%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfile9aDJ7Mnp2x

section signature:

state_participant4: agent * nat * symmetric_key * symmetric_key * nat * nat * nat * nat * nat * message * message * nat -> fact
state_participant2: agent * nat * symmetric_key * nat * nat * nat * nat * nat * nat * message * message * set * nat -> fact
state_participant4adv: agent * nat * symmetric_key * symmetric_key * symmetric_key * nat * nat * nat * nat * nat * nat * message * message * nat -> fact
state_participant2adv: agent * nat * symmetric_key * nat * nat * nat * nat * message * message * nat -> fact
state_participant1: agent * nat * symmetric_key * nat * nat * message * nat -> fact


section types:

msgsecret: protocol_id
Set_47, Dummy_Set_47, set_143: set
ASGoal: set(agent)
MSG, PreKey, Dummy_PreKey, Dummy_MSG, dummy_msg, MGoal, start: message
K1, K2, K3, K, k1, k2, k3: symmetric_key
State, Nonce, Part1, Part2, Part3, G, 3, Part4, 2, 10, SID, Dummy_PreKey2, Dummy_PreKey1, 9, 8, Dummy_Part4, PreKey1, Dummy_Part3, PreKey2, 6, Dummy_Part2, Dummy_Part1, 4, 1, Dummy_Nonce, Dummy_State, dummy_nat, g, 5, 0: nat
P4, P4adv, P3adv, P2, P2adv, p1, p2, p4, p2adv, p4adv, P1, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(p1).
 iknows(p2).
 iknows(p4).
 iknows(p2adv).
 iknows(p4adv).
 iknows(g).
 iknows(k3).
 iknows(i).
 state_participant1(p1,g,k1,0,dummy_nat,dummy_msg,3).
 state_participant2adv(p2adv,g,k2,1,dummy_nat,dummy_nat,dummy_nat,dummy_msg,dummy_msg,4).
 state_participant4adv(p4adv,g,k1,k2,k3,3,dummy_nat,dummy_nat,dummy_nat,dummy_nat,dummy_nat,dummy_msg,dummy_msg,6).
 state_participant1(p1,g,k1,0,dummy_nat,dummy_msg,8).
 state_participant2(p2,g,k2,1,dummy_nat,dummy_nat,dummy_nat,dummy_nat,dummy_nat,dummy_msg,dummy_msg,set_143,9).
 state_participant4(p4,g,k1,k2,2,dummy_nat,dummy_nat,dummy_nat,dummy_nat,dummy_msg,dummy_msg,10)


section rules:

step step_0 (P1,G,K,Dummy_Nonce,MSG,SID,Nonce) :=
 state_participant1(P1,G,K,0,Dummy_Nonce,MSG,SID).
 iknows(start)
=[exists Nonce]=>
 state_participant1(P1,G,K,4,Nonce,MSG,SID).
 iknows(pair(G,exp(G,Nonce)))

step step_1 (P1,G,K,Nonce,Dummy_MSG,SID,MSG) :=
 state_participant1(P1,G,K,4,Nonce,Dummy_MSG,SID).
 iknows(MSG)
 =>
 state_participant1(P1,G,K,5,Nonce,MSG,SID)

step step_2 (P2adv,G,K,Dummy_Nonce,Dummy_Part1,Dummy_Part2,Dummy_MSG,PreKey,SID,Nonce,Part1,Part2) :=
 state_participant2adv(P2adv,G,K,1,Dummy_Nonce,Dummy_Part1,Dummy_Part2,Dummy_MSG,PreKey,SID).
 iknows(pair(Part1,Part2))
=[exists Nonce]=>
 state_participant2adv(P2adv,G,K,4,Nonce,Part1,Part2,pair(Part1,Part2),PreKey,SID).
 iknows(pair(exp(Part1,Nonce),pair(Part2,exp(Part2,Nonce))))

step step_3 (P2adv,G,K,Nonce,Part1,Part2,MSG,Dummy_PreKey,SID,PreKey) :=
 state_participant2adv(P2adv,G,K,4,Nonce,Part1,Part2,MSG,Dummy_PreKey,SID).
 iknows(PreKey)
 =>
 state_participant2adv(P2adv,G,K,5,Nonce,Part1,Part2,MSG,PreKey,SID)

step step_4 (P4adv,G,K1,K2,K3,Dummy_Nonce,Dummy_Part1,Dummy_Part2,Dummy_Part3,Dummy_Part4,Dummy_MSG,PreKey,SID,Nonce,Part1,Part2,Part3,Part4) :=
 state_participant4adv(P4adv,G,K1,K2,K3,3,Dummy_Nonce,Dummy_Part1,Dummy_Part2,Dummy_Part3,Dummy_Part4,Dummy_MSG,PreKey,SID).
 iknows(pair(Part1,pair(Part2,pair(Part3,Part4))))
=[exists Nonce]=>
 state_participant4adv(P4adv,G,K1,K2,K3,4,Nonce,Part1,Part2,Part3,Part4,pair(Part1,pair(Part2,pair(Part3,Part4))),PreKey,SID).
 iknows(pair(exp(exp(Part1,Nonce),K1),pair(exp(exp(Part2,Nonce),K2),exp(pair(Part3,exp(Part3,Nonce)),K3))))

step step_5 (P2,G,K,Dummy_Nonce,Dummy_Part1,Dummy_Part2,PreKey1,PreKey2,Dummy_MSG,PreKey,Set_47,SID,Nonce,Part1,Part2) :=
 state_participant2(P2,G,K,1,Dummy_Nonce,Dummy_Part1,Dummy_Part2,PreKey1,PreKey2,Dummy_MSG,PreKey,Set_47,SID).
 iknows(pair(Part1,Part2))
=[exists Nonce]=>
 state_participant2(P2,G,K,4,Nonce,Part1,Part2,PreKey1,PreKey2,pair(Part1,Part2),PreKey,Set_47,SID).
 iknows(pair(exp(Part1,Nonce),pair(Part2,exp(Part2,Nonce))))

step step_6 (P2,G,K,Nonce,Part1,Part2,Dummy_PreKey1,Dummy_PreKey2,MSG,Dummy_PreKey,Dummy_Set_47,SID,PreKey1,PreKey2) :=
 state_participant2(P2,G,K,4,Nonce,Part1,Part2,Dummy_PreKey1,Dummy_PreKey2,MSG,Dummy_PreKey,Dummy_Set_47,SID).
 iknows(pair(PreKey1,PreKey2))
 =>
 state_participant2(P2,G,K,5,Nonce,Part1,Part2,PreKey1,PreKey2,MSG,pair(PreKey1,PreKey2),Dummy_Set_47,SID).
 iknows(scrypt(exp(exp(inv(K)),PreKey2),MSG)).
 secret(MSG,msgsecret,Dummy_Set_47)

step step_7 (P4,G,K1,K2,Dummy_Nonce,Dummy_Part1,Dummy_Part2,Dummy_Part3,Dummy_MSG,PreKey,SID,Nonce,Part1,Part2,Part3) :=
 state_participant4(P4,G,K1,K2,2,Dummy_Nonce,Dummy_Part1,Dummy_Part2,Dummy_Part3,Dummy_MSG,PreKey,SID).
 iknows(pair(Part1,pair(Part2,Part3)))
=[exists Nonce]=>
 state_participant4(P4,G,K1,K2,3,Nonce,Part1,Part2,Part3,pair(Part1,pair(Part2,Part3)),PreKey,SID).
 iknows(pair(exp(exp(Part1,Nonce),K1),exp(exp(Part2,Nonce),K2)))


section properties:

property secrecy_of_msgsecret (MGoal,ASGoal) :=
 [] ((secret(MGoal,msgsecret,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state secrecy_of_msgsecret (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,msgsecret,ASGoal) &
 not(contains(i,ASGoal))


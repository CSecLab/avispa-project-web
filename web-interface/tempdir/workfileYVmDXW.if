%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileYVmDXW

section signature:

state_responder: agent * agent * hash_func * hash_func * public_key * nat * nat * text * text * text * text * text * text * public_key * apply(hash_func,public_key) * apply(hash_func,text) * apply(hash_func,text) * text * text * message * apply(hash_func,message) * nat -> fact
state_initiator: agent * agent * hash_func * hash_func * public_key * public_key * nat * nat * text * text * text * text * text * text * text * text * message * apply(hash_func,message) * set(agent) * nat -> fact


section types:

hash_dh, initiator_responder_hash_dh: protocol_id
set_96, set_124: set
Chosen_ESP_Trans, Chosen_HIP_Trans, Dummy_Chosen_ESP_Trans, Dummy_Chosen_HIP_Trans: apply(hash_func,text)
Hj_I, Dummy_Hj_I: apply(hash_func,public_key)
hi_i, hi_j, hi_r, HI_I, HI_R, Dummy_HI_I, dummy_pk: public_key
ASGoal, Set_36, Dummy_Set_36: set(agent)
soln_, hash_, Soln, Hash, choose: hash_func
R2, Dummy_R2: apply(hash_func,message)
dummy_msg, MGoal, EGX, start, EGY, Dummy_EGX, Dummy_EGY: message
A2Goal, A1Goal, j, r, J, R, i: agent
dummy_nonce, eSP_Trans, hIP_Trans, CERT, I1, Puzzle, LSI_I, SPI_I, LSI_R, SPI_R, Y, cert, hit_r, ESP_Trans, HIP_Trans, Dummy_CERT, PUZZLE, Dummy_LSI_I, X, Dummy_Puzzle, Dummy_Y, Dummy_LSI_R, Dummy_SPI_R, Dummy_ESP_Trans, Dummy_HIP_Trans, Dummy_PUZZLE, Dummy_SPI_I, Dummy_X: text
3, SID, SID2, SID1, g, 6, 4, 2, State, G, 5, 1, 0, Dummy_State: nat


section inits:

initial_state init1 := 
 iknows(start).
 iknows(j).
 iknows(r).
 iknows(hash_).
 iknows(soln_).
 iknows(hi_j).
 iknows(hi_r).
 iknows(g).
 iknows(hi_i).
 iknows(inv(hi_i)).
 iknows(i).
 state_initiator(j,r,hash_,soln_,hi_j,hi_r,g,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_96,3).
 state_responder(r,j,hash_,soln_,hi_r,g,2,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_pk,dummy_msg,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,4).
 state_initiator(j,i,hash_,soln_,hi_j,hi_i,g,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_124,6)


section rules:

step step_0 (J,R,Hash,Soln,HI_I,HI_R,G,X,SPI_I,LSI_I,SPI_R,LSI_R,PUZZLE,HIP_Trans,ESP_Trans,EGY,R2,Set_36,SID) :=
 state_initiator(J,R,Hash,Soln,HI_I,HI_R,G,0,X,SPI_I,LSI_I,SPI_R,LSI_R,PUZZLE,HIP_Trans,ESP_Trans,EGY,R2,Set_36,SID).
 iknows(start)
 =>
 state_initiator(J,R,Hash,Soln,HI_I,HI_R,G,1,X,SPI_I,LSI_I,SPI_R,LSI_R,PUZZLE,HIP_Trans,ESP_Trans,EGY,R2,Set_36,SID).
 iknows(pair(apply(Hash,HI_R),apply(Hash,HI_I)))

step step_1 (J,R,Hash,Soln,HI_I,HI_R,G,Dummy_X,Dummy_SPI_I,LSI_I,SPI_R,LSI_R,Dummy_PUZZLE,Dummy_HIP_Trans,Dummy_ESP_Trans,Dummy_EGY,Dummy_R2,Set_36,SID,X,SPI_I,PUZZLE,HIP_Trans,ESP_Trans,EGY) :=
 state_initiator(J,R,Hash,Soln,HI_I,HI_R,G,1,Dummy_X,Dummy_SPI_I,LSI_I,SPI_R,LSI_R,Dummy_PUZZLE,Dummy_HIP_Trans,Dummy_ESP_Trans,Dummy_EGY,Dummy_R2,Set_36,SID).
 iknows(pair(pair(PUZZLE,pair(HI_R,pair(EGY,pair(HIP_Trans,ESP_Trans)))),crypt(inv(HI_R),apply(Hash,pair(PUZZLE,pair(HI_R,pair(EGY,pair(HIP_Trans,ESP_Trans))))))))
=[exists SPI_I,X]=>
 state_initiator(J,R,Hash,Soln,HI_I,HI_R,G,3,X,SPI_I,LSI_I,SPI_R,LSI_R,PUZZLE,HIP_Trans,ESP_Trans,EGY,apply(Hash,exp(EGY,X)),Set_36,SID).
 iknows(pair(apply(Soln,PUZZLE),pair(SPI_I,pair(LSI_I,pair(apply(choose,HIP_Trans),pair(apply(choose,ESP_Trans),pair(exp(G,X),pair(scrypt(apply(Hash,exp(EGY,X)),HI_I),pair(crypt(inv(HI_I),apply(Hash,pair(apply(Soln,PUZZLE),pair(SPI_I,pair(LSI_I,pair(apply(choose,HIP_Trans),pair(apply(choose,ESP_Trans),pair(exp(G,X),scrypt(apply(Hash,exp(EGY,X)),HI_I))))))))),pair(cert,crypt(inv(HI_I),apply(Hash,cert))))))))))))

step step_2 (J,R,Hash,Soln,HI_I,HI_R,G,X,SPI_I,LSI_I,Dummy_SPI_R,Dummy_LSI_R,PUZZLE,HIP_Trans,ESP_Trans,EGY,R2,Dummy_Set_36,SID,SPI_R,LSI_R) :=
 state_initiator(J,R,Hash,Soln,HI_I,HI_R,G,3,X,SPI_I,LSI_I,Dummy_SPI_R,Dummy_LSI_R,PUZZLE,HIP_Trans,ESP_Trans,EGY,R2,Dummy_Set_36,SID).
 iknows(pair(apply(Hash,pair(SPI_R,pair(LSI_R,apply(Hash,R2)))),crypt(inv(HI_R),pair(SPI_R,pair(LSI_R,apply(Hash,R2))))))
 =>
 state_initiator(J,R,Hash,Soln,HI_I,HI_R,G,5,X,SPI_I,LSI_I,SPI_R,LSI_R,PUZZLE,HIP_Trans,ESP_Trans,EGY,R2,Dummy_Set_36,SID).
 request(J,R,initiator_responder_hash_dh,R2,SID).
 secret(apply(Hash,exp(EGY,X)),hash_dh,Dummy_Set_36).
 contains(J,Dummy_Set_36).
 contains(R,Dummy_Set_36)

step step_3 (R,J,Hash,Soln,HI_R,G,Dummy_Y,SPI_R,LSI_R,SPI_I,LSI_I,Dummy_Puzzle,HI_I,Dummy_Hj_I,Chosen_HIP_Trans,Chosen_ESP_Trans,I1,CERT,EGX,R2,SID,Y,Puzzle,Hj_I) :=
 state_responder(R,J,Hash,Soln,HI_R,G,2,Dummy_Y,SPI_R,LSI_R,SPI_I,LSI_I,Dummy_Puzzle,HI_I,Dummy_Hj_I,Chosen_HIP_Trans,Chosen_ESP_Trans,I1,CERT,EGX,R2,SID).
 iknows(pair(apply(Hash,HI_R),Hj_I))
=[exists Puzzle,Y]=>
 state_responder(R,J,Hash,Soln,HI_R,G,4,Y,SPI_R,LSI_R,SPI_I,LSI_I,Puzzle,HI_I,Hj_I,Chosen_HIP_Trans,Chosen_ESP_Trans,I1,CERT,EGX,R2,SID).
 iknows(pair(pair(Puzzle,pair(HI_R,pair(exp(G,Y),pair(hIP_Trans,eSP_Trans)))),crypt(inv(HI_R),apply(Hash,pair(Puzzle,pair(HI_R,pair(exp(G,Y),pair(hIP_Trans,eSP_Trans))))))))

step step_4 (R,J,Hash,Soln,HI_R,G,Y,Dummy_SPI_R,LSI_R,Dummy_SPI_I,Dummy_LSI_I,Puzzle,Dummy_HI_I,Dummy_Chosen_HIP_Trans,Dummy_Chosen_ESP_Trans,I1,Dummy_CERT,Dummy_EGX,Dummy_R2,SID,SPI_R,SPI_I,LSI_I,HI_I,Chosen_HIP_Trans,Chosen_ESP_Trans,CERT,EGX) :=
 state_responder(R,J,Hash,Soln,HI_R,G,4,Y,Dummy_SPI_R,LSI_R,Dummy_SPI_I,Dummy_LSI_I,Puzzle,Dummy_HI_I,apply(Hash,HI_I),Dummy_Chosen_HIP_Trans,Dummy_Chosen_ESP_Trans,I1,Dummy_CERT,Dummy_EGX,Dummy_R2,SID).
 iknows(pair(pair(apply(Soln,Puzzle),pair(SPI_I,pair(LSI_I,pair(Chosen_HIP_Trans,pair(Chosen_ESP_Trans,pair(EGX,scrypt(apply(Hash,exp(EGX,Y)),HI_I))))))),pair(crypt(inv(HI_I),apply(Hash,pair(apply(Soln,Puzzle),pair(SPI_I,pair(LSI_I,pair(Chosen_HIP_Trans,pair(Chosen_ESP_Trans,pair(EGX,scrypt(apply(Hash,exp(EGX,Y)),HI_I))))))))),pair(CERT,crypt(inv(HI_I),apply(Hash,CERT))))))
=[exists SPI_R]=>
 state_responder(R,J,Hash,Soln,HI_R,G,6,Y,SPI_R,LSI_R,SPI_I,LSI_I,Puzzle,HI_I,apply(Hash,HI_I),Chosen_HIP_Trans,Chosen_ESP_Trans,I1,CERT,EGX,apply(Hash,exp(EGX,Y)),SID).
 iknows(pair(apply(Hash,pair(SPI_R,pair(LSI_R,apply(Hash,apply(Hash,exp(EGX,Y)))))),crypt(inv(HI_R),pair(SPI_R,pair(LSI_R,apply(Hash,apply(Hash,exp(EGX,Y)))))))).
 witness(R,J,initiator_responder_hash_dh,apply(Hash,exp(EGX,Y)))


section properties:

property secrecy_of_hash_dh (MGoal,ASGoal) :=
 [] ((secret(MGoal,hash_dh,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_initiator_responder_hash_dh (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,initiator_responder_hash_dh,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,initiator_responder_hash_dh,MGoal))
     /\ ((request(A1Goal,A2Goal,initiator_responder_hash_dh,MGoal,SID1)
           /\ request(A1Goal,A2Goal,initiator_responder_hash_dh,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_hash_dh (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,hash_dh,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_initiator_responder_hash_dh (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,initiator_responder_hash_dh,MGoal,SID) &
 not(witness(A2Goal,A1Goal,initiator_responder_hash_dh,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_initiator_responder_hash_dh (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,initiator_responder_hash_dh,MGoal,SID1).
 request(A1Goal,A2Goal,initiator_responder_hash_dh,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


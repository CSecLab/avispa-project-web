role alice (Ui, Sj : agent,
SKuisj : symmetric_key,
% H is one-way hash function
H: hash_func,
Snd, Rcv: channel(dy))
% Player by the initiator: the user Ui
played_by Ui
def=
local State : nat,
RPWi, PWi, Bi, Xs, K, IDi, Q,
Fi, Ri, Si, P, RNu, RNs, SKij: text,
F, Gen, Rep : hash_func
const alice_bob_rnu, bob_alice_rns,
subs1, subs2, subs3,
subs4, subs5 : protocol_id
init State := 0
transition
% Registration phase
1. State = 0 / Rcv(start) =|>
State’ := 1 / Fi’ := H(H(IDi.K.PWi).Bi)
% Send the registration request message to Sj
/ Snd({IDi.Fi’}_SKuisj)
/ secret({Xs}, subs1, Sj)
/ secret({PWi, Bi, K}, subs2, Ui)
/ secret({IDi}, subs3, {Ui,Sj})
% Receive the registration acknowledgment message from Sj
2. State = 1 / Rcv({P.Q.F(Xs.P).H(H(IDi.K.PWi).Bi).
xor(H(IDi.Xs),H(H(IDi.K.PWi).Bi)).
H.Rep}_SKuisj) =|>
% Login phase
State’ := 2 / Ri’ := new()
/ RNu’ := new()
/ secret(Ri’, subs4, Ui)
% Send the login request message to Sj
/ Snd(F(Ri’.P).
xor(xor(IDi, H(F(Ri’.P).F(Ri’.Xs.P))),RNu’).
H(IDi.xor(xor(IDi, H(F(Ri’.P).F(Ri’.Xs.P))),RNu’).
F(Ri’.P).F(Ri’.Xs.P).H(IDi.Xs).RNu’))
% Ui has freshly generated the value RNu for Sj
/ witness(Ui, Sj, alice_bob_rnu, RNu’)
%Authentication and session key agreement phase
% Receive the authentication request message from Sj
3. State = 2 / Rcv(F(Si’.P).xor(xor(H(IDi.Xs),RNs’),RNu’).
H(F(Si’.Ri’.P).F(Ri’.Xs.P).F(Si’.P).
xor(xor(H(IDi.Xs),RNs’),RNu’).RNu’.RNs’.
H(IDi.H(IDi.Xs).RNu’.RNs’.F(Ri’.Xs.P).
F(Si’.P))) ) =|>
% Ui’s acceptance of the value RNs generated for Ui by Sj
State’ := 3 / request(Sj, Ui, bob_alice_rns, RNs’)
end role 
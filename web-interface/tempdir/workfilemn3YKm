%%BIO-PWA Scheme developed by SK H ISLAM
%% BITS Pilani


role user(
      U, S : agent,
      H, Mul : hash_func,
      SKus :  symmetric_key,
      SND, RCV : channel(dy))

played_by U

def=
  local State : nat, 
        IMu, SIDu, Cu, PWu, X: text,
        Tu, Ts, Ruu, Ru, Rss, Rs: text,
        Ku, Ks, P, SK : text

const user_server_tu, user_server_ru,
      server_user_ts, server_user_rs,
      subs: protocol_id


init State:=0

transition
%%Registration Phase

1. State = 0/RCV(start)=|>
   State' := 1/SND({IMu. H(PWu)}_SKus)
                      /secret({PWu}, subs, U)
2.State =1/SND(IMu.H(IDu, X, SIDu).H(H(IDu, X, SIDu), ID) }_SKus)=|>
%Login phase
 State' := 2 /Ru':= new() 
                     / Tu':= new()
                     / Ruu':= Mul(Ru', H(IDu, X, SIDu))
                     / Cu' := H(IMu, Ruu', H(IDu, X, SIDu),  Tu')
                     / SND(IMu.Ruu'.Cu'.Tu')  
                     / witness(U, S, user_server_tu, Tu')
                     / witness(U, S, user_server_ru, Ru')
%%Authentication Phase
%% Receive the authentication message
3. State=2 / RCV(IMu. Mul(Rs', H(IDu, X, SIDu)). H(IMu, Rss', H(IDu, X, SIDu),Ts').Ts')
State' :=3 / Ku':= Mul(Mul(Ru', Mul(Rs', H(IDu, X, SIDu))))
                   / Rss':= Mul(Rs', H(IDu, X, SIDu))         
                   / SK':= H(IMu, Ruu, Rss', Tu, Ts', Ku')
                   / request(S, U, server_user_ts, Ts')
                   / request(S, U, server_user_rs, Rs')
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role server(
  U, S : agent,
      H, Mul : hash_func,
      SKus :  symmetric_key,
      SND, RCV : channel(dy))

played_by S

def=
  local State : nat, 
        IMu, SIDu, Cu, PWu, X: text,
        Tu, Ts, Ruu, Ru, Rss, Rs: text,
        Ku, Ks, P, SK : text

const user_server_tu, user_server_ru,
      server_user_ts, server_user_rs,
      subs: protocol_id


init State:=0

transition
%%Registration Phase
%%Request the registration request from the user
1. State = 0 / RCV({IMu. H(PWu)}_SKus) =|>
 State' := 1 / secret({PWu}, subs, U)
%%send the smartcard to U
/ SND(IMu.H(IDu, X, SIDu).H(H(IDu, X, SIDu), ID) }_SKus)
%Login Phase
%Receive login request
2. State = 1 / RCV(IMu. Mul(Ru', H(IDu, X, SIDu)). H(IMu, Ruu', H(IDu, X, SIDu),  Tu').Tu')=|>
  State':= 2 / Rs' := new() 
             / Ts' := new()
             / Rss' := Mul(Rs', H(IDu, X, SIDu))
             / Cs':= H(IMu, Rss', H(IDu, X, SIDu),  Ts')
             / SND(IMu.Rss'.Cs'.Ts')    
             / Ks':= Mul(Mul(Rs', Mul(Ru', H(IDu, X, SIDu))))
             / Ruu':= Mul(Ru', H(IDu, X, SIDu))         
             / SK':= H(IMu, Ruu', Rss, Tu', Ts, Ks)
             / witness(S, U, server_user_ts, Ts')
             / witness(S, U, server_user_rs, Rs')
             / request(U, S, user_server_tu, Tu')
             / request(U, S, user_server_ru, Ru')
end role


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role session(
       U, S : agent,
       H, Mul : hash_func,
       SKus :  symmetric_key)
def=
local S1, S2, R1, R2: channel(dy)

composition
      user(U, S, H, Mul, SKus, S1, R1)
   / server(S, U, H, Mul, SKus, S1, R1)
end role


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role environment()
def=
const u, s: agent,
      imu, pwu, x : text,
      tu, ts,  ruu, ru, rss, rs: text,
      h, mul : hash_func,
      skus : symmetric_key,
      user_server_tu, user_server_ru,
      server_user_ts, server_user_rs,
      subs: protocol_id

intruder_knowledge = {u, s, h, mul}

composition
   session(u, s, h, mul, skus)
/ session(u, s, h, mul, skus)
end role

goal
secrecy_of  subs
authentication_on  user_server_tu
authentication_on  user_server_ru
authentication_on  server_user_ts
authentication_on  server_user_rs
end goal

environment()
 
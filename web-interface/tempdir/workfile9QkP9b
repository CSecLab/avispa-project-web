%%%%% Implementation of Elliptic curve cryptography-based access control in sensor networks
%%%%% Name: Mayukh Chakraborty
%%%%% Roll: 201205677
%

role user (U, S : agent,
SKus : symmetric_key,
H : hash_func,
Snd, Rcv: channel(dy))

played_by U
def=
local State : nat,
PWi, Ni, Y,Na,CID,Bi,Ci,Nb,Ack,Ni_new,PWi_new: text
const s1,s2,user_a,user_b : protocol_id

init 
State := 0

transition
1. State = 0 /\Rcv(start) =|>State' := 2 
/\PWi' := new()
/\Snd({PWi'}_SKus)
/\secret({PWi'}, s1, {U,S})
/\secret({SKus}, s2, {U,S})

2.State = 2 /\Rcv({PWi.H.Ni'.Y'}_SKus)=|> State':= 4

3.State=4 /\Rcv({PWi'.H.Ni'.Y'}_SKus)=|> State':=6
/\Na':=new()
/\witness(U,S,user_a,Na')  % User U has generated the value 
/\CID':=xor(H(PWi'),H(xor(Ni',xor(Y',Na'))))
/\Bi':=H(xor(CID',H(PWi)))
/\Ci':=H(xor(Na',xor(Ni',xor(Bi',Y'))))
/\Snd(CID'.Ni'.Ci'.Na')

%%%%%%%%%%%%%%%password updation
4.State=6=|> State':=8
/\PWi_new':=new()
/\Ni_new':=xor(Ni',xor(H(PWi),H(PWi_new')))
/\Ni':=Ni_new'
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role session(U, S : agent)
def=
local 
SKus : symmetric_key,
H : hash_func,
SU,SS,RU,RS:channel(dy),
PWi, X,Y,Ni: text
const s1,s2 : protocol_id
composition
user(U,S,SKus,H,SU,RU)
/\server(U,S,SKus,H,SS,RS)
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role server (U, S : agent,
SKus : symmetric_key,
H: hash_func,
Snd, Rcv: channel(dy))

played_by S
def=
local 
State : nat,
PWi, Ni, Y,X,Na,CID,Bi,Ci,Nb,HPWi,Ack: text
const s1,s2,user_a,user_b : protocol_id

init 
State := 1

transition
1. State = 1 /\Rcv({PWi'}_SKus) =|>
State':=3
/\X':=new()
/\secret(X',s1,{S})
/\Y':=new()
/\secret(Y',s2,{U,S})
/\Ni':=xor(PWi',X')
%/\Ni' := new()
/\Snd({PWi'.H.Ni'.Y'}_SKus)

2.State=3/\Rcv(CID'.Ni'.Ci'.Na')=|>
State':=5
/\Nb':=new()
%/\H(PWi'):=xor(CID',H(Ni',xor(Y1,Na')))
%/\Bi':=H(xor(CID',H(PWi')))
%/\Ci':=H(xor(Na',xor(Ni',xor(Bi',Y'))))
/\request(S,U,user_a,Na') % Server acceptance of value generated by U
end role


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role environment ()
def=
const u,s : agent,
h: hash_func,
s1,s2,user_a,user_b : protocol_id

intruder_knowledge={u,s,h}
composition
session(u,s)
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
goal
	secrecy_of s1
	secrecy_of s2
	authentication_on user_a
	authentication_on user_b
end goal
environment()

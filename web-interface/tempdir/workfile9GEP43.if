%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfile9GEP43

section signature:

state_bob: agent * agent * hash_func * hash_func * hash_func * symmetric_key * symmetric_key * symmetric_key * nat * public_key * public_key * public_key * public_key * symmetric_key * symmetric_key * symmetric_key * text * text * message * message * message * message * set * nat -> fact
state_alice: agent * agent * hash_func * hash_func * hash_func * symmetric_key * symmetric_key * symmetric_key * nat * public_key * public_key * public_key * public_key * symmetric_key * symmetric_key * symmetric_key * text * text * message * message * message * message * set * nat -> fact


section types:

ASGoal: set(agent)
x2, bobid, x1, aliceid: protocol_id
dummy_pk, IDa, IDb, Pa, Pb: public_key
set_98, Set_68, Set_37, set_124, set_123, set_122, set_120, Dummy_Set_68, set_114, Dummy_Set_37: set
h, union, pred, H, Union, Pred: hash_func
dummy_sk, kb, ka, ki, p, Da, Db, Sk, Kb, Ka, P, Dummy_Kb, Dummy_Sk, Dummy_Ka: symmetric_key
SID2, SID1, SID, 3, State, 4, 2, 1, 0, 10, 6, Dummy_State: nat
A2Goal, A1Goal, B, A, b, a, i: agent
MGoal, Tb, Ta, Sb, Sa, start, Dummy_Sb, Dummy_Tb, Dummy_Sa, Dummy_Ta, dummy_msg: message
Ra, Rb, Dummy_Rb, Dummy_Ra, dummy_nonce: text


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(ki).
 iknows(h).
 iknows(union).
 iknows(pred).
 iknows(p).
 iknows(i).
 state_alice(a,b,h,union,pred,ka,kb,p,0,dummy_pk,dummy_pk,dummy_pk,dummy_pk,dummy_sk,dummy_sk,dummy_sk,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_98,3).
 state_bob(b,a,h,union,pred,ka,kb,p,1,dummy_pk,dummy_pk,dummy_pk,dummy_pk,dummy_sk,dummy_sk,dummy_sk,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_114,4).
 state_alice(a,i,h,union,pred,ka,ki,p,0,dummy_pk,dummy_pk,dummy_pk,dummy_pk,dummy_sk,dummy_sk,dummy_sk,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_120,6).
 state_bob(b,i,h,union,pred,ki,kb,p,1,dummy_pk,dummy_pk,dummy_pk,dummy_pk,dummy_sk,dummy_sk,dummy_sk,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_124,10)


section rules:

step step_0 (A,B,H,Union,Pred,Dummy_Ka,Kb,P,IDa,IDb,Pa,Pb,Da,Db,Sk,Dummy_Ra,Rb,Dummy_Ta,Tb,Dummy_Sa,Sb,Set_37,SID,Ra) :=
 state_alice(A,B,H,Union,Pred,Dummy_Ka,Kb,P,0,IDa,IDb,Pa,Pb,Da,Db,Sk,Dummy_Ra,Rb,Dummy_Ta,Tb,Dummy_Sa,Sb,Set_37,SID).
 iknows(start)
=[exists Ra]=>
 state_alice(A,B,H,Union,Pred,apply(Pred,pair(Da,Pb)),Kb,P,2,IDa,IDb,Pa,Pb,Da,Db,Sk,Ra,Rb,apply(Pred,pair(apply(Pred,pair(Dummy_Ra,Da)),P)),Tb,apply(H,apply(Union,pair(Dummy_Ta,Dummy_Ka))),Sb,Set_37,SID).
 iknows(pair(IDa,pair(Dummy_Ta,Dummy_Sa)))

step step_1 (A,B,H,Union,Pred,Ka,Kb,P,IDa,IDb,Pa,Pb,Da,Db,Dummy_Sk,Ra,Rb,Ta,Dummy_Tb,Sa,Dummy_Sb,Dummy_Set_37,SID,Tb) :=
 state_alice(A,B,H,Union,Pred,Ka,Kb,P,2,IDa,IDb,Pa,Pb,Da,Db,Dummy_Sk,Ra,Rb,Ta,Dummy_Tb,Sa,Dummy_Sb,Dummy_Set_37,SID).
 iknows(pair(IDb,pair(Tb,apply(H,apply(Union,pair(Dummy_Tb,Ka))))))
 =>
 state_alice(A,B,H,Union,Pred,Ka,Kb,P,4,IDa,IDb,Pa,Pb,Da,Db,apply(H,apply(Union,pair(Ta,apply(Union,pair(Dummy_Tb,apply(Union,pair(Sa,apply(Union,pair(Dummy_Sb,apply(Pred,pair(apply(Pred,pair(Ra,Da)),Dummy_Tb))))))))))),Ra,Rb,Ta,Tb,Sa,apply(H,apply(Union,pair(Dummy_Tb,Ka))),Dummy_Set_37,SID).
 secret(Da,aliceid,Dummy_Set_37).
 request(A,B,x1,Da,SID).
 contains(a,Dummy_Set_37).
 contains(b,Dummy_Set_37)

step step_2 (B,A,H,Union,Pred,Dummy_Kb,Ka,P,IDa,IDb,Pa,Pb,Da,Db,Dummy_Sk,Ra,Dummy_Rb,Dummy_Tb,Dummy_Ta,Dummy_Sb,Dummy_Sa,Dummy_Set_68,SID,Rb,Ta) :=
 state_bob(B,A,H,Union,Pred,Dummy_Kb,Ka,P,1,IDa,IDb,Pa,Pb,Da,Db,Dummy_Sk,Ra,Dummy_Rb,Dummy_Tb,Dummy_Ta,Dummy_Sb,Dummy_Sa,Dummy_Set_68,SID).
 iknows(pair(IDa,pair(Ta,apply(H,apply(Union,pair(Dummy_Ta,Dummy_Kb))))))
=[exists Rb]=>
 state_bob(B,A,H,Union,Pred,apply(Pred,pair(Db,Pa)),Ka,P,3,IDa,IDb,Pa,Pb,Da,Db,apply(H,apply(Union,pair(Dummy_Ta,apply(Union,pair(Dummy_Tb,apply(Union,pair(Dummy_Sa,apply(Union,pair(Dummy_Sb,apply(Pred,pair(apply(Pred,pair(Dummy_Rb,Db)),Dummy_Ta))))))))))),Ra,Rb,apply(Pred,pair(apply(Pred,pair(Dummy_Rb,Db)),P)),Ta,apply(H,apply(Union,pair(Dummy_Tb,Dummy_Kb))),apply(H,apply(Union,pair(Dummy_Ta,Dummy_Kb))),Dummy_Set_68,SID).
 iknows(pair(IDb,pair(Dummy_Tb,Dummy_Sb))).
 secret(Db,bobid,Dummy_Set_68).
 request(B,A,x2,Db,SID).
 contains(b,Dummy_Set_68).
 contains(a,Dummy_Set_68)


section properties:

property secrecy_of_aliceid (MGoal,ASGoal) :=
 [] ((secret(MGoal,aliceid,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_bobid (MGoal,ASGoal) :=
 [] ((secret(MGoal,bobid,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_x1 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,x1,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,x1,MGoal))
     /\ ((request(A1Goal,A2Goal,x1,MGoal,SID1)
           /\ request(A1Goal,A2Goal,x1,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_x2 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,x2,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,x2,MGoal))
     /\ ((request(A1Goal,A2Goal,x2,MGoal,SID1)
           /\ request(A1Goal,A2Goal,x2,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_aliceid (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,aliceid,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_bobid (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,bobid,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_x1 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,x1,MGoal,SID) &
 not(witness(A2Goal,A1Goal,x1,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_x1 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,x1,MGoal,SID1).
 request(A1Goal,A2Goal,x1,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_x2 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,x2,MGoal,SID) &
 not(witness(A2Goal,A1Goal,x2,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_x2 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,x2,MGoal,SID1).
 request(A1Goal,A2Goal,x2,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


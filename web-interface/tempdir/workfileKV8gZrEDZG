role reader 
        (R,T,BS: agent,
         Hash,PRNG : hash_func,
         K: symmetric_key,
         SND_RT,RCV_RT: channel (dy),
         SND_RS,RCV_RS: channel(ota))
played_by R
def=
local
    State : nat,
    Nr,Nt,Id,S : text,
    V,M,N,Hv : message
init
State := 0
transition
1. State = 0   /\ RCV_RT(start) =|>
   State':= 1  /\ Nr':= new()
               /\ SND_RT(Nr')
2. State = 1   /\ RCV_RT(V'.Hv'.Nt')  =|>
   State':= 2  /\ SND_RS(V'.Hv'.Nt'.Nr)
3. State = 2   /\ RCV_RS({S}_K) =|>
   State':=3   /\ M':= PRNG(S.Nr)
               /\ N':= PRNG(M')             
               /\ SND_RT(N')
               /\ SND_RS(M')
               /\ witness(R,T,interm,N')
end role
%.....................................

role tag (R,T,BS: agent,
          Hash,PRNG: hash_func, 
          SN,RC: channel(dy))

played_by T
def=
local
    State : nat,
    Nr,Nt,Id,S : text,
    M,N,V,U,Hv : message
init
State := 0
transition
1. State = 0   /\ RC(Nr') =|>
   State':= 1  /\ Nt' := new() 
               /\ V':= PRNG(S.Nr'.Nt')
               /\ Hv':= Hash(Id)
               /\ SN(V'.Hv'.Nt')
               /\ secret(Id,tag_identity,{T,BS}) 
               %/\ witness(T,BS,iden_info,Hv')
               %/\ witness (T,BS,pseudo_number,V') 
               
2. State = 1   /\ RC(N')  =|>
   State':=2   /\ M':= PRNG(S.Nr)
               /\ N':= PRNG(M')  
               /\ request(T,R,interm,N')
               /\ U':=PRNG(S.M')
               /\ S':=xor(S,U')
end role


% Role of the server.....................

role server( R,T,BS : agent,
             Hash,PRNG :hash_func,
             K: symmetric_key,
             SND,RCV: channel(ota))
played_by BS
def=
local
     State : nat,
     Nr,Nt,Id,S : text,
     M,N,V,U,Hv : message
init
State := 0
transition
1. State = 0  /\ RCV(V'.Hv'.Nt'.Nr') =|>
   State':= 1 /\ Hv':= Hash(Id)
              /\ V':= PRNG(S.Nr'.Nt')
              %/\ request(BS,T,iden_info,Hv')
              %/\ request(BS,T,pseudo_number,V')
              /\ SND({S}_K)
              /\ secret(K,sym_key,{BS,R})
2. State = 1  /\ RCV(M') =|>
   State':= 2 /\ U':=PRNG(S.M')
              /\ S':=xor(S,U')
                                
 end role        

role session(
R,T,BS : agent,
Hash,PRNG : hash_func ,
K: symmetric_key)
def=
local 
      SRS,RRS,SSR,RSR : channel(ota),
      SRT,RRT,STR,RTR : channel(dy)
composition
tag(R,T,BS,Hash,PRNG,STR,RTR)
/\reader (R,T,BS,Hash,PRNG,K,SRT,RRT,SRS,RRS)
/\ server(R,T,BS,Hash,PRNG,K,SSR,RSR)
end role


role environment()
def=
const
pseudo_number,tag_identity,iden_info,interm,sym_key: protocol_id,
r,t,b : agent,
h,p : hash_func,
k,ks,kr,kt: symmetric_key
intruder_knowledge = {r,t,b,h,p,ks,kr}
composition
  session(r,t,b,h,p,k)
/\session(i,r,b,h,p,kr)
/\ session(r,i,b,h,p,kt)

end role

goal
secrecy_of tag_identity
secrecy_of sym_key
authentication_on interm
%authentication_on pseudo_number
%authentication_on iden_info
end goal

environment()






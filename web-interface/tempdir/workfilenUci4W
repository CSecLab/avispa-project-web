role alice( A, B, S : agent,
SND, RCV : channel(dy),
H : hash_func,
PWA : symmetric_key,
M, G :text)
Played_ by A def=
local State : nat,
X, Z , P1 : text,
GY, Key :message
const sec_m_Key : protocol_id
init State := 0
transition
1. State = 0 &#708;  RCV(start)= | >
State’:= 1 &#708;  X’ := new()
&#708;  P1’ := new()
&#708;  SND(xor(exp(G,X’), exp(M,PWA)). exp(G,P1’))
2. State = 1 &#708; RCV(xor(exp(GY’,Z’), H(PWA.A.B.exp(G,X).exp(exp(G,P1),Z’)))
exp(G,Z’).H(A.B.Key’))= | >
State’:= 2 &#708;  Key’ := exp(exp(GY’,Z’), X)
&#708;  SND(H(A.B. Key’))
&#708;  witness(A,B,key1,Key’)
&#708;  request(A,B,key,Key)
&#708;  secret(Key,sec_m_Key,A,B)
end role
______________________________________________________________________________

role bob( A, B, S : agent,
SND,RCV : channel(dy),
H : hash_func,
PWA,PWB : symmetric_key,
M, N, G :text)
Played_by B
def =
local State : nat,
X, Y, Z, P1, P2 : text,
GX, GY : message,
FM1, FM2, Key :message
const sec_v_Key : protocol_id
init State := 0
transition
1.State = 0 &#708; RCV(xor(exp(G,X’),exp(M,PWA)).exp(G,P1’))= | >
State’:= 1 &#708;  Y’ := new()
&#708;  P2’ := new()
&#708;  SND(xor(exp(G,X’), exp(M,PWA)).exp(G,P1’).xor(exp(G,Y’),
exp(N,PWB)).exp(G,P2’))
2. State = 1 &#708;  RCV(xor(exp(GY,Z’),H(PWA.A.B.exp(G,X’).exp(exp(G,P1’),Z’))).exp(G,Z’),
xor(exp(GX’,Z’),H(PWB.B.A.exp(G,Y).exp(exp(G,P2),Z’))).exp(G,Z’))= | >
State’:= 2 &#708;  FM1’ := H(PWA.A.B.exp(G,X’).exp(exp(G,P1’),Z’))
&#708;  FM2’ := H(PWB.B.A.exp(G,Y).exp(exp(G,P2),Z’))
&#708;  SND(xor(exp( GY,Z’),FM1’).exp(G,Z’).H(A.B.exp(exp(GX’,Z’),Y)))
3. State = 2 &#708;  RCV(H(A.B.exp(exp(GX’,Z’),Y)))= | >
State’:= 3 &#708;  Key’ := exp(exp(GX’,Z’),Y)
/  request(B,A,key1,Key)
/  secret(Key,sec_v_Key,B,A)
/  witness(B, A, key, Key’)
end role
______________________________________________________________________________
role server ( A,B,S : agent,
SND,RCV : channel(dy),
H : hash_func,
PWA,PWB : symmetric_key
M, N,G : text)
Played_by S
def =
local State : nat,
X,Y,Z :text,
P1,P2 : text,
GX,GY : message,
FM1,FM2 : message
init State := 0
transition
1. State = 0 &#708;  RCV(xor(exp(G,X’),exp(M,PWA).exp(G,P1’)).xor(exp(G,Y’),
exp(N,PWB).exp(G,P2’)))= | >
State’:= 1 &#708;  Z’ := new()
&#708;  GY’ := new()
&#708;  GX’ := new()
&#708;  FM1’ := H(PWA.A.B.exp(G,X’).exp(exp(G,P1’),Z’))
&#708;  FM2’ := H(PWB.B.A.exp(G,Y’).exp(exp(G,P2’),Z’))
&#708;  SND(xor(exp(GY’,Z’),FM1’).exp(G,Z’),xor(exp(GX’,Z’),FM2’).exp(G,Z’))
end role
______________________________________________________________________________
role session( A,B,S : agent,
H : hash_func,
PWA,PWB : symmetric_key,
M, N, G : text)
def =
local SND,RCV : channel (dy)
composition

alice(A,B,S,SND,RCV,H,PWA,M,G)
&#708;  bob(A,B,S,SND,RCV,H,PWA,PWB,M,N,G)
&#708;  server(A,B,S,SND,RCV,H,PWA,PWB,M,N,G)
end role
______________________________________________________________________________
role environment()
def =
const a, b, s : agent,
h : hash_func,
key, key1 : protocol_id,
pwa, pwb, pwi :symmetric_key,
g, m, n : text
intruder_knowledge = a, b, s, g, h, pwi
composition
session(b,a,s,h,pwa,pwb,m,n,g)
&#708;  session(i,b,s,h,pwi,pwb,m,n,g)
&#708;  session(a,i,s,h,pwa,pwi,m,n,g)
end role
______________________________________________________________________________
goal
authentication_on key
authentication_on key1
secrecy_of sec_m_Key, sec_v_Key
end goal
environment()
______________________________________________________________________________
      
%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilen1JXLH

section signature:

state_supplicant: agent * agent * hash_func * hash_func * nat * message * message * message * message * message * message * message * nat -> fact
state_authenticator: agent * agent * hash_func * hash_func * nat * message * message * message * message * message * message * message * nat -> fact


section types:

authenticator_supplicant_sn: protocol_id
KeyID, Gtk, MIC, Pmk, Group, SN, KEK, start, Dummy_MIC, Dummy_Gtk, dummy_msg, MGoal: message
3, State, 4, 2, 1, 10, 0, 6, SID, Dummy_State, SID2, SID1: nat
Hash, Succ, succ, h: hash_func
A, S, A2Goal, A1Goal, a, i, s: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(s).
 iknows(i).
 state_authenticator(a,s,succ,h,0,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,3).
 state_supplicant(s,a,succ,h,1,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,4).
 state_authenticator(a,i,succ,h,0,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,6).
 state_supplicant(s,i,succ,h,1,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,10)


section rules:

step step_0 (A,S,Hash,Succ,KEK,Dummy_Gtk,Dummy_MIC,Pmk,Group,SN,KeyID,SID) :=
 state_authenticator(A,S,Hash,Succ,0,KEK,Dummy_Gtk,Dummy_MIC,Pmk,Group,SN,KeyID,SID).
 iknows(start)
 =>
 state_authenticator(A,S,Hash,Succ,2,KEK,apply(Succ,Pmk),apply(Hash,pair(Group,pair(SN,pair(KeyID,apply(Succ,Pmk))))),Pmk,Group,SN,KeyID,SID).
 iknows(scrypt(KEK,pair(Group,pair(SN,pair(apply(Succ,Pmk),pair(KeyID,apply(Hash,pair(Group,pair(SN,pair(KeyID,apply(Succ,Pmk)))))))))))

step step_1 (A,S,Hash,Succ,KEK,Gtk,Dummy_MIC,Pmk,Group,SN,KeyID,SID,MIC) :=
 state_authenticator(A,S,Hash,Succ,2,KEK,Gtk,Dummy_MIC,Pmk,Group,SN,KeyID,SID).
 iknows(scrypt(KEK,pair(Group,pair(SN,MIC))))
 =>
 state_authenticator(A,S,Hash,Succ,4,KEK,Gtk,MIC,Pmk,Group,SN,KeyID,SID)

step step_2 (S,A,Hash,Succ,KEK,Dummy_Gtk,Dummy_MIC,Pmk,Group,SN,KeyID,SID,Gtk) :=
 state_supplicant(S,A,Hash,Succ,1,KEK,Dummy_Gtk,Dummy_MIC,Pmk,Group,SN,KeyID,SID).
 iknows(scrypt(KEK,pair(Group,pair(SN,pair(Gtk,pair(KeyID,MIC))))))
 =>
 state_supplicant(S,A,Hash,Succ,3,KEK,Gtk,apply(Hash,pair(Group,SN)),Pmk,Group,SN,KeyID,SID).
 iknows(scrypt(KEK,pair(Group,pair(SN,apply(Hash,pair(Group,SN))))))


section properties:

property authentication_on_authenticator_supplicant_sn (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,authenticator_supplicant_sn,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,authenticator_supplicant_sn,MGoal))
     /\ ((request(A1Goal,A2Goal,authenticator_supplicant_sn,MGoal,SID1)
           /\ request(A1Goal,A2Goal,authenticator_supplicant_sn,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state authentication_on_authenticator_supplicant_sn (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,authenticator_supplicant_sn,MGoal,SID) &
 not(witness(A2Goal,A1Goal,authenticator_supplicant_sn,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_authenticator_supplicant_sn (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,authenticator_supplicant_sn,MGoal,SID1).
 request(A1Goal,A2Goal,authenticator_supplicant_sn,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Role specification in HLPSL for the user Ui of our scheme.

role alice (Ui,Sj : agent,
	SKuisj: symmetric_key,
	H : hash_func,
	Snd,Rcv: channel(dy))

played_by Ui
def=
  local State : nat,
	IDi, PWi, RPWi, Bi, K, R1, R2, N, V, DIDi, C1, C2, C3, A, B : text
  const alice_bob_r1, bob_alice_r2, 
	subs1, subs2 : protocol_id
  init  State := 0
  transition
%%%%% Registration phase
   1. State = 0 / Rcv(start) =|> 
       State' := 1 / RPWi' := H(PWi.H(Bi))
	/ Snd({IDi.RPWi'}_SKuisj) 
	/ secret({K}, subs1, Sj)
	/ secret({IDi, PWi, Bi}, subs2, Ui)
   2. State = 1 / Rcv({H.xor(H(IDi.H(PWi.H(Bi))), K)}_SKuisj) =|>

%%%%% Login phase
      State' := 2 / R1' := new()
      / RPWi' := H(PWi.H(Bi))      
      / V' := xor(H(IDi.H(PWi.H(Bi))), K)   
      / N' := H(IDi.H(PWi.H(Bi)))
      / DIDi' := xor(IDi, H(IDi.H(PWi.H(Bi))))
      / C1' := xor(IDi, R1')
      / C2' := H(IDi.H(IDi.H(PWi.H(Bi))).R1')
      / Snd(DIDi'.V'.C1'.C2') 
      / witness(Ui, Sj, alice_bob_r1, R1')

%%%%% Verification phase
   3. State = 2 / Rcv(xor(R2', H(R1'.H(IDi.H(IDi.H(PWi.H(Bi))).R1'))).
		H(H(IDi.H(IDi.H(PWi.H(Bi))).R1').R2'.R1')) =|> 
      State' := 3 / C3' := H(R1'.R2'.H(IDi.H(IDi.H(PWi.H(Bi))).R1').H(IDi.H(PWi.H(Bi))))
      / Snd(C3') 
      / request(Sj, Ui, bob_alice_r2, R2')

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Role specification in HLPSL for the server Sj of our scheme.

role bob (Ui,Sj : agent,
	SKuisj: symmetric_key,
	H : hash_func,
	Snd,Rcv: channel(dy))

played_by Sj
def=
  local State : nat,
	IDi, PWi, RPWi, Bi, K, R1, R2, N, V, DIDi, C1, C2, C3, A, B : text
  const alice_bob_r1, bob_alice_r2, 
	subs1, subs2 : protocol_id

  init  State := 0

  transition
%%%%% Registration phase
   1. State = 0 / Rcv({IDi.H(PWi.H(Bi))}_SKuisj) =|> 
      State' := 1 / secret({K}, subs1, Sj)
	/ secret({IDi, PWi, Bi}, subs2, Ui)
	/ Snd({H.xor(H(IDi.H(PWi.H(Bi))), K)}_SKuisj)

%%%%% Login phase
   2. State = 1 / Rcv(xor(IDi, H(IDi.H(PWi.H(Bi)))).xor(H(IDi.H(PWi.H(Bi))), K).xor(IDi, R1').
		H(IDi.H(IDi.H(PWi.H(Bi))).R1')) =|> 

%%%%% Verification phase
      State' := 2 / R2' := new()
      / IDi' := xor(xor(IDi, H(IDi.H(PWi.H(Bi)))), xor(H(IDi.H(PWi.H(Bi))), K), K)      
      / R1' := xor(xor(IDi, R1'), IDi')   
      / C2' := H(IDi'.xor(xor(H(IDi'.H(PWi.H(Bi))), K), K).R1')
      / A' := xor(R2', H(R1'.C2'))
      / B' := H(C2'.R2'.R1')
      / Snd(A'.B') 
      / witness(Sj, Ui, bob_alice_r2, R2')

   3. State = 2 / Rcv(H(R1'.R2'.H(IDi.H(IDi.H(PWi.H(Bi))).R1').xor(xor(H(IDi'.H(PWi.H(Bi))), K), K))) =|> 
      State' := 3 / request(Ui, Sj, alice_bob_r1, R1')

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role session(Ui, Sj: agent,
	SKuisj : symmetric_key,
	H : hash_func)
def=
  local SI, SJ, RI, RJ: channel (dy)

  composition
	alice(Ui, Sj, SKuisj, H, SI, RI)
	/ bob(Ui, Sj, SKuisj, H, SJ, RJ)
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role environment()
def=

  const ui, sj: agent,
	skuisj : symmetric_key,
	h : hash_func,
	idi, pwi, bi, k, r1, r2: text,
	alice_bob_r1, bob_alice_r2, subs1, subs2 : protocol_id
  intruder_knowledge = {ui, sj, h}
  composition
	session(ui, sj, skuisj, h)
	/ session(ui, sj, skuisj, h)
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal

  secrecy_of subs1
  secrecy_of subs2
  authentication_on alice_bob_r1
  authentication_on bob_alice_r2
end goal
environment()

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

 
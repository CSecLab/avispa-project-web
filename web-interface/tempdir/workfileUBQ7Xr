% Convenciones HLPSL:
% Todas las variables empiezan con mayúsculas.
% Todas las constantes empiezan con minúsculas.
% 1. en las transiciones son solo etiquetas para identificarlas.
% X': nuevo valor de la variable X. El valor de X cambia al de X' cuando la transición se completa.
% En los mensajes compuestos se usa "." para separar los elementos. Analogo para las funciones.
% Secret -> variables que deben ser secretas (variable, etiqueta,{Quien})
%	 etiqueta suele ser la variable en minuscula, declarada como protocol_id en environment
%	 Quien: quien debe conocer las variables. 
% witness-> variables que permiten autentificación. En nuestro caso por secreto compartido.
% 	 witness(quien, constante, variable). Lo crea el que envia.
% request-> la otra parte del witness. Lo realiza el receptor.


% A : user con móvil
% BS: base station
% S : sensor
% i : intruder

%K_A_BS: key shared between A and BS.
%K_BS_A: key shared between BS and A.
%K_BS_S: key shared between BS and S.
%K_S_BS: key shared between S and BS.


%KEnc_S_A  : Encode key between S and A
%KAuth_S_A : Auth   key between S and A

%MS_Enc   : Master key to encode
%MS_Auth  : master key to Authentication

%Snd : send channel for all participants (dy)-> Dolev-Yao intruded model.
%Rcv : receive channel for all participants (dy).

%Nbs : BaseStation nonce.
%Ctr : Counter.
%Tstart, Texpire: intervalo de validez (No usado).
%Data_A, DataS: datos enciados por A y S respectivamente. 
%MAC_A, MAC_S: Realmente son las hash, que se cifran con la KAuth_S_A.
%St  : State.

%Hash: Nuestra KDF.
%Succ: También una hash. Según el manual es lo mismo que sumar uno a una variable.

% a_bs_k_a_bs: etiqueta asociada a K_A_BS  para garantizar secreto. Ver environment()
% bs_a_k_bs_a: etiqueta asociada a K_BS_A  para garantizar secreto. Ver environment()
% bs_s_k_bs_s: etiqueta asociada a K_BS_S  para garantizar secreto. Ver environment()
% s_bs_k_s_bs: etiqueta asociada a K_S_BS  para garantizar secreto. Ver environment()
% ms_enc:      etiqueta asociada a MS_Enc  para garantizar secreto.
% ms_auth:     etiqueta asociada a MS_Auth para garantizar secreto.
% kenc_s_a:    etiqueta asociada a MS_Auth para garantizar secreto.
% kauth_s_a:   etiqueta asociada a MS_Auth para garantizar secreto.
% data_a:      etiqueta asociada a Data_a  para garantizar secreto
% data_s:      etiqueta asociada a Data_s  para garantizar secreto
% mac_a :      etiqueta asociada a MAC_a   para garantizar autenticidad
% Mac_s :      etiqueta asociada a MAC_s   para garantizar autenticidad

%Problema: el intruso comparte claves con los otros agentes cuando se inicia su sesion.
%Por ejemplo, si el intruso sehace pasar por la BS, A y S tendrían en esa sesion las
%claves para comunicarse con el intruso.
%Solución: una clave se ida y otra de vuelta. En jam2.hlpsl.  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%User A

role user (A, BS, S       : agent,
           K_A_BS, K_BS_A : symmetric_key,
           Hash, Succ     : hash_func,
           Snd, Rcv       : channel (dy))
played_by A
def=

  local St                           : nat,
        KEnc_S_A, KAuth_S_A          : symmetric_key,
        Ctr, Nbs, Tstart, Texpire,
        Data_A, Data_S, MAC_A, MAC_S : text
        
 init  St := 2

 transition

  2.  St   = 2 /\ Snd({A.S}_K_A_BS)  =|>                                                         %Send to BS
      St' := 3 /\ secret(K_A_BS, a_bs_k_a_bs, {A,BS})
      
  3.  St   = 3 /\ Rcv({KEnc_S_A'.KAuth_S_A'.Nbs'.Tstart'.Texpire'}_K_BS_A) =|>                   %Recive from Bs
      St' := 4 /\ Data_A' := new()
               /\ Ctr'    := new()
               /\ MAC_A'  := Hash(Data_A',A,Nbs',Tstart',Texpire',Ctr')           
               
  4.  St   = 4 /\ Snd(A.Nbs.Tstart.Texpire.Ctr.{Data_A.Ctr}_KEnc_S_A.{MAC_A}_KAuth_S_A) =|>      %Send to S
      St' := 5 /\ witness(A,S,mac_a,MAC_A) 
               /\ secret (Data_A,data_a,{BS,A,S}) 
               
  5.  St   = 5 /\ Rcv(Ctr'.{Data_S'.Ctr'}_KEnc_S_A.{MAC_S'}_KAuth_S_A) =|>                       %Recive from S
      St' := 6 /\ MAC_S'  := Hash(Data_S',Ctr')                            %¿?Verify MAC
               /\ request(A,S,mac_s,MAC_S') 

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Sensor S

role sensor (A, BS, S       : agent,
             K_BS_S, K_S_BS : symmetric_key,
             Hash, Succ     : hash_func,
             Snd, Rcv       : channel (dy))
played_by S
def= 
 local St                              : nat,
        MS_Enc, MS_Auth,
        KEnc_S_A, KAuth_S_A            : symmetric_key,
        Ctr, Nbs, Tstart, Texpire,
        Data_A, Data_S, MAC_A, MAC_S   : text
	
 init  St := 1

 transition

  1.  St   = 1 /\ Rcv({MS_Enc'.MS_Auth'}_K_BS_S) =|>                                                 %Recive from BS 
      St' := 4 
      
  4.  St   = 4 /\ Rcv(A.Nbs'.Tstart'.Texpire'.Ctr'.{Data_A'.Ctr'}_KEnc_S_A'.{MAC_A'}_KAuth_S_A') =|> %Recive from A
      St' := 5 /\ KEnc_S_A'  := Hash(MS_Enc.Nbs'.A.Tstart'.Texpire')
               /\ KAuth_S_A' := Hash(MS_Auth.Nbs'.A.Tstart'.Texpire')
               /\ MAC_A'     := Hash(Data_A',A,Nbs',Tstart',Texpire',Ctr')       %¿?Verify MAC
               /\ request(A,S,mac_a,MAC_A')
               /\ Data_S'    := new()
               /\ Ctr'       := Succ(Ctr')
               /\ MAC_S'     := Hash(Data_S', Ctr')
               
  5.  St   = 5 /\ Snd(Ctr.{Data_S.Ctr}_KEnc_S_A.{MAC_S}_KAuth_S_A) =|>                                %Send to A        
      St' := 6 /\ witness(A,S,mac_s,MAC_S)
               /\ secret (Data_S,data_s,{BS,A,S}) 
               
end role




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Base Station BS

role basestation (A, BS, S                 : agent,
           K_A_BS, K_BS_A, K_BS_S, K_S_BS  : symmetric_key,
           Hash, Succ                      : hash_func,
           Snd, Rcv                        : channel (dy))
played_by BS
def=

  local St                    : nat,
        KEnc_S_A, KAuth_S_A, MS_Enc, MS_Auth  : symmetric_key,
        Nbs, Tstart, Texpire  : text

  init  St := 1 

  transition

  1.    St   = 1 /\ Snd({MS_Enc.MS_Auth}_K_BS_S) =|>                                                %Send to S
        St' := 2 /\ secret(K_BS_S,  bs_s_k_bs_s, {BS,S})
                 /\ secret(MS_Enc,  ms_enc,      {BS,S})
                 /\ secret(MS_Auth, ms_auth,     {BS,S})
        

  2.	St   = 2 /\ Rcv({A.S}_K_A_BS) =|>                                                           %Recive from A
	St' := 3 /\ Nbs'       := new()
		 /\ Tstart'    := new()
		 /\ Texpire'   := new()
                 /\ KEnc_S_A'  := Hash(MS_Enc.Nbs'.A.Tstart',Texpire')
                 /\ KAuth_S_A' := Hash(MS_Auth.Nbs'.A.Tstart',Texpire')
		 
  3.    St   = 3 /\ Snd({KEnc_S_A.KAuth_S_A.Nbs.Tstart.Texpire}_K_BS_A) =|>                            %Sent to A
        St' := 9 /\ secret(K_BS_A,  bs_a_k_bs_a, {A,BS})
                 /\ secret (KEnc_S_A, kenc_s_a,  {BS,A,S})
                 /\ secret (KAuth_S_A,kauth_s_a, {BS,A,S})
                 
end role


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Session

role session( A, BS, S                        : agent,
	      K_A_BS, K_BS_A, K_BS_S, K_S_BS  : symmetric_key,
              Hash, Succ                      : hash_func)

def=
     local SendA, RecvA, SendBS, RecvBS, SendS, RecvS: channel (dy)

composition
	user       (A, BS, S, K_A_BS, K_BS_A, Hash, Succ, SendA,  RecvA)
    /\  basestation(A, BS, S, K_A_BS, K_BS_A, K_BS_S, K_S_BS, Hash, Succ, SendBS, RecvBS) 
    /\  sensor     (A, BS, S, K_BS_S, K_S_BS, Hash, Succ, SendS,  RecvS) 

end role


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Environment
role environment() 

def=

  const  a, bs, s                             : agent,
  	 k_a_bs, k_bs_a, k_bs_s, k_s_bs       : symmetric_key,             %k_s_bs no se usa. 
  	 ki_a_bs, ki_bs_a, ki_bs_s, ki_s_bs   : symmetric_key,  
  	 a_bs_k_a_bs, bs_s_k_bs_s,
  	 bs_a_k_bs_a, s_bs_k_s_bs,
         ms_enc, ms_auth, kenc_s_a, kauth_s_a : protocol_id,
         data_a, data_s			      : protocol_id,		
         mac_a, mac_s                         : protocol_id,
         kdf, succ                            : hash_func

  intruder_knowledge = {a,bs,s,ki_a_bs,ki_bs_a,ki_bs_s,ki_s_bs,kdf,succ}

  composition
        session(a, bs, s, k_a_bs,  k_bs_a,  k_bs_s,  k_s_bs,  kdf, succ)
 /\	session(i, bs, s, ki_a_bs, k_bs_s,  k_bs_s,  k_s_bs,  kdf, succ)
 /\	session(a,  i, s, k_a_bs,  ki_bs_a, k_bs_s, k_s_bs,  kdf, succ)   %Using ki_bs_s UNSAFE 
 /\	session(a, bs, i, k_a_bs,  k_bs_a,  k_bs_s,  ki_s_bs, kdf, succ)

end role


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
goal

 secrecy_of a_bs_k_a_bs
 secrecy_of bs_a_k_bs_a
 secrecy_of bs_s_k_bs_s
 secrecy_of s_bs_k_s_bs
 secrecy_of ms_enc
 secrecy_of ms_auth
 secrecy_of kenc_s_a
 secrecy_of kauth_s_a
 secrecy_of data_a
 secrecy_of data_s
 authentication_on mac_a
 authentication_on mac_s

end goal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
environment()



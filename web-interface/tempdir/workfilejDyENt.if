%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilejDyENt

section signature:

state_validator: agent * agent * agent * public_key * public_key * public_key * nat * set(message) * message * message * message * nat -> fact
state_int_log_server1: agent * agent * agent * agent * public_key * public_key * nat * crypt(inv(public_key),message) * message * message * message * set(message) * crypt(inv(public_key),message) * nat -> fact
state_cert_agency1: agent * agent * agent * public_key * public_key * nat * message * crypt(inv(public_key),message) * crypt(inv(public_key),pair(agent,public_key)) * nat -> fact
state_domain: agent * agent * agent * agent * agent * public_key * public_key * public_key * public_key * nat * crypt(inv(public_key),message) * message * message * message * crypt(inv(public_key),pair(agent,public_key)) * nat -> fact


section types:

Db, dummy_set, Dummy_Db: set(message)
set_158, set_146: set
Cert, Dummy_Cert: crypt(inv(public_key),pair(agent,public_key))
Root, Hval, OK, R, Dummy_Hval, Dummy_Root, Dummy_R, Checkmsg, Dummy_Checkmsg, dummy_msg, start: message
AddReq, X, CRes, Dummy_X, Dummy_CRes, Dummy_AddReq: crypt(inv(public_key),message)
9, State, 7, 11, 10, 6, SID, 5, 4, Dummy_State, 3, 8, 2, 1, 0: nat
Kv, Ka, Kils1, Kca1, dummy_pk, ka, kca1, kils1, kv, ki: public_key
V, A, ILS1, CA1, dummy_agent, a, ca1, ils1, v, c, C, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(ca1).
 iknows(ils1).
 iknows(v).
 iknows(ki).
 iknows(i).
 state_domain(a,ca1,c,ils1,v,ka,kca1,kils1,kv,0,crypt(inv(dummy_pk),dummy_msg),dummy_msg,dummy_msg,dummy_msg,crypt(inv(dummy_pk),pair(dummy_agent,dummy_pk)),3).
 state_cert_agency1(ca1,a,ils1,kca1,ka,1,dummy_msg,crypt(inv(dummy_pk),dummy_msg),crypt(inv(dummy_pk),pair(dummy_agent,dummy_pk)),4).
 state_int_log_server1(ils1,ca1,a,v,kils1,kca1,2,crypt(inv(dummy_pk),dummy_msg),dummy_msg,dummy_msg,dummy_msg,set_146,crypt(inv(dummy_pk),dummy_msg),5).
 state_validator(v,a,ils1,kv,ka,kils1,7,dummy_set,dummy_msg,dummy_msg,dummy_msg,6).
 state_cert_agency1(ca1,i,ils1,kca1,ki,1,dummy_msg,crypt(inv(dummy_pk),dummy_msg),crypt(inv(dummy_pk),pair(dummy_agent,dummy_pk)),9).
 state_int_log_server1(ils1,ca1,i,v,kils1,kca1,2,crypt(inv(dummy_pk),dummy_msg),dummy_msg,dummy_msg,dummy_msg,set_158,crypt(inv(dummy_pk),dummy_msg),10).
 state_validator(v,i,ils1,kv,ki,kils1,7,dummy_set,dummy_msg,dummy_msg,dummy_msg,11)


section rules:

step step_0 (A,CA1,C,ILS1,V,Ka,Kca1,Kils1,Kv,AddReq,Root,Hval,OK,Cert,SID) :=
 state_domain(A,CA1,C,ILS1,V,Ka,Kca1,Kils1,Kv,0,AddReq,Root,Hval,OK,Cert,SID).
 iknows(start)
 =>
 state_domain(A,CA1,C,ILS1,V,Ka,Kca1,Kils1,Kv,2,AddReq,Root,Hval,OK,Cert,SID).
 iknows(pair(A,Ka))

step step_1 (A,CA1,C,ILS1,V,Ka,Kca1,Kils1,Kv,Dummy_AddReq,Root,Hval,OK,Cert,SID) :=
 state_domain(A,CA1,C,ILS1,V,Ka,Kca1,Kils1,Kv,4,Dummy_AddReq,Root,Hval,OK,Cert,SID).
 iknows(Cert)
 =>
 state_domain(A,CA1,C,ILS1,V,Ka,Kca1,Kils1,Kv,6,crypt(inv(Ka),Cert),Root,Hval,OK,Cert,SID).
 iknows(crypt(inv(Ka),Cert))

step step_2 (A,CA1,C,ILS1,V,Ka,Kca1,Kils1,Kv,AddReq,Root,Hval,OK,Cert,SID) :=
 state_domain(A,CA1,C,ILS1,V,Ka,Kca1,Kils1,Kv,6,AddReq,Root,Hval,OK,Cert,SID).
 iknows(crypt(inv(Kils1),pair(Root,Hval)))
 =>
 state_domain(A,CA1,C,ILS1,V,Ka,Kca1,Kils1,Kv,8,AddReq,Root,Hval,OK,Cert,SID).
 iknows(crypt(inv(Kils1),pair(Root,Hval)))

step step_3 (A,CA1,C,ILS1,V,Ka,Kca1,Kils1,Kv,AddReq,Root,Hval,OK,Cert,SID) :=
 state_domain(A,CA1,C,ILS1,V,Ka,Kca1,Kils1,Kv,8,AddReq,Root,Hval,OK,Cert,SID).
 iknows(crypt(inv(Kv),OK))
 =>
 state_domain(A,CA1,C,ILS1,V,Ka,Kca1,Kils1,Kv,10,AddReq,Root,Hval,OK,Cert,SID).
 iknows(pair(Cert,pair(crypt(inv(Kils1),pair(Root,Hval)),crypt(inv(Kv),OK))))

step step_4 (CA1,A,ILS1,Kca1,Ka,Dummy_Checkmsg,CRes,Cert,SID,Checkmsg) :=
 state_cert_agency1(CA1,A,ILS1,Kca1,Ka,1,Dummy_Checkmsg,CRes,Cert,SID).
 iknows(pair(A,Ka))
=[exists Checkmsg]=>
 state_cert_agency1(CA1,A,ILS1,Kca1,Ka,3,Checkmsg,CRes,Cert,SID).
 iknows(crypt(inv(Kca1),Checkmsg))

step step_5 (CA1,A,ILS1,Kca1,Ka,Checkmsg,Dummy_CRes,Dummy_Cert,SID,CRes) :=
 state_cert_agency1(CA1,A,ILS1,Kca1,Ka,3,Checkmsg,Dummy_CRes,Dummy_Cert,SID).
 iknows(CRes)
 =>
 state_cert_agency1(CA1,A,ILS1,Kca1,Ka,5,Checkmsg,CRes,crypt(inv(Kca1),pair(A,Ka)),SID).
 iknows(crypt(inv(Kca1),pair(A,Ka)))

step step_6 (ILS1,CA1,A,V,Kils1,Kca1,Dummy_X,Dummy_R,Root,Hval,Db,AddReq,SID,X,R) :=
 state_int_log_server1(ILS1,CA1,A,V,Kils1,Kca1,2,Dummy_X,Dummy_R,Root,Hval,Db,AddReq,SID).
 iknows(X)
=[exists R]=>
 state_int_log_server1(ILS1,CA1,A,V,Kils1,Kca1,4,X,R,Root,Hval,Db,AddReq,SID).
 iknows(crypt(inv(Kils1),R))

step step_7 (ILS1,CA1,A,V,Kils1,Kca1,X,R,Dummy_Root,Hval,Dummy_Db,Dummy_AddReq,SID,Root,AddReq) :=
 state_int_log_server1(ILS1,CA1,A,V,Kils1,Kca1,5,X,R,Dummy_Root,Hval,Dummy_Db,Dummy_AddReq,SID).
 iknows(AddReq)
=[exists Root]=>
 state_int_log_server1(ILS1,CA1,A,V,Kils1,Kca1,7,X,R,Root,Hval,Dummy_Db,AddReq,SID).
 iknows(crypt(inv(Kils1),pair(Root,Hval))).
 iknows(Dummy_Db).
 contains(Root,Dummy_Db).
 contains(Hval,Dummy_Db)

step step_8 (V,A,ILS1,Kv,Ka,Kils1,Dummy_Db,Dummy_Root,Dummy_Hval,OK,SID,Db,Root,Hval) :=
 state_validator(V,A,ILS1,Kv,Ka,Kils1,7,Dummy_Db,Dummy_Root,Dummy_Hval,OK,SID).
 iknows(crypt(inv(Kils1),pair(Root,Hval))).
 iknows(Db).
 contains(Root,Db).
 contains(Hval,Db)
 =>
 state_validator(V,A,ILS1,Kv,Ka,Kils1,9,Db,Root,Hval,OK,SID).
 iknows(crypt(inv(Kv),OK)).
 contains(Root,Db).
 contains(Hval,Db)



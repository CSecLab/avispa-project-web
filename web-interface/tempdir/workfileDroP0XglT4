role client(C,S: agent,
Kcs: symmetric_key,
SHA256: hash_func,
Success, Failure: text,
Access_accept,Access_reject: text,
SND, RCV: channel(dy))
played_by C def=
local State: nat,
NAS_ID, NAS_Port: text,
Chall_Message: text
const kcs: protocol_id,
sec_c_Kcs : protocol_id
init State := 0
transition
t1. State = 0 ^ RCV(start) )
State':= 1 ^ NAS_ID':=new()
^ NAS_Port':=new()
^ SND(NAS_ID'.NAS_Port'.SHA256(Kcs))
^ secret(Kcs,sec_c_Kcs,C,S)
t2. State = 1 ^ RCV(NAS_ID.Access_accept) )
State':= 2 ^ SND(NAS_ID.Success)
t3. State = 1 ^ RCV(NAS_ID.Access_reject) )
State':= 3 ^ SND(NAS_ID.Failure)
t4. State = 1 ^ RCV(NAS_ID.Chall_Message') )
State':= 4 ^ SND(NAS_ID.Chall_Message'_Kcs)
^ witness(C,S,kcs,Kcs)
t5. State = 4 ^ RCV(NAS_ID.Access_accept) )
State':= 5 ^ SND(NAS_ID.Success)
end role


role server(C,S: agent,
Kcs: symmetric_key,
SHA256: hash_func,
Success, Failure: text,
Access_accept,Access_reject: text,
SND, RCV: channel(dy))
played_by S def=
local State: nat,
NAS_ID, NAS_Port : text,
Chall_Message : text
const kcs: protocol_id,
sec_s_Kcs : protocol_id
init State := 11
transition
t1. State = 11
^ RCV(NAS_ID'.NAS_Port'.SHA256(Kcs)) )
State':= 12 ^ SND(NAS_ID'.Access_accept)
^ secret(Kcs,sec_s_Kcs,C,S)
t2. State = 12 ^ RCV(NAS_ID.Success) )
State':= 13
t3. State = 11
^ RCV(NAS_ID'.NAS_Port'.SHA256(Kcs)) )
State':= 14 ^ SND(NAS_ID'.Access_reject)
t4. State = 14 ^ RCV(NAS_ID.Failure) )
State':= 15
t5. State = 11
^ RCV(NAS_ID'.NAS_Port'.SHA256(Kcs)) )
State':= 16 ^ Chall_Message':=new()
^ SND(NAS_ID'.Chall_Message')
t6. State = 16 ^ RCV(NAS_ID.Chall_Message_Kcs) )
State':= 17 ^ SND(NAS_ID.Access_accept)
^ request(S,C,kcs,Kcs)
t7. State = 17 ^ RCV(NAS_ID.Success) )
State':= 18
end role

role environment() def=
const c1,s1: agent,
sha256: hash_func,
succs, fails: text,
acc_acp, acc_rej: text,
kcsk, kisk, kcik: symmetric_key,
kcs: protocol_id
intruder_knowledge = {c1,s1,sha256,kisk,kcik,
succs, fails, acc_acp, acc_rej}
composition
session(c1,s1,kcsk,sha256,succs,fails,acc_acp,acc_rej)
^
session(i, s1,kisk,sha256,succs,fails,acc_acp,acc_rej)
end role


role session(C,S: agent,
Kcs: symmetric_key,
SHA256: hash_func,
Success, Failure: text,
Access_accept,Access_reject: text) def=
local
S1, S2 : channel (dy),
R1, R2 : channel (dy)
composition
client(C,S,Kcs,SHA256,Success,Failure,
Access_accept,Access_reject,S1,R1) ^
server(C,S,Kcs,SHA256,Success,Failure,
Access_accept,Access_reject,S2,R2)
end role

 
role environment() def=
const c1,s1: agent,
sha256: hash_func,
succs, fails: text,
acc_acp, acc_rej: text,
kcsk, kisk, kcik: symmetric_key,
kcs: protocol_id
intruder_knowledge = {c1,s1,sha256,kisk,kcik,
succs, fails, acc_acp, acc_rej}
composition
session(c1,s1,kcsk,sha256,succs,fails,acc_acp,acc_rej)
^
session(i, s1,kisk,sha256,succs,fails,acc_acp,acc_rej)
end role

goal
secrecy_of sec_c_Kcs, sec_s_Kcs
authentication_on kcs
end goal 
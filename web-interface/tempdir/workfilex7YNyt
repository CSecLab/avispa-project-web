role alice (Ui, Sj : agent,
	SKuisj : symmetric_key,
	% H is hash function
	H : hash_func,
	Snd, Rcv: channel(dy))
played_by Ui
def=
local State : nat,
		RPWi, PWi, Xu, K, H1, IDi, R1, R2: text,
		N, V, C1, C2, S2, A, B : text
		const alice_bob_r1, bob_alice_r2,subs1, subs2 : protocol_id
init State := 0

transition

			%%% Registration phase
1. State = 0 /\ Rcv(start) =|>
	State’ := 1 /\ RPWi’ := H(Xu.PWi)

2. State = 1 /\ Rcv({IDi.H.xor( xor(H(K.IDi), H(H(Xu.PWi).
	H(H(Xu.PWi).K))), H1). H(H(Xu.PWi).K)
	}_SKuisj) =|>

			%%%% Login phase
	State’ := 2 /\ R1’ := new()
	/\ S2’ := H(H(Xu.PWi).H(H(Xu.PWi).K))
	/\ N’ := xor( xor(H(K.IDi), H(H(Xu.PWi).H(H(Xu.PWi).K))), H1)
	/\ C1’ := xor(R1’, S2’)
	/\ Snd(N’.IDi.C1’.h(R1’))
	/\ witness(Ui, Sj, alice_bob_r1, R1’)

	
			%%%%% Verification phase
3. State = 2 /\ Rcv(xor(R2’, H(R1’.H(H(Xu.PWi).
	H(H(Xu.PWi).K)))).H(H(H(Xu.PWi).H(H(Xu.PWi).K)).R2’.R1’)) =|>
	State’ := 3 /\ C2’ := xor(H(R2’.H(H(Xu.PWi).H(H(Xu.PWi).K))),H(H(Xu.PWi). H(H(Xu.PWi).K)))
	/\ Snd(C2’)
	/\ request(Sj, Ui, bob_alice_r2, R2’)
end role




role bob (Ui, Sj : agent,
	SKuisj : symmetric_key,
	% H is hash function
	H : hash_func,
	Snd, Rcv: channel(dy) )
played_by Sj
def=
local State : nat,
		RPWi, PWi, Xu, K, H1, IDi, R1, R2: text,
		N, V, C1, C2, S2, A, B : text
		const alice_bob_r1, bob_alice_r2,subs1, subs2 : protocol_id
init State := 0

transition

			%%% Registration phase
1. State = 0 /\ Rcv({IDi.H(Xu.PWi)}_SKuisj) =|>
		State’ := 1
		/\ secret({K, H1}, subs1, Sj)
		/\ secret({PWi, Xu}, subs2, Ui)
		/\ Snd({IDi.H.xor( xor(H(K.IDi), H(H(Xu.PWi).H(H(Xu.PWi).K))), H1). H(H(Xu.PWi).K)}_SKuisj)


			%%%% Login phase
2. State = 1 /\ Rcv(xor(xor(H(K.IDi), H(H(Xu.PWi).H(H(Xu.PWi).K))), H1). IDi.xor(R1’,H(H(Xu.PWi).H(H(Xu.PWi).K))).H(R1’)) =|>


			%%%%% Verification phase
		State’ := 2
		/\ R2’ := new()
		/\ V’ := H(K.IDi)
		/\ N’ := xor( xor(H(K.IDi), H(H(Xu.PWi).H(H(Xu.PWi).K))), H1)
		/\ S2’ := xor(xor(H1, N’), V’)
		/\ C1’ := xor(R1’,H(H(Xu.PWi).H(H(Xu.PWi).K)))
		/\ R1’ := xor(S2’, C1’)
		/\ A’ := xor(R2’, H(R1’, S2’))
		/\ B’ := H(S2’.R2’.R1’)
		/\ Snd(A’.B’)
		/\ witness(Sj, Ui, bob_alice_r2, R2’)
3. State = 2 /\ Rcv(xor(H(R2’.H(H(Xu.PWi).H(H(Xu.PWi).K))),H(H(Xu.PWi). H(H(Xu.PWi).K)))) =|>
		State’ := 3
		/\ request(Ui, Sj, alice_bob_r1, R1)
end role


role session(Ui, Sj: agent,
		SKuisj : symmetric_key,
		H : hash_func)
def=
local SI, SJ, RI, RJ: channel (dy)

composition
	alice(Ui, Sj, SKuisj, H, SI, RI)
	/\ bob(Ui, Sj, SKuisj, H, SJ, RJ)
end role


role environment()
def=
const ui, sj: agent,
	skuisj : symmetric_key,
	h : hash_func,
	pwi, xu, k, h1, idi, r1, r2: text,
	alice_bob_r1, bob_alice_r2,subs1, subs2 : protocol_id

	intruder_knowledge = {ui, sj, h}

composition

	session(ui, sj, skuisj, h)
	/\ session(ui, sj, skuisj, h)
end role


goal
	secrecy_of subs1
	secrecy_of subs2
	authentication_on alice_bob_r1
	authentication_on bob_alice_r2
end goal

environment()


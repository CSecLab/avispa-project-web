%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfile75VAUe

section signature:

state_server: agent * agent * agent * text * text * symmetric_key * hash_func * nat * text * text * text * symmetric_key * set(agent) * nat -> fact
state_reader: agent * agent * agent * text * text * symmetric_key * hash_func * nat * text * text * text * symmetric_key * set(agent) * nat -> fact
state_tag: agent * agent * agent * text * symmetric_key * hash_func * nat * text * text * text * set(agent) * nat -> fact


section types:

MGoal, start: message
sec_k3, sec_k2, aut_server, aut_reader, sec_k: protocol_id
h, H: hash_func
dummy_sk, ki, Ks, Ki: symmetric_key
set_99, set_92, set_113, set_111, set_109, set_105: set
Dummy_Set_45, ASGoal, Set_62, Set_45, Set_29, Dummy_Set_62, Dummy_Set_29: set(agent)
Dummy_Nr, dummy_nonce, idt, idr, Nr, Nt, D, IDr, IDt, Dummy_Nt: text
A2Goal, A1Goal, t1, r, s, S, R, T, i: agent
Dummy_State, 3, SID, SID2, SID1, State, 2, 1, 0, 9, 8, 7, 5, 4: nat


section inits:

initial_state init1 := 
 iknows(start).
 iknows(t1).
 iknows(r).
 iknows(s).
 iknows(h).
 iknows(i).
 state_tag(t1,r,s,idt,ki,h,0,dummy_nonce,dummy_nonce,dummy_nonce,set_92,3).
 state_reader(r,t1,s,idr,idt,ki,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,set_99,4).
 state_server(s,r,t1,idr,idt,ki,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,set_105,5).
 state_tag(t1,r,s,idt,ki,h,0,dummy_nonce,dummy_nonce,dummy_nonce,set_109,7).
 state_reader(r,t1,s,idr,idt,ki,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,set_111,8).
 state_server(s,r,t1,idr,idt,ki,h,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,set_113,9)


section rules:

step step_0 (T,R,S,IDt,Ki,H,Dummy_Nr,Nt,D,Set_45,SID,Nr) :=
 state_tag(T,R,S,IDt,Ki,H,0,Dummy_Nr,Nt,D,Set_45,SID).
 iknows(Nr)
 =>
 state_tag(T,R,S,IDt,Ki,H,1,Nr,Nt,D,Set_45,SID).
 iknows(xor(apply(H,xor(IDt,Ki)),Nr))

step step_1 (T,R,S,IDt,Ki,H,Nr,Nt,D,Dummy_Set_45,SID) :=
 state_tag(T,R,S,IDt,Ki,H,1,Nr,Nt,D,Dummy_Set_45,SID).
 iknows(xor(apply(H,Ki),xor(Nt,Nr)))
 =>
 state_tag(T,R,S,IDt,Ki,H,2,Nr,Nt,D,Dummy_Set_45,SID).
 request(T,R,aut_reader,Nr,SID).
 secret(Ki,sec_k2,Dummy_Set_45).
 contains(T,Dummy_Set_45).
 contains(R,Dummy_Set_45).
 contains(S,Dummy_Set_45)

step step_2 (R,T,S,IDr,IDt,Ki,H,Dummy_Nr,Nt,D,Ks,Set_29,SID,Nr) :=
 state_reader(R,T,S,IDr,IDt,Ki,H,0,Dummy_Nr,Nt,D,Ks,Set_29,SID).
 iknows(start)
=[exists Nr]=>
 state_reader(R,T,S,IDr,IDt,Ki,H,1,Nr,Nt,D,Ks,Set_29,SID).
 iknows(Nr).
 witness(R,T,aut_reader,Nr)

step step_3 (R,T,S,IDr,IDt,Ki,H,Nr,Nt,D,Ks,Set_29,SID) :=
 state_reader(R,T,S,IDr,IDt,Ki,H,1,Nr,Nt,D,Ks,Set_29,SID).
 iknows(xor(apply(H,xor(IDt,Ki)),Nr))
 =>
 state_reader(R,T,S,IDr,IDt,Ki,H,2,Nr,Nt,D,Ks,Set_29,SID).
 iknows(pair(xor(apply(H,xor(IDt,Ki)),Nr),pair(apply(H,IDr),Nr)))

step step_4 (R,T,S,IDr,IDt,Ki,H,Nr,Dummy_Nt,D,Ks,Dummy_Set_29,SID,Nt) :=
 state_reader(R,T,S,IDr,IDt,Ki,H,2,Nr,Dummy_Nt,D,Ks,Dummy_Set_29,SID).
 iknows(scrypt(Ks,xor(pair(D,apply(H,Ki)),xor(Nt,Nr))))
 =>
 state_reader(R,T,S,IDr,IDt,Ki,H,3,Nr,Nt,D,Ks,Dummy_Set_29,SID).
 iknows(xor(apply(H,Ki),xor(Nt,Nr))).
 request(R,S,aut_server,Nt,SID).
 secret(Ki,sec_k,Dummy_Set_29).
 contains(R,Dummy_Set_29).
 contains(T,Dummy_Set_29).
 contains(S,Dummy_Set_29)

step step_5 (S,R,T,IDr,IDt,Ki,H,Dummy_Nr,Dummy_Nt,D,Ks,Dummy_Set_62,SID,Nr,Nt) :=
 state_server(S,R,T,IDr,IDt,Ki,H,0,Dummy_Nr,Dummy_Nt,D,Ks,Dummy_Set_62,SID).
 iknows(pair(xor(apply(H,xor(IDt,Ki)),Nr),pair(apply(H,IDr),Nr)))
=[exists Nt]=>
 state_server(S,R,T,IDr,IDt,Ki,H,1,Nr,Nt,D,Ks,Dummy_Set_62,SID).
 iknows(scrypt(Ks,xor(pair(D,apply(H,Ki)),xor(Nt,Nr)))).
 witness(S,R,aut_server,Nt).
 secret(Ki,sec_k3,Dummy_Set_62).
 contains(S,Dummy_Set_62).
 contains(R,Dummy_Set_62).
 contains(T,Dummy_Set_62)


section properties:

property secrecy_of_sec_k (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_k,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_k2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_k2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_k3 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_k3,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_aut_server (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,aut_server,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,aut_server,MGoal))
     /\ ((request(A1Goal,A2Goal,aut_server,MGoal,SID1)
           /\ request(A1Goal,A2Goal,aut_server,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_aut_reader (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,aut_reader,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,aut_reader,MGoal))
     /\ ((request(A1Goal,A2Goal,aut_reader,MGoal,SID1)
           /\ request(A1Goal,A2Goal,aut_reader,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sec_k (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_k,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_k2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_k2,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_k3 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_k3,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_aut_server (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,aut_server,MGoal,SID) &
 not(witness(A2Goal,A1Goal,aut_server,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_aut_server (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,aut_server,MGoal,SID1).
 request(A1Goal,A2Goal,aut_server,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_aut_reader (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,aut_reader,MGoal,SID) &
 not(witness(A2Goal,A1Goal,aut_reader,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_aut_reader (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,aut_reader,MGoal,SID1).
 request(A1Goal,A2Goal,aut_reader,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


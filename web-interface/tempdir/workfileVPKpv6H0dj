%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 	
%%HLPSL:
role client (
                U,Srvr  : agent,
           	Ks    : symmetric_key,
	   	H     : hash_func,
           	Snd, Rcv: channel(dy))
played_by U
def=
           
  local State, R, X, S  : nat,
        V, Regi, Randi, Ni, Pwi, Sn, Rt : text,
        Ti, R1, Ts, Tr, Ki, SKi, Ri, AUi, AUs, AUs1, C1, C2, C3 : message


  init  State := 0  
                   

  transition
   1. State   = 0 /\ Rcv(start) =|>
      State' := 2 /\ Ni' := H(U.Randi)
                  /\ Regi' := xor(H(U.H(Pwi)),H(xor(Ks,H(U.Randi))))
                  /\ V' := new() /\ Ri' := new() /\ X' := new() /\ R' := new()
                  /\ R1' := xor( Regi,H(V') )
                  /\ Ki' := xor( H(U.H(Pwi)),H(v) )
                  /\ Ti' := H( {X}_R' ).{X}_R'
                  /\ C1' := {U.Ri'.Ti'}_Ki'
                  /\ Snd( Sn.X'.Randi.Ni.R1'.C1')

   2. State   = 2 /\ Rcv(Sn.Srvr.{U.Ri'.{X}_S'}_Ki') =|> 
      State' := 4 /\ C3'  := {U.Ri.{X}_R}_Ki
	          /\ SKi' := {{X}_S'}_R 
		  /\ AUi'  := H(Srvr.Ri.Rt.SKi')
                  /\ Snd( Sn.AUi'.C3' )

   3. State   = 4 /\ Rcv( Sn.AUs' ) =|> 
      State' := 6 /\ AUs1' := H( U.Ri.Rt.SKi)
                  /\ request(U,Srvr,AUs',AUs1') 

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role server( 
                Srvr, U : agent,
           	Ks       : symmetric_key,
	   	H        : hash_func,
           	Snd, Rcv : channel(dy))
played_by Srvr
def=
           
  local State, R, X, S  : nat,
        V, Regi, Randi, Ni, Pwi, Sn, Rt, Ni1 : text,
        Ti, Ti1, R1, Tr, Ki, SKi, Ri, AUi, AUs, Aui1, C1, C2, C3 : message

  init  State := 1 

  transition
   1. State   = 1 /\ Rcv(Sn.X'.Randi.Ni'.R1'.{U.Ri'.Ti'}_Ki') =|>
      State' := 3 /\ Ki' := xor(R1',H(xor(Ks,Ni'))) 
                  /\ Ni1' := H(U.Randi)

   2. State   = 3 /\ Ni = Ni1 =|>
      State' := 5 /\ S' := new() /\ Rt' := new()
                  /\ C2' := {U.Ri'.{X}_S}_Ki'
                  /\ Snd( Sn.srvr.C2')

   3. State   = 5 /\ Rcv(Sn.AUi'.{U.Ri.{X}_R}_Ki') =|> 
      State' := 7 /\ Ti1'  := H({X}_R)
                  /\ Aui1' := H(Srvr.Ri.Rt.SKi') 
                   
   4. State   = 7 /\ Ti1'= Ti /\ Aui1'= AUi' =|> 
      State' := 9 /\ SKi':= {{X}_S}_R
                  /\ AUs' := H( U.Ri.Rt.SKi)
                  /\ Snd( Sn.AUi'.C3' )


end role

%%%%%%%%%%%%%%%%%%%%%%%%%
role session(Srvr,U: agent,
	     Ks: symmetric_key,
	     H: hash_func)
def=

  local SA, SB, RA, RB: channel (dy)

  composition
           client(U, Srvr, Ks, H, SA, RA)
       /\ server(Srvr, U, Ks, H, SB, RB)
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%
role environment()
def=

  const srvr, u      : agent,
        ks, ki,kj           : symmetric_key,
        h             : hash_func,
        aus, ni, aui, ti       : protocol_id

  intruder_knowledge = {srvr, u, h }

  composition
	session(srvr, u,ks, h) /\
        session(srvr, i, ki, h) /\
        session(u, i, kj, h)

end role


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal

 %secrecy of the shared key
 %secrecy_of sec_kab1, sec_kab2	% Addresses G12
                         
 %CHAP_Init authenticates CHAP_Resp on nb
 authentication_on aus   % Addresses G1, G2
 %CHAP_Resp authenticates CHAP_Init on na
 authentication_on ni,aui,ti  % Addresses G1, G2
  
end goal
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

environment()
     
%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilesbwO4I

section signature:

state_server: agent * hash_func * text * nat * agent * text * nat -> fact
state_client: agent * hash_func * text * nat * agent * text * set(agent) * nat -> fact


section types:

MGoal, start: message
auth, sec: protocol_id
ASGoal, Set_20, Dummy_Set_20: set(agent)
h, H: hash_func
k, T, K, Dummy_T, dummy_nonce: text
A2Goal, A1Goal, c, s, C, S, Dummy_C, dummy_agent, i: agent
set_64, set_62, set_51: set
SID1, SID, State, 2, 1, 9, 0, 7, 4, Dummy_State, 3, SID2: nat


section inits:

initial_state init1 := 
 iknows(start).
 iknows(c).
 iknows(s).
 iknows(h).
 iknows(i).
 state_client(c,h,k,0,dummy_agent,dummy_nonce,set_51,3).
 state_server(s,h,k,0,dummy_agent,dummy_nonce,4).
 state_server(s,h,k,0,dummy_agent,dummy_nonce,7).
 state_client(c,h,k,0,dummy_agent,dummy_nonce,set_64,9)


section rules:

step step_0 (C,H,K,S,T,Set_20,SID) :=
 state_client(C,H,K,0,S,T,Set_20,SID).
 iknows(start)
 =>
 state_client(C,H,K,1,S,T,Set_20,SID).
 iknows(C)

step step_1 (C,H,K,S,Dummy_T,Dummy_Set_20,SID,T) :=
 state_client(C,H,K,1,S,Dummy_T,Dummy_Set_20,SID).
 iknows(pair(T,S))
 =>
 state_client(C,H,K,2,S,T,Dummy_Set_20,SID).
 iknows(apply(H,pair(K,T))).
 witness(C,S,auth,apply(H,pair(K,T))).
 secret(K,sec,Dummy_Set_20).
 contains(C,Dummy_Set_20).
 contains(S,Dummy_Set_20)

step step_2 (S,H,K,Dummy_C,Dummy_T,SID,C,T) :=
 state_server(S,H,K,0,Dummy_C,Dummy_T,SID).
 iknows(C)
=[exists T]=>
 state_server(S,H,K,1,C,T,SID).
 iknows(pair(T,S)).
 request(S,Dummy_C,auth,apply(H,pair(K,T)),SID)


section properties:

property secrecy_of_sec (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_auth (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth,MGoal))
     /\ ((request(A1Goal,A2Goal,auth,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sec (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_auth (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth,MGoal,SID1).
 request(A1Goal,A2Goal,auth,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


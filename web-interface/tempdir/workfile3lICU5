role role_C(C:agent,S:agent,KPs:public_key,SND,RCV:channel(dy))
played_by C
def=
	local
		State:nat,Msg:text,Nc:text
	init
		State := 0
	transition
		1. State=0 /\ RCV(start) =|> State':=1 /\ Nc':=new() /\ Msg':=new() /\ secret(Msg',sec_1,{C,S}) /\ SND({Msg'.Nc'}_KPs)
		2. State=1 /\ RCV({Nc}_inv(KPs)) =|> State':=2
end role

role role_S(S:agent,C:agent,KPs:public_key,SND,RCV:channel(dy))
played_by S
def=
	local
		State:nat,Msg:text,Nc:text
	init
		State := 0
	transition
		1. State=0 /\ RCV({Msg'.Nc'}_KPs) =|> State':=1 /\ secret(Msg',sec_1,{C,S}) /\ SND({Nc'}_inv(KPs))
end role

role session1(S:agent,C:agent,KPs:public_key)
def=
	local
		SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_S(S,C,KPs,SND2,RCV2) /\ role_C(C,S,KPs,SND1,RCV1)
end role

role environment()
def=
	const
		client:agent,serveurMessage:agent,clePublicServeur:public_key,sec_1:protocol_id
	intruder_knowledge = {}
	composition
		session1(serveurMessage,client,clePublicServeur)
end role

goal
	secrecy_of sec_1
end goal

environment()

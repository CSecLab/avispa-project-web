role party1 ( P1,P2,P3:agent,G: text,SND,RCV : channel(dy))
played_by P1
def=
local
	State : nat,
	A1 : text,
	X,Y,Z,Ya3,Za2,Xa2,Xa3,Xa2 :public_key,
	K :sYmmetric_key

init State :=0

transition
	1. State=0/\RCV(start)=|>
	   State' := 1
	   /\ A1':= new()
		/\ X':=exp(G,A1)
		/\SND(P1.X')
		/\ witness(P1,P2,party2_party1_x,X')
	2. State=1 /\ RCV(Xa3'.Ya3')=|>    %.{P1.P2.P3.X.Y',Z'}_K)=|>
			State':= 2
			/\request(P1,P3,party1_party3_Ya3,Ya3')
			/\ K':= exp(Ya3',A1)
			/\secrete(K',k,{P1,P2,P3})

end role
role party2(P2,P3,P1: agent, G : text,SND,RCV: channel (dy))
played_by P2 def=
	local
		State :nat,
		X,Y,Z,Ya3,Za2,Xa2,Xa3,Xa2 :public_key,
		K : symmetric_key,
		A2 :text

	init State :=0
	transition
		1.State =0 /\RCV(P1.X')=|>
				State':=1
				/\request(P2,p1, party2_party1_x,X')
				/\ A2':= new()
				/\ Y':= exp(G,A2')
				/\ Xa2' := exp(X',A2')
				/\ SND(P1.P2.X'.Y'.Xa2')
				/\ witness(P2,P3,party3_party2_x,X')
				/\ witness(P2,P3,party3_party2_y,Y')
				/\ witness(P2,P3,party3_party2_xa2,Xa2')


		2. State =1 /\ RCV(Xa3'.Ya3')=|>      %.{P1.P2.P3.X'.Y.z'}_K)=|>
				State':=2
				/\ request(P2,P3,party2_party3_xa3,Xa3')
				/\ K' := exp(Xa3',A2)
				/\ secret(K',k,{P1,P2,P3})
end role

role party3(P3,P1,P2: agent,G:text,SND,RCV: channel(dy))
played_by P3 def=
	local
		State :nat,
		X,Y,Z,Ya3,Za2,Xa2,Xa3,Xa2 :public_key,
		K :symmetric_key,
		A3 : text

	init State := 0

		transition
		1. State = 0 /\ RCV(P1.P2.X'.Y'.Xa2')=|>
			State':= 1
			/\ request(P3,P2,party3_party2_x,X')
			/\ request(P3,P2,party3_party2_y,Y')
			/\ request(P3,P2,party3_party2_xa2,xa2)
			/\ A3' := new()	
			/\ Z':=exp(G,A3')
			/\ K' := exp(Xa2',A3')
			/\ secret(K',k,{P1,P2,P3})
			/\ Xa3' := exp(X',a3')
			/\ Ya3' := exp(Y',a3')
			/\ SND(Xa3'.Ya3')       %.{P1.P2.P3.X'.Y'.Z'}_K
			/\ witness(P3,P1,party1_party3_ya3,Ya3')
			/\ witness(P3,p2,party2_party3_xa3,Xa3')

end role

role session (P1,P2,P3 : agent, G :text)
	def=
		local
		SND1,SND2,SND3,RCV1,RCV2,RCV3 :channel(dy)

	composition
		party1(P1,P2,P3,G,SND1,RCV1)
		/\ party2(P2,P3,P1,G,SND2,RCV2)
		/\ party3(P3,P1,P2,G,SND3,RCV3)

end role

role environment()
	def=
const party1_party3_ya3,
	party2_party3_xa3,
	party3_party2_x,
	party3_party2_y,
	party3_party2_xa2,
	party2_party1_x,k : protocol_id,
	p1,p2,p3 : agent,
	g :text

	intruder_knoledge = {p1,p2,p3,g}
	composition
		session(p1,p2,p3,g)
		/\ session(p2,p3,p1,g)
		/\ session(p3,p1,p2,g)
		/\ session(i,p2,p3,g)
		/\ session(p1,p2,i,g)

end role
goal
secrecy_of k
authentication_on party1_party3_ya3
authentication_on party3_party2_x
authentication_on party3_party2_y
authentication_on party3_party2_xa2
authentication_on party2_party1_x 
	
end goal

environment()		
				


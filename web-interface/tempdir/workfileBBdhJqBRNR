role deviceA (A, H: agent,
		Hsh : hash_func,
	%	K : symmetric_key,
		SK : symmetric_key,
		SND, RCV : channel(dy) )
played_by A def=
local State 						:  nat,
	IDi, IDg, Ai, Bi, Alpha, T1, T2, X, Y, Ra, Rg, N 					:  text,
	 V1, V2, CIDi, TK, C1, C2			 		:  message

 %const 	deviceA_hg_Ra, hg_deviceA_Rg : protocol_id,
%	deviceA_hg_IDi, hg_deviceA_IDg : protocol_id,
%	deviceA_hg_T1, hg_deviceA_T2, sub1, sub2, sub3 : protocol_id
init State := 0
transition
1. State   = 0 /\ RCV(start) =|>
	State' := 1 /\ Ra' := new ()
		  /\  T1' := new ()
		 /\ V1' := xor(Hsh(IDg.Hsh(X)), xor(Ra',T1'))
		/\ CIDi' := xor(Bi, Hsh(Hsh(IDi.Hsh(X)).Ra'.T1'))
		/\ TK' := xor(Hsh(Ai),Ra')
		/\ C1' := {IDi.IDg.N.Alpha.T1'}_TK'
		/\ SND(V1',CIDi',C1',T1')
		/\ secret ({IDi, IDg}, sub1, {A, H})
		/\ secret ({X, Y}, sub2, {A, H})
		/\ secret (Alpha, sub2, {A, H})
		/\ witness(A,H,deviceA_hg_T1, T1') 
		 % deviceA has freshly generated the value of T1 for HG
		/\ witness(A,H,deviceA_hg_Ra, Ra') 
		 % deviceA has freshly generated the value of Ra for HG

2. State = 3 /\ RCV ({IDg.T1.T2'}_SK, xor(Rg', xor(Bi,xor(Hsh(Ai,T2')))), T2') =|>
              State' := 2	/\ xor(Rg', xor(Bi, xor(Hsh(Ai,T2'))))
		/\ SK' := Hsh(Ra'.Rg',IDi.IDg.Alpha)
		% /\ ({IDg, T1', T2'}_SK')
		/\ secret ({IDi, IDg}, sub1, {A, H})
		/\ request (H, A, hg_deviceA_T2, T2') 
		/\ request (H, A, hg_deviceA_Rg, Rg')	
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role homeGateway (A, H: agent,
		Hsh : hash_func,
%		K: symmetric_key,
		SK : symmetric_key,
		SND, RCV : channel(dy) )
played_by H def=
local State : nat,
	IDi, IDg, Ai, Bi, Alpha, Ra, Rg, N : text,
	T1, T2, X, Y : text,
	V1, V2, CIDi, TK, C1, C2 : message
%const	deviceA_hg_Ra, hg_deviceA_Rg : : protocol_id,
%	deviceA_hg_IDi, hg_deviceA_IDg : protocol_id,
%	deviceA_hg_T1, hg_deviceA_T2, sub1, sub2, sub3 : protocol_id
init State := 0
transition
1. State = 0 /\ RCV(V1',CIDi',C1',T1') =|>
    State' := 	1	 /\  T2' := new ()
		/\  secret ({Hsh(X, Y)}, sub2, {A, H})	
		/\  secret ({IDi, IDg}, sub1, {A, H})
		/\  secret ({Hsh(X. Y)}, sub2, {A, H})		
   		/\  Rg' := new ()	
		/\ SK' := Hsh(Ra'.Rg',IDi.IDg.Alpha)
		/\  xor(Rg', xor(Bi,xor(Hsh(Ai,T2'))))
		%/\  ({IDg, T1, T2'}_SK')
		/\  SND({IDg.T1.T2'}_SK, xor(Rg', xor(Bi,xor(Hsh(Ai,T2')))), T2')
		/\ witness ( H, A, hg_deviceA_T2, T2')  
		 % HG has freshly generated the value of T2 for deviceA
		/\ witness ( H, A, hg_deviceA_Rg, Rg')  
		 % HG has freshly generated the value of Rg for deviceA
		/\ request ( A, H, deviceA_hg_T1, T1')  
		 % HG acceptance the value of T1 generated by deviceA
		%/\ request (A, H, deviceA_hg _Ra, Ra')	 
		% HG acceptance the value of Ra generated by deviceA
end role
%%%%%%%%
role session (A, H: agent,
	      Hsh : hash_func,
	    %  K: symmetric_key ,
	     SK : symmetric_key)
def=
local SA, RA, SH, RH: channel (dy)
composition
	deviceA(A,H, Hsh,SA,RA)
	/\ homeGateway(A,H,Hsh,SH,RH)
end role
%%%%%%%%%

role environment()
def=
const  a, hg: agent,
	sk : symmetric_key, 
	hf : hash_func,
	xg, yg, k, alpha, idi, idg, ra, rg, t1, t2 : text,
	deviceA_hg_Ra, hg_deviceA_Rg, deviceA_hg_IDi, hg_deviceA_IDg : protocol_id,
	deviceA_hg_T1, hg_deviceA_T2, sub1, sub2, sub3 : protocol_id
intruder_knowledge = {a, hg, hf}
composition
session(a, hg, hf)
%/\ session(deviceA, i, hf)
%/\ session(homeGateway, i, hf)
end role

goal
secrecy_of sub1
secrecy_of sub2
%secrecy_of sub3
authentication_on deviceA_hg_IDi
authentication_on hg_deviceA_IDg
authentication_on deviceA_hg_T1
authentication_on hg_deviceA_T2
end goal
environment()

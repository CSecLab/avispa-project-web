role user (
     U, S     : agent,
     SND, RCV : channel (dy) , 
     H, H1    : hash_func, 
     K_S   : symmetric_key, 
     B        : public_key)
played_by U 
def= 
local State                      : nat , 
Kus, Rx, Rc, W, V, Authu, Auths  : text

const  
sec_kus1,sec_rx,sec_s : protocol_id
init State :=0 
transition 
1.     State =  0 /\ RCV(start)=|> 
       State':= 1 /\ Rx':=new ()  
                  /\ SND({Rx'}_B) 
                  /\ witness (U, S, nu, Rx')  %% pour une faible authentification  de  U par S pour Rx 
                  /\ secret(Rx', sec_rx ,U)   %% déclarer Rx' comme secret partagé de U, ce secret est identifié par sec_rx dans goal

2.     State = 1  /\ RCV({Rc'}_B.H1({Rc'}_B,{Rx.H(K_S).Rc'}_B)) =|> 
       State':= 2 /\ Kus':={Rx.Rc'.H(K_S)}_B
                  /\ SND(H1({Rx}_B,Kus') ) 
                  /\ secret(K_S,sec_s,U) 
                  /\ secret(Kus', sec_kus1, {U,S}) 
                 /\ request (U, S, ns, Rc') 
                 /\ request (U, S, ns, K_S) 
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role server (
     S, U     : agent,
SND, RCV : channel (dy) , 
H, H1    : hash_func,  
K_S                              : symmetric_key, 
B        : public_key)
played_by S 
def= 
local State                      : nat , 
Kus, Rx, Rc, W, V, Authu, Auths  : text
const  sec_kus2 , sec_rc , sec_s2        : protocol_id
init State :=0 
transition
1.     State =0  /\ RCV({Rx'}_B) =|> 
    State':=1 /\ Rc':=new()  
              /\ SND({Rc'}_B.H1({Rc'}_B,{Rc'.H(s).Rx}_B)) 
              /\  witness (S, U, ns, Rc') 
             /\  secret (Rc', sec_rc, S) 
             /\  secret (K_S, sec_s2, S) 

2.    State=2   /\ RCV(H1({Rx'}_B,Kus'))=|> 
   State':=3 /\ secret (Kus', sec_kus2, {U, S}) 
             /\ request (S ,U, nu , Rx')  
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role session ( 
U, S  : agent , 
H,H1  : hash_func  ,  
K_S :  symmetric_key,
B  : public_key ) 
def= 
local 
           SU, RU, SS, RS  : channel (dy) 
composition 
   user (U, S, SU, RU, H, H1,K_S, B) 
/\ server (S, U, SS, RS, H, H1, K_S, B) 
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role environment ( ) 

def= 
const 
nu, ns  : protocol_id , 
u, s , i  : agent , 
h, h1  : hash_func , 
 k_as, k_is, k_ai           : symmetric_key,
     b, bi  : public_key 
intruder_knowledge={u, s, h, h1, b} 

composition 
    session (u, s, h, h1, k_as, b) 
 /\ session (u, i, h, h1, k_is, b) 
 /\ session (i, s, h, h1, k_ai ,b) 
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
goal 
secrecy_of 
sec_kus1,  sec_kus2, sec_s, sec_s2 
authentication_on nu 
authentication_on ns 
end goal 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
environment ()
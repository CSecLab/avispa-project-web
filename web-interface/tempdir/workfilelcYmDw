%Tema1

role alice (A, S, B      : agent,
	 KAS        : symmetric_key,
	 SND_SA, RCV_SA, SND_BA, RCV_BA:  channel(dy) ) 
played_by A 
def=

  local
      State     :  nat,
      KAB    :  symmetric_key,
      Na        :  text,  
      X          :  {text.symmetric_key}_symmetric_key

  init State := 0

  transition

   1.  State = 0  /\  RCV_BA(start)  =|>
        State' := 2  /\  Na' := new()
	          /\  SND_SA({A.Na'.B}_KAS)

   2.  State = 2  /\  RCV_SA({A.KAB'.Na}_KAS.X')  =|>
        State' := 7  /\ SND_BA(X'.{Na}_KAB')

   3.  State = 7  /\  RCV_BA({Na}_KAB)  =|>
        State' := 9  /\  request(A,B,alice_bob_na,Na)

end role




role server (A, S, B      : agent,
	 KAS, KBS        : symmetric_key,
	 SND_AS, RCV_AS, SND_BS, RCV_BS:  channel(dy) ) 
played_by S 
def=

  local
      State     :  nat,
      KAB    :  symmetric_key,
      Na        :  text  

      

  init State := 1

  transition

   1.  State = 1  /\  RCV_AS({A.Na'.B}_KAS)  =|>
        State' := 3   /\  SND_BS({A}_KBS) 
	         

   2.  State = 3  /\  RCV_BS({B.A}_KBS)    =|>
        State' := 6 /\ KAB' := new() 
	          /\ SND_AS({A.KAB'.Na'}_KAS.{B.KAB'}_KBS)
 	          /\  secret(KAB',k,{A,B,S})

end role




role bob (A, S, B      : agent,
	 KBS        : symmetric_key,
	 SND_AB, RCV_AB, SND_SB, RCV_SB:  channel(dy) ) 
played_by B 
def=

  local
      State     :  nat,
      KAB    :  symmetric_key,
      Na        :  text


  init State := 4

  transition

   1.  State = 4  /\  RCV_SB({A}_KBS)  =|>
        State' := 5  /\  SND_SB({B.A}_KBS)

   2.  State = 5  /\  RCV_AB({B.KAB'}_KBS.{Na'}_KAB')  =|>
        State' := 8  /\ SND_AB({Na'}_KAB')
                           /\  witness(B,A,alice_bob_na,Na')

end role



role session(A, S, B           : agent,
	    KAS, KBS   : symmetric_key)
def=

  local
      SSA, RSA,
      SBA, RBA,
      SAS, RAS,
      SBS, RBS,
      SAB, RAB,
      SSB, RSB     : channel (dy)

  composition

        alice (A, S, B, KAS, SSA, RSA, SBA, RBA)
    /\  server(A, S, B, KAS, KBS, SAS, RAS, SBS, RBS)
    /\  bob   (A, S, B, KBS, SAB, RAB, SSB, RSB)

end role



role environment()
def=

   const a, b, s                 : agent,
            kas, kbs, kis       : symmetric_key,
            alice_bob_na, k   : protocol_id
   
   intruder_knowledge = {a, b, s, kis}

   composition

         session(a,s,b,kas,kbs)
%      /\ session(a,s,i,kas,kis)
%      /\ session(i,s,b,kis,kbs)

end role


goal
   secrecy_of k
   authentication_on alice_bob_na
end goal


environment()

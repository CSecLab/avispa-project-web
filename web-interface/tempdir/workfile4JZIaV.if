%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfile4JZIaV

section signature:

state_user: agent * agent * agent * hash_func * public_key * public_key * public_key * text * nat * public_key * text * text * text * text * text * text * text * text * text * text * set(agent) * set(agent) * nat -> fact
state_base: agent * agent * agent * hash_func * public_key * public_key * public_key * text * nat * text * text * text * text * text * text * text * text * set(agent) * set(agent) * nat -> fact


section types:

set_168, set_167, set_165, set_164, set_162, set_161, set_159, set_158, set_147, set_146, set_132, set_131: set
base_user, base_sensor, sensor_base, s_key: protocol_id
Set_96, Set_95, Set_67, Set_66, Dummy_Set_67, Dummy_Set_66, Dummy_Set_35, Dummy_Set_33, Set_35, Set_33, ASGoal: set(agent)
start, MGoal: message
State, 10, 9, 7, 6, 4, SID, 3, 2, Dummy_State, 1, 0, SID2, SID1: nat
TK, SK, R, G, TS, HashValue, P, SIID, DIDI, SigNew, Sig, KAB, Dummy_SK, UID, Dummy_TK, Dummy_HashValue, Dummy_Sig, Dummy_R, Dummy_SIID, Dummy_G, Dummy_TS, Dummy_UID, Dummy_NU, Dummy_DIDI, Dummy_P, dummy_nonce, NU, Alpha, kab: text
KUS, KSN, SNK, USK, PKPKG, dummy_pk, snk, usk, pkpkg: public_key
H, h: hash_func
SN, BS, US, A2Goal, A1Goal, us, bs, sn, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(us).
 iknows(bs).
 iknows(sn).
 iknows(h).
 iknows(snk).
 iknows(ksn).
 iknows(kus).
 iknows(i).
 state_base(bs,us,sn,h,pkpkg,usk,snk,kab,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_131,set_132,3).
 state_user(us,bs,sn,h,pkpkg,usk,snk,kab,0,dummy_pk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_146,set_147,4).
 state_base(bs,us,sn,h,pkpkg,usk,snk,kab,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_158,set_159,6).
 state_user(us,bs,sn,h,pkpkg,usk,snk,kab,0,dummy_pk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_161,set_162,7).
 state_base(bs,us,sn,h,pkpkg,usk,snk,kab,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_164,set_165,9).
 state_user(us,bs,sn,h,pkpkg,usk,snk,kab,0,dummy_pk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_167,set_168,10)


section rules:

step step_0 (BS,US,SN,H,PKPKG,USK,SNK,KAB,Dummy_P,Alpha,UID,SIID,TS,G,Dummy_DIDI,Dummy_NU,Dummy_Set_33,Dummy_Set_35,SID,NU) :=
 state_base(BS,US,SN,H,PKPKG,USK,SNK,KAB,0,Dummy_P,Alpha,UID,SIID,TS,G,Dummy_DIDI,Dummy_NU,Dummy_Set_33,Dummy_Set_35,SID).
 iknows(start)
=[exists NU]=>
 state_base(BS,US,SN,H,PKPKG,USK,SNK,KAB,1,apply(H,pair(Alpha,PKPKG)),Alpha,UID,SIID,TS,G,apply(H,pair(NU,inv(PKPKG))),NU,Dummy_Set_33,Dummy_Set_35,SID).
 iknows(crypt(USK,pair(apply(H,pair(NU,inv(PKPKG))),apply(H,pair(Alpha,PKPKG))))).
 witness(BS,US,base_user,apply(H,pair(NU,inv(PKPKG)))).
 witness(BS,US,base_user,apply(H,pair(Alpha,PKPKG))).
 iknows(crypt(SNK,pair(apply(H,pair(NU,inv(PKPKG))),apply(H,pair(Alpha,PKPKG))))).
 witness(BS,SN,base_sensor,apply(H,pair(NU,inv(PKPKG)))).
 witness(BS,SN,base_sensor,apply(H,pair(Alpha,PKPKG))).
 contains(US,Dummy_Set_33).
 contains(SN,Dummy_Set_35)

step step_1 (BS,US,SN,H,PKPKG,USK,SNK,KAB,P,Alpha,Dummy_UID,SIID,Dummy_TS,Dummy_G,DIDI,NU,Set_33,Set_35,SID,UID,TS,G) :=
 state_base(BS,US,SN,H,PKPKG,USK,SNK,KAB,1,P,Alpha,Dummy_UID,SIID,Dummy_TS,Dummy_G,DIDI,NU,Set_33,Set_35,SID).
 iknows(pair(UID,pair(TS,G)))
 =>
 state_base(BS,US,SN,H,PKPKG,USK,SNK,KAB,2,P,Alpha,UID,SIID,TS,G,DIDI,NU,Set_33,Set_35,SID).
 request(SN,BS,sensor_base,pair(UID,pair(TS,G)),SID).
 iknows(pair(apply(H,UID),pair(TS,G)))

step step_2 (BS,US,SN,H,PKPKG,USK,SNK,KAB,P,Alpha,UID,Dummy_SIID,Dummy_TS,Dummy_G,DIDI,NU,Set_33,Set_35,SID,SIID,TS,G) :=
 state_base(BS,US,SN,H,PKPKG,USK,SNK,KAB,2,P,Alpha,UID,Dummy_SIID,Dummy_TS,Dummy_G,DIDI,NU,Set_33,Set_35,SID).
 iknows(pair(SIID,pair(TS,G)))
 =>
 state_base(BS,US,SN,H,PKPKG,USK,SNK,KAB,3,P,Alpha,UID,SIID,TS,G,DIDI,NU,Set_33,Set_35,SID).
 iknows(pair(apply(H,SIID),pair(TS,G)))

step step_3 (US,BS,SN,H,PKPKG,USK,SNK,KAB,KSN,Dummy_UID,Dummy_TS,Dummy_G,Dummy_P,Sig,Dummy_DIDI,HashValue,TK,SK,Dummy_R,Dummy_Set_66,Dummy_Set_67,SID,UID,TS,G,P,DIDI,R) :=
 state_user(US,BS,SN,H,PKPKG,USK,SNK,KAB,0,KSN,Dummy_UID,Dummy_TS,Dummy_G,Dummy_P,Sig,Dummy_DIDI,HashValue,TK,SK,Dummy_R,Dummy_Set_66,Dummy_Set_67,SID).
 iknows(crypt(USK,pair(DIDI,P)))
=[exists R,UID,G,TS]=>
 state_user(US,BS,SN,H,PKPKG,USK,SNK,KAB,1,KSN,UID,TS,G,P,Sig,DIDI,HashValue,TK,SK,R,Dummy_Set_66,Dummy_Set_67,SID).
 iknows(pair(UID,pair(TS,G))).
 request(BS,US,base_user,DIDI,SID).
 request(BS,US,base_user,P,SID).
 contains(US,Dummy_Set_66).
 contains(SN,Dummy_Set_67)

step step_4 (US,BS,SN,H,PKPKG,USK,SNK,KAB,KSN,UID,Dummy_TS,Dummy_G,P,Dummy_Sig,DIDI,Dummy_HashValue,Dummy_TK,Dummy_SK,R,Set_66,Set_67,SID,TS,G,HashValue) :=
 state_user(US,BS,SN,H,PKPKG,USK,SNK,KAB,1,KSN,UID,Dummy_TS,Dummy_G,P,Dummy_Sig,DIDI,Dummy_HashValue,Dummy_TK,Dummy_SK,R,Set_66,Set_67,SID).
 iknows(pair(HashValue,pair(TS,G)))
 =>
 state_user(US,BS,SN,H,PKPKG,USK,SNK,KAB,2,KSN,UID,TS,G,P,crypt(KSN,pair(TS,pair(Dummy_TK,UID))),DIDI,HashValue,pair(R,apply(H,UID)),apply(H,pair(KAB,TS)),R,Set_66,Set_67,SID).
 iknows(crypt(KSN,pair(TS,pair(Dummy_TK,UID))))


section properties:

property secrecy_of_sec_i_Pwd (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_i_Pwd,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_base_sensor (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,base_sensor,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,base_sensor,MGoal))
     /\ ((request(A1Goal,A2Goal,base_sensor,MGoal,SID1)
           /\ request(A1Goal,A2Goal,base_sensor,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_base_user (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,base_user,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,base_user,MGoal))
     /\ ((request(A1Goal,A2Goal,base_user,MGoal,SID1)
           /\ request(A1Goal,A2Goal,base_user,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_sensor_base (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,sensor_base,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,sensor_base,MGoal))
     /\ ((request(A1Goal,A2Goal,sensor_base,MGoal,SID1)
           /\ request(A1Goal,A2Goal,sensor_base,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sec_i_Pwd (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_i_Pwd,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_base_sensor (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,base_sensor,MGoal,SID) &
 not(witness(A2Goal,A1Goal,base_sensor,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_base_sensor (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,base_sensor,MGoal,SID1).
 request(A1Goal,A2Goal,base_sensor,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_base_user (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,base_user,MGoal,SID) &
 not(witness(A2Goal,A1Goal,base_user,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_base_user (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,base_user,MGoal,SID1).
 request(A1Goal,A2Goal,base_user,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_sensor_base (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,sensor_base,MGoal,SID) &
 not(witness(A2Goal,A1Goal,sensor_base,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_sensor_base (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,sensor_base,MGoal,SID1).
 request(A1Goal,A2Goal,sensor_base,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


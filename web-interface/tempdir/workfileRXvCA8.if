%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileRXvCA8

section signature:

state_visitedGateKeeper: agent * agent * agent * hash_func * symmetric_key * text * text * nat * message * message * apply(hash_func,pair(symmetric_key,pair(agent,pair(agent,pair(text,pair(text,message)))))) * apply(hash_func,pair(symmetric_key,agent)) * apply(hash_func,pair(symmetric_key,message)) * message * text * text * text * text * text * set(agent) * nat -> fact
state_authenticationFacility: agent * agent * agent * hash_func * symmetric_key * symmetric_key * text * text * nat * message * message * text * nat -> fact
state_mobileTerminal: agent * agent * agent * hash_func * symmetric_key * text * text * nat * text * text * text * text * text * message * message * set(agent) * nat -> fact


section types:

FM3, Dummy_FM3: apply(hash_func,pair(symmetric_key,message))
FM2, Dummy_FM2: apply(hash_func,pair(symmetric_key,agent))
sec_v_Key, key, key1, sec_m_Key: protocol_id
FM1, Dummy_FM1: apply(hash_func,pair(symmetric_key,pair(agent,pair(agent,pair(text,pair(text,message))))))
ASGoal, Set_57, Set_32, Dummy_Set_57, Dummy_Set_32: set(agent)
zz_a_auf, zz_b_auf, zz_i_auf, ZZ, ZZ_VA: symmetric_key
f, F: hash_func
SID2, SID1, SID, State, 9, 3, 8, 7, 2, 1, 0, 5, 4, Dummy_State: nat
MGoal, GX, GY, M2, Key, start, Dummy_M2, Dummy_GX, Dummy_Key, Dummy_GY, dummy_msg: message
A2Goal, A1Goal, a, b, auf, MT, VGK, AuF, i: agent
nil, g, CH1, NIL, G, CH3, Y, CH2, CH4, Dummy_Y, X, Dummy_CH4, Dummy_CH2, Dummy_CH3, Dummy_CH1, Dummy_X, dummy_nonce: text
set_130, set_127, set_118, set_101: set


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(auf).
 iknows(f).
 iknows(g).
 iknows(nil).
 iknows(zz_i_auf).
 iknows(i).
 state_mobileTerminal(a,b,auf,f,zz_a_auf,nil,g,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_101,3).
 state_authenticationFacility(auf,a,b,f,zz_a_auf,zz_b_auf,nil,g,0,dummy_msg,dummy_msg,dummy_nonce,4).
 state_visitedGateKeeper(b,a,auf,f,zz_b_auf,nil,g,0,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_118,5).
 state_mobileTerminal(a,b,auf,f,zz_a_auf,nil,g,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_127,7).
 state_authenticationFacility(auf,a,b,f,zz_a_auf,zz_b_auf,nil,g,0,dummy_msg,dummy_msg,dummy_nonce,8).
 state_visitedGateKeeper(b,a,auf,f,zz_b_auf,nil,g,0,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_130,9)


section rules:

step step_0 (MT,VGK,AuF,F,ZZ,NIL,G,Dummy_X,Dummy_CH1,CH3,CH2,CH4,GY,Key,Set_32,SID,X,CH1) :=
 state_mobileTerminal(MT,VGK,AuF,F,ZZ,NIL,G,0,Dummy_X,Dummy_CH1,CH3,CH2,CH4,GY,Key,Set_32,SID).
 iknows(start)
=[exists CH1,X]=>
 state_mobileTerminal(MT,VGK,AuF,F,ZZ,NIL,G,1,X,CH1,CH3,CH2,CH4,GY,Key,Set_32,SID).
 iknows(pair(MT,pair(VGK,pair(NIL,pair(CH1,pair(exp(G,X),apply(F,pair(ZZ,pair(MT,pair(VGK,pair(NIL,pair(CH1,exp(G,X)))))))))))))

step step_1 (MT,VGK,AuF,F,ZZ,NIL,G,X,CH1,Dummy_CH3,Dummy_CH2,CH4,Dummy_GY,Dummy_Key,Set_32,SID,CH3,CH2,GY) :=
 state_mobileTerminal(MT,VGK,AuF,F,ZZ,NIL,G,1,X,CH1,Dummy_CH3,Dummy_CH2,CH4,Dummy_GY,Dummy_Key,Set_32,SID).
 iknows(pair(VGK,pair(MT,pair(CH1,pair(CH2,pair(GY,pair(apply(F,pair(ZZ,xor(exp(G,X),GY))),pair(apply(F,pair(ZZ,VGK)),apply(F,pair(exp(GY,X),pair(VGK,pair(MT,pair(CH1,pair(CH2,pair(GY,pair(apply(F,pair(ZZ,xor(exp(G,X),GY))),apply(F,pair(ZZ,VGK))))))))))))))))))
=[exists CH3]=>
 state_mobileTerminal(MT,VGK,AuF,F,ZZ,NIL,G,2,X,CH1,CH3,CH2,CH4,GY,exp(GY,X),Set_32,SID).
 iknows(pair(MT,pair(VGK,pair(CH2,pair(CH3,apply(F,pair(exp(GY,X),pair(MT,pair(VGK,pair(CH2,CH3)))))))))).
 witness(MT,VGK,key1,exp(GY,X))

step step_2 (MT,VGK,AuF,F,ZZ,NIL,G,X,CH1,CH3,CH2,Dummy_CH4,GY,Key,Dummy_Set_32,SID,CH4) :=
 state_mobileTerminal(MT,VGK,AuF,F,ZZ,NIL,G,2,X,CH1,CH3,CH2,Dummy_CH4,GY,Key,Dummy_Set_32,SID).
 iknows(pair(VGK,pair(MT,pair(CH3,pair(CH4,apply(F,pair(Key,pair(VGK,pair(MT,pair(CH3,CH4))))))))))
 =>
 state_mobileTerminal(MT,VGK,AuF,F,ZZ,NIL,G,3,X,CH1,CH3,CH2,CH4,GY,Key,Dummy_Set_32,SID).
 request(MT,VGK,key,Key,SID).
 secret(Key,sec_m_Key,Dummy_Set_32).
 contains(VGK,Dummy_Set_32).
 contains(AuF,Dummy_Set_32)

step step_3 (AuF,MT,VGK,F,ZZ,ZZ_VA,NIL,G,Dummy_GX,Dummy_GY,Dummy_CH1,SID,GX,GY,CH1) :=
 state_authenticationFacility(AuF,MT,VGK,F,ZZ,ZZ_VA,NIL,G,0,Dummy_GX,Dummy_GY,Dummy_CH1,SID).
 iknows(pair(MT,pair(VGK,pair(NIL,pair(CH1,pair(GX,pair(apply(F,pair(ZZ,pair(MT,pair(VGK,pair(NIL,pair(CH1,GX)))))),pair(VGK,pair(xor(GX,GY),apply(F,pair(ZZ_VA,pair(MT,pair(VGK,pair(NIL,pair(CH1,pair(GX,pair(apply(F,pair(ZZ,pair(MT,pair(VGK,pair(NIL,pair(CH1,GX)))))),pair(VGK,xor(GX,GY)))))))))))))))))))
 =>
 state_authenticationFacility(AuF,MT,VGK,F,ZZ,ZZ_VA,NIL,G,1,GX,GY,CH1,SID).
 iknows(pair(VGK,pair(MT,pair(apply(F,pair(ZZ,VGK)),pair(apply(F,pair(ZZ,xor(GX,GY))),apply(F,pair(ZZ_VA,pair(VGK,pair(MT,pair(apply(F,pair(ZZ,VGK)),apply(F,pair(ZZ,xor(GX,GY)))))))))))))

step step_4 (VGK,MT,AuF,F,ZZ_VA,NIL,G,Dummy_GX,Dummy_Key,Dummy_FM1,FM2,FM3,Dummy_M2,Dummy_Y,CH2,CH4,Dummy_CH1,CH3,Set_57,SID,GX,FM1,Y,CH1) :=
 state_visitedGateKeeper(VGK,MT,AuF,F,ZZ_VA,NIL,G,0,Dummy_GX,Dummy_Key,Dummy_FM1,FM2,FM3,Dummy_M2,Dummy_Y,CH2,CH4,Dummy_CH1,CH3,Set_57,SID).
 iknows(pair(MT,pair(VGK,pair(NIL,pair(CH1,pair(GX,FM1))))))
=[exists Y]=>
 state_visitedGateKeeper(VGK,MT,AuF,F,ZZ_VA,NIL,G,1,GX,exp(GX,Y),FM1,FM2,FM3,pair(MT,pair(VGK,pair(NIL,pair(CH1,pair(GX,pair(FM1,pair(VGK,xor(GX,exp(G,Y))))))))),Y,CH2,CH4,CH1,CH3,Set_57,SID).
 iknows(pair(pair(MT,pair(VGK,pair(NIL,pair(CH1,pair(GX,pair(FM1,pair(VGK,xor(GX,exp(G,Y))))))))),apply(F,pair(ZZ_VA,pair(MT,pair(VGK,pair(NIL,pair(CH1,pair(GX,pair(FM1,pair(VGK,xor(GX,exp(G,Y))))))))))))).
 witness(VGK,MT,key,exp(GX,Y))

step step_5 (VGK,MT,AuF,F,ZZ_VA,NIL,G,GX,Key,FM1,Dummy_FM2,Dummy_FM3,M2,Y,Dummy_CH2,CH4,CH1,CH3,Set_57,SID,FM2,FM3,CH2) :=
 state_visitedGateKeeper(VGK,MT,AuF,F,ZZ_VA,NIL,G,1,GX,Key,FM1,Dummy_FM2,Dummy_FM3,M2,Y,Dummy_CH2,CH4,CH1,CH3,Set_57,SID).
 iknows(pair(VGK,pair(MT,pair(FM2,pair(FM3,apply(F,pair(ZZ_VA,pair(VGK,pair(MT,pair(FM2,FM3))))))))))
=[exists CH2]=>
 state_visitedGateKeeper(VGK,MT,AuF,F,ZZ_VA,NIL,G,2,GX,Key,FM1,FM2,FM3,M2,Y,CH2,CH4,CH1,CH3,Set_57,SID).
 iknows(pair(VGK,pair(MT,pair(CH1,pair(CH2,pair(exp(G,Y),pair(FM3,pair(FM2,apply(F,pair(Key,pair(VGK,pair(MT,pair(CH1,pair(CH2,pair(exp(G,Y),pair(FM3,FM2))))))))))))))))

step step_6 (VGK,MT,AuF,F,ZZ_VA,NIL,G,GX,Key,FM1,FM2,FM3,M2,Y,CH2,Dummy_CH4,CH1,Dummy_CH3,Dummy_Set_57,SID,CH4,CH3) :=
 state_visitedGateKeeper(VGK,MT,AuF,F,ZZ_VA,NIL,G,2,GX,Key,FM1,FM2,FM3,M2,Y,CH2,Dummy_CH4,CH1,Dummy_CH3,Dummy_Set_57,SID).
 iknows(pair(MT,pair(VGK,pair(CH2,pair(CH3,apply(F,pair(Key,pair(MT,pair(VGK,pair(CH2,CH3))))))))))
=[exists CH4]=>
 state_visitedGateKeeper(VGK,MT,AuF,F,ZZ_VA,NIL,G,3,GX,Key,FM1,FM2,FM3,M2,Y,CH2,CH4,CH1,CH3,Dummy_Set_57,SID).
 iknows(pair(VGK,pair(MT,pair(CH3,pair(CH4,apply(F,pair(Key,pair(VGK,pair(MT,pair(CH3,CH4)))))))))).
 request(VGK,MT,key1,Key,SID).
 secret(Key,sec_v_Key,Dummy_Set_57).
 contains(MT,Dummy_Set_57)


section properties:

property authentication_on_key (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,key,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,key,MGoal))
     /\ ((request(A1Goal,A2Goal,key,MGoal,SID1)
           /\ request(A1Goal,A2Goal,key,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_key1 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,key1,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,key1,MGoal))
     /\ ((request(A1Goal,A2Goal,key1,MGoal,SID1)
           /\ request(A1Goal,A2Goal,key1,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property secrecy_of_sec_m_Key (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_m_Key,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_v_Key (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_v_Key,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state authentication_on_key (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,key,MGoal,SID) &
 not(witness(A2Goal,A1Goal,key,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_key (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,key,MGoal,SID1).
 request(A1Goal,A2Goal,key,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_key1 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,key1,MGoal,SID) &
 not(witness(A2Goal,A1Goal,key1,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_key1 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,key1,MGoal,SID1).
 request(A1Goal,A2Goal,key1,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state secrecy_of_sec_m_Key (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_m_Key,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_v_Key (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_v_Key,ASGoal) &
 not(contains(i,ASGoal))


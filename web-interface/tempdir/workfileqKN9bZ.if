%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileqKN9bZ

section signature:

state_bob: agent * agent * symmetric_key * symmetric_key * symmetric_key * symmetric_key * hash_func * hash_func * hash_func * hash_func * hash_func * hash_func * hash_func * nat * public_key * public_key * text * text * message * message * message * message * message * message * set * nat -> fact
state_alice: agent * agent * symmetric_key * symmetric_key * symmetric_key * symmetric_key * hash_func * hash_func * hash_func * hash_func * hash_func * hash_func * hash_func * nat * public_key * public_key * text * text * message * message * message * message * message * message * set * nat -> fact


section types:

key_id2, key2, key1, key_id1: protocol_id
P1, P2, Dummy_P2, Dummy_P1, dummy_nonce: text
Pa, Pb, Dummy_Pb, Dummy_Pa, dummy_pk: public_key
Set_74, Set_40, set_140, set_139, set_137, set_135, Dummy_Set_74, set_126, Dummy_Set_40, set_114: set
5, 3, State, 7, 4, 2, 6, 1, 0, SID, Dummy_State, SID2, SID1: nat
ra1, ra2, rb1, rb2, ri1, ri2, Ra1, Ra2, Rb1, Rb2: symmetric_key
ASGoal: set(agent)
K1, K2, T, S, M, N, start, Dummy_N, Dummy_S, Dummy_K2, Dummy_K1, Dummy_T, dummy_msg, MGoal: message
B, A, b, a, A2Goal, A1Goal, i: agent
ebilinear, H, Minus, Union, Pred, Conc, Expr, Ebilinear, h, minus, union, pred, conc, expr: hash_func


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(h).
 iknows(minus).
 iknows(union).
 iknows(pred).
 iknows(conc).
 iknows(expr).
 iknows(ebilinear).
 iknows(i).
 state_alice(a,b,ra1,ra2,rb1,rb2,h,minus,union,pred,conc,expr,ebilinear,0,dummy_pk,dummy_pk,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_114,3).
 state_bob(a,b,ra1,ra2,rb1,rb2,h,minus,union,pred,conc,expr,ebilinear,1,dummy_pk,dummy_pk,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_126,4).
 state_alice(a,i,ra1,ra1,ri1,ri2,h,minus,union,pred,conc,expr,ebilinear,0,dummy_pk,dummy_pk,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_135,6).
 state_bob(a,i,ra1,ra1,ri1,ri2,h,minus,union,pred,conc,expr,ebilinear,1,dummy_pk,dummy_pk,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_137,7)


section rules:

step step_0 (A,B,Ra1,Ra2,Rb1,Rb2,H,Minus,Union,Pred,Conc,Expr,Ebilinear,Dummy_Pa,Pb,Dummy_P1,Dummy_P2,K1,K2,T,S,M,N,Set_40,SID,P1,P2) :=
 state_alice(A,B,Ra1,Ra2,Rb1,Rb2,H,Minus,Union,Pred,Conc,Expr,Ebilinear,0,Dummy_Pa,Pb,Dummy_P1,Dummy_P2,K1,K2,T,S,M,N,Set_40,SID).
 iknows(start)
=[exists P2,P1]=>
 state_alice(A,B,Ra1,Ra2,Rb1,Rb2,H,Minus,Union,Pred,Conc,Expr,Ebilinear,2,apply(Union,pair(apply(Pred,pair(Ra1,Dummy_P1)),apply(Pred,pair(Ra2,Dummy_P2)))),Pb,P1,P2,K1,K2,T,S,M,N,Set_40,SID).
 iknows(Dummy_Pa)

step step_1 (A,B,Ra1,Ra2,Rb1,Rb2,H,Minus,Union,Pred,Conc,Expr,Ebilinear,Pa,Pb,P1,P2,K1,K2,Dummy_T,S,M,N,Dummy_Set_40,SID) :=
 state_alice(A,B,Ra1,Ra2,Rb1,Rb2,H,Minus,Union,Pred,Conc,Expr,Ebilinear,2,Pa,Pb,P1,P2,K1,K2,Dummy_T,S,M,N,Dummy_Set_40,SID).
 iknows(K1)
 =>
 state_alice(A,B,Ra1,Ra2,Rb1,Rb2,H,Minus,Union,Pred,Conc,Expr,Ebilinear,4,Pa,Pb,P1,P2,K1,K2,apply(Union,pair(apply(Pred,pair(Ra1,K1)),apply(Pred,pair(Ra2,K2)))),S,M,N,Dummy_Set_40,SID).
 iknows(Dummy_T).
 secret(key1,key_id1,Dummy_Set_40).
 request(A,B,key1,key2,SID).
 contains(a,Dummy_Set_40).
 contains(b,Dummy_Set_40)

step step_2 (B,A,Ra1,Ra2,Rb1,Rb2,H,Minus,Union,Pred,Conc,Expr,Ebilinear,Pa,Dummy_Pb,Dummy_P1,Dummy_P2,Dummy_K1,Dummy_K2,T,S,M,N,Set_74,SID,P1,P2) :=
 state_bob(B,A,Ra1,Ra2,Rb1,Rb2,H,Minus,Union,Pred,Conc,Expr,Ebilinear,1,Pa,Dummy_Pb,Dummy_P1,Dummy_P2,Dummy_K1,Dummy_K2,T,S,M,N,Set_74,SID).
 iknows(Pa)
=[exists P2,P1]=>
 state_bob(B,A,Ra1,Ra2,Rb1,Rb2,H,Minus,Union,Pred,Conc,Expr,Ebilinear,3,Pa,apply(Union,pair(apply(Pred,pair(Rb1,Dummy_P1)),apply(Pred,pair(Rb2,Dummy_P2)))),P1,P2,apply(Pred,pair(Rb2,Dummy_P1)),apply(Union,pair(apply(Pred,pair(Rb2,Dummy_P2)),apply(H,apply(Conc,pair(M,Dummy_Pb))))),T,S,M,N,Set_74,SID).
 iknows(Dummy_K1)

step step_3 (B,A,Ra1,Ra2,Rb1,Rb2,H,Minus,Union,Pred,Conc,Expr,Ebilinear,Pa,Pb,P1,P2,K1,K2,T,Dummy_S,M,Dummy_N,Dummy_Set_74,SID) :=
 state_bob(B,A,Ra1,Ra2,Rb1,Rb2,H,Minus,Union,Pred,Conc,Expr,Ebilinear,3,Pa,Pb,P1,P2,K1,K2,T,Dummy_S,M,Dummy_N,Dummy_Set_74,SID).
 iknows(T)
 =>
 state_bob(B,A,Ra1,Ra2,Rb1,Rb2,H,Minus,Union,Pred,Conc,Expr,Ebilinear,5,Pa,Pb,P1,P2,K1,K2,T,apply(Minus,pair(T,apply(Pred,pair(Rb2,Pb)))),M,apply(Ebilinear,pair(P1,apply(Pred,pair(Dummy_S,P2)))),Dummy_Set_74,SID).
 secret(key2,key_id2,Dummy_Set_74).
 request(B,A,key2,key1,SID).
 contains(b,Dummy_Set_74).
 contains(a,Dummy_Set_74)


section properties:

property secrecy_of_key_id1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,key_id1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_key_id2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,key_id2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_key1 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,key1,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,key1,MGoal))
     /\ ((request(A1Goal,A2Goal,key1,MGoal,SID1)
           /\ request(A1Goal,A2Goal,key1,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_key2 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,key2,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,key2,MGoal))
     /\ ((request(A1Goal,A2Goal,key2,MGoal,SID1)
           /\ request(A1Goal,A2Goal,key2,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_key_id1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,key_id1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_key_id2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,key_id2,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_key1 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,key1,MGoal,SID) &
 not(witness(A2Goal,A1Goal,key1,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_key1 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,key1,MGoal,SID1).
 request(A1Goal,A2Goal,key1,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_key2 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,key2,MGoal,SID) &
 not(witness(A2Goal,A1Goal,key2,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_key2 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,key2,MGoal,SID1).
 request(A1Goal,A2Goal,key2,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


role alice (A, B :agent,
            Ka, Kb, K: symmetric_key,
            Hash: hash_func,
            SND, RCV: channel (dy)
)

played_by A def=

  local State : nat, 
        Na, Nb: text
        
  init State := 0

  transition
  
  0. State = 0 /\ RCV(start) =|>
          State' := 1 
          /\ Na' := new() 
          /\ SND(Na')
  2. State = 2 /\ RCV(Nb')   =|>
          Kb' := Nb.Na 
          /\ K' := new()           
          /\ SND({K}_Kb) 
          /\ State' := 3
	4. State = 4 /\ RCV(Hash(K)) =|> 
          witness(A,B, bob_alice_nb, K')
          /\ secret(K', Na, {A,B}) 
  
	
end role




role bob   (A, B : agent,
            Ka, Kb, K: symmetric_key,
            Hash: hash_func,
            SND, RCV: channel (dy)
)

played_by B def=

  local State : nat, 
        Na, Nb: text

  init State := 1

  transition
  
  1. State = 1 /\ RCV(Na')  =|>
          Nb' := new() 
          /\ SND(Nb') 
          /\ Ka' := Na.Nb 
          /\ Kb' := Nb.Na 
          /\ State' := 2 
	3. State = 3 /\ RCV({K}_Kb) =|> 
          SND(Hash(K)) 
          /\ request(B, A, bob_alice_nb, K) 
          /\ State' := 4
	
end role



role session(A,B: agent,	    
	           K: symmetric_key
       )
def=
local SA, RA, SB, RB: channel(dy) ,
 Hash: hash_func,
 Ka, Kb: symmetric_key

composition

	alice(A,B,Ka, Kb, K, Hash, SA,RA)
	/\
	bob(A,B,Ka, Kb, K, Hash, SB,RB)
end role



role environment() def=

    const a, b         : agent,
          
	  sk,si      : symmetric_key,
	  dgst	       : hash_func,
          na, nb,
          alice_bob_na, bob_alice_nb : protocol_id

    intruder_knowledge = {a, b, si, dgst}

    composition

        session(a,b,sk)
     /\ session(a,i,sk)
     /\ session(i,b,si)

end role


goal

  secrecy_of sk
  authentication_on alice_bob_na
  authentication_on bob_alice_nb

end goal



environment()
%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileKGDT0z

section signature:

state_wap: agent * agent * hash_func * hash_func * hash_func * hash_func * hash_func * symmetric_key * text * text * text * text * text * text * apply(hash_func,pair(apply(hash_func,pair(symmetric_key,pair(text,pair(text,pair(text,text))))),message)) * apply(hash_func,pair(apply(hash_func,pair(symmetric_key,pair(text,pair(text,pair(text,text))))),message)) * apply(hash_func,pair(symmetric_key,pair(text,pair(text,pair(text,text))))) * message * message * nat * set(agent) * nat -> fact
state_mobile: agent * agent * hash_func * hash_func * hash_func * hash_func * hash_func * symmetric_key * text * text * text * text * text * text * apply(hash_func,pair(apply(hash_func,pair(symmetric_key,pair(text,pair(text,pair(text,text))))),message)) * apply(hash_func,pair(apply(hash_func,pair(symmetric_key,pair(text,pair(text,pair(text,text))))),message)) * apply(hash_func,pair(symmetric_key,pair(text,pair(text,pair(text,text))))) * message * message * nat * set(agent) * nat -> fact


section types:

sec_qi2, sec_qi1, at_rand, at_rand2: protocol_id
set_100, set_118: set
ASGoal, Set_69, Set_39, Dummy_Set_69, Dummy_Set_39: set(agent)
Q_I, Dummy_Q_I: apply(hash_func,pair(symmetric_key,pair(text,pair(text,pair(text,text)))))
kps, kis, MK: symmetric_key
MAC2, MAC1, Dummy_MAC2, Dummy_MAC1: apply(hash_func,pair(apply(hash_func,pair(symmetric_key,pair(text,pair(text,pair(text,text))))),message))
hmac, prf_sha1, f1, f2, f3, HMAC, PRF_SHA1, F1, F2, F3: hash_func
SID2, SID1, SID, 7, 5, State, 6, 3, 4, 2, 1, 0, Dummy_State: nat
A2Goal, A1Goal, ue, UE, WAP, wap, i: agent
MGoal, start, K_WAP, K_UE, Dummy_K_UE, Dummy_K_WAP, dummy_msg: message
ID_UE, SSID, R_HSS, T_EXP, R_UE, R_WAP, request_id, respond_id, success, Dummy_R_WAP, Dummy_T_EXP, Dummy_R_HSS, Dummy_SSID, Dummy_ID_UE, Dummy_R_UE, dummy_nonce: text


section inits:

initial_state init1 := 
 iknows(start).
 iknows(ue).
 iknows(wap).
 iknows(f1).
 iknows(f2).
 iknows(f3).
 iknows(prf_sha1).
 iknows(hmac).
 iknows(i).
 state_mobile(ue,wap,f1,f2,f3,prf_sha1,hmac,kps,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,0,set_100,3).
 state_wap(wap,ue,f1,f2,f3,prf_sha1,hmac,kps,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,1,set_118,4)


section rules:

step step_0 (UE,WAP,F1,F2,F3,PRF_SHA1,HMAC,MK,Dummy_R_UE,R_WAP,Dummy_ID_UE,Dummy_SSID,Dummy_R_HSS,Dummy_T_EXP,MAC1,MAC2,Q_I,K_WAP,K_UE,Set_39,SID,R_UE,ID_UE,SSID,R_HSS,T_EXP) :=
 state_mobile(UE,WAP,F1,F2,F3,PRF_SHA1,HMAC,MK,Dummy_R_UE,R_WAP,Dummy_ID_UE,Dummy_SSID,Dummy_R_HSS,Dummy_T_EXP,MAC1,MAC2,Q_I,K_WAP,K_UE,0,Set_39,SID).
 iknows(request_id)
=[exists T_EXP,R_UE,R_HSS,SSID,ID_UE]=>
 state_mobile(UE,WAP,F1,F2,F3,PRF_SHA1,HMAC,MK,R_UE,R_WAP,ID_UE,SSID,R_HSS,T_EXP,MAC1,MAC2,Q_I,K_WAP,K_UE,2,Set_39,SID).
 iknows(pair(respond_id,pair(ID_UE,pair(SSID,pair(R_HSS,pair(T_EXP,R_UE))))))

step step_1 (UE,WAP,F1,F2,F3,PRF_SHA1,HMAC,MK,Dummy_R_UE,Dummy_R_WAP,Dummy_ID_UE,Dummy_SSID,Dummy_R_HSS,Dummy_T_EXP,Dummy_MAC1,Dummy_MAC2,Dummy_Q_I,Dummy_K_WAP,Dummy_K_UE,Dummy_Set_39,SID,R_UE,R_WAP,ID_UE,SSID,R_HSS,T_EXP) :=
 state_mobile(UE,WAP,F1,F2,F3,PRF_SHA1,HMAC,MK,Dummy_R_UE,Dummy_R_WAP,Dummy_ID_UE,Dummy_SSID,Dummy_R_HSS,Dummy_T_EXP,Dummy_MAC1,Dummy_MAC2,Dummy_Q_I,Dummy_K_WAP,Dummy_K_UE,2,Dummy_Set_39,SID).
 iknows(pair(apply(F2,pair(SSID,pair(R_UE,R_WAP))),apply(HMAC,pair(apply(PRF_SHA1,apply(F3,pair(MK,pair(ID_UE,pair(SSID,pair(R_HSS,T_EXP)))))),apply(F2,pair(SSID,pair(R_UE,R_WAP)))))))
 =>
 state_mobile(UE,WAP,F1,F2,F3,PRF_SHA1,HMAC,MK,R_UE,R_WAP,ID_UE,SSID,R_HSS,T_EXP,apply(HMAC,pair(apply(PRF_SHA1,apply(F3,pair(MK,pair(ID_UE,pair(SSID,pair(R_HSS,T_EXP)))))),apply(F2,pair(SSID,pair(R_UE,R_WAP))))),apply(HMAC,pair(apply(PRF_SHA1,apply(F3,pair(MK,pair(ID_UE,pair(SSID,pair(R_HSS,T_EXP)))))),apply(F1,pair(ID_UE,pair(R_UE,R_WAP))))),apply(F3,pair(MK,pair(ID_UE,pair(SSID,pair(R_HSS,T_EXP))))),apply(F2,pair(SSID,pair(R_UE,R_WAP))),apply(F1,pair(ID_UE,pair(R_UE,R_WAP))),4,Dummy_Set_39,SID).
 iknows(pair(apply(F1,pair(ID_UE,pair(R_UE,R_WAP))),apply(HMAC,pair(apply(PRF_SHA1,apply(F3,pair(MK,pair(ID_UE,pair(SSID,pair(R_HSS,T_EXP)))))),apply(F1,pair(ID_UE,pair(R_UE,R_WAP))))))).
 request(UE,WAP,at_rand,R_WAP,SID).
 witness(UE,WAP,at_rand2,R_WAP).
 secret(apply(F3,pair(MK,pair(ID_UE,pair(SSID,pair(R_HSS,T_EXP))))),sec_qi1,Dummy_Set_39).
 contains(UE,Dummy_Set_39).
 contains(WAP,Dummy_Set_39)

step step_2 (UE,WAP,F1,F2,F3,PRF_SHA1,HMAC,MK,R_UE,R_WAP,ID_UE,SSID,R_HSS,T_EXP,MAC1,MAC2,Q_I,K_WAP,K_UE,Set_39,SID) :=
 state_mobile(UE,WAP,F1,F2,F3,PRF_SHA1,HMAC,MK,R_UE,R_WAP,ID_UE,SSID,R_HSS,T_EXP,MAC1,MAC2,Q_I,K_WAP,K_UE,4,Set_39,SID).
 iknows(success)
 =>
 state_mobile(UE,WAP,F1,F2,F3,PRF_SHA1,HMAC,MK,R_UE,R_WAP,ID_UE,SSID,R_HSS,T_EXP,MAC1,MAC2,Q_I,K_WAP,K_UE,6,Set_39,SID)

step step_3 (WAP,UE,F1,F2,F3,PRF_SHA1,HMAC,MK,R_UE,R_WAP,ID_UE,SSID,R_HSS,T_EXP,MAC1,MAC2,Q_I,K_WAP,K_UE,Set_69,SID) :=
 state_wap(WAP,UE,F1,F2,F3,PRF_SHA1,HMAC,MK,R_UE,R_WAP,ID_UE,SSID,R_HSS,T_EXP,MAC1,MAC2,Q_I,K_WAP,K_UE,1,Set_69,SID).
 iknows(start)
 =>
 state_wap(WAP,UE,F1,F2,F3,PRF_SHA1,HMAC,MK,R_UE,R_WAP,ID_UE,SSID,R_HSS,T_EXP,MAC1,MAC2,Q_I,K_WAP,K_UE,3,Set_69,SID).
 iknows(request_id)

step step_4 (WAP,UE,F1,F2,F3,PRF_SHA1,HMAC,MK,Dummy_R_UE,Dummy_R_WAP,Dummy_ID_UE,Dummy_SSID,Dummy_R_HSS,Dummy_T_EXP,Dummy_MAC1,MAC2,Dummy_Q_I,Dummy_K_WAP,K_UE,Dummy_Set_69,SID,R_UE,R_WAP,ID_UE,SSID,R_HSS,T_EXP) :=
 state_wap(WAP,UE,F1,F2,F3,PRF_SHA1,HMAC,MK,Dummy_R_UE,Dummy_R_WAP,Dummy_ID_UE,Dummy_SSID,Dummy_R_HSS,Dummy_T_EXP,Dummy_MAC1,MAC2,Dummy_Q_I,Dummy_K_WAP,K_UE,3,Dummy_Set_69,SID).
 iknows(pair(respond_id,pair(ID_UE,pair(SSID,pair(R_HSS,pair(T_EXP,R_UE))))))
=[exists R_WAP]=>
 state_wap(WAP,UE,F1,F2,F3,PRF_SHA1,HMAC,MK,R_UE,R_WAP,ID_UE,SSID,R_HSS,T_EXP,apply(HMAC,pair(Dummy_Q_I,apply(F2,pair(SSID,pair(R_UE,R_WAP))))),MAC2,apply(F3,pair(MK,pair(ID_UE,pair(SSID,pair(R_HSS,T_EXP))))),apply(F2,pair(SSID,pair(R_UE,R_WAP))),K_UE,5,Dummy_Set_69,SID).
 iknows(pair(apply(F2,pair(SSID,pair(R_UE,R_WAP))),apply(HMAC,pair(Dummy_Q_I,apply(F2,pair(SSID,pair(R_UE,R_WAP))))))).
 witness(UE,WAP,at_rand,R_WAP).
 secret(apply(F3,pair(MK,pair(ID_UE,pair(SSID,pair(R_HSS,T_EXP))))),sec_qi2,Dummy_Set_69).
 contains(UE,Dummy_Set_69).
 contains(WAP,Dummy_Set_69)

step step_5 (WAP,UE,F1,F2,F3,PRF_SHA1,HMAC,MK,Dummy_R_UE,Dummy_R_WAP,Dummy_ID_UE,SSID,R_HSS,T_EXP,MAC1,Dummy_MAC2,Q_I,K_WAP,Dummy_K_UE,Set_69,SID,R_UE,R_WAP,ID_UE) :=
 state_wap(WAP,UE,F1,F2,F3,PRF_SHA1,HMAC,MK,Dummy_R_UE,Dummy_R_WAP,Dummy_ID_UE,SSID,R_HSS,T_EXP,MAC1,Dummy_MAC2,Q_I,K_WAP,Dummy_K_UE,5,Set_69,SID).
 iknows(pair(apply(F1,pair(ID_UE,pair(R_UE,R_WAP))),apply(HMAC,pair(Q_I,apply(F1,pair(ID_UE,pair(R_UE,R_WAP)))))))
 =>
 state_wap(WAP,UE,F1,F2,F3,PRF_SHA1,HMAC,MK,R_UE,R_WAP,ID_UE,SSID,R_HSS,T_EXP,MAC1,apply(HMAC,pair(Q_I,apply(F1,pair(ID_UE,pair(R_UE,R_WAP))))),Q_I,K_WAP,apply(F1,pair(ID_UE,pair(R_UE,R_WAP))),7,Set_69,SID).
 iknows(success).
 request(UE,WAP,at_rand2,Dummy_R_WAP,SID)


section properties:

property secrecy_of_sec_qi1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_qi1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_qi2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_qi2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_at_rand (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,at_rand,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,at_rand,MGoal))
     /\ ((request(A1Goal,A2Goal,at_rand,MGoal,SID1)
           /\ request(A1Goal,A2Goal,at_rand,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_at_rand2 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,at_rand2,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,at_rand2,MGoal))
     /\ ((request(A1Goal,A2Goal,at_rand2,MGoal,SID1)
           /\ request(A1Goal,A2Goal,at_rand2,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sec_qi1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_qi1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_qi2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_qi2,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_at_rand (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,at_rand,MGoal,SID) &
 not(witness(A2Goal,A1Goal,at_rand,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_at_rand (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,at_rand,MGoal,SID1).
 request(A1Goal,A2Goal,at_rand,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_at_rand2 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,at_rand2,MGoal,SID) &
 not(witness(A2Goal,A1Goal,at_rand2,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_at_rand2 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,at_rand2,MGoal,SID1).
 request(A1Goal,A2Goal,at_rand2,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


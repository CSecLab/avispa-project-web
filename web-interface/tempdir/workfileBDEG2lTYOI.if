%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileBDEG2lTYOI

section signature:

state_sensor: agent * agent * symmetric_key * text * text * hash_func * hash_func * hash_func * nat * text * text * text * symmetric_key * message * set(agent) * nat -> fact
state_gateway: agent * agent * agent * symmetric_key * symmetric_key * text * text * text * text * hash_func * hash_func * hash_func * nat * text * text * text * text * text * text * message * symmetric_key * set(agent) * nat -> fact
state_user: agent * agent * symmetric_key * text * text * text * text * hash_func * hash_func * hash_func * nat * text * text * text * text * symmetric_key * set(agent) * nat -> fact


section types:

set_157, set_148, set_137: set
Set_85, Set_66, Dummy_Set_85, Dummy_Set_66, Dummy_Set_33, Set_33, ASGoal: set(agent)
AIDu, Dummy_AIDu, dummy_msg, start, MGoal: message
se_sk, sseq1, nu, auth_sk, r1, r2, tsug_id, auth_nu, auth_sk2: protocol_id
State, 5, SID, 4, Dummy_State, 3, SID2, SID1, 2, 1: nat
Hash, F2, F5, add, f1, f2, f5: hash_func
R2, T, T2, Seq, IDsn, R, Nu, Dummy_T2, TS, Dummy_T, Dummy_R2, IDu, TSug, Dummy_TS, Dummy_R, Dummy_Nu, dummy_nonce, seq, idu, idsn, tsug: text
SK, Kgs, Kug, Dummy_SK, dummy_sk, kug, kgs, k_is, kai: symmetric_key
SENSOR, GATEWAY, USER, A2Goal, A1Goal, u, g, s, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(u).
 iknows(f1).
 iknows(f2).
 iknows(f5).
 iknows(i).
 state_user(u,g,kug,seq,idu,idsn,tsug,f1,f2,f5,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,set_137,3).
 state_gateway(g,u,s,kug,kgs,seq,idu,idsn,tsug,f1,f2,f5,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_sk,set_148,4).
 state_sensor(s,g,kgs,seq,idsn,f1,f2,f5,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,dummy_msg,set_157,5)


section rules:

step step_0 (USER,GATEWAY,Kug,Seq,IDu,IDsn,TSug,Hash,F2,F5,R,R2,Dummy_Nu,TS,SK,Set_33,SID,Nu) :=
 state_user(USER,GATEWAY,Kug,Seq,IDu,IDsn,TSug,Hash,F2,F5,1,R,R2,Dummy_Nu,TS,SK,Set_33,SID).
 iknows(start)
=[exists Nu]=>
 state_user(USER,GATEWAY,Kug,Seq,IDu,IDsn,TSug,Hash,F2,F5,2,R,R2,Nu,TS,SK,Set_33,SID).
 iknows(pair(xor(Kug,Nu),pair(apply(Hash,pair(IDu,pair(Kug,pair(Nu,TSug)))),pair(TSug,pair(IDsn,apply(Hash,pair(apply(Hash,pair(IDu,pair(Kug,pair(Nu,TSug)))),pair(Kug,pair(xor(Kug,Nu),IDsn))))))))).
 witness(USER,GATEWAY,auth_nu,Nu)

step step_1 (USER,GATEWAY,Kug,Seq,IDu,IDsn,TSug,Hash,F2,F5,Dummy_R,R2,Nu,Dummy_TS,Dummy_SK,Dummy_Set_33,SID,R,TS,SK) :=
 state_user(USER,GATEWAY,Kug,Seq,IDu,IDsn,TSug,Hash,F2,F5,2,Dummy_R,R2,Nu,Dummy_TS,Dummy_SK,Dummy_Set_33,SID).
 iknows(pair(apply(Hash,Nu),pair(xor(R,Kug),pair(xor(apply(Hash,pair(Kug,pair(IDu,Nu))),SK),pair(TS,apply(Hash,pair(Nu,pair(TS,Kug))))))))
 =>
 state_user(USER,GATEWAY,Kug,Seq,IDu,IDsn,TSug,Hash,F2,F5,3,R,R2,Nu,TS,SK,Dummy_Set_33,SID).
 secret(R,r1,Dummy_Set_33).
 contains(GATEWAY,Dummy_Set_33).
 contains(USER,Dummy_Set_33)

step step_2 (GATEWAY,USER,SENSOR,Kug,Kgs,Seq,IDu,IDsn,TSug,Hash,F2,F5,R,Dummy_R2,Dummy_Nu,Dummy_T,T2,TS,Dummy_AIDu,Dummy_SK,Dummy_Set_66,SID,R2,Nu,T,SK) :=
 state_gateway(GATEWAY,USER,SENSOR,Kug,Kgs,Seq,IDu,IDsn,TSug,Hash,F2,F5,1,R,Dummy_R2,Dummy_Nu,Dummy_T,T2,TS,Dummy_AIDu,Dummy_SK,Dummy_Set_66,SID).
 iknows(pair(xor(Kug,Nu),pair(apply(Hash,pair(IDu,pair(Kug,pair(Nu,TSug)))),pair(TSug,pair(IDsn,apply(Hash,pair(apply(Hash,pair(IDu,pair(Kug,pair(Nu,TSug)))),pair(Kug,pair(xor(Kug,Nu),IDsn)))))))))
=[exists T,SK,R2]=>
 state_gateway(GATEWAY,USER,SENSOR,Kug,Kgs,Seq,IDu,IDsn,TSug,Hash,F2,F5,2,R,R2,Nu,T,T2,TS,apply(Hash,pair(IDu,pair(Kug,pair(Nu,TSug)))),SK,Dummy_Set_66,SID).
 iknows(pair(xor(R2,Kgs),pair(Dummy_AIDu,pair(xor(SK,apply(Hash,Kgs)),pair(T,apply(Hash,pair(Dummy_AIDu,pair(xor(apply(Hash,Kgs),SK),pair(T,Kgs))))))))).
 secret(Nu,nu,Dummy_Set_66).
 request(GATEWAY,USER,auth_nu,Nu,SID).
 witness(GATEWAY,SENSOR,auth_sk,SK).
 contains(GATEWAY,Dummy_Set_66).
 contains(USER,Dummy_Set_66)

step step_3 (GATEWAY,USER,SENSOR,Kug,Kgs,Seq,IDu,IDsn,TSug,Hash,F2,F5,Dummy_R,R2,Nu,T,Dummy_T2,Dummy_TS,AIDu,SK,Set_66,SID,R,T2) :=
 state_gateway(GATEWAY,USER,SENSOR,Kug,Kgs,Seq,IDu,IDsn,TSug,Hash,F2,F5,2,Dummy_R,R2,Nu,T,Dummy_T2,Dummy_TS,AIDu,SK,Set_66,SID).
 iknows(pair(apply(Hash,R2),pair(T2,pair(IDsn,apply(Hash,pair(SK,pair(Kgs,pair(IDsn,T2))))))))
=[exists R]=>
 state_gateway(GATEWAY,USER,SENSOR,Kug,Kgs,Seq,IDu,IDsn,TSug,Hash,F2,F5,3,R,R2,Nu,T,T2,xor(apply(Hash,pair(Kug,pair(IDu,Nu))),TSug),AIDu,SK,Set_66,SID).
 iknows(pair(apply(Hash,Nu),pair(xor(R,Kug),pair(xor(apply(Hash,pair(Kug,pair(IDu,Nu))),SK),pair(xor(apply(Hash,pair(Kug,pair(IDu,Nu))),TSug),apply(Hash,pair(Nu,pair(xor(apply(Hash,pair(Kug,pair(IDu,Nu))),TSug),Kug))))))))

step step_4 (SENSOR,GATEWAY,Kgs,Seq,IDsn,Hash,F2,F5,Dummy_R2,Dummy_T,Dummy_T2,Dummy_SK,Dummy_AIDu,Dummy_Set_85,SID,R2,T,T2,SK,AIDu) :=
 state_sensor(SENSOR,GATEWAY,Kgs,Seq,IDsn,Hash,F2,F5,1,Dummy_R2,Dummy_T,Dummy_T2,Dummy_SK,Dummy_AIDu,Dummy_Set_85,SID).
 iknows(pair(xor(R2,Kgs),pair(AIDu,pair(xor(SK,apply(Hash,Kgs)),pair(T,apply(Hash,pair(AIDu,pair(xor(apply(Hash,Kgs),SK),pair(T,Kgs)))))))))
=[exists T2]=>
 state_sensor(SENSOR,GATEWAY,Kgs,Seq,IDsn,Hash,F2,F5,2,R2,T,T2,SK,AIDu,Dummy_Set_85,SID).
 iknows(pair(apply(Hash,R2),pair(T2,pair(IDsn,apply(Hash,pair(SK,pair(Kgs,pair(IDsn,T2)))))))).
 secret(SK,se_sk,Dummy_Set_85).
 request(SENSOR,GATEWAY,auth_sk,SK,SID).
 contains(SENSOR,Dummy_Set_85).
 contains(GATEWAY,Dummy_Set_85)


section properties:

property secrecy_of_nu (MGoal,ASGoal) :=
 [] ((secret(MGoal,nu,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_r1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,r1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_r2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,r2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_se_sk (MGoal,ASGoal) :=
 [] ((secret(MGoal,se_sk,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_auth_nu (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth_nu,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth_nu,MGoal))
     /\ ((request(A1Goal,A2Goal,auth_nu,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth_nu,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_auth_sk (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth_sk,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth_sk,MGoal))
     /\ ((request(A1Goal,A2Goal,auth_sk,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth_sk,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_nu (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,nu,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_r1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,r1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_r2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,r2,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_se_sk (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,se_sk,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_auth_nu (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth_nu,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_nu,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth_nu (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth_nu,MGoal,SID1).
 request(A1Goal,A2Goal,auth_nu,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_auth_sk (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth_sk,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_sk,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth_sk (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth_sk,MGoal,SID1).
 request(A1Goal,A2Goal,auth_sk,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


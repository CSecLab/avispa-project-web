role alice (Ui, GWN, SNj : agent,
 H : hash_func,
 SKuigwn : symmetric_key,
 Snd, Rcv: channel(dy))
played_by Ui
def=
 local State : nat,
 IDi, IDsnj, K, PWi, Bi, TS1, TS2, TS3, TS4: text,
 Kgwnu, Kgwns, Xs, TEi, TIDi, Ki, Kj : text,
 M1, RPWi, TCi, PTCi, PKSi, Ci, TIDinew : text
 const alice_server_ts1, server_alice_ts4,
 alice_server_tidi, server_alice_tidinew,
 subs1, subs2, subs3, subs4, subs5 : protocol_id
init State := 0
transition
1. State = 0 
	/ Rcv(start) 
	=|>
% Registration phase
State’ := 1 
	/ K’ := new()
	/ secret({PWi,Bi,K’},subs1,Ui)
	/ RPWi’ := H(IDi.K’.PWi)
	/ Snd({IDi.RPWi’}_SKuigwn)
2. State = 1 
	/ Rcv({H.TIDi’.TEi.xor(H(Kgwnu.IDi.TEi),
	H(IDi.K’.PWi)).H(IDi.Xs)}_SKuigwn) 
	=|>
% Login phase
State’ := 2 / TS1’ := new()
 / secret({Kgwnu,Kgwns,Xs,TEi},subs3,GWN)
 / secret(Ki,subs4,{GWN,Ui,SNj})
 / secret(Kj,subs5,{GWN,Ui,SNj})
% Ui sends the login message to the GWN
 / Snd(TIDi’.H(IDi.Ki.H(Kgwnu.IDi.TEi).
 H(IDi.Xs).TIDi’.TS1’).xor(Ki,H(H(Kgwnu.IDi.
 TEi).H(IDi.Xs).TS1’)).TS1’)
% Ui has freshly generated the value TS1 for GWN
 / witness(Ui,GWN,alice_server_ts1, TS1’)
 / witness(Ui,GWN,alice_server_tidi,TIDi’)
% Authentication and key agreement phase
% Ui receives the acknowledgment message from GWN
2. State = 2 / Rcv(IDsnj.TS3’.TS4’.xor(Kj,H(xor(Ki,
 H(IDi.Xs)).TS3’)).xor(TIDinew’, H(xor(Ki,
 H(IDi.Xs).TS3’.TS4’))). H(IDi.IDsnj.
 H(Kgwnu.IDi.TEi). xor(TIDinew’, H(xor(Ki,
 H(IDi.Xs).TS3’.TS4’))).Kj.TS3’.TS4’)) =|>
% Ui’s acceptance of the value TS4 generated for Ui by GWN
State’ := 3 / request(GWN, Ui, server_alice_ts4, TS4’)
 / request(Ui, GWN, server_alice_tidinew, TIDinew’)
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role server (Ui, GWN, SNj : agent,
 H : hash_func,
 SKuigwn : symmetric_key,
 Snd, Rcv: channel(dy))
played_by GWN
def=
 local State : nat,
 IDi, IDsnj, K, PWi, Bi, TS1, TS2, TS3, TS4 : text,
 Kgwnu, Kgwns, Xs, TEi, TIDi, Ki, Kj : text,
 M1, RPWi, TCi, PTCi, PKSi, Ci, TIDinew : text
 const server_bob_ts2, bob_server_ts3, alice_server_ts1,
 server_alice_ts4, server_alice_tidinew,
 subs1, subs2, subs3, subs4, subs5 : protocol_id
init State := 0
transition
% Registration phase
1. State = 0 / Rcv({IDi.H(IDi.K’.PWi)}_SKuigwn) =|>
 State’ := 1 / secret({PWi,Bi,K’},subs1,Ui)
 / TIDi’ := new()
 / Snd({H.TIDi’.TEi.xor(H(Kgwnu.IDi.TEi),
 H(IDi.K’.PWi)).H(IDi.Xs)}_SKuigwn)
% Login phase: receive the login request message from Ui
2. State = 1 / Rcv(TIDi’.H(IDi.Ki.H(Kgwnu.IDi.TEi).
 H(IDi.Xs).TIDi’.TS1’).xor(Ki,H(H(Kgwnu.IDi.
 TEi).H(IDi.Xs).TS1’)).TS1’) =|>
State’ := 2 / TS2’ := new( )
 / secret({IDi},subs2,{Ui,GWN})
 / secret({Kgwnu,Kgwns,Xs,TEi},subs3,GWN)
 / secret(Ki,subs4,{GWN,Ui,SNj})
 / secret(Kj,subs5,{GWN,Ui,SNj})
% Authentication and key agreement phase
 / Snd(TS2’.TIDi’. H(TIDi’.H(Kgwns.IDsnj).TS2’).
 xor(xor(Ki,H(IDi.Xs)),H(H(Kgwns.IDsnj).TS2’)))
% GWN has freshly generated the value TS2 for SNj
 / witness(GWN,SNj,server_bob_ts2, TS2’)
% Receive the message from sensor node SNj
2. State = 2 / Rcv(IDsnj.TS3’.H(Kj.TIDi’.IDsnj.TS3’).
 xor(Kj, H(xor(Ki,H(IDi.Xs)).TS3’))) =|>
State’ := 3 / TS4’ := new()
 / TIDinew’ := new()
% Send the message back to the user Ui
 / Snd(IDsnj.TS3’.TS4’.xor(Kj,H(xor(Ki,
 H(IDi.Xs)).TS3’)).xor(TIDinew’, H(xor(Ki,
 H(IDi.Xs).TS3’.TS4’))). H(IDi.IDsnj.
 H(Kgwnu.IDi.TEi). xor(TIDinew’, H(xor(Ki,
 H(IDi.Xs).TS3’.TS4’))).Kj.TS3’.TS4’))
% GWN has freshly generated the value TS4 for Ui
 / witness(GWN,SNj,server_alice_ts4, TS4’)
% GWN has freshly generated the value TIDinew for Ui
 / witness(GWN,SNj,server_alice_tidinew, TIDinew’)
% GWN’s acceptance of the value TS1 generated for GWN by Ui
 / request(Ui, GWN, alice_server_ts1, TS1)
% GWN’s acceptance of the value TS3 generated for GWN by SNj
 / request(SNj, GWN, bob_server_ts3, TS3’)
 / request(Ui, GWN, alice_server_tidi, TIDi)
end role

%%%%%%%%%%%%%%%%%%%%%%%%

role bob (Ui, GWN, SNj : agent,
 H : hash_func,
 SKuigwn : symmetric_key,
 Snd, Rcv: channel(dy))
played_by SNj
def=
 local State : nat,
 IDi, IDsnj, K, PWi, Bi, TS1, TS2, TS3, TS4 : text,
 Kgwnu, Kgwns, Xs, TEi, TIDi, Ki, Kj, Cj, PKSj: text,
 M1, M3, RPWi, TCi, PTCi, PKSi, Ci, TIDinew : text
 const server_bob_ts2, bob_server_ts3, alice_server_ts1,
 subs1, subs2, subs3, subs4, subs5 : protocol_id
init State := 0
transition
% Authentication and key agreement phase
% Receive the message from the GWN
1. State = 0 / Rcv(TS2’.TIDi’. H(TIDi’.H(Kgwns.IDsnj).TS2’).
 xor(xor(Ki,H(IDi.Xs)),H(H(Kgwns.IDsnj).TS2’))) =|>
State’ := 1
 / TS3’ := new()
 / Ki’ := new()
 / secret({PWi,Bi,K},subs1,Ui)
 / secret({IDi},subs2,{Ui,GWN})
 / secret({Kgwnu,Kgwns,Xs,TEi},subs3,GWN)
 / secret(Ki’,subs4,{GWN,Ui,SNj})
 / secret(Kj,subs5,{GWN,Ui,SNj})
% Send the message to the GWN
 / Snd(IDsnj.TS3’.H(Kj.TIDi’.IDsnj.TS3’).
 xor(Kj, H(xor(Ki,H(IDi.Xs)).TS3’)))
% SNj has freshly generated the value TS3 for GWN
 / witness(SNj,GWN,bob_server_ts3, TS3’)
% SNj’s acceptance of the value TS2 generated for SNj by GWN
 / request(GWN, SNj, server_bob_ts2, TS2’)
end role

%%%%%%%%%%%%%%%%%%%%%%%

role session(Ui,GWN,SNj: agent,
 % H is hash function
 H : hash_func,
 SKuigwn: symmetric_key)
def=
 local US, UR, SS, SR, VS, VR: channel (dy)
 composition
 alice(Ui, GWN, SNj, H, SKuigwn, US, UR)
 / server(Ui, GWN, SNj, H, SKuigwn, SS, SR)
 / bob(Ui, GWN, SNj, H, SKuigwn, VS, VR)
end role

%%%%%%%%%%%%%%%%%%%%%%%%

role environment()
def=
 const ui, gwn, snj : agent,
 h : hash_func,
 skuigwn: symmetric_key,
 idi, idsnj, ts1, ts2,
 ts3, ts4, tidi, tidinew : text,
 alice_server_ts1, server_bob_ts2,
 bob_server_ts3, server_alice_ts4,
 alice_server_tidi, server_alice_tidinew,
 subs1, subs2, subs3, subs4, subs5 : protocol_id
intruder_knowledge ={idsnj,h}
 composition
session(ui, gwn, snj, h, skuigwn)
 /session(ui, gwn, snj, h, skuigwn)
 / session(ui, gwn, snj, h, skuigwn)
end role
goal
% subs1 represents that the password PWi and personal
% biometrics Bi are kept secret to the user Ui only.
secrecy_of subs1
% subs2 represents that the idenity IDi is
% kept secret to both Ui and GWN.
secrecy_of subs2
% subs3 represents that Kgwn&#8722;u, Kgwn&#8722;s, Xs and TEi
% are kept secret to the GWN only.
secrecy_of subs3
secrecy_of subs4
secrecy_of subs5
% Ui (the smart card) generates a timestamp TS1.
% When the GWN receives TS1 from the message from Ui,
% the GWN authenticates Ui based on TS1.
% Similarly for other protocols ids.
 authentication_on alice_server_ts1
 authentication_on server_bob_ts2
 authentication_on bob_server_ts3
 authentication_on server_alice_ts4
 authentication_on alice_server_tidi
 authentication_on server_alice_tidinew
end goal
environment() 
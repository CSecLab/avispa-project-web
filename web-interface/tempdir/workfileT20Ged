
role alice(
A,B	:agent,
Kab	:symmetric_key,
Hash	:hash_func,
SND,RCV :channel(dy))
played_by A def=

local
 State  :nat,
 CA      :nat,
 Na	:text,
 D	:message

init
 State :=0 /\ CA:=0

transition 

1. State =0  /\ RCV(start) =|>
   State':=2 /\ Kab' :=new()
	    
	     /\  SND ({D.CA}_Kab',Hash(Kab',CA.{D.CA}_Kab'))

2. State =2 /\ RCV ({RB,CB}_Kba'.Hash(Kba',NA/\CB/\{RB,CB}_Kba')) =|>
   State':=4 /\ Na':=new()
             /\Ra':=new()
             /\ SND (NA,RA)
                
end role

role bob(
     A,B	: agent,
     Kba       	: symmetric_key,
     Hash	: hash_func,
     SND,RCV	:channel (dy))
played_by B def=

local
    State,CB	: nat,
    Na	        : text,
    RB  	: message

init 
 State :=1 /\ CB:=0

transition

1. State =1 /\ RCV ({D.CA}_Kab',Hash(Kab',CA.{D.CA}_Kab')) =|>
   State' :=3/\ Kba':=new()
             
            /\SND({RB,CB}_Kba'.Hash(Kba',NA/\CB/\{RB,CB}_Kba'))
	    
	  //  /\secret(Kba',k1,{A,B})

2. State =3 /\ RCV (NA,RA) =|>
   // State' :=5 /\ request (B,A,bob_alice_nb, Nb)

end role


role session(
A,B	: agent,
Kab	: symmetric_key,
Hash	: hash_func)
def=

local SA,SB,RA,RB : channel(dy)

composition

	alice (A,B,Kab,Hash,SA,RA)
           /\  bob (A,B,Kab,Hash,SB,RB)
end role

role environment()
def=


const
 bob_alice_nb,
 k1		: protocol_id,
kab, kai, kib	: symmetric_key,
a,b		: agent,
h		: hash_func

intruder_knowledge={a,b,h,kai,kib}

composition
	
	session(a,b,kab,h)
	/\session(a,i,kai,h)
	/\session(i,b,kib,h)

end role

goal
   secrecy_of k1
   authentication_on bob_alice_nb
end goal


environment()

role alice( A,B :agent,
        Ka,Kb: public_key,
       Snd,Rcv: channel(dy))
played_by A def=
local Na,Nb:text,
      State:nat
init State:=0
transition

0.State =0  /\Rcv(start) =|>
  State':=2 /\Na':=new()
           /\Snd({A.Na'}_Kb)
           /\secret(Na',na,{A,B})
            /\ witness(A,B,bob_alice_na,Na')
2.State =2 /\Rcv({Na,Nb'}_Ka) =|>
  State':= 4 /\Snd({Nb'}_Kb)
          /\request(A,B,alice_bob_nb,Nb')
 end role


role bob( B,A:agent,
       Ka,Kb: public_key,
         Snd,Rcv:channel(dy))
played_by B def=
local
  Na,Nb:text,
  State:nat

init
State :=1
transition
1. State =1 /\ Rcv({A.Na'}_Kb) =|>
State':=3  /\Nb':=new()
           /\Snd({Na'.Nb'}_Ka) 
           /\secret(Nb',nb,{A,B})
           /\witness(B,A,alice_bob_nb,Nb')
2.State =3 /\ Rcv({Nb}_Kb) =|>
   State':=5        
           /\ request(B,A,bob_alice_na,Na')
end role



 role session( A,B:agent,
        
        Ka,Kb :public_key)
 def=
local SA, RA,SB,RB: channel(dy)

composition

pke_A(A,B,Ka,kb,SA,RA)
/\pke_B(B,A,Ka,kb,SB,RB)
end role


role environment()
def=
const a,b :agent,
      ka,kb,ki: public_key,
      na,nb, bob_alice_na,alice_bob_nb :protocol_id

intruder_knowledge={a,b,ka,kb,ki, inv(ki)}

composition
  session(a,b,ka,kb)
/\session(a,i,ka,ki)
/\session(i,b,ki,kb)

end role


goal
secrecy_of na, nb
authentication_on bob_alice_na
authentication_on alice_bob_nb

end goal

environment()
          

        
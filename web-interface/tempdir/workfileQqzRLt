% Secure VM migration module
role client_cloud(A, B : agent,  
           H : hash_func,
           Ka, Kt: public_key,  %% Kt is the public key of a TTP (ie. CA)
           SND, RCV: channel (dy))
played_by A
def=
   local Ra : text,
         Rb: text,
         State: nat,
         Kb: public_key
         %M: hash(text.text.text)

   init  State := 0

   transition

   1.  State = 0
       / RCV(start)
       =|>
       State' := 2
       / Ra' := new()
       / SND(A.Ra')
       %/ Ra' := new()
       %/ SND(A.Na'.Sid'.Pa')

     2.  State = 2
      % / RCV(Nb'.Sid.Pa.{B.Kb'}_(inv(Ks)))
       =|>
       State' := 3
      % / PMS' := new()
      % / M' := PRF(PMS'.Na.Nb')
      % / Finished' := H(PRF(PMS'.Na.Nb').A.B.Na.Pa.Sid)
      % / ClientK' := KeyGen(A.Na.Nb'.PRF(PMS'.Na.Nb'))
      % / ServerK' := KeyGen(B.Na.Nb'.PRF(PMS'.Na.Nb'))
      % / SND({PMS'}_Kb'.
      %        {A.Ka}_(inv(Ks)).
      %        {H(Nb'.B.PMS')}_(inv(Ka)).
      %        {H(PRF(PMS'.Na.Nb').
      %         A.B.Na.Pa.Sid)
      %        }_KeyGen(A.Na.Nb'.PRF(PMS'.Na.Nb')))
      % / witness(A,B,na_nb2,Na.Nb')

   4.  State = 3
      % / RCV({Finished}_ServerK)
       =|>
       State' := 5
      % / request(A,B,na_nb1,Na.Nb)
      % / secret(ClientK,sec_clientk,{A,B})
      % / secret(ServerK,sec_serverk,{A,B})

end role


%%%###########server
role server_cloud(A, B : agent,
         H : hash_func,
         Kb, Kt: public_key,
         SND, RCV: channel (dy))
played_by B
def=

   local Rb, Ra: text,
         State: nat,
         Ka: public_key

   init  State := 1

   transition

   1.  State = 1
       %/ RCV(A.Na'.Sid'.Pa')
       / RCV(A.Ra')   =|>
       State' := 3
       / Rb' := new()
       / SND(Rb')
       / witness(B,A,na_nb1,Ra'.Rb')

   2.  State = 3
       %/ RCV({PMS'}_Kb.{A.Ka'}_(inv(Ks)).
        %      {H(Nb.B.PMS')}_(inv(Ka')).
        %      {H(PRF(PMS'.Na.Nb).
        %       A.B.Na.Pa.Sid)
        %      }_KeyGen(A.Na.Nb.PRF(PMS'.Na.Nb)))
       =|>
       State' := 5
       %/ SND({H(PRF(PMS'.Na.Nb).
        %       A.B.Na.Pa.Sid)
        %      }_KeyGen(B.Na.Nb.PRF(PMS'.Na.Nb)))
      % / request(B,A,na_nb2,Na.Nb)

end role



role session(A,B: agent,
             Ka, Kb, Kt: public_key,
             H : hash_func)
def=

   local  SA, SB, RA, RB: channel (dy)

   composition
                client_cloud(A,B,H,Ka,Kt,SA,RA)
           /   server_cloud(A,B,H,Kb,Kt,SB,RB)

end role



role environment()
def=

   const na_nb1 : protocol_id,
         h       : hash_func,
         a, b           : agent,
         ka, kb, ki, kt : public_key

   intruder_knowledge = { a, b, ka, kb, kt, ki, inv(ki),
                          {i.ki}_(inv(kt)) }  

   composition
        session(a,b,ka,kb,kt,h)
    /  session(a,i,ka,ki,kt,h)
    /  session(i,b,ki,kb,kt,h)

end role



goal

  %Alice authenticates Bob on na_nb1
  authentication_on na_nb1  % Addresses G1, G2, G3, G7, G10
  %Bob authenticates Alice on na_nb2
  %authentication_on na_nb2  % Addresses G1, G2, G3, G7, G10

end goal



environment()            
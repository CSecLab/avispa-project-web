%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileThXDPH

section signature:

state_issuer: agent * agent * agent * public_key * symmetric_key * nat * text * text * text * set(agent) * nat -> fact
state_receiver: agent * agent * agent * public_key * symmetric_key * nat * text * text * text * set(agent) * set(agent) * nat -> fact
state_alice: agent * agent * agent * public_key * symmetric_key * nat * text * text * set(agent) * set(agent) * nat -> fact


section types:

Dummy_Set_56, Dummy_Set_42, Dummy_Set_41, Dummy_Set_24, Dummy_Set_20, ASGoal, Set_56, Set_42, Set_41, Set_24, Set_20: set(agent)
MGoal, start: message
sec_k3, sec_k4, sec_k2, sec_k5, sec_k1: protocol_id
Dummy_X, Dummy_A, Dummy_Q, dummy_nonce, Q, X, A: text
kai, Kai: symmetric_key
ki, Ki: public_key
8, 7, 5, SID, 4, Dummy_State, 3, State, 1, 2, 0, 17, 16, 13, 11: nat
Alice, Receiver, Issuer, issuer, receiver, alice, i: agent
set_99, set_98, set_96, set_95, set_91, set_85, set_84, set_75, set_74, set_114, set_112, set_111, set_110, set_109, set_107, set_106, set_105, set_103, set_102, set_101: set


section inits:

initial_state init1 := 
 iknows(start).
 iknows(alice).
 iknows(issuer).
 iknows(receiver).
 iknows(ki).
 iknows(i).
 state_alice(alice,receiver,issuer,ki,kai,0,dummy_nonce,dummy_nonce,set_74,set_75,3).
 state_receiver(receiver,alice,issuer,ki,kai,1,dummy_nonce,dummy_nonce,dummy_nonce,set_84,set_85,4).
 state_issuer(issuer,alice,receiver,ki,kai,2,dummy_nonce,dummy_nonce,dummy_nonce,set_91,5).
 state_alice(alice,receiver,i,ki,kai,0,dummy_nonce,dummy_nonce,set_95,set_96,7).
 state_receiver(receiver,alice,i,ki,kai,1,dummy_nonce,dummy_nonce,dummy_nonce,set_98,set_99,8).
 state_alice(alice,i,issuer,ki,kai,0,dummy_nonce,dummy_nonce,set_102,set_103,11).
 state_issuer(issuer,alice,i,ki,kai,2,dummy_nonce,dummy_nonce,dummy_nonce,set_107,13).
 state_receiver(receiver,i,issuer,ki,kai,1,dummy_nonce,dummy_nonce,dummy_nonce,set_111,set_112,16).
 state_issuer(issuer,i,receiver,ki,kai,2,dummy_nonce,dummy_nonce,dummy_nonce,set_114,17)


section rules:

step step_0 (Alice,Receiver,Issuer,Ki,Kai,Dummy_Q,A,Dummy_Set_20,Set_24,SID,Q) :=
 state_alice(Alice,Receiver,Issuer,Ki,Kai,0,Dummy_Q,A,Dummy_Set_20,Set_24,SID).
 iknows(start)
=[exists Q]=>
 state_alice(Alice,Receiver,Issuer,Ki,Kai,2,Q,A,Dummy_Set_20,Set_24,SID).
 iknows(crypt(Ki,pair(Q,Kai))).
 secret(Q,sec_k1,Dummy_Set_20).
 contains(Alice,Dummy_Set_20).
 contains(Issuer,Dummy_Set_20).
 contains(Receiver,Dummy_Set_20)

step step_1 (Alice,Receiver,Issuer,Ki,Kai,Q,Dummy_A,Set_20,Dummy_Set_24,SID,A) :=
 state_alice(Alice,Receiver,Issuer,Ki,Kai,4,Q,Dummy_A,Set_20,Dummy_Set_24,SID).
 iknows(scrypt(Kai,A))
 =>
 state_alice(Alice,Receiver,Issuer,Ki,Kai,5,Q,A,Set_20,Dummy_Set_24,SID).
 secret(A,sec_k5,Dummy_Set_24).
 contains(Alice,Dummy_Set_24).
 contains(Issuer,Dummy_Set_24).
 contains(Receiver,Dummy_Set_24)

step step_2 (Receiver,Alice,Issuer,Ki,Kai,Dummy_Q,Dummy_X,A,Dummy_Set_41,Set_42,SID,Q,X) :=
 state_receiver(Receiver,Alice,Issuer,Ki,Kai,1,Dummy_Q,Dummy_X,A,Dummy_Set_41,Set_42,SID).
 iknows(crypt(Ki,pair(Q,Kai)))
=[exists X]=>
 state_receiver(Receiver,Alice,Issuer,Ki,Kai,3,Q,X,A,Dummy_Set_41,Set_42,SID).
 iknows(X).
 secret(Q,sec_k2,Dummy_Set_41).
 contains(Alice,Dummy_Set_41).
 contains(Issuer,Dummy_Set_41).
 contains(Receiver,Dummy_Set_41)

step step_3 (Receiver,Alice,Issuer,Ki,Kai,Q,X,Dummy_A,Set_41,Dummy_Set_42,SID) :=
 state_receiver(Receiver,Alice,Issuer,Ki,Kai,3,Q,X,Dummy_A,Set_41,Dummy_Set_42,SID).
 iknows(X)
 =>
 state_receiver(Receiver,Alice,Issuer,Ki,Kai,4,Q,X,Dummy_A,Set_41,Dummy_Set_42,SID).
 iknows(scrypt(Kai,A)).
 secret(A,sec_k4,Dummy_Set_42).
 contains(Alice,Dummy_Set_42).
 contains(Issuer,Dummy_Set_42).
 contains(Receiver,Dummy_Set_42)

step step_4 (Issuer,Alice,Receiver,Ki,Kai,Dummy_Q,Dummy_X,Dummy_A,Dummy_Set_56,SID,X,A) :=
 state_issuer(Issuer,Alice,Receiver,Ki,Kai,2,Dummy_Q,Dummy_X,Dummy_A,Dummy_Set_56,SID).
 iknows(X)
=[exists A]=>
 state_issuer(Issuer,Alice,Receiver,Ki,Kai,3,Dummy_Q,X,A,Dummy_Set_56,SID).
 iknows(Dummy_X).
 secret(A,sec_k3,Dummy_Set_56).
 contains(Alice,Dummy_Set_56).
 contains(Issuer,Dummy_Set_56).
 contains(Receiver,Dummy_Set_56)


section properties:

property secrecy_of_sec_k1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_k1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_k2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_k2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_k3 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_k3,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_k4 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_k4,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_k5 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_k5,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state secrecy_of_sec_k1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_k1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_k2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_k2,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_k3 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_k3,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_k4 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_k4,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_k5 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_k5,ASGoal) &
 not(contains(i,ASGoal))


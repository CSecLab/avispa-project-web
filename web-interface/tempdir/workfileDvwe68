role alice(
A,B : agent,
K : symmetric_key,
Hash : hash_func,
SND,RCV : channel(dy))
played_by A def=
local
State : nat,
Na,Nb, Nc : text,
M,H : message
init
State := 0
transition
1. State = 0    /\ RCV(start) =|>
   State':= 2   /\ Na' := new()
                /\ SND({Na'}_K)

2. State = 2    /\ RCV({Nb'}_K) =|>
  State':= 4    
                /\ M' := Hash(M)
                /\ SND({Nb'}_K.M')
                /\ witness(A,B,bob_alice_nb,Nb')

3. State = 6    /\ RCV({H'.M'}_K) =|>
   State':= 6   /\ Nc' := new()



end role


role bob(
A,B : agent,
K : symmetric_key,
Hash : hash_func,
SND,RCV : channel(dy))
played_by B def=
local
State : nat,
Nb,Na : text,
H,M    : message
init
State := 1
transition
1. State = 1   /\ RCV({Na'}_K) =|>
   State':= 3  /\ Nb' := new()
               /\ SND({Nb'}_K) 
              
                               
2. State = 3   /\ RCV({Nb}_K.M') =|>
  State':= 5   /\ request(B,A,bob_alice_nb,Nb)
               /\ H':= Hash(M')
               /\ SND({H'.M'}_K)



end role


role session(
A,B : agent,
K : symmetric_key,
Hash : hash_func)
def=
local SA, SB, RA, RB : channel (dy)
composition
alice(A,B,K,Hash,SA,RA)
/\ bob (A,B,K,Hash,SB,RB)
end role


role environment()
def=
const
bob_alice_nb,

k : protocol_id,

kab,kai,kib : symmetric_key,
a,b : agent,
h : hash_func
intruder_knowledge = {a,b,h,kai,kib}
composition
session(a,b,kab,h)
/\ session(a,i,kai,h)
/\ session(i,b,kib,h)
end role


goal
authentication_on bob_alice_nb



end goal

environment()




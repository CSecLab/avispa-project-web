role reader (
A, S, B				: agent,
SND_BA,SND_SA,RCV_BA,RCV_SA	: channel(dy)
)





played_by A

def=

	local State				: nat,
	R1					: text,
	A1,A2,A3,A4				: message

init State := 0

transition

	1. State = 0 /\ RCV_BA(start) =|>
		   State' := 2 /\ R1' := new() /\ SND_BA(R1')


	2. State = 2 /\ RCV_BA(A1'.A2'.A3') =|> 
		   State' := 4 /\ SND_SA(R1.A1'.A2'.A3') 	       
		       
	3. State = 4 /\ RCV_SA(A4') =|>
		   State' := 6 /\ SND_BA(A4')
		       

end role







role server (
A, S, B			: agent,
Hash			: hash_func,
K			: symmetric_key,
TIDOld			: text,
SND_AS,RCV_AS		: channel(dy)
)





played_by S

def=

	local State				: nat,
	R1,R2					: text,
	A1,A2,A3,A4,TIDNew,KNew			: message

init State := 1

transition


	1. State = 1 /\ RCV_AS(R1.A1'.A2'.A3') =|>
		   State' := 3 /\ R2' := xor(A1',Hash(xor(K,R1)))
		       /\ TIDOld' := xor(A2',xor(K,R2'))
		       /\ A3' := Hash(TIDOld'.R1.R2'.K)
		       
		       
	2. State = 3 /\ request(S,B,server_tag_a3,A3') =|>
		   State' := 5 /\ A4' := Hash(xor(TIDOld,xor(R1,xor(R2,K))))  
			       /\SND_AS(A4')
		        

	3. State = 5 /\ witness(S,B,tag_server_a4,A4') =|>
		   State' := 7  
		      /\ TIDNew' := xor(TIDOld,xor(R1,R2))
		      /\ TIDOld' := TIDNew'
		      /\ KNew' := Hash(K.R1.R2)
		      /\ K' := KNew'
		      /\ secret(TIDNew',TIDNew,{S,B})
		      /\ secret(KNew',KNew,{S,B})
end role






role tag(
	A, S, B				: agent,
	Hash				: hash_func,
	K				: symmetric_key,
	TIDOld				: text,
	SND_AB,RCV_AB				: channel(dy)
	)
	


played_by B

def=

	local State						: nat,
	R1,R2			 	     			: text,
	A1,A2,A3,A4,TIDNew,KNew					: message			      
	      
init State := 8
	
transition
	 
	1. State = 8 /\ RCV_AB(R1') =|>  
	   	State' := 10 /\ R2' := new()
		     /\ A1' := xor(Hash(xor(K,R1')),R2')
		     /\ A2' := xor(K,xor(R2',TIDOld))
		     /\ A3' := Hash(TIDOld.R1.R2'.K)
		  
		     /\ SND_AB(A1'.A2'.A3')
		     /\ witness(B,S,server_tag_a3,A3')
		       
	
	2. State = 10 /\ RCV_AB(A4') =|>
		State' := 12 /\ A4' := Hash(xor(TIDOld,xor(R1,xor(R2,K))))  
			 /\ request(B,S,tag_server_a4,A4')
		          /\ TIDNew' := xor(TIDOld,xor(R1,R2))
		      /\ TIDOld' := TIDNew'
		      /\ KNew' := Hash(K.R1.R2)
		      /\ K' := KNew'
		      /\ secret(TIDNew',TIDNew,{S,B})
		      /\ secret(KNew',KNew,{S,B})
end role



 
		


role session(

	A, S, B		: agent,
	K		: symmetric_key,
	Hash		: hash_func,
	TIDOld		: text
	)
	
def=

	local SSA,SBA,SAS,SAB,RAS,RSA,RBA,RAB : channel(dy)

	
composition
		reader(A,S,B,SBA,SSA,RBA,RSA)
		/\ tag(A,S,B,Hash,K,TIDOld,SAB,RAB)
		/\ server(A,S,B,Hash,K,TIDOld,SAS,RAS)


end role






role environment()


def=

	const	a,s,b,i						: agent,
		tag_server_a4,server_tag_a3,tidnew,knew		: protocol_id,
		k,ki						: symmetric_key,
		h						: hash_func,
		tidold,tidi					: text
		
	intruder_knowledge = {a,s,b,h,ki,tidi}
	
composition

		session(a,s,b,k,h,tidold)
		/\ session(a,s,b,k,h,tidold)
		/\ session(a,s,i,ki,h,tidi)
		/\ session(i,s,b,ki,h,tidi)
		
end role





goal
	secrecy_of tidnew,knew
	authentication_on server_tag_a3
	authentication_on tag_server_a4

end goal



environment()
  
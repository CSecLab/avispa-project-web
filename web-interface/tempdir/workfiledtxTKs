%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Password-based authenticated key agreement protocol using extended chaotic maps 
%% SK Hafizul Islam
%% BITS Pilani
%% 2014/10/10
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role initiator(
     UI, S, UJ  : agent,
     H, T       : hash_func,
     Li, Lj, Xs : symmetric_key,
     SND, RCV   : channel(dy))

played_by UI

def=
local State                             : nat,
      IDi, IDj, IDs, Ri                 : text, 
      Rui, Rj, Ruj, Zi, Zj              : text, 
      TIi, TIj, TIs, Req, Res           : text, 
      Lij, Lji, Zsi, Zsj, Vs, SK, X, TT : text

const ui_s_ri, ui_s_tii, uj_s_rj, uj_s_tij, 
      s_ui_tis, s_ui_vs, s_uj_tis, s_uj_vs, 
      ui_uj_ri, uj_ui_rj, subs1, subs2, 
      subs3, subs4, subs5               : protocol_id

init State := 0

transition

1.State = 0
/\RCV(start)=|>
State' := 1 
/\Ri'  := new()
/\TIi' := new()
/\X'   := new()
/\Rui' := T(Ri'.X')
/\Zi'  := {IDi.IDj.IDs.Rui'.TIi'}_Li
/\SND(IDi.Req)
/\SND(IDi.Zi')

2.State = 1
/\RCV(IDj.Res)
/\RCV(IDs.{IDs.IDi.IDj.Rui'.Ruj'.Vs'.TIs'}_Li)=|>
State'  := 2
/\X'    := new()
/\TT'   := T(Rui'.Ruj'.X')
/\SK'   := H(IDi.IDj.IDs.Rui'.Ruj'.TT'.Vs')
/\Lij'  := {IDj.IDi.Ruj'.Rui'}_SK'
/\SND(IDi.Lij')
/\RCV(IDj.{IDj.IDi.Ruj'.Rui'}_SK')
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role server(
     UI, S, UJ  : agent,
     H, T       : hash_func,
     Li, Lj, Xs : symmetric_key,
     SND, RCV   : channel(dy))

played_by S

def=
local State                             : nat,
      IDi, IDj, IDs, Ri                 : text, 
      Rui, Rj, Ruj, Zi, Zj              : text, 
      TIi, TIj, TIs, Req, Res           : text, 
      Lij, Lji, Zsi, Zsj, Vs, SK, X, TT : text

const ui_s_ri, ui_s_tii, uj_s_rj, uj_s_tij, 
      s_ui_tis, s_ui_vs, s_uj_tis, s_uj_vs, 
      ui_uj_ri, uj_ui_rj, subs1, subs2, 
      subs3, subs4, subs5               : protocol_id

init State := 0

transition

1. State = 0
/\RCV(IDi.{IDi.IDj.IDs.Rui'.TIi'}_Li)
/\RCV(IDj.{IDj.IDi.IDs.Ruj'.TIj'}_Lj)=|>
State' := 1
/\TIs' := new()
/\Vs'  := H(Rui'.Ruj'.Xs)
/\Zsi' := {IDs.IDi.IDj.Rui'.Ruj'.Vs'.TIs'}_Li
/\Zsj' := {IDs.IDj.IDi.Ruj'.Rui'.Vs'.TIs'}_Lj
/\SND(IDs.Zsi')
/\SND(IDs.Zsj')
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role responder(
     UI, S, UJ  : agent,
     H, T       : hash_func,
     Li, Lj, Xs : symmetric_key,
     SND, RCV   : channel(dy))

played_by UJ

def=
local State                             : nat,
      IDi, IDj, IDs, Ri                 : text, 
      Rui, Rj, Ruj, Zi, Zj              : text, 
      TIi, TIj, TIs, Req, Res           : text, 
      Lij, Lji, Zsi, Zsj, Vs, SK, X, TT : text

const ui_s_ri, ui_s_tii, uj_s_rj, uj_s_tij, 
      s_ui_tis, s_ui_vs, s_uj_tis, s_uj_vs, 
      ui_uj_ri, uj_ui_rj, subs1, subs2, 
      subs4, subs5, subs6               : protocol_id

init State := 0

transition

1. State = 0
/\RCV(IDi.Req)=|>
State'  := 1
/\Rj'   := new()
/\TIj'  := new()
/\X'    := new()
/\Ruj'  := T(Rj'.X')
/\Zj'   := {IDj.IDi.IDs.Ruj'.TIj'}_Lj
/\SND(IDj.Res)
/\SND(IDj.Zj')

2. State = 1
/\RCV(IDs.{IDs.IDj.IDi.Ruj'.Rui'.Vs'.TIs'}_Lj)=|>
State' := 2
/\X'   := new()
/\TT'  := T(Rui'.Ruj'.X')
/\SK'  := H(IDi.IDj.IDs.Rui'.Ruj'.TT'.Vs')
/\Lji' := {IDj.IDi.Ruj'.Rui'}_SK'
/\SND(IDj.Lji')
/\RCV(IDi.{IDi.IDj.Rui'.Ruj'}_SK')
       
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role session(
     UI, S, UJ  : agent,
     H, T       : hash_func,
     Li, Lj, Xs :  symmetric_key)

def=
local S1, S2, S3, R1, R2, R3 : channel(dy),
      
      IDi, IDj, IDs, Ri                 : text, 
      Rui, Rj, Ruj, Zi, Zj              : text, 
      TIi, TIj, TIs, Req, Res           : text, 
      Lij, Lji, Zsi, Zsj, Vs, SK, X, TT : text

const ui_s_ri, ui_s_tii, uj_s_rj, uj_s_tij, 
      s_ui_tis, s_ui_vs, s_uj_tis, s_uj_vs, 
      ui_uj_ri, uj_ui_rj, subs1, subs2, 
      subs3, subs4, subs5               : protocol_id



composition
  initiator(UI, S, UJ, H, T, Li, Lj, Xs, S1, R1)
/\responder(UI, S, UJ, H, T, Li, Lj, Xs, S2, R2)
/\server   (UI, S, UJ, H, T, Li, Lj, Xs, S3, R3)

end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role environment()

def=
const ui, s, uj                         : agent,
      h, t                              : hash_func,
      li, lj, xs                        : symmetric_key,
      idi, idj, ids, ri                 : text, 
      rui, rj, ruj, zi, zj              : text, 
      tii, tij, tis, req, res           : text, 
      lij, lji, zsi, zsj, vs, sk, x, tt : text,
      
      ui_s_ri, ui_s_tii, uj_s_rj, uj_s_tij, 
      s_ui_tis, s_ui_vs, s_uj_tis, s_uj_vs, 
      ui_uj_ri, uj_ui_rj, subs1, subs2, 
      subs3, subs4, subs5               : protocol_id

intruder_knowledge = {ui, s, uj, h, t}

composition
  session(ui, s, uj, h, t, li, lj, xs)
/\session(ui, i, uj, h, t, li, lj, xs)
/\session (i, s, uj, h, t, li, lj, xs)
/\session (ui, s, i, h, t, li, lj, xs)
end role

goal
    secrecy_of subs1
    secrecy_of subs2 
    secrecy_of subs3
    secrecy_of subs4
    secrecy_of subs5
    authentication_on ui_s_ri 
    authentication_on uj_s_rj
    authentication_on ui_uj_ri
    authentication_on uj_ui_rj
    authentication_on ui_s_tii
    authentication_on uj_s_tij
    authentication_on s_ui_tis
    authentication_on s_uj_tis
    authentication_on s_ui_vs
    authentication_on s_uj_vs
end goal

environment()
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




role client( A, S : agent , 
	SND,RCV : channel (dy) , 
	H : hash_func , P, Qs : public_key )  
played_by A def= 
local State : nat , 
	PW : symmetric_key, 
	Kas, Rs, Ra, Sigma, SKu, Ta, Ts,F, m : text, 
	Username , Realm : message 
	const sec_kas1 , sec_sku , 
	sec_ra , sec_pw : protocol_id 

init State :=0 
transition 
1. State =0/\RCV(start)=|> 
State' :=1 
/\ Ra':=new () 
/\ m':=new () 
/\ SND({Ra'.m'}_P.Username) 
/\ witness (A, S , na , Ra', m') 
/\ secret(Ra',m', sec_ra ,A) 
2. State =1 
/\ RCV( Realm.{Rs'}_ P.H({Ra.m.Rs'}_P. {Ra'.m'}_Qs.{Rs'}_P, {Ra'.m'}_P)) =|> 
State':=2 
/\ F':=H(Realm.{Ra.m.Rs}_P.H(Username.PW)) 
/\ SND(Realm.F) 
/\Kas':=H(Username.{Ra.m.Rs}_P.{Ra.m}_P.{Rs}_P) 
/\ secret(PW,sec_pw,A) 
/\ secret(Kas', sec_kas1, {A,S}) 
/\ request (A, S, ns, Ra, m) 
/\ request (A, S, ns, PW) 
end role 
role server ( 
S ,A : agent, 
SND,RCV : channel(dy), 
H : hash_func, 
P, Qs : public_key)  
played_by S 
def= 
local State : nat, 
PW : symmetric_key, 
Ra, Rs, Sigma, SKs, Ta, Ts, F, Kas, m : text, 
Username, Realm : message 
const sec_kas2, sec_rs, sec_pw1 : protocol_id 
init State :=0 
transition 
1. State =0/\RCV({Ra'.m'}_P.Username)=|> 
State':=1 
/\Rs':=new( ) 
/\ Sigma':=H({Rs'.Ra.m}_P.{{Ra.m}_P}_ 
inv (Qs ).{Rs'}_P,{Ra.m}_P) 
/\SND(Realm.{Rs'}_P.Sigma') 
/\ witness (S, A, ns, Rs' ) 
/\ secret (Rs', sec_rs, S) 
/\ secret (PW, sec_pw1, S) 
2. State=2 /\RCV(Realm.F')=|> 
State':=3 
/\F':=H(Realm.{Rs.Ra.m}_P.H(Username.PW)) 
/\Kas':=H(Username.{Rs.Ra.m}_P.{Ra.m}_P.{Rs}_P) 
/\ secret (Kas', sec_kas2, {A, S}) 
/\ request (S ,A, na , Rs) 
end role 
role session ( 
A, S : agent , 
H : hash_func , 
P, Qs : public_key ) 
def= 
local 
SA, RA, SS, RS : channel (dy) 
composition 
client (A, S, SA, RA, H, P, Qs) 
/\ server (S, A, SS, RS, H, P, Qs) 
end role 
role environment ( ) 
def= 
const na, ns : protocol_id , 
a, s, i : agent , 
h : hash_func ,  
p, qs, qi : public_key 
intruder_knowledge={a, s, h, p, qs, qi} 
composition 
session (a, s, h, p, qs) 
/\ session (a, i, h, p, qi) 
/\ session (i, s, h, qs, qi) 
end role 
goal 
secrecy_of 
sec_kas1, sec_kas2, sec_ra, sec_rs, sec_pw, 
sec_pw1 
authentication_on na 
authentication_on ns 
end goal 
environment ( )

role alice(
A,S,B                     :agent,
Kas                         :symmetric_key,
Hash                       :hash_func,
SND_BA,RCV_AB,RBA,RCV_SA   :channel(dy))

played_by A def=

local
 State                         :nat,
 Na,Ra,Rb                   :text,
 SKab                         : symmetric_key


 init State :=0 

 transition 

0. State  =  0 /\ RCV_SA(start) =|>
   State' :=  2  /\  Na' := new()
                     /\ SND_BA (Na'.A.Ra) 

2. State   = 2 /\ RCV_SA ({SKab'}_Kas.Hash(Kas.Na.B.{SKab'}_Kas)) =|>   
    State' := 4 /\ request (A,S,alice_server_na,Na) 
                    

4. State = 4  /\ RCV_AB({Rb}_SKab.Hash(SKab.Na.{Rb}_SKab)) =|>
   State' :=6 /\ request(A,B,alice_bob_na,Na)
                  /\ secret(SKab,skab,{A,S,B})
 
end role



role server (
     A,S,B                                     : agent,
     Kas,Kbs                                 : symmetric_key,
     Hash                                      : hash_func,
    SND_AS,SND_BS, RCV_BS     :channel (dy))

played_by S def=


local
    State                                           : nat,
    Na,Nb                                          : text,
    SKab                                           :symmetric_key

 init 
 State :=1 

transition

1. State =1  /\  RCV_BS(Na'.Nb'.A.B.Hash(Kbs.Na'.Nb'.A.B)) =|>
   State' :=3 /\ SKab' := new() 
                  /\ SND_AS ({SKab'}_Kas.Hash(Kas.Na'.B.{SKab'}_Kas))
                  /\ SND_BS({SKab'}_Kbs.Hash(Kbs.Nb'.A.{SKab'}_Kbs))
	    /\witness(S,A,alice_server_na,Na')
                  /\witness(S,B,bob_server_nb,Nb')
	    

end role




role bob(
A,S,B                                     :agent,
Kbs                                        :symmetric_key,
Hash                                      :hash_func,
SND_SB,SND_AB,RCV_AB, RCV_SB   :channel(dy))

played_by B def=

local
 State                                 :nat,
 Na,Nb,Ra,Rb                      :text,
 SKab                                  :symmetric_key

init
 State :=6

transition 

6. State  =6  /\  RCV_AB(Na'.A.Ra) =|>
    State' :=8 /\  Nb' :=new()
                   /\ SND_SB(Na'.Nb'.A.B.Hash(Kbs.Na'.Nb'.A.B)) 
                 

8. State  =8 /\  RCV_SB ({SKab'}_Kbs.Hash(Kbs.Nb.A.{SKab'}_Kbs))=|>
   State' :=10/\ SND_AB({Rb}_SKab'.Hash(SKab'.Na.{Rb}_SKab'))                  
                  /\ request (B,S,bob_server_nb,Nb)
                  /\ witness(B,A,alice_bob_na,Na)
                  /\ secret(SKab',skab,{A,S,B})

                 
         
end role




role session(
 A,S,B                                            : agent,
 Kas,Kbs                                        : symmetric_key,
 Hash                                             :hash_func)

def=

local 
    SBA, SBS,
    SAS, SSB,
    SAB,RBA,
    RSA, RSB,
    RAB, RBS : channel(dy)

composition

              alice (A,S,B,Kas,Hash,SBA,RAB,RBA,RSA)
           /\ server(A,S,B,Kas,Kbs,Hash,SAS,SBS,RBS)
           /\  bob (A,S,B,Kbs,Hash,SSB,SAB,RAB,RSB)

end role

role environment()
      def=

 const a,s,b                                          : agent,
 kas,kbs,kis                                          : symmetric_key,
 alice_server_na,
 bob_server_nb,
 alice_bob_na,skab                                : protocol_id,
 h                                                         : hash_func

  intruder_knowledge={a,s,b,kis,h}

   composition
      
     session(a,s,b,kas,kbs,h)
  /\session(a,s,i,kas,kis,h)
  /\session(i,s,b,kis,kbs,h)

end role

goal
   secrecy_of skab
   authentication_on alice_server_na
   authentication_on bob_server_nb
   authentication_on alice_bob_na
end goal


environment()


%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileImAjJl

section signature:

state_server: agent * agent * symmetric_key * text * text * text * hash_func * nat * message * message * message * message * message * message * text * text * text * text * text * text * text * symmetric_key * set(agent) * nat -> fact
state_user: agent * agent * symmetric_key * text * text * text * hash_func * nat * message * message * message * message * message * message * text * text * text * text * set(agent) * nat -> fact


section types:

k, u_s_vb, s_u_ra, ra: protocol_id
h, H: hash_func
Dummy_State, 3, SID, SID2, SID1, State, 4, 2, 1, 0, 9, 7: nat
ui, ku, ks, K, Ui, Dummy_K, dummy_sk: symmetric_key
set_92, set_122, set_120, set_118, set_117, set_108: set
Dummy_M1, Dummy_Va, dummy_msg, MGoal, Va, Vb, MAC, Beta, Y, M1, start, Beta1, Msg, Dummy_MAC, Dummy_Beta1, Dummy_Beta, Dummy_Vb: message
ASGoal, Set_64, Set_30, Dummy_Set_64, Dummy_Set_30: set(agent)
A2Goal, A1Goal, u, s, U, S, i: agent
Dummy_A, dummy_nonce, g, idu, ids, A, Ra, X, Z, T, B, Theta, IDu, IDs, G, K1, Dummy_Theta, Dummy_B, Dummy_K1, Dummy_T, Dummy_Ra: text


section inits:

initial_state init1 := 
 iknows(start).
 iknows(u).
 iknows(s).
 iknows(ku).
 iknows(ks).
 iknows(i).
 state_user(u,s,ui,idu,ids,g,h,0,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_92,3).
 state_server(s,u,ui,idu,ids,g,h,1,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,set_108,4).
 state_server(s,i,ks,idu,ids,g,h,1,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,set_118,7).
 state_user(u,i,ku,idu,ids,g,h,0,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_120,9)


section rules:

step step_0 (U,S,Ui,IDu,IDs,G,H,Dummy_Va,Vb,Beta,Beta1,Msg,Dummy_M1,Dummy_A,Dummy_Ra,K1,Dummy_T,Dummy_Set_30,SID,A,T) :=
 state_user(U,S,Ui,IDu,IDs,G,H,0,Dummy_Va,Vb,Beta,Beta1,Msg,Dummy_M1,Dummy_A,Dummy_Ra,K1,Dummy_T,Dummy_Set_30,SID).
 iknows(start)
=[exists T,A]=>
 state_user(U,S,Ui,IDu,IDs,G,H,2,exp(G,Ui),Vb,Beta,Beta1,Msg,pair(exp(G,A),IDu),A,exp(G,A),K1,T,Dummy_Set_30,SID).
 iknows(pair(IDu,xor(exp(G,Ui),pair(exp(G,A),apply(H,pair(pair(exp(G,A),IDu),T)))))).
 secret(exp(G,A),ra,Dummy_Set_30).
 witness(U,S,s_u_ra,exp(G,A)).
 contains(U,Dummy_Set_30).
 contains(S,Dummy_Set_30)

step step_1 (U,S,Ui,IDu,IDs,G,H,Va,Dummy_Vb,Dummy_Beta,Dummy_Beta1,Msg,M1,A,Ra,Dummy_K1,T,Set_30,SID,Vb,Beta) :=
 state_user(U,S,Ui,IDu,IDs,G,H,2,Va,Dummy_Vb,Dummy_Beta,Dummy_Beta1,Msg,M1,A,Ra,Dummy_K1,T,Set_30,SID).
 iknows(scrypt(Ra,pair(Vb,Beta)))
 =>
 state_user(U,S,Ui,IDu,IDs,G,H,4,Va,Vb,Beta,apply(H,pair(exp(Vb,A),pair(IDu,IDs))),Msg,M1,A,Ra,exp(Vb,A),T,Set_30,SID).
 request(U,S,u_s_vb,Vb,SID)

step step_2 (S,U,Ui,IDu,IDs,G,H,Dummy_Va,Dummy_Vb,Dummy_MAC,Dummy_Beta,Y,Dummy_M1,A,Dummy_Ra,X,Z,Dummy_T,Dummy_B,Dummy_Theta,Dummy_K,Dummy_Set_64,SID,M1,Ra,T,B) :=
 state_server(S,U,Ui,IDu,IDs,G,H,1,Dummy_Va,Dummy_Vb,Dummy_MAC,Dummy_Beta,Y,Dummy_M1,A,Dummy_Ra,X,Z,Dummy_T,Dummy_B,Dummy_Theta,Dummy_K,Dummy_Set_64,SID).
 iknows(pair(IDu,xor(Va,pair(Ra,apply(H,pair(M1,T))))))
=[exists B]=>
 state_server(S,U,Ui,IDu,IDs,G,H,3,exp(G,Ui),exp(G,B),pair(Ra,apply(H,pair(Ra,pair(IDu,T)))),apply(H,pair(exp(Ra,B),pair(IDu,IDs))),Y,M1,A,Ra,X,Z,T,B,scrypt(Ra,pair(exp(G,B),apply(H,pair(exp(Ra,B),pair(IDu,IDs))))),exp(Ra,B),Dummy_Set_64,SID).
 iknows(scrypt(Ra,pair(exp(G,B),apply(H,pair(exp(Ra,B),pair(IDu,IDs)))))).
 secret(exp(Ra,B),k,Dummy_Set_64).
 witness(S,U,u_s_vb,exp(G,B)).
 request(S,U,s_u_ra,Ra,SID).
 contains(U,Dummy_Set_64).
 contains(S,Dummy_Set_64)


section properties:

property secrecy_of_ra (MGoal,ASGoal) :=
 [] ((secret(MGoal,ra,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_k (MGoal,ASGoal) :=
 [] ((secret(MGoal,k,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_u_s_vb (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,u_s_vb,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,u_s_vb,MGoal))
     /\ ((request(A1Goal,A2Goal,u_s_vb,MGoal,SID1)
           /\ request(A1Goal,A2Goal,u_s_vb,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_s_u_ra (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,s_u_ra,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,s_u_ra,MGoal))
     /\ ((request(A1Goal,A2Goal,s_u_ra,MGoal,SID1)
           /\ request(A1Goal,A2Goal,s_u_ra,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_ra (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,ra,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_k (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,k,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_u_s_vb (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,u_s_vb,MGoal,SID) &
 not(witness(A2Goal,A1Goal,u_s_vb,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_u_s_vb (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,u_s_vb,MGoal,SID1).
 request(A1Goal,A2Goal,u_s_vb,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_s_u_ra (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,s_u_ra,MGoal,SID) &
 not(witness(A2Goal,A1Goal,s_u_ra,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_s_u_ra (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,s_u_ra,MGoal,SID1).
 request(A1Goal,A2Goal,s_u_ra,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileCPEkpN

section signature:

state_bob: agent * agent * public_key * public_key * symmetric_key * symmetric_key * text * text * message * message * message * hash_func * hash_func * hash_func * hash_func * nat * nat -> fact
state_alice: agent * agent * public_key * public_key * symmetric_key * symmetric_key * text * text * message * message * message * hash_func * hash_func * hash_func * hash_func * nat * nat -> fact


section types:

ASGoal: set(agent)
aliceid, bobid, tid: protocol_id
H, Conc, Union, Pred, h, conc, union, pred: hash_func
Dummy_Sigma, Dummy_U, U, Sigma, M, MGoal, u, sigma, m, start: message
Dummy_R, R, P, r, p: text
Xa, Xb, xa, xb: symmetric_key
Pa, Pb, pa, pb: public_key
A2Goal, A1Goal, B, A, a, b, i: agent
2, SID, State, Dummy_State, 3, SID2, SID1, 1, 0, 7, 6, 4: nat


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(pa).
 iknows(pb).
 iknows(p).
 iknows(i).
 state_alice(a,b,pa,pb,xa,xb,r,p,u,sigma,m,h,conc,union,pred,0,3).
 state_bob(a,b,pa,pb,xa,xb,r,p,u,sigma,m,h,conc,union,pred,1,4).
 state_alice(a,b,pa,pb,xa,xb,r,p,u,sigma,m,h,conc,union,pred,0,6).
 state_bob(a,b,pa,pb,xa,xb,r,p,u,sigma,m,h,conc,union,pred,1,7)


section rules:

step step_0 (A,B,Pa,Pb,Xa,Xb,Dummy_R,P,Dummy_U,Dummy_Sigma,M,H,Conc,Union,Pred,SID,R) :=
 state_alice(A,B,Pa,Pb,Xa,Xb,Dummy_R,P,Dummy_U,Dummy_Sigma,M,H,Conc,Union,Pred,0,SID).
 iknows(start)
=[exists R]=>
 state_alice(A,B,Pa,Pb,Xa,Xb,R,P,apply(Pred,pair(Dummy_R,Pa)),apply(Pred,apply(Pred,pair(Xa,pair(apply(Union,pair(Dummy_R,apply(H,apply(Conc,pair(M,Dummy_U))))),Pb)))),M,H,Conc,Union,Pred,1,SID).
 secret(Dummy_R,tid,A).
 iknows(pair(M,pair(Dummy_U,Dummy_Sigma)))

step step_1 (B,A,Pa,Pb,Xa,Xb,R,P,U,Dummy_Sigma,M,H,Conc,Union,Pred,SID) :=
 state_bob(B,A,Pa,Pb,Xa,Xb,R,P,U,Dummy_Sigma,M,H,Conc,Union,Pred,1,SID).
 iknows(pair(M,pair(U,Dummy_Sigma)))
 =>
 state_bob(B,A,Pa,Pb,Xa,Xb,R,P,U,apply(Pred,pair(Xb,apply(Union,pair(Union,apply(Pred,apply(H,pair(apply(Conc,pair(M,U)),Pa))))))),M,H,Conc,Union,Pred,2,SID).
 secret(R,tid,A)


section properties:

property secrecy_of_tid (MGoal,ASGoal) :=
 [] ((secret(MGoal,tid,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_aliceid (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,aliceid,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,aliceid,MGoal))
     /\ ((request(A1Goal,A2Goal,aliceid,MGoal,SID1)
           /\ request(A1Goal,A2Goal,aliceid,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_bobid (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,bobid,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,bobid,MGoal))
     /\ ((request(A1Goal,A2Goal,bobid,MGoal,SID1)
           /\ request(A1Goal,A2Goal,bobid,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_tid (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,tid,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_aliceid (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,aliceid,MGoal,SID) &
 not(witness(A2Goal,A1Goal,aliceid,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_aliceid (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,aliceid,MGoal,SID1).
 request(A1Goal,A2Goal,aliceid,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_bobid (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,bobid,MGoal,SID) &
 not(witness(A2Goal,A1Goal,bobid,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_bobid (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,bobid,MGoal,SID1).
 request(A1Goal,A2Goal,bobid,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


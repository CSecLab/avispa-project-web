%% HLPSL Specification program for the four way Handshake
role authenticator(A,S  : agent,
Hash     : hash_func, 
Succ    :  hash_func,
SND,RCV        : channel(dy)
)
played_by A def=

local

 State       : nat,
 Na,Ns       : text,
 Ptk : message,
Gtk,MIC,Pmk : message,
AA,SPA,SIE,SN,Msg1, Msg2, Msg4,AIE,Msg3  : message

init
State := 0


       transition

1. State =  0 /\ RCV(start) =|>
   State':= 2 /\ Na' := new()
              /\ SND(Na'.SN.AA.Msg1.Pmk) 

2. State =  2 /\ RCV(Ns'.SPA.SIE.Msg3.MIC') =|>
   State':= 4 /\ Gtk':= new()
                   /\  Ptk':= Succ(Pmk)
                  /\ MIC':= Hash(Na'.Ns'.Gtk'.AA.AIE.Msg3)
              /\ SND(Gtk'.AA.AIE.Msg3.MIC')

3. State =  4 /\ RCV(SPA.Msg4.MIC') =|>
   State':= 6           
                   %% /\ request (A,S,authenticator_supplicant_ns, Ns')
                    /\ secret(Gtk', gtk, {A,S})     
           
end role

role supplicant( A,S : agent,

Hash, Succ     : hash_func,
SND,RCV        : channel(dy)
)

played_by S   def=

local
    State    : nat,
    Ns,Na    : text,
    Ptk  : message,
    MIC,Pmk,Gtk : message,
    AA,AIE,SPA,SN,Msg2,Msg1,Msg3,SIE,Msg4  : message
  
   const   authenticator_supplicant_ns : protocol_id

init
   State := 1

transition

     1. State  = 1 /\ RCV(Na'.SN.AA.Msg1.Pmk) =|>
        State':= 3 /\ Ns' := new()
                   /\ Ptk':= Succ(Pmk)
                   /\ MIC':= Hash(Na'.Ns'.SPA.SIE.Msg2)
                   /\ SND(Ns'.SPA.SIE.Msg3.MIC')
                 %%  /\ witness(S,A,authenticator_supplicant_ns, Ns')                      
                           
    2. State  = 3 /\ RCV(Gtk'.AA.AIE.Msg3.MIC')  =|>
       State':= 5 /\ MIC' := Hash(Na'.Ns'.Gtk'.SPA.SIE.Msg4)
                        /\ SND(SPA.Msg4.MIC')

end role

             role session(
    A,S : agent,
   Hash, Succ: hash_func
     )

def=
   local SA,RA,SS, RS  : channel (dy)

composition
   authenticator(A,S,Hash, Succ,SA,RA) /\ supplicant(A,S, Hash,Succ,SS,RS)

           end role
           role environment()
  def=
       const
       authenticator_supplicant_ns : protocol_id,
       gtk : protocol_id,
       a,s          :  agent,
       succ, h : hash_func

      intruder_knowledge = {a,s}    
  
  composition
        session(a,s,succ,h) /\ session(a,i,succ,h) /\ session(i,s,succ,h)
end role
goal
  secrecy_of gtk
authentication_on authenticator_supplicant_ns 
         end goal
    environment()


role mme(MME, MTCD : agent, GK:symmetric_key,
Sqn, Amf, Rhss, Rg :text,
F2,F3,F4: hash_func,
SND, SND: channel (dy))

played_by MME def=
local
 Rmme :text,
 State : nat
const
mme_mtcd, mtcd_mme :protocol_id
init State :=0
transition
1. State =0 /\ RCV(MTCD)=|>
State' :=2
/\Rmme' := new()
/\SND(Rhss.Rg.Rmme' .{F2(Sqn.Rmme')}_F4(GK.Rg.Rhss.Amf) .Amf)
/\witness(MME,MTCD,mtcd_mme,Rmme')
2. State =2
/\ RCV({F3(Sqn.Rg)}_F4(GK.Rg.Rhss.Amf))
=|>
State' :=4/\request(MME,MTCD,mme_mtcd,Rmme')
end role

role mtcd(MME, MTC : agent, GK:symmetric_key,
Sqn, Amf, Rhss, Rg :text,
F2,F3,F4: hash_func,
SND, SND: channel (dy))

played_by MTCD def=
local
 Rmme :text,
 State : nat
const
mme_mtcd, mtcd_mme :protocol_id
init State :=0
transition
1. State =1 /\ RCV(start)=|>
State' :=2  /\ SND(MTCD)

2. State =2
/\ RCV(Rhss.Rg.Rmme'.{F2(Sqn.Rmme')}_F4(GK.Rg.Rhss.Amf).Amf)
=|>
State' :=3
/\ SND({F3(Sqn.Rg)}_F4(GK.Rg.Rhss.Amff))
/\request(MTCD,MME,mtcd_mme,Rmme')
/\witness(MTCD,MME,mtcd_mme,Rmme')
end role

role session (
    MTCD,MME           : agent,
    F2,F3,F4           : hash_func,
    GK                 : symmetric_key)
def=

  local Smme,Rmme,Smtcd,Rmtcd : channel (dy) 
    
  composition
    mme(MME,MTCD,F2,F3,F4,GK,Smme,Rmme)
 /\ mtcd(MTCD,MME,F2,F3,F4,GK,Smtcd,Rmtcd)

end role

role environment()
def=

  const 
    mme,mtcd                   : agent,
    f2,f3,f4                   : hash_func,
    gk                         : symmetric_key,
    gk_is,gk_ip                : symmetric_key,
    mme_mtcd, mtcd_mme          :protocol_id 


  intruder_knowledge = {mme,mtcd,f2,f3,f4}

  composition

     session(mtcd,mme,f2,f3,f4,gk)
  /\ session(mtcd,mme,f2,f3,f4,gk)
end role

goal
authentication_on mme_mtcd
authentication_on mtcd_mme
end goal

environment()


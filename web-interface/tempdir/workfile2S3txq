%% PROTOCOL: Biometric-Based User Authentication in WSN
%% PURPOSE: Authentication between user and CH for accessing real-time data inside WSN
%% USER_BS: Ui -> BS: 
%% BS_Sj : BS -> Sj: < ID_Sj || ID_i || M_7  >
%% Sj_BS : Sj -> BS: < ID_i || ID_Sj || E_h(ID_i || ID_Sj || RN_Ui || M_1) (RN_Ui) [acknowledgement]
%% BS_Ui: BS -> Ui : < ID_i || ID_Sj || E_h(ID_i || ID_Sj || RN_Ui || M_1) (RN_Ui) [acknowledgement]
%%HLPSL:

role alice (U, BS, Sj : agent, MKsj : symmetric_key,                                                        
H : hash_func, F : hash_func, IDi, PWi, Bi, S : text,
Snd, Rcv: channel(dy))
played_by U
def=     
  local State  : nat,
     IDsj, RNui :  text
     const  alice_server, server_bob, 
     bob_server, alice_bob, subs1, subs2 : protocol_id
   init  State := 0
  transition
   1. State   = 0 /\ Rcv(start) =|>
      State' := 1  /\ RNui' := new()
              /\ secret({PWi,Bi},subs1,U)
              /\ secret(S, subs2, BS)
              /\ Snd(U.BS.IDi.IDsj.{xor(H(IDi.PWi.F(Bi)),RNui')
                     .H(xor(H(IDi.PWi.F(Bi)),H(S)).RNui').RNui'}_H(MKsj
                     .IDsj.IDi.S))
              /\ witness (U,Sj,alice_bob, RNui')
              /\ witness (U,BS,alice_server, RNui')
   
   2. State = 1 /\ Rcv(BS.U.IDi.IDsj.{RNui'}_H(IDi.IDsj.RNui'
                       .xor(H(IDi.PWi.F(Bi)),RNui'))) =|> 
      State' := 3 	  
end role


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role server (BS,Sj, U : agent, MKsj : symmetric_key,                                                   
H : hash_func, F : hash_func, PWi, Bi, S : text,
Snd, Rcv: channel(dy))
played_by BS
def=        
  local State  : nat,
       IDi, IDsj, RNui, RNbs  : text
       const  alice_server, server_bob, bob_server, 
       subs1, subs2 : protocol_id 
  init  State := 0
  transition
   1. State   = 0 /\ Rcv(U.BS.IDi.IDsj.{xor(H(IDi.PWi.F(Bi)),RNui')
   .H(xor(H(IDi.PWi.F(Bi)),H(S)).RNui').RNui'}_H(MKsj.IDsj.IDi.S))=|>  
      State' := 1 /\ RNbs' := new( )
                  /\ Snd(BS.Sj.IDsj.IDi.{xor(H(IDi.PWi.F(Bi)),RNui')
                         .H(xor(H(IDi.PWi.F(Bi)),RNui').IDsj.RNui'
                         .RNbs').RNui'.RNbs'}_MKsj)
                  /\ witness (BS, Sj, server_bob, RNbs')
   2. State   = 1 /\ Rcv(BS.U.IDi.IDsj.{RNui'}_H(IDi.IDsj.RNui'
     .xor(H(IDi.PWi.F(Bi)),RNui'))) =|>  %% acknowlegement from Sj.
      State' := 3 /\ Snd(BS.U.IDi.IDsj.{RNui'}_H(IDi.IDsj.RNui'
                        .xor(H(IDi.PWi.F(Bi)),RNui')))
                  /\ secret({PWi,Bi},subs1,U)
                  /\ secret(S, subs2, BS)
                  /\ request(U, BS, alice_server, RNui) 		  
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role bob (Sj,BS, U : agent, MKsj : symmetric_key, H : hash_func,
F : hash_func, IDsj, PWi, Bi, S : text, Snd, Rcv: channel(dy))
played_by Sj
def=    
  local State  : nat,
       IDi, RNui, RNbs  : text
       const  alice_server, server_bob, bob_server, subs1, 
              subs2 : protocol_id
    init  State := 0
  transition
   1. State   = 0 /\ Rcv(BS.Sj.IDsj.IDi.{xor(H(IDi.PWi.F(Bi)),RNui')
                         .H(xor(H(IDi.PWi.F(Bi)),RNui').IDsj.RNui'
                         .RNbs').RNui'.RNbs'}_MKsj)  =|>  
      State' := 1 /\ Snd(BS.U.IDi.IDsj.{RNui'}_H(IDi.IDsj.RNui'.
  xor(H(IDi.PWi.F(Bi)),RNui'))) %% Send an acknowledgement to the BS
                  /\ secret({PWi,Bi},subs1,U)
                  /\ secret(S, subs2, BS) 
                 /\ request(BS, Sj, server_bob, RNbs) 
                 /\ request(U, Sj, alice_bob, RNui) 		  
end role

%%%%%%%%%%%%%%%%%%%%%%%%%
role session(U,BS,Sj: agent,
	     MKsj : symmetric_key,  
             % H is hash function                                                         
             H     : hash_func,
             F     : hash_func,
             PWi, Bi, S : text,
             IDi, IDsj, RNui, RNbs :text)
def=
  local  US, UR, SS, SR, VS, VR: channel (dy)
  composition
           alice(U, BS, Sj, MKsj, H, F, IDi, PWi, Bi, S, US, UR)
        /\ server(BS, Sj, U, MKsj, H, F, PWi, Bi, S, SS, SR)
        /\  bob(Sj, BS, U, MKsj, H, F, IDsj, PWi, Bi, S, VS, VR)
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%
role environment()
def=
  const u, bs, sj  : agent,
        mksj : symmetric_key,
        h    : hash_func, f : hash_func,
        pwi, bi, s, idi, idsj, rnui, rnbs : text,
       alice_server, server_bob,  bob_server, 
       alice_bob, subs1, subs2 : protocol_id
  intruder_knowledge = {u, bs, sj, h, f, idi, idsj}
  composition
	session(u, bs, sj, mksj, h, f, pwi, bi, s, 
                idi, idsj, rnui, rnbs) /\
	session(u, bs, sj, mksj, h, f, pwi, bi, s,
                idi, idsj, rnui, rnbs) /\
        session(u, bs, sj, mksj, h, f, pwi, bi, s,
                idi, idsj, rnui, rnbs) 
end role
goal
  secrecy_of subs1
  secrecy_of subs2
  authentication_on alice_bob
  authentication_on alice_server
  authentication_on server_bob
  authentication_on bob_server
end goal
environment()
        




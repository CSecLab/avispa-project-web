%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileWDfAfI

section signature:

state_bob: agent * agent * public_key * public_key * nat * text * text * text * text * message * text * text * set(agent) * nat -> fact
state_alice: agent * agent * public_key * public_key * nat * text * text * text * text * message * message * text * text * text * set(agent) * nat -> fact


section types:

Set_46, Dummy_Set_46, Dummy_Set_26, Set_26: set(agent)
nb, na: protocol_id
set_88, set_86, set_82, set_73: set
STREP, dummy_msg, start, MGoal, STREQ: message
State, 6, 4, SID, 2, Dummy_State, 3, 1, 0, SID2, SID1: nat
Kb, Ka, ka, kb, ki: public_key
SN, AMN, Ta, Tb, Na, Nb, Dummy_Nb, Dummy_Na, dummy_nonce, MN, ta, tb, sn, mn, amn: text
B, A, A2Goal, A1Goal, a, b, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(ka).
 iknows(kb).
 iknows(ki).
 iknows(inv(ki)).
 iknows(ta).
 iknows(tb).
 iknows(mn).
 iknows(amn).
 iknows(sn).
 iknows(i).
 state_alice(a,b,ka,kb,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,dummy_nonce,set_73,3).
 state_bob(b,a,kb,ka,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_nonce,dummy_nonce,set_82,4).
 state_alice(a,i,ka,ki,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_nonce,dummy_nonce,dummy_nonce,set_86,6)


section rules:

step step_0 (A,B,Ka,Kb,Dummy_Na,Nb,Ta,Tb,STREQ,STREP,SN,MN,AMN,Dummy_Set_26,SID,Na) :=
 state_alice(A,B,Ka,Kb,0,Dummy_Na,Nb,Ta,Tb,STREQ,STREP,SN,MN,AMN,Dummy_Set_26,SID).
 iknows(start)
=[exists Na]=>
 state_alice(A,B,Ka,Kb,1,Na,Nb,Ta,Tb,STREQ,STREP,SN,MN,AMN,Dummy_Set_26,SID).
 iknows(pair(STREQ,pair(crypt(inv(Ka),Na),crypt(Kb,pair(SN,pair(Ta,pair(MN,A))))))).
 contains(A,Dummy_Set_26).
 contains(B,Dummy_Set_26)

step step_1 (A,B,Ka,Kb,Na,Dummy_Nb,Ta,Tb,STREQ,STREP,SN,MN,AMN,Set_26,SID,Nb) :=
 state_alice(A,B,Ka,Kb,1,Na,Dummy_Nb,Ta,Tb,STREQ,STREP,SN,MN,AMN,Set_26,SID).
 iknows(pair(STREP,pair(crypt(inv(Kb),Nb),crypt(Ka,pair(SN,pair(Tb,pair(AMN,B)))))))
 =>
 state_alice(A,B,Ka,Kb,2,Na,Nb,Ta,Tb,STREQ,STREP,SN,MN,AMN,Set_26,SID).
 iknows(crypt(inv(Kb),Nb))

step step_2 (B,A,Kb,Ka,Dummy_Na,Dummy_Nb,Ta,Tb,STREP,SN,AMN,Dummy_Set_46,SID,Na,Nb) :=
 state_bob(B,A,Kb,Ka,0,Dummy_Na,Dummy_Nb,Ta,Tb,STREP,SN,AMN,Dummy_Set_46,SID).
 iknows(crypt(Kb,pair(Na,A)))
=[exists Nb]=>
 state_bob(B,A,Kb,Ka,1,Na,Nb,Ta,Tb,STREP,SN,AMN,Dummy_Set_46,SID).
 iknows(pair(STREP,pair(crypt(inv(Kb),Nb),crypt(Ka,pair(SN,pair(Tb,pair(AMN,B))))))).
 contains(A,Dummy_Set_46).
 contains(B,Dummy_Set_46)

step step_3 (B,A,Kb,Ka,Na,Nb,Ta,Tb,STREP,SN,AMN,Set_46,SID) :=
 state_bob(B,A,Kb,Ka,1,Na,Nb,Ta,Tb,STREP,SN,AMN,Set_46,SID).
 iknows(crypt(inv(Kb),Nb))
 =>
 state_bob(B,A,Kb,Ka,2,Na,Nb,Ta,Tb,STREP,SN,AMN,Set_46,SID)


section properties:

property authentication_on_mn (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,mn,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,mn,MGoal))
     /\ ((request(A1Goal,A2Goal,mn,MGoal,SID1)
           /\ request(A1Goal,A2Goal,mn,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state authentication_on_mn (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,mn,MGoal,SID) &
 not(witness(A2Goal,A1Goal,mn,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_mn (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,mn,MGoal,SID1).
 request(A1Goal,A2Goal,mn,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


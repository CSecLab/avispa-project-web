role role_A(A:agent,B:agent,KPa:symmetric_key,KPb:symmetric_key,SND,RCV:channel(dy))
played_by A
def=
	local
		State:nat,Nb:text,Na:text
	init
		State := 0
	transition
		1. State=0 /\ RCV(start) =|> State':=1 /\ Na':=new() /\ witness(A,B,auth_1,Na') /\ SND({xor(Na',KPa)}_KPb.{xor(Na',A)}_KPa)
		2. State=1 /\ RCV({xor(xor(Na,A),Nb')}_KPa.{xor(Nb',KPb)}_KPa) =|> State':=2
end role

role role_B(A:agent,B:agent,KPa:symmetric_key,KPb:symmetric_key,SND,RCV:channel(dy))
played_by B
def=
	local
		State:nat,Nb:text,Na:text
	init
		State := 0
	transition
		1. State=0 /\ RCV({xor(Na',KPa)}_KPb.{xor(Na',A)}_KPa) =|> State':=1 /\ request(B,A,auth_1,Na') /\ Nb':=new() /\ witness(B,A,auth_2,Nb') /\ SND({xor(xor(Na',A),Nb')}_KPa.{xor(Nb',KPb)}_KPa)
end role

role session1(A:agent,B:agent,KPa:symmetric_key,KPb:symmetric_key)
def=
	local
		SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_B(A,B,KPa,KPb,SND2,RCV2) /\ role_A(A,B,KPa,KPb,SND1,RCV1)
end role

role environment()
def=
	const
		ka:symmetric_key,alice:agent,bob:agent,kb:symmetric_key,auth_1:protocol_id,auth_2:protocol_id
	intruder_knowledge = {}
	composition
		session1(alice,bob,ka,kb)
end role

goal
	authentication_on auth_1
	authentication_on auth_2
end goal

environment()

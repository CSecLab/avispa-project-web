role role_A(A:agent,B:agent,KA:public_key,KBh:public_key,H:hash_func,SND,RCV:channel(dy))
played_by A
def=
	local
		State:nat,K:text,NB:text,NA:text,KBs:public_key
	init
		State := 0
	transition
		1. State=0 / RCV(start) =|> State':=1 / NA':=new() / SND(NA')
		2. State=1 / RCV(NB'.KBh.KBs') =|> State':=2 / K':=new() / SND({{H(NA.NB'.KBh.KBs').K'}_KBs'}_KBh.{A.KA.{H(A.NA.NB')}_inv(KA)}_K')
end role

role role_B(A:agent,B:agent,KBh:public_key,KA:public_key,H:hash_func,SND,RCV:channel(dy))
played_by B
def=
	local
		State:nat,K:text,NB:text,NA:text,KBs:public_key
	init
		State := 0
	transition
		1. State=0 / RCV(NA') =|> State':=1 / KBs':=new() / NB':=new() / SND(NB'.KBh.KBs')
		3. State=1 / RCV({{H(NA.NB.KBh.KBs).K'}_KBs}_KBh.{A.KA.{H(A.NA.NB)}_inv(KA)}_K') =|> State':=2
end role

role session1(A:agent,B:agent,KBh:public_key,KA:public_key,H:hash_func)
def=
	local
		SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_B(A,B,KBh,KA,H,SND2,RCV2) / role_A(A,B,KA,KBh,H,SND1,RCV1)
end role

role session2(A:agent,B:agent,KBh:public_key,KA:public_key,H:hash_func)
def=
	local
		SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_B(A,B,KBh,KA,H,SND2,RCV2) / role_A(A,B,KA,KBh,H,SND1,RCV1)
end role

role environment()
def=
	const
		ka:public_key,a:agent,hash_0:function,b:agent,kbh:public_key,ki:public_key,h:function,auth_1:protocol_id
	intruder_knowledge = {a,b,i,ka,kbh,h}
	composition
		session2(a,i,ki,ka,h) / session1(a,b,kbh,ka,h)
end role

goal
	authentication_on auth_1
end goal

environment()
 
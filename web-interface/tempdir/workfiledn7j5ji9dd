role alice (Ui, S, SNk : agent,
            H  : hash_func,
		    Snd, Rcv : channel(dy))

% Player by the initiator: the user Ui
played_by Ui
def=

local State  : nat,

		UIDi,Pi,RPWi,Ni,N1,Yi, MK, N2, N3, SIDj: text
       
		const alice_bob_Ni, bob_alice_Yi, alice_bob_N1, bob_sensor_N2, sensor_bob_N3, subs1, subs2, subs3, subs4, subs5 : protocol_id

init  State := 0

transition

% User registration phase

 1. State = 0   /\ Rcv(start)=|>
    State' := 1 /\ Ni' := new()

	% Send the registration request message to server S
				/\ secret({Ni',Pi}, subs1, Ui)
				/\ secret({UIDi}, subs2, {Ui,S})
				/\ Snd({UIDi, H(Ni'.Pi)})
				/\ witness(Ui, S, alice_bob_Ni, Ni')
% Receive the registration acknowledgment message(Gi,Hi,Ki,H)
 
 2. State = 1 /\ Rcv(xor(H(UIDi.H(Ni'.Pi)),Yi'),xor(H(H(Ni'.Pi).UIDi),H(MK.Yi')),xor(H(Yi'.MK),H(xor(UIDi,H(Ni'.Pi)))),H)=|>

% Login phase
  
  State' := 2 

  % Send the REQUEST message Snd (Di’,Ci’,CIDi’,Yi’) to Server
  
			/\ request(S, Ui, bob_alice_Yi, Yi')
		    /\ secret({MK, Yi'}, subs3, S)
            /\ N1':=new()
            /\ secret({N1'}, subs4, Ui)
            /\ Snd(H(H(MK.Yi').H(Yi'.MK).N1'.UIDi), xor(H(Yi'.MK), N1'), xor(H(UIDi.H(MK.Yi')), H(H(Yi'.MK).N1')), Yi')

% Ui has freshly generated the value N1 for Server S
            
			/\ witness(Ui, S, alice_bob_N1, N1')

end role

%%%%%%%%%%%%%%%%%%%%% BOB ROLE

role bob ( Ui, S, SNk   : agent,
           H  : hash_func,
		   Snd, Rcv: channel(dy))

% Player by the responder: the server S

played_by S

def=
 
local State  : nat,

	UIDi,Pi,RPWi,Ni,N1,Yi, MK, N2, N3, SIDj: text,
	SKss: symmetric_key
     
	const alice_bob_Ni, bob_alice_Yi, alice_bob_N1, bob_sensor_N2, sensor_bob_N3, subs1, subs2, subs3, subs4, subs5 : protocol_id

init  State := 0
 
	transition

% User registration phase

% Receive the registration request message from Ui

1. State   = 0 /\ Rcv(UIDi, H(Ni'.Pi))=|>
   State' := 1 /\request(Ui, S, alice_bob_Ni, Ni')
			   /\ Yi':=new() 
               /\ secret({Ni',Pi}, subs1, Ui)
               /\ secret({UIDi}, subs2, {Ui,S})
               /\ secret({MK, Yi'}, subs3, S)

% Send the registration acknowledgment message to Ui snd (Gi,Hi,Ki,H)
               
			   /\ Snd(xor(H(UIDi.H(Ni'.Pi)),Yi'),xor(H(H(Ni'.Pi).UIDi),H(MK.Yi')),xor(H(Yi'.MK),H(xor(UIDi,H(Ni'.Pi)))),H)
           
% server will use Yi for Ui
           
				/\witness(S, Ui, bob_alice_Yi, Yi')
   

% Login phase
% Receive the REQUEST message < Di’,Ci’,CIDi’,Yi’ > from Ui

2. State = 1 /\ Rcv(H(H(MK.Yi').H(Yi'.MK).N1'.UIDi), xor(H(Yi'.MK), N1'), xor(H(UIDi.H(MK.Yi')), H(H(Yi'.MK).N1')), Yi') =|> 

 % Authentication phase for user

State' := 2	/\ secret({N1'}, subs4, Ui)
			/\ request(Ui, S, alice_bob_N1, N1')
			/\ N2' := new()
			/\ witness(S, SNk, bob_sensor_N2, N2')
			/\ secret({SIDj, SKss}, subs5, {S, SNk})
			/\ Snd((xor(N2',H(SIDj,SKss))),(xor(N1',H(SKss.N2'))),(H(N1'.SKss.N2'.SIDj)))
end role
%%%%%%%%%%%%%%%%%%%%%%%%%
role sensor ( Ui, S, SNk   : agent,
              H  : hash_func,
		      Snd, Rcv: channel(dy))

% Player by the responder: the server S

played_by SNk

def=
 
local State  : nat,

	UIDi,Pi,RPWi,Ni,N1,Yi, MK, N2, N3, SIDj: text,
	SKss: symmetric_key
     
	const alice_bob_Ni, bob_alice_Yi, alice_bob_N1, bob_sensor_N2, sensor_bob_N3, subs1, subs2, subs3, subs4, subs5 : protocol_id

init  State := 0
 
	transition
	1. State   = 0 /\Rcv((xor(N2',H(SIDj,SKss))),(xor(N1',H(SKss.N2'))),(H(N1'.SKss.N2'.SIDj))) =|>
	   
	   State' := 1/\ request(S, SNk, bob_sensor_N2, N2')
			  /\ secret({SIDj, SKss}, subs5, {S, SNk})
			
end role
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role session(Ui, S,Snk: agent,
             H : hash_func)
			 
			 
             
def=
  local  Snd, Rcv: channel (dy)
  composition
     alice(Ui, S, SNk, H, Snd, Rcv)
 /\  bob  (Ui, S, SNk, H,  Snd, Rcv)
 end role 

%%%%%%%%%%%%%%%%%%%%%%%%%%%

role environment()
def=
  const ui, s, snk: agent,
        h: hash_func,
		alice_bob_Ni, bob_alice_Yi, alice_bob_N1, bob_sensor_N2, subs1, subs2, subs3, subs4, subs5 : protocol_id
  intruder_knowledge = {ui, s,snk, h}
  composition
	   session(ui, s, snk, h) 
	/\ session(ui, s, snk,  h) 
end role
goal
  secrecy_of subs1
  secrecy_of subs2
  secrecy_of subs3
  secrecy_of subs4
  secrecy_of subs5
  authentication_on alice_bob_Ni 
  authentication_on bob_alice_Yi 
  authentication_on alice_bob_N1 
  %authentication_on bob_sensor_N2    
  %authentication_on sensor_bob_N3 
     
end goal
environment()



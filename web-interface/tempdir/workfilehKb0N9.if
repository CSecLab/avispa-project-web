%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilehKb0N9

section signature:

state_target: agent * agent * nat * hash_func * public_key * public_key * hash_func * hash_func * nat * text * text * text * message * message * nat * pair(text,text) * set(agent) * set(agent) * nat -> fact
state_initiator: agent * agent * nat * hash_func * public_key * public_key * apply(hash_func,pair(agent,agent)) * apply(hash_func,pair(agent,agent)) * nat * text * text * text * message * message * nat * pair(text,text) * set(agent) * set(agent) * nat -> fact


section types:

sec_t_Log, sec_t_Pwd, k, sec_i_Log, sec_i_Pwd: protocol_id
Pwd_A_S, Login_A_S: apply(hash_func,pair(agent,agent))
ka, ki, kb, ks, Ka, Ks: public_key
h, login, pwd, Login, Pwd, H: hash_func
Dummy_State, 3, SID, dummy_nat, SID2, SID1, g, W, State, G, 2, 1, 0, 10, 7, 6, 4: nat
set_92, set_91, set_124, set_123, set_122, set_121, set_119, set_118, set_116, set_115, set_108, set_107: set
ASGoal, Set_56, Set_55, Set_31, Set_29, Dummy_Set_56, Dummy_Set_55, Dummy_Set_31, Dummy_Set_29: set(agent)
K, Dummy_K: pair(text,text)
A2Goal, A1Goal, a, s, b, A, S, i: agent
dummy_msg, MGoal, Keycompleted, Y, start, X, Dummy_Y, Dummy_Keycompleted, Dummy_X: message
Dummy_Rnumber1, Dummy_Na, dummy_nonce, Rnumber2, Na, Nb, Rnumber1, Dummy_Rnumber2, Dummy_Nb: text


section inits:

initial_state init1 := 
 iknows(start).
 iknows(ki).
 iknows(inv(ki)).
 iknows(a).
 iknows(b).
 iknows(s).
 iknows(h).
 iknows(g).
 iknows(ks).
 iknows(apply(login,pair(i,s))).
 iknows(apply(pwd,pair(i,s))).
 iknows(ka).
 iknows(i).
 state_initiator(a,s,g,h,ka,ks,apply(login,pair(a,s)),apply(pwd,pair(a,s)),0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_nat,pair(dummy_nonce,dummy_nonce),set_91,set_92,3).
 state_target(s,a,g,h,ka,ks,login,pwd,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_nat,pair(dummy_nonce,dummy_nonce),set_107,set_108,4).
 state_initiator(b,s,g,h,kb,ks,apply(login,pair(b,s)),apply(pwd,pair(b,s)),0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_nat,pair(dummy_nonce,dummy_nonce),set_115,set_116,6).
 state_target(s,b,g,h,kb,ks,login,pwd,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_nat,pair(dummy_nonce,dummy_nonce),set_118,set_119,7).
 state_target(s,i,g,h,ki,ks,login,pwd,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_nat,pair(dummy_nonce,dummy_nonce),set_123,set_124,10)


section rules:

step step_0 (A,S,G,H,Ka,Ks,Login_A_S,Pwd_A_S,Dummy_Na,Nb,Dummy_Rnumber1,X,Keycompleted,W,K,Set_29,Set_31,SID,Na,Rnumber1) :=
 state_initiator(A,S,G,H,Ka,Ks,Login_A_S,Pwd_A_S,0,Dummy_Na,Nb,Dummy_Rnumber1,X,Keycompleted,W,K,Set_29,Set_31,SID).
 iknows(start)
=[exists Rnumber1,Na]=>
 state_initiator(A,S,G,H,Ka,Ks,Login_A_S,Pwd_A_S,1,Na,Nb,Rnumber1,X,Keycompleted,W,K,Set_29,Set_31,SID).
 iknows(pair(S,pair(Na,pair(exp(G,Rnumber1),apply(H,pair(S,pair(Na,exp(G,Rnumber1))))))))

step step_1 (A,S,G,H,Ka,Ks,Login_A_S,Pwd_A_S,Na,Dummy_Nb,Rnumber1,Dummy_X,Dummy_Keycompleted,W,Dummy_K,Dummy_Set_29,Dummy_Set_31,SID,Nb,X) :=
 state_initiator(A,S,G,H,Ka,Ks,Login_A_S,Pwd_A_S,1,Na,Dummy_Nb,Rnumber1,Dummy_X,Dummy_Keycompleted,W,Dummy_K,Dummy_Set_29,Dummy_Set_31,SID).
 iknows(pair(S,pair(Na,pair(Nb,pair(X,crypt(inv(Ks),pair(S,pair(Na,pair(Nb,X)))))))))
 =>
 state_initiator(A,S,G,H,Ka,Ks,Login_A_S,Pwd_A_S,2,Na,Nb,Rnumber1,X,exp(X,Rnumber1),W,pair(Login_A_S,Pwd_A_S),Dummy_Set_29,Dummy_Set_31,SID).
 iknows(scrypt(exp(X,Rnumber1),pair(Login_A_S,Pwd_A_S))).
 secret(Login_A_S,sec_i_Log,Dummy_Set_29).
 secret(Pwd_A_S,sec_i_Pwd,Dummy_Set_31).
 witness(A,S,k,exp(X,Rnumber1)).
 contains(S,Dummy_Set_29).
 contains(S,Dummy_Set_31)

step step_2 (S,A,G,H,Ka,Ks,Login,Pwd,Dummy_Na,Dummy_Nb,Dummy_Rnumber2,Dummy_Y,Dummy_Keycompleted,W,K,Dummy_Set_55,Dummy_Set_56,SID,Na,Nb,Rnumber2,Y) :=
 state_target(S,A,G,H,Ka,Ks,Login,Pwd,0,Dummy_Na,Dummy_Nb,Dummy_Rnumber2,Dummy_Y,Dummy_Keycompleted,W,K,Dummy_Set_55,Dummy_Set_56,SID).
 iknows(pair(S,pair(Na,pair(Y,apply(H,pair(S,pair(Na,Y)))))))
=[exists Rnumber2,Nb]=>
 state_target(S,A,G,H,Ka,Ks,Login,Pwd,1,Na,Nb,Rnumber2,Y,exp(Y,Rnumber2),W,K,Dummy_Set_55,Dummy_Set_56,SID).
 iknows(pair(S,pair(Na,pair(Nb,pair(exp(G,Rnumber2),crypt(inv(Ks),pair(S,pair(Na,pair(Nb,exp(G,Rnumber2)))))))))).
 secret(apply(Login,pair(A,S)),sec_t_Log,Dummy_Set_55).
 secret(apply(Pwd,pair(A,S)),sec_t_Log,Dummy_Set_56).
 contains(A,Dummy_Set_55).
 contains(A,Dummy_Set_56)

step step_3 (S,A,G,H,Ka,Ks,Login,Pwd,Na,Nb,Rnumber2,Y,Keycompleted,W,Dummy_K,Set_55,Set_56,SID) :=
 state_target(S,A,G,H,Ka,Ks,Login,Pwd,1,Na,Nb,Rnumber2,Y,Keycompleted,W,Dummy_K,Set_55,Set_56,SID).
 iknows(scrypt(Keycompleted,pair(apply(Login,pair(A,S)),apply(Pwd,pair(A,S)))))
 =>
 state_target(S,A,G,H,Ka,Ks,Login,Pwd,2,Na,Nb,Rnumber2,Y,Keycompleted,W,pair(apply(Login,pair(A,S)),apply(Pwd,pair(A,S))),Set_55,Set_56,SID).
 request(S,A,k,Keycompleted,SID)


section properties:

property authentication_on_k (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,k,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,k,MGoal))
     /\ ((request(A1Goal,A2Goal,k,MGoal,SID1)
           /\ request(A1Goal,A2Goal,k,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property secrecy_of_sec_i_Log (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_i_Log,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_i_Pwd (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_i_Pwd,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_t_Log (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_t_Log,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_t_Pwd (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_t_Pwd,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state authentication_on_k (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,k,MGoal,SID) &
 not(witness(A2Goal,A1Goal,k,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_k (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,k,MGoal,SID1).
 request(A1Goal,A2Goal,k,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state secrecy_of_sec_i_Log (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_i_Log,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_i_Pwd (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_i_Pwd,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_t_Log (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_t_Log,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_t_Pwd (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_t_Pwd,ASGoal) &
 not(contains(i,ASGoal))


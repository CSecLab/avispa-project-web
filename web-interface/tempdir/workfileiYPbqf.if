%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileiYPbqf

section signature:

state_server: agent * agent * symmetric_key * nat * text * text * nat -> fact
state_alice: agent * agent * symmetric_key * nat * text * text * nat -> fact


section types:

ASGoal: set(agent)
MGoal, start: message
k, alice_server_ns: protocol_id
ks, K: symmetric_key
Na, Ns, Dummy_Ns, dummy_nonce: text
A2Goal, A1Goal, a, s, A, S, i: agent
SID, 4, 0, State, 5, 2, 3, 1, 9, 7, Dummy_State, SID2, SID1: nat


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(s).
 iknows(i).
 state_alice(a,s,ks,1,dummy_nonce,dummy_nonce,3).
 state_server(s,a,ks,0,dummy_nonce,dummy_nonce,4).
 state_server(s,i,ks,0,dummy_nonce,dummy_nonce,7).
 state_alice(a,i,ks,1,dummy_nonce,dummy_nonce,9)


section rules:

step step_0 (A,S,K,Na,Dummy_Ns,SID,Ns) :=
 state_alice(A,S,K,1,Na,Dummy_Ns,SID).
 iknows(Ns)
 =>
 state_alice(A,S,K,3,Na,Ns,SID).
 iknows(scrypt(K,Ns))

step step_1 (A,S,K,Na,Ns,SID) :=
 state_alice(A,S,K,3,Na,Ns,SID).
 iknows(Ns)
 =>
 state_alice(A,S,K,5,Na,Ns,SID).
 request(A,S,alice_server_ns,Ns,SID)

step step_2 (S,A,K,Na,Dummy_Ns,SID,Ns) :=
 state_server(S,A,K,0,Na,Dummy_Ns,SID).
 iknows(start)
=[exists Ns]=>
 state_server(S,A,K,2,Na,Ns,SID).
 iknows(Ns)

step step_3 (S,A,K,Na,Dummy_Ns,SID,Ns) :=
 state_server(S,A,K,2,Na,Dummy_Ns,SID).
 iknows(scrypt(K,Ns))
 =>
 state_server(S,A,K,4,Na,Ns,SID).
 iknows(Dummy_Ns).
 witness(S,A,alice_server_ns,Dummy_Ns)


section properties:

property secrecy_of_k (MGoal,ASGoal) :=
 [] ((secret(MGoal,k,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_alice_server_ns (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,alice_server_ns,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,alice_server_ns,MGoal))
     /\ ((request(A1Goal,A2Goal,alice_server_ns,MGoal,SID1)
           /\ request(A1Goal,A2Goal,alice_server_ns,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_k (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,k,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_alice_server_ns (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,alice_server_ns,MGoal,SID) &
 not(witness(A2Goal,A1Goal,alice_server_ns,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_alice_server_ns (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,alice_server_ns,MGoal,SID1).
 request(A1Goal,A2Goal,alice_server_ns,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


role reader(
R,T:agent,
K,Tid,Rid:text,
H:hash_func,
SND,RCV:channel(dy))
played_by R def=

local
State:nat,
Nr,Nt:text

init
State:=0

transition
1.State=2/RCV(H(K.Nr.Nt')=|>
  State':=4/SND(H(Nr.Nt.K))
                      /secret(K,sk,{R,T})
                      /equest(R,T,rt,K)
                      /witness(R,T,tr,K)
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role tag(
R,T:agent,
K,Tid:text,
H:hash_func,
SND,RCV:channel(dy))
played_by T def=

local
state:nat,
Nr,Nt,Rid:text

init
State:=1

transition
1.State=1/RCV(xor(H(Tid.Nr’),Rid’),xor(H(Rid’.Nr’),Tid),Nr’)=|>
  State':=3/Nt’:=new()
                      /SND(H(K.Nr.Nt’),Nt’)
                      /secret(Tid,stid,{R,T})
                      /witness(T,R,rt,K)
2.State=3/RCV(H(Nr.Nt.K))=|>
State’:=5/
equest(T,R,tr,K)

end role
%%%%%%%%%%%%%%%%%%%%%%%%
role session(
R,T:agent,
K,Tid,Rid:text,
H:hash_func)
def=
local
SNDRT,RCVRT,SNDTR,RCVTR:channel(dy)

composition
reader(R,T,K,Tid,Rid,H,SNDRT,RCVRT)/
tag(R,T,K,Tid,H,SNDRT,RCVTR)
end role

role environment()
def=
const sk,stid,tr,tr:protocol_id,
r,t:agent,
k,tid,rid:text,
h:hash_func

intruder_knowledge={h,r,t}
composition
session(r,t,k,tid,rid,h)/session(r,t,k,tid,rid,h)
end role

goal
secrecy_of sk
 secrecy_of stid
authentication_on rt
authentication_on tr

end goal
environment()
     
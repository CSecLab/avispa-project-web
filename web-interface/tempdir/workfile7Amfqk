%%HLPSL:
role client (A,S,B   : agent,
           	P, Ppub, Qida1, Qida2, Qidb2 : symmetric_key,
	   	Union, Pred, Ebilinear : hash_func, 
                Ra, Rb, Rs : text,              
           	SND_SA, RCV_SA, SND_BA, RCV_BA: channel(dy))
played_by A
def=
           
  local State  : nat,

          
          Na, Nb : text, 
         
          Ss : public_key,
          
          Ida, Ua1, Ua2, Wa, Va,  Authab, Ids, Us, Usa1, Usa2, Usb1, Usb2, Hsb, Vsb, Authsa, Authsb, Idb, Ub1, Ub2, Wb, Vb, Authba : message,
         
          Dida1, Dida2, Kab, Ksa, Ksb, Kba, Didb1, Didb2, Dids, Skab :  symmetric_key

          const dida1, didb1, dids, ksa, kab, kba, skab :protocol_id

  init  State := 0

  transition

   1. State   = 0 /\ RCV_SA(start) =|>
      State' := 1 /\ Ra':= new()
                  /\ Ua1':= Pred(Ra, P)
                  /\ Ua2':= Pred(Ra, Qida2)
                  /\ Wa':= Pred(Ua1, Ua2)
                  /\ Va':= Union(Pred(Pred(Ra, Dida1), Wa), Dida2)
                  /\ SND_SA(A.S.Ida.Idb.Ua1.Ua2.Va.Qida1)
                  /\ secret(Dida1, dida1, {A, S})
                  /\ secret(Dida2, dida2, {A, S})
                  /\ request(A, S, a_s_dida2, Dida2)

   2. State   = 8 /\ RCV_SA(S.A.Na'.Authsa'.Usa1'.Usa2'.Us.Nb'.Authsb') 
                  /\ Ksa' =Pred(Ss, Ua2)
                  /\ Authsa'= Union(Ida, Idb, Ua1, Ua2, Va, Na, Ksa, Us, Usa1, Usa2) =|> 
      State' := 9 /\ Kab':= Ebilinear(Union(Pred(Ra, Dida2), Pred(Ra, Ppub)), Pred(Rs, Pred(Rb, P)), Pred(Rs, Pred(Rb, Qidb2)))
                  /\ Authab':= Union(Pred(Ida, Idb), Pred(Us, Kab))
                  /\ SND_BA(A.B.Authab.Nb'.Authsb)
                  /\ secret(Kab, kab, {A, B})                  
                  /\ request(A, B, a_b_kab, Kab)

   3. State   = 12 /\ RCV_BA(B.A.Authba') 
                  /\ Kba'= Ebilinear(Union(Pred(Ra, Dida2), Pred(Ra, Ppub)), Pred(Rs, Pred(Rb, P)), Pred(Rs, Pred(Rb, Qidb2)))
                  /\ Authba'= Union(Pred(Ida, Idb), Pred(Pred(Us, Kba), Authab)) =|> 
      State' := 13 /\ Skab':= Union(Pred(Pred(Ida, Idb), Kab), Pred(Authab, Authba)) 
                  /\ secret(Skab, skab, {A, S, B})
                                    

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role authentication (A,S,B : agent,
                P, Ppub, Qida1, Qidb1 : symmetric_key,
		Union, Pred, Ebilinear : hash_func,
                Ra, Rb, Rs : text,
                SND_AS, RCV_AS, SND_BS, RCV_BS: channel(dy))
played_by S
def=
           
  local State  : nat,

          Na, Nb : text, 
  
          Ss : public_key,
          
          Ida, Ua1, Ua2, Wa, Va,  Authab, Ids, Us, Usa1, Usa2, Usb1, Usb2, Hsb, Vsb, Authsa, Authsb, Idb, Ub1, Ub2, Wb, Vb, Authba : message,
          
          Dida1, Dida2, Kab, Ksa, Ksb, Kba, Didb1, Didb2, Dids, Skab :  symmetric_key

          const dida1, dida2, didb1, didb2, dids, ksa, ksb, kab, kba, skab :protocol_id                                         
              

  init  State := 2

  transition

   1. State   = 2 /\ RCV_AS(A.S.Ida.Idb.Ua1'.Ua2'.Va'.Qida1) =|>  
      State' := 3 /\ Rs':= new()
                  /\ Us':= Pred(Rs, P)
                  /\ Usb1':= Pred(Rs, Ua1)
                  /\ Usb2':= Pred(Rs, Ua2)
                  /\ Hsb':= Union(Pred(Pred(Us, Usb1), Usb2))
                  /\ Vsb':= Union(Pred(Rs, Ppub), Pred(Hsb, Dids))
                  /\ SND_BS(S.B.Ida.Us.Usb1.Usb2.Vsb)
                  /\ secret(Dids, dids, {S, B})
	          /\ request(S, B, s_b_dids, Dids)

   2. State   = 6 /\ RCV_BS(B.S.Idb.Ub1'.Ub2'.Vb'.Qidb1) =|>
      State' := 7 /\ Usa1':= Pred(Rs, Ub1)
                  /\ Usa2':= Pred(Rs, Ub2)
                  /\ Ksa':= Pred(Ss, Ua2)
                  /\ Ksb':= Pred(Ss, Ub2)
                  /\ Na':= new()
                  /\ Nb':= new()
                  /\ Authsa':= Union(Ida, Idb, Ua1, Ua2, Va, Na, Ksa, Us, Usa1, Usa2)
                  /\ Authsb':= Union(Ida, Idb, Ub1, Ub2, Vb, Nb, Ksb, Us, Usb1, Usb2)
                  /\ Skab':= Union(Pred(Pred(Ida, Idb), Kab), Pred(Authab, Authba))
                  /\ SND_AS(S.A.Na.Authsa.Idb.Usa1.Usa2.Us.Nb.Authsb)	      
		  /\ secret(Ksa, ksa,{A,S})
                  /\ secret(Ksb, ksb,{B,S})
                  /\ secret(Skab, skab, {A, S, B})
                  /\ request(S, A, s_a_ksa, Ksa)
                  /\ request(S, B, s_b_ksb, Ksb)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role application (A,S,B : agent,
                P, Ppub, Qidb1, Qidb2 : symmetric_key,
		Union, Pred, Ebilinear : hash_func,
                Ra, Rb, Rs : text,
                SND_SB, RCV_SB, SND_AB, RCV_AB: channel(dy))
played_by B
def=
           
  local State  : nat,

          Na, Nb : text, 
     
          Ss : public_key,
          
          Ida, Ua1, Ua2, Wa, Va,  Authab, Ids, Us, Usa1, Usa2, Usb1, Usb2, Hsb, Vsb, Authsa, Authsb, Idb, Ub1, Ub2, Wb, Vb, Authba :message,     

          Dida1, Dida2, Kab, Ksa, Ksb, Kba, Didb1, Didb2, Dids, Skab : symmetric_key

         const dida1, dida2, didb1, didb2, dids, ksb, kab, kba, skab :protocol_id

  init  State := 4

  transition

   1. State   = 4 /\ RCV_SB(S.B.Ida.Us'.Usb1'.Usb2'.Vsb')  =|>
      State' := 5 /\ Rb':= new()
                  /\ Ub1':= Pred(Rb, P)
                  /\ Ub2':= Pred(Rb, Qidb2)
                  /\ Wb':= Pred(Ub1, Ub2)                 
                  /\ Vb':= Union(Pred(Pred(Rb, Didb1), Wb), Didb2)
                  /\ SND_SB(B.S.Idb.Ub1.Ub2.Vb.Qidb1)  
                  /\ secret(Didb2, didb2, {S, B})
	          /\ request(B, S, b_s_didb2, Didb2)

   2. State   = 10/\ RCV_AB(A.B.Authab'.Nb'.Authsb') 
                  /\ Ksb'= Pred(Ss, Pred(Rb, Qidb2))  
                  /\ Authsb'= Union(Ida, Idb, Ub1, Ub2, Vb, Nb, Ksb, Us, Usb1, Usb2)  =|>
      State' := 11/\ Kba':= Ebilinear(Union(Pred(Ra, Dida2), Pred(Ra, Ppub)), Pred(Rs, Pred(Rb, P)), Pred(Rs, Pred(Rb, Qidb2)))
                  /\ Authba':= Union(Pred(Ida, Idb), Pred(Pred(Us, Kba), Authab)) 
                  /\ Skab':= Union(Pred(Pred(Ida, Idb), Kab), Pred(Authab, Authba))
                  /\ SND_AB(B.A.Authba)
                  /\ secret(Kba, kba, {A, B})
                  /\ secret(Skab, skab, {A, S, B})                  
	          /\ request(B,A,b_a_kba, Kba) 		  

end role

%%%%%%%%%%%%%%%%%%%%%%%%%
role session(A, S, B: agent,
	     P, Ppub, Qida1, Qida2, Qidb1, Qidb2: symmetric_key,
             Ra, Rb, Rs : text,
	     Union, Pred, Ebilinear: hash_func)
def=

  local 
        SSA, RSA, SBA, RBA, SAS, RAS, SBS, RBS, SSB, RSB, SAB, RAB : channel (dy)

  composition

           client(A, S, B, Union, Pred, Ebilinear, P, Ppub, Qida1, Qida2, Qidb2, Ra, Rb, Rs, SSA, RSA, SBA, RBA)
           /\authentication(S, B, A, Union, Pred, Ebilinear,  P, Ppub, Qida1, Qidb1, Ra, Rb, Rs, SAS, RAS, SBS, RBS)
           /\application(B, S, A, Union, Pred, Ebilinear,  P, Ppub, Qidb1, Qidb2, Ra, Rb, Rs, SSB, RSB, SAB, RAB)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%
role environment()
def=

  const a, b, s, i : agent,
        p, ppub, qida1, qida2, qidb1, qidb2, qidi1, qidi2 : symmetric_key,
        union, pred, ebilinear : hash_func,
        ra, rb, rs, ri : text,
        a_s_dida2, s_b_dids, b_s_didb2, s_a_ksa, s_b_ksb, a_b_kab, b_a_kba : protocol_id

  intruder_knowledge = {a, s, b, p, ppub, union, pred, ebilinear, ri, qida1, qida2, qidb1, qidb2}

  composition

	session(a, b, s, union, pred, ebilinear, p, ppub, qida1, qida2, qidb1, qidb2, ra, rb, rs)         
	/\ session(a, i, s, union, pred, ebilinear, p, ppub, qida1, qida2, qidi1, qidi2, ra, ri, rs) 
        /\ session(a, b, i, union, pred, ebilinear, p, ppub, qida1, qida2, qidb1, qidb2, ra, rb, ri) 
        /\ session(i, b, s, union, pred, ebilinear, p, ppub, qidi1, qidi2, qidb1, qidb2, ri, rb, rs) 

end role


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal


 secrecy_of dida1, dida2, didb1, didb2, dids, ksa, ksb, kab, kba
                         

 authentication_on a_s_dida2
 authentication_on s_b_dids
 authentication_on b_s_didb2
 authentication_on s_a_ksa 
 authentication_on s_b_ksb
 authentication_on a_b_kab
 authentication_on b_a_kba
  
end goal
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

environment()

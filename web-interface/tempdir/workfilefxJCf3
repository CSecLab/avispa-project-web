role alice (A, B: agent,             
           Hash : hash_func,
            SND, RCV: channel (dy)) 
played_by A def=

  local State : nat, 
        Na, Nb: text,
		Ka, K: symmetric_key

  init State := 0

  transition  
   
    0.  State  = 0 /\ RCV(start) =|> 
        State':= 2 /\ Na' := new() /\ SND(Na')                  
                   /\ witness(A, B, bob_alice_na, Na')

    2.  State  = 2 /\ RCV(Nb') =|> 
        State':= 4 /\ Ka':= Na.Nb' /\ K' := new() /\  SND({K'}_Ka) 
				   /\ secret(K', kab, {A,B})
                   /\ request(A,B,alice_bob_nb,Nb')
	4.  State = 4  /\ RCV(Hash(K')) =|>
		State':= 6  /\ request(A,B,alice_bob_k, Hash(K'))
						

 end role



role bob(A, B: agent,      
		Hash : hash_func,
         SND, RCV: channel (dy)) 
played_by B def=

  local State : nat, 
        Na, Nb: text,
		Kb, K : symmetric_key

  init State := 1

  transition 

    1.  State  = 1 /\ RCV(Na') =|> 
        State':= 3 /\ Nb' := new()
				   /\ Kb' := Na'.Nb'
                   /\ SND(Nb') 		                          
                   /\ witness(B,A,alice_bob_nb,Nb')

    3.  State  = 3 /\ RCV({K'}_Kb) =|> 
        State':= 5 /\ SND(Hash(K')) 
				   /\ request(B,A,bob_alice_na,Na)
				   /\ witness(B,A,alice_bob_k,Hash(K'))

end role



role session(A, B: agent, Hash : hash_func) def=

  local SA, RA, SB, RB: channel (dy)

  composition 

        alice(A,B,Hash, SA,RA)
     /\ bob  (A,B,Hash,SB,RB)

end role



role environment() def=

    const a, b: agent,       
          na, nb,
          alice_bob_nb,		  
          bob_alice_na, alice_bob_k : protocol_id,
		  has : hash_func

    intruder_knowledge = {a, b}

    composition

        session(a,b,has)
     /\ session(a,i,has)
     /\ session(i,b,has)

end role



goal

  secrecy_of kab
  authentication_on alice_bob_nb
  authentication_on bob_alice_na

end goal



environment()
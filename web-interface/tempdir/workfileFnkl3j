%% PROTOCOL: A more efficient and secure dynamic ID-based remote user authentication scheme
%% There are two user roles
%% User A is playing the user who requires authentication
%% User B is playing the server role who is an authentication server
role user( 	A,
		B : agent,
		SKey : symmetric_key,
		H : hash_func,
		Snd, Rcv: channel(dy)	)

played_by A
def=
	local State : nat,
	PWi, Ni, Y,Na,CID,Bi,Ci,Nb,Ack,Ni_new,PWi_new,T: text
	const auth_sub1, auth_sub2, auth_user_server_na, auth_server_user_nb : protocol_id
init State := 0
transition

	%%Registration phase
	1. State = 0 /\ Rcv(start) =|>
	     	State' := 2 /\PWi' := new()
		% PWi is generated by user A
		/\CID' := new()
		/\Bi':=H(xor(CID',H(PWi)))
		/\Ci':=H(xor(Bi',SKey))
		/\Snd({Ci'}_SKey)
		/\secret({PWi'}, auth_sub1, {A,B})
		/\secret({SKey}, auth_sub, {A,B})

	2.State = 2 /\Rcv({PWi.H.Ni'.Y'}_SKey)
	=|>State':= 4

	%%Login phase
	3.State=4 =|>
		State':=6
		/\Na':=new()
		/\witness( A,B, auth_user_server_na,Na')
		/\CID':=xor(H(PWi),H(xor(Ni,xor(T,xor(Y,Na')))))
		/\Bi':=H(xor(CID',H(PWi)))
		/\Ci':=H(xor(Na',xor(Ni,xor(Bi',Y))))
		/\Snd(CID'.Ni.Ci'.Na'.T)

	%%Password change phase 
	4.State=6=|>
		State':=8
		/\PWi_new':=new()	
		%%Newly Generated Password
		/\Ni_new':=xor(Ni',xor(H(PWi),H(PWi_new')))
		/\Ni':=Ni_new'
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role server(	A,
		B : agent,
		SKey : symmetric_key,
		H: hash_func,
		Snd, Rcv: channel(dy) )

played_by B
def=
	local State : nat,
	PWi, Ni, Y,X,Na,CID,Bi,Ci,Nb,HPWi,Ack,T: text
	const auth_sub1, auth_sub2, auth_user_server_na, auth_server_user_nb : protocol_id

init State := 1
transition

	%Verifivation phase at server side
	1. State = 1 /\Rcv({PWi'}_SKey) =|>
		State':=3
		/\X':=new()
		/\secret(X', auth_sub1,{B} )
		/\Y':=new()
		/\secret(Y', auth_sub2,{ A,B })
		/\Ni':=xor(H(PWi'),H(X'))
		/\Snd({PWi'.H.Ni'.Y'.T}_SKey)

	2.State=3/\Rcv(CID'.Ni'.Ci'.Na')=|>
		State':=5
		/\Bi':=xor(Na', T)
		/\Ci':=xor(Ni', Bi')
		/\HPWi':=xor( CID', Ci' )
	/\request( B, A, auth_user_server_na,HPWi')

end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role session( 	A,
		B : agent)
def=
	local 
		SKey : symmetric_key,
	H : hash_func,
	SU,SS,RU,RS:channel(dy),
	PWi, X,Y,Ni: text
	const auth_sub1, auth_sub2 : protocol_id
	composition
	user( A,B, SKey,H,SU,RU)
	/\server( A, B,SKey,H,SS,RS)

end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role environment ()
def=
	const client,server : agent,
	h: hash_func,
	auth_sub1, auth_sub2, auth_user_server_na : protocol_id

	intruder_knowledge={ client,server,h}
	composition
	session( client,server )
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal
	secrecy_of auth_sub1
	secrecy_of auth_sub2
	authentication_on auth_user_server_na
end goal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

environment()


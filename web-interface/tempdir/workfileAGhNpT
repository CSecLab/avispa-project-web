role alice(
A,B        	:agent,
Kab         :symmetric_key,
Hash	 :hash_func,
SND,RCV :channel(dy))
played_by A def=

local
 State,CA,CB   :nat,
 Na                  :text,
 D                   :message

init
 State :=0 

transition 

0. State  =0 /\ RCV(start) =|>
   State' :=2 /\ D' :=new()
                  /\SND({D'}_Kab.CA.Hash(Kab.CA.{D'}_Kab)) 
                 
2. State  =2  /\ RCV(CB.Hash(Kab.CA.CB)) =|>
    State' :=4 /\ Na' :=new()
                   /\ SND(Na')

4. State  =4 /\ RCV(CB.Hash(Kab.Na.CB)) =|>
    State' :=6 /\ request(A,B,alice_bob_na,Na)               
                  
end role

role bob(
     A,B	              : agent,
     Kab    	: symmetric_key,
     Hash	              : hash_func,
     SND,RCV	:channel (dy))
played_by B def=

local
    State,CA,CB    : nat,
     Na                  :text,
     D                    : message

init 
 State :=1 

transition

1. State  =1 /\ RCV({D'}_Kab.CA.Hash(Kab.CA.{D'}_Kab)) =|>
   State' :=3 /\ SND(CB.Hash(Kab.CA.CB))
                  /\ secret(D',d,{A,B})
                  
3. State  =3 /\ RCV(Na') =|>
   State' :=5 /\ SND(CB.Hash(Kab.Na'.CB))
                  /\witness(B,A,alice_bob_na,Na')
                 
                           


 end role

role session(
A,B	: agent,
Kab	: symmetric_key,
Hash	: hash_func)
def=

local SA,SB,RA,RB : channel(dy)

composition

	alice (A,B,Kab,Hash,SA,RA)
           /\  bob (A,B,Kab,Hash,SB,RB)
end role

    role environment()
      def=

 const a,b	                     : agent,
 alice_bob_na,d                          :protocol_id,
 kab,kai,kib   	                     : symmetric_key,
 h		                     : hash_func

intruder_knowledge={a,b,kai,kib,h}

composition
	
	session(a,b,kab,h)
            /\session(a,i,kai,h)
            /\session(i,b,kib,h)

end role
goal
 secrecy_of d
authentication_on alice_bob_na

end goal

environment()

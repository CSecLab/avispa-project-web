%% IF specification of /home/friends/drwho/Desktop/Archivio/Work/Science/AVISPA/AVISPA-FET-EU-02/shared/testsuite/hlpsl/IKEv2-CHILD.hlpsl

section signature:

state_Bob: agent * agent * text * function * symmetric_key * text * text * text * text * message * message * nat * text * text * nat -> fact
state_Alice: agent * agent * text * function * symmetric_key * text * text * text * text * message * message * nat * text * text * nat -> fact


section types:

nr, ni : protocol_id
F, f : function
SK, kab, kbi, kai : symmetric_key
Dummy_CSK, Dummy_KEr, KEi, CSK, dummy_msg, MGoal, KEr, Dummy_KEi, start : message
Dummy_MB, Dummy_MA, MB, MA, Dummy_Nr, Dummy_DHX, Nr, Dummy_SA, DHY, Dummy_Ni, Ni, SA, dummy_nonce, G, DHX, g, Dummy_DHY : text
B, A, AGoal, b, a, i : agent
5, 3, State, CID, CID2, CID1, 6, 4, 2, 1, 0, 10 : nat


section inits:

initial_state init1 := 
 iknows(g).
 iknows(f).
 iknows(a).
 iknows(b).
 iknows(kai).
 iknows(kbi).
 iknows(start).
 iknows(i).
 state_Alice(a,b,g,f,kab,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,0,dummy_nonce,dummy_nonce,3).
 state_Bob(b,a,g,f,kab,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,1,dummy_nonce,dummy_nonce,4).
 state_Alice(a,i,g,f,kai,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,0,dummy_nonce,dummy_nonce,6).
 state_Bob(b,i,g,f,kbi,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,1,dummy_nonce,dummy_nonce,10)


section rules:

step step_0 (A,B,G,F,SK,Dummy_Ni,Dummy_SA,Dummy_DHX,Nr,KEr,CSK,MA,MB,Ni,SA,DHX,CID) :=
 state_Alice(A,B,G,F,SK,Dummy_Ni,Dummy_SA,Dummy_DHX,Nr,KEr,CSK,0,MA,MB,CID).
 iknows(start)
=[exists DHX,Ni,SA]=>
 state_Alice(A,B,G,F,SK,Ni,SA,DHX,Nr,KEr,CSK,2,MA,MB,CID).
 iknows(scrypt(SK,pair(pair(SA,Ni),exp(G,DHX)))).
 witness(A,B,ni,Ni)

step step_1 (A,B,G,F,SK,Ni,SA,DHX,Dummy_Nr,Dummy_KEr,Dummy_CSK,Dummy_MA,MB,Nr,KEr,MA,CID) :=
 state_Alice(A,B,G,F,SK,Ni,SA,DHX,Dummy_Nr,Dummy_KEr,Dummy_CSK,2,Dummy_MA,MB,CID).
 iknows(scrypt(SK,pair(pair(SA,Nr),KEr)))
=[exists MA]=>
 state_Alice(A,B,G,F,SK,Ni,SA,DHX,Nr,KEr,apply(F,pair(pair(pair(Ni,Nr),SA),exp(KEr,DHX))),4,MA,MB,CID).
 iknows(scrypt(apply(F,pair(pair(pair(Ni,Nr),SA),exp(KEr,DHX))),pair(MA,0)))

step step_2 (A,B,G,F,SK,Ni,SA,DHX,Nr,KEr,CSK,MA,Dummy_MB,MB,CID) :=
 state_Alice(A,B,G,F,SK,Ni,SA,DHX,Nr,KEr,CSK,4,MA,Dummy_MB,CID).
 iknows(scrypt(CSK,pair(MB,1)))
 =>
 state_Alice(A,B,G,F,SK,Ni,SA,DHX,Nr,KEr,CSK,6,MA,MB,CID)

step step_3 (B,A,G,F,SK,Dummy_Ni,Dummy_SA,Dummy_Nr,Dummy_DHY,Dummy_KEi,Dummy_CSK,MA,MB,Ni,SA,Nr,DHY,KEi,CID) :=
 state_Bob(B,A,G,F,SK,Dummy_Ni,Dummy_SA,Dummy_Nr,Dummy_DHY,Dummy_KEi,Dummy_CSK,1,MA,MB,CID).
 iknows(scrypt(SK,pair(pair(SA,Ni),KEi)))
=[exists DHY,Nr]=>
 state_Bob(B,A,G,F,SK,Ni,SA,Nr,DHY,KEi,apply(F,pair(pair(pair(Ni,Nr),SA),exp(KEi,DHY))),3,MA,MB,CID).
 iknows(scrypt(SK,pair(pair(SA,Nr),exp(G,DHY))))

step step_4 (B,A,G,F,SK,Ni,SA,Nr,DHY,KEi,CSK,Dummy_MA,Dummy_MB,MA,MB,CID) :=
 state_Bob(B,A,G,F,SK,Ni,SA,Nr,DHY,KEi,CSK,3,Dummy_MA,Dummy_MB,CID).
 iknows(scrypt(CSK,pair(MA,0)))
=[exists MB]=>
 state_Bob(B,A,G,F,SK,Ni,SA,Nr,DHY,KEi,CSK,5,MA,MB,CID).
 iknows(scrypt(CSK,pair(MB,1))).
 request(B,A,ni,Ni,CID)


section goals:

goal authenticate_Ni (A,B,Ni,CID) :=
 request(B,A,ni,Ni,CID).
 not(witness(A,B,ni,Ni)) &
 not(equal(A,i))
goal replay_protection_Ni (A,B,Ni,CID1,CID2) :=
 request(B,A,ni,Ni,CID1).
 request(B,A,ni,Ni,CID2) &
 not(equal(CID1,CID2)) &
 not(equal(A,i))


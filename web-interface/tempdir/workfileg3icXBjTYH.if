%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileg3icXBjTYH

section signature:

state_gateway: agent * agent * agent * text * text * text * text * symmetric_key * symmetric_key * hash_func * hash_func * nat * text * text * text * text * text * text * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * message * message * message * message * message * set(agent) * nat -> fact
state_sensor: agent * agent * agent * symmetric_key * text * hash_func * nat * text * text * symmetric_key * symmetric_key * symmetric_key * message * message * message * nat -> fact
state_user: agent * agent * agent * symmetric_key * symmetric_key * text * text * text * text * hash_func * nat * text * text * text * text * message * message * message * symmetric_key * symmetric_key * symmetric_key * nat -> fact


section types:

set_157, set_150: set
State, 9, 8, 3, 1, 5, SID, 4, 2, 0, Dummy_State, SID2, SID1: nat
Set_89, Dummy_Set_89, ASGoal: set(agent)
V4, V1, V2, V3, AIDu, Dummy_V2, Dummy_V3, Dummy_V4, Dummy_V1, Dummy_AIDu, start, dummy_msg, MGoal: message
sk, user_sensor_sk, user_gateway_kug, gateway_sensor_kgs: protocol_id
Add, Hash, hashh, addh: hash_func
TSugnew, TS, Nx, Nu, T, T2, TSug, M, IDu, SNid, Dummy_M, Dummy_T2, Dummy_T, Dummy_TS, Dummy_TSugnew, Dummy_TSug, Dummy_Nx, Dummy_Nu, dummy_nonce, PSWu: text
SK, SK2, SK3, Kugnew, Kgsnew, Kug, Kgs, Dummy_Kgsnew, Dummy_SK2, Dummy_Kgs, Dummy_SK3, Dummy_SK, Dummy_Kugnew, Dummy_Kug, dummy_sk, kug, kgs, Kug2: symmetric_key
GATEWAY, USER, SENSOR, gateway, sensor, A2Goal, A1Goal, user, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(i).
 state_user(user,sensor,gateway,kug,dummy_sk,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,hashh,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_sk,dummy_sk,dummy_sk,3).
 state_sensor(sensor,user,gateway,kgs,dummy_nonce,hashh,2,dummy_nonce,dummy_nonce,dummy_sk,dummy_sk,dummy_sk,dummy_msg,dummy_msg,dummy_msg,4).
 state_gateway(gateway,user,sensor,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,kug,kgs,addh,hashh,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_150,5).
 state_sensor(sensor,i,gateway,kgs,dummy_nonce,hashh,2,dummy_nonce,dummy_nonce,dummy_sk,dummy_sk,dummy_sk,dummy_msg,dummy_msg,dummy_msg,8).
 state_gateway(gateway,i,sensor,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,kug,kgs,addh,hashh,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_sk,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_157,9)


section rules:

step step_0 (USER,SENSOR,GATEWAY,Kug,Kug2,IDu,SNid,TSug,PSWu,Hash,Dummy_Nu,Dummy_Nx,TSugnew,TS,Dummy_AIDu,Dummy_V1,V4,Kugnew,SK,SK3,SID,Nu) :=
 state_user(USER,SENSOR,GATEWAY,Kug,Kug2,IDu,SNid,TSug,PSWu,Hash,0,Dummy_Nu,Dummy_Nx,TSugnew,TS,Dummy_AIDu,Dummy_V1,V4,Kugnew,SK,SK3,SID).
 iknows(start)
=[exists Nu]=>
 state_user(USER,SENSOR,GATEWAY,Kug,Kug2,IDu,SNid,TSug,PSWu,Hash,4,Nu,xor(Kug,Dummy_Nu),TSugnew,TS,apply(Hash,pair(IDu,pair(Kug,pair(Dummy_Nu,TSug)))),apply(Hash,pair(Dummy_AIDu,pair(Kug,pair(Dummy_Nx,SNid)))),V4,Kugnew,SK,SK3,SID).
 iknows(pair(Dummy_AIDu,pair(Dummy_Nx,pair(TSug,pair(SNid,Dummy_V1)))))

step step_1 (USER,SENSOR,GATEWAY,Dummy_Kug,Kug2,IDu,SNid,Dummy_TSug,PSWu,Hash,Nu,Nx,Dummy_TSugnew,Dummy_TS,AIDu,V1,Dummy_V4,Dummy_Kugnew,Dummy_SK,Dummy_SK3,SID,TS,V4,SK3) :=
 state_user(USER,SENSOR,GATEWAY,Dummy_Kug,Kug2,IDu,SNid,Dummy_TSug,PSWu,Hash,4,Nu,Nx,Dummy_TSugnew,Dummy_TS,AIDu,V1,Dummy_V4,Dummy_Kugnew,Dummy_SK,Dummy_SK3,SID).
 iknows(pair(SK3,pair(V4,TS)))
 =>
 state_user(USER,SENSOR,GATEWAY,Dummy_Kugnew,Kug2,IDu,SNid,Dummy_TSugnew,PSWu,Hash,5,Nu,Nx,xor(apply(Hash,pair(Dummy_Kug,pair(IDu,Nu))),Dummy_TS),TS,AIDu,V1,V4,apply(Hash,pair(Dummy_Kug,pair(IDu,Dummy_TSugnew))),xor(apply(Hash,pair(Dummy_Kug,pair(IDu,Nu))),Dummy_SK3),SK3,SID).
 request(USER,SENSOR,user_sensor_sk,xor(apply(Hash,pair(Dummy_Kug,pair(IDu,Nu))),Dummy_SK3),SID)

step step_2 (SENSOR,USER,GATEWAY,Dummy_Kgs,SNid,Hash,Dummy_T,Dummy_T2,Dummy_SK,Dummy_SK2,Kgsnew,Dummy_V3,Dummy_V2,Dummy_AIDu,SID,T,T2,SK2,V2,AIDu) :=
 state_sensor(SENSOR,USER,GATEWAY,Dummy_Kgs,SNid,Hash,2,Dummy_T,Dummy_T2,Dummy_SK,Dummy_SK2,Kgsnew,Dummy_V3,Dummy_V2,Dummy_AIDu,SID).
 iknows(pair(AIDu,pair(SK2,pair(T,V2))))
=[exists T2]=>
 state_sensor(SENSOR,USER,GATEWAY,apply(Hash,pair(Dummy_Kgs,SNid)),SNid,Hash,3,T,T2,xor(apply(Hash,Dummy_Kgs),Dummy_SK2),SK2,Kgsnew,apply(Hash,pair(Dummy_SK,pair(Dummy_Kgs,pair(SNid,Dummy_T2)))),V2,AIDu,SID).
 iknows(pair(Dummy_T2,pair(SNid,Dummy_V3)))

step step_3 (GATEWAY,USER,SENSOR,TSug,M,IDu,SNid,Kug,Kgs,Add,Hash,TSugnew,TS,Dummy_Nx,Dummy_Nu,Dummy_T,T2,Dummy_SK,Dummy_SK2,SK3,Kugnew,Kgsnew,V4,Dummy_V1,Dummy_V2,V3,Dummy_AIDu,Dummy_Set_89,SID,Nx,T,SK,V1,AIDu) :=
 state_gateway(GATEWAY,USER,SENSOR,TSug,M,IDu,SNid,Kug,Kgs,Add,Hash,1,TSugnew,TS,Dummy_Nx,Dummy_Nu,Dummy_T,T2,Dummy_SK,Dummy_SK2,SK3,Kugnew,Kgsnew,V4,Dummy_V1,Dummy_V2,V3,Dummy_AIDu,Dummy_Set_89,SID).
 iknows(pair(AIDu,pair(Nx,pair(TSug,pair(SNid,V1)))))
=[exists T,SK]=>
 state_gateway(GATEWAY,USER,SENSOR,TSug,M,IDu,SNid,Kug,Kgs,Add,Hash,3,TSugnew,TS,Nx,xor(Kug,Dummy_Nx),T,T2,SK,xor(apply(Hash,Kgs),Dummy_SK),SK3,Kugnew,Kgsnew,V4,V1,apply(Hash,pair(Dummy_AIDu,pair(Dummy_SK2,pair(Dummy_T,Kgs)))),V3,AIDu,Dummy_Set_89,SID).
 iknows(pair(Dummy_AIDu,pair(Dummy_SK2,pair(Dummy_T,Dummy_V2)))).
 secret(SK,sk,Dummy_Set_89).
 witness(USER,SENSOR,user_sensor_sk,SK).
 contains(USER,Dummy_Set_89).
 contains(GATEWAY,Dummy_Set_89).
 contains(SENSOR,Dummy_Set_89)

step step_4 (GATEWAY,USER,SENSOR,Dummy_TSug,Dummy_M,IDu,SNid,Dummy_Kug,Dummy_Kgs,Add,Hash,Dummy_TSugnew,Dummy_TS,Nx,Nu,T,Dummy_T2,SK,SK2,Dummy_SK3,Dummy_Kugnew,Dummy_Kgsnew,Dummy_V4,V1,V2,Dummy_V3,AIDu,Set_89,SID,T2,V3) :=
 state_gateway(GATEWAY,USER,SENSOR,Dummy_TSug,Dummy_M,IDu,SNid,Dummy_Kug,Dummy_Kgs,Add,Hash,3,Dummy_TSugnew,Dummy_TS,Nx,Nu,T,Dummy_T2,SK,SK2,Dummy_SK3,Dummy_Kugnew,Dummy_Kgsnew,Dummy_V4,V1,V2,Dummy_V3,AIDu,Set_89,SID).
 iknows(pair(T2,pair(SNid,V3)))
 =>
 state_gateway(GATEWAY,USER,SENSOR,Dummy_TSugnew,apply(Add,Dummy_M),IDu,SNid,Dummy_Kugnew,Dummy_Kgsnew,Add,Hash,5,Dummy_M,xor(apply(Hash,pair(Dummy_Kug,pair(IDu,Nu))),Dummy_TSugnew),Nx,Nu,T,T2,SK,SK2,xor(apply(Hash,pair(Dummy_Kug,pair(IDu,Nu))),SK),apply(Hash,pair(Dummy_Kug,pair(IDu,Dummy_TSugnew))),apply(Hash,pair(Dummy_Kgs,SNid)),apply(Hash,pair(Dummy_SK3,pair(Nu,pair(Dummy_TS,Dummy_Kug)))),V1,V2,V3,AIDu,Set_89,SID).
 iknows(pair(Dummy_SK3,pair(Dummy_V4,Dummy_TSug)))


section properties:

property secrecy_of_sk (MGoal,ASGoal) :=
 [] ((secret(MGoal,sk,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_user_sensor_sk (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,user_sensor_sk,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,user_sensor_sk,MGoal))
     /\ ((request(A1Goal,A2Goal,user_sensor_sk,MGoal,SID1)
           /\ request(A1Goal,A2Goal,user_sensor_sk,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sk (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sk,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_user_sensor_sk (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,user_sensor_sk,MGoal,SID) &
 not(witness(A2Goal,A1Goal,user_sensor_sk,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_user_sensor_sk (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,user_sensor_sk,MGoal,SID1).
 request(A1Goal,A2Goal,user_sensor_sk,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


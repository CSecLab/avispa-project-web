%

role user (U, S : agent,
SKus : symmetric_key,
H : hash_func,
Snd, Rcv: channel(dy))


played_by U
def=
local State : nat,
Pwi, Ni, Y,Na,CID,Bi,Ci,Nb,Ack,Ni_new,Pwi_new: text
const subs1,subs2,user_server_na,server_user_nb : protocol_id
init 
State := 0

transition
1. State = 0 /\Rcv(start) =|>
State' := 2 /\Pwi' := new()
/\Snd({Pwi'}_SKus)
/\secret({Pwi'}, subs1, {U,S})
/\secret({SKus}, subs2, {U,S})

2.State = 2 /\Rcv({Pwi.H.Ni'.Y'}_SKus)
=|>State':= 4

3.State=4 /\Rcv({Pwi'.H.Ni'.Y'}_SKus)=|>
State':=6
/\Na':=new()
/\witness(U,S,user_server_na,Na')  % User U has freshly generated the value Na for server S
/\CID':=xor(H(Pwi'),H(xor(Ni',xor(Y',Na'))))
/\Bi':=H(xor(CID',H(Pwi)))
/\Ci':=H(xor(Na',xor(Ni',xor(Bi',Y'))))
/\Snd(CID'.Ni'.Ci'.Na')

%%%%%%%%%%%%%%%password updation
4.State=6=|>
State':=8
/\Pwi_new':=new()
/\Ni_new':=xor(Ni',xor(H(Pwi),H(Pwi_new')))
/\Ni':=Ni_new'
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role server (U, S : agent,
SKus : symmetric_key,
H: hash_func,
Snd, Rcv: channel(dy))

played_by S
def=
local 
State : nat,
Pwi, Ni, Y,X,Na,CID,Bi,Ci,Nb,HPwi,Ack: text
const subs1,subs2,user_server_na,server_user_nb : protocol_id
init State := 1
transition
1. State = 1 /\Rcv({Pwi'}_SKus) =|> %%Rcv means message is received on a channel Rcv It speciﬁes that if the value of State is equal to one and a message is received on channel Rcv which contains some value Kab’ encrypted with SKus
State':=3
/\X':=new()
/\secret(X',subs1,{S})
/\Y':=new()
/\secret(Y',subs2,{U,S})
/\Ni':=xor(Pwi',X')
/\Snd({Pwi'.H.Ni'.Y'}_SKus)
2.State=3/\Rcv(CID'.Ni'.Ci'.Na')=|>
State':=5
/\Nb':=new()

%/\H(Pwi'):=xor(CID',H(Ni',xor(Y1,Na')))
%/\Bi':=H(xor(CID',H(Pwi')))
%/\Ci':=H(xor(Na',xor(Ni',xor(Bi',Y'))))
/\request(S,U,user_server_na,Na') % Server acceptance of value that was generated by User U
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role session(U, S : agent)
def=
local 
SKus : symmetric_key,
H : hash_func,
SU,SS,RU,RS:channel(dy),
Pwi, X,Y,Ni: text
const subs1,subs2 : protocol_id
composition
user(U,S,SKus,H,SU,RU)
/\server(U,S,SKus,H,SS,RS)
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role environment ()
def=
const u,s : agent,
h: hash_func,
subs1,subs2,user_server_na,server_user_nb : protocol_id


intruder_knowledge={u,s,h}
composition
session(u,s)
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
goal
	secrecy_of subs1
	secrecy_of subs2
	authentication_on user_server_na
	authentication_on server_user_nb
end goal
environment()

%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfile7DEhfq

section signature:

state_server: agent * agent * text * text * message * message * hash_func * symmetric_key * nat * text * message * message * message * message * message * message * message * message * set(agent) * nat -> fact
state_alice: agent * agent * text * text * message * message * hash_func * symmetric_key * nat * text * message * message * message * message * message * message * message * message * set(agent) * nat -> fact


section types:

sec_s_Kas, na, np, sec_c_Kas: protocol_id
set_96, set_95, set_94, set_114: set
kas, Kas: symmetric_key
h, Hash: hash_func
ASGoal, Set_63, Set_34, Dummy_Set_63, Dummy_Set_34: set(agent)
3, SID, SID2, SID1, State, 6, 5, 4, 1, 2, 0, Dummy_State: nat
A2Goal, A1Goal, a, s, S, A, i: agent
dummy_msg, MGoal, b, c, B1, B2, B3, B4, B5, C1, C2, C3, B, C, start, D1, Dummy_B4, D2, Dummy_B3, D3, Dummy_B2, D4, Dummy_B1, D5, Dummy_C, Dummy_D5, Dummy_D4, Dummy_D3, Dummy_D2, Dummy_D1, Dummy_C3, Dummy_C2, Dummy_C1, Dummy_B: message
dummy_nonce, password, login, N, Password, Login, Dummy_N, Dummy_Password: text


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(s).
 iknows(h).
 iknows(b).
 iknows(c).
 iknows(i).
 state_alice(a,s,password,login,b,c,h,kas,0,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_96,3).
 state_server(s,a,password,login,b,c,h,kas,0,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_114,4)


section rules:

step step_0 (A,S,Dummy_Password,Login,Dummy_B,C,Hash,Kas,N,C1,C2,C3,D1,D2,D3,D4,D5,Dummy_Set_34,SID,Password) :=
 state_alice(A,S,Dummy_Password,Login,Dummy_B,C,Hash,Kas,0,N,C1,C2,C3,D1,D2,D3,D4,D5,Dummy_Set_34,SID).
 iknows(start)
=[exists Password]=>
 state_alice(A,S,Password,Login,xor(Dummy_Password,1),C,Hash,Kas,2,N,C1,C2,C3,D1,D2,D3,D4,D5,Dummy_Set_34,SID).
 iknows(Set_33).
 secret(Dummy_Password,sec_c_Kas,Dummy_Set_34).
 witness(A,S,np,Dummy_Password).
 contains(apply(Hash,apply(Hash,xor(Dummy_Password,1))),Set_32).
 contains(pair(A,Set_32),Set_33).
 contains(A,Dummy_Set_34).
 contains(S,Dummy_Set_34)

step step_1 (A,S,Password,Login,B,C,Hash,Kas,N,C1,C2,C3,D1,D2,D3,D4,D5,Set_34,SID) :=
 state_alice(A,S,Password,Login,B,C,Hash,Kas,4,N,C1,C2,C3,D1,D2,D3,D4,D5,Set_34,SID).
 iknows(Login)
 =>
 state_alice(A,S,Password,Login,B,C,Hash,Kas,5,N,C1,C2,C3,D1,D2,D3,D4,D5,Set_34,SID)

step step_2 (A,S,Password,Login,B,C,Hash,Kas,Dummy_N,Dummy_C1,Dummy_C2,Dummy_C3,Dummy_D1,Dummy_D2,Dummy_D3,Dummy_D4,Dummy_D5,Set_34,SID,N) :=
 state_alice(A,S,Password,Login,B,C,Hash,Kas,4,Dummy_N,Dummy_C1,Dummy_C2,Dummy_C3,Dummy_D1,Dummy_D2,Dummy_D3,Dummy_D4,Dummy_D5,Set_34,SID).
 iknows(Dummy_N)
=[exists N]=>
 state_alice(A,S,Password,Login,B,C,Hash,Kas,6,N,xor(apply(Hash,xor(Password,N)),apply(Hash,apply(Hash,xor(Password,N)))),xor(apply(Hash,apply(Hash,xor(Password,xor(N,1)))),apply(Hash,xor(Password,N))),apply(Hash,apply(Hash,apply(Hash,xor(Password,xor(N,1))))),apply(Hash,xor(Password,N)),apply(Hash,apply(Hash,xor(Password,N))),apply(Hash,apply(Hash,xor(Password,xor(N,1)))),apply(Hash,xor(Password,N)),apply(Hash,xor(Password,xor(N,1))),Set_34,SID).
 iknows(pair(xor(apply(Hash,xor(Password,N)),apply(Hash,apply(Hash,xor(Password,N)))),pair(xor(apply(Hash,apply(Hash,xor(Password,xor(N,1)))),apply(Hash,xor(Password,N))),apply(Hash,apply(Hash,apply(Hash,xor(Password,xor(N,1)))))))).
 request(A,S,na,Dummy_N,SID)

step step_3 (S,A,Password,Login,B,Dummy_C,Hash,Kas,N,B1,B2,B3,B4,B5,C1,C2,C3,Dummy_Set_63,SID) :=
 state_server(S,A,Password,Login,B,Dummy_C,Hash,Kas,1,N,B1,B2,B3,B4,B5,C1,C2,C3,Dummy_Set_63,SID).
 iknows(pair(A,apply(Hash,apply(Hash,xor(Password,1)))))
 =>
 state_server(S,A,Password,Login,B,apply(Hash,apply(Hash,xor(Password,1))),Hash,Kas,2,N,B1,B2,B3,B4,B5,C1,C2,C3,Dummy_Set_63,SID).
 secret(Password,sec_s_Kas,Dummy_Set_63).
 request(S,A,np,Password,SID).
 contains(A,Dummy_Set_63).
 contains(S,Dummy_Set_63)

step step_4 (S,A,Password,Login,B,C,Hash,Kas,Dummy_N,B1,B2,B3,B4,B5,C1,C2,C3,Set_63,SID,N) :=
 state_server(S,A,Password,Login,B,C,Hash,Kas,3,Dummy_N,B1,B2,B3,B4,B5,C1,C2,C3,Set_63,SID).
 iknows(Login)
=[exists N]=>
 state_server(S,A,Password,Login,B,C,Hash,Kas,5,N,B1,B2,B3,B4,B5,C1,C2,C3,Set_63,SID).
 iknows(N).
 witness(S,A,na,Dummy_N)

step step_5 (S,A,Password,Login,B,Dummy_C,Hash,Kas,Dummy_N,Dummy_B1,Dummy_B2,Dummy_B3,Dummy_B4,B5,Dummy_C1,Dummy_C2,Set_63,SID,C1,C2,C3) :=
 state_server(S,A,Password,Login,B,Dummy_C,Hash,Kas,5,Dummy_N,Dummy_B1,Dummy_B2,Dummy_B3,Dummy_B4,B5,Dummy_C1,Dummy_C2,apply(Hash,apply(Hash,xor(Password,xor(Dummy_N,1)))),Set_63,SID).
 iknows(pair(C1,pair(C2,C3))) &
 not(equal(C1,C2))
 =>
 state_server(S,A,Password,Login,B,apply(Hash,apply(Hash,xor(Password,xor(Dummy_N,1)))),Hash,Kas,6,xor(N,1),apply(Hash,xor(Password,Dummy_N)),xor(C1,apply(Hash,apply(Hash,xor(Password,Dummy_N)))),apply(Hash,apply(Hash,xor(Password,xor(Dummy_N,1)))),xor(C2,apply(Hash,xor(Password,Dummy_N))),B5,C1,C2,C3,Set_63,SID)


section properties:

property secrecy_of_sec_c_Kas (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_c_Kas,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_s_Kas (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_s_Kas,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_np (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,np,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,np,MGoal))
     /\ ((request(A1Goal,A2Goal,np,MGoal,SID1)
           /\ request(A1Goal,A2Goal,np,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_na (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,na,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,na,MGoal))
     /\ ((request(A1Goal,A2Goal,na,MGoal,SID1)
           /\ request(A1Goal,A2Goal,na,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sec_c_Kas (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_c_Kas,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_s_Kas (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_s_Kas,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_np (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,np,MGoal,SID) &
 not(witness(A2Goal,A1Goal,np,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_np (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,np,MGoal,SID1).
 request(A1Goal,A2Goal,np,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_na (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,na,MGoal,SID) &
 not(witness(A2Goal,A1Goal,na,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_na (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,na,MGoal,SID1).
 request(A1Goal,A2Goal,na,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


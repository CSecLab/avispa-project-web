%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfile1KYYjE

section signature:

state_tokenendpoint: agent * agent * agent * text * symmetric_key * symmetric_key * protocol_id * protocol_id * nat * text * text * set(agent) * nat -> fact
state_openidprovider: agent * agent * agent * text * text * symmetric_key * protocol_id * protocol_id * nat * text * text * set(agent) * set(agent) * nat -> fact


section types:

rokey, rtkey, rikey, cskey, RTKey, CSKey, ROKey: symmetric_key
set_125, set_115, set_114, set_112, set_111, set_110: set
clientid, uri, Code, IdToken, URI, Stat, ClientId, Dummy_IdToken, Dummy_Stat, Dummy_Code, Dummy_URI, Dummy_ClientId, dummy_nonce: text
Set_67, Set_52, Set_51, Set_32, Set_30, Dummy_Set_67, Set_27, Dummy_Set_52, Dummy_Set_51, ASGoal: set(agent)
start, MGoal: message
State, 3, 2, 5, SID, 1, 0, Dummy_State, 4, SID2, SID1: nat
rp, op, te, TE, RP, OP, A2Goal, A1Goal, i: agent
tokenreq, tokenres, auth_4, auth_3, TokenReq, TokenRes, auth_2, auth_1, AuthReq, AuthRes, sec_1, authreq, authres: protocol_id


section inits:

initial_state init1 := 
 iknows(start).
 iknows(rp).
 iknows(op).
 iknows(te).
 iknows(rikey).
 iknows(i).
 state_openidprovider(op,i,te,clientid,uri,rikey,authreq,authres,0,dummy_nonce,dummy_nonce,set_114,set_115,4).
 state_tokenendpoint(te,i,op,uri,rikey,cskey,tokenreq,tokenres,0,dummy_nonce,dummy_nonce,set_125,5)


section rules:

step step_0 (OP,RP,TE,Dummy_ClientId,Dummy_URI,ROKey,AuthReq,AuthRes,Dummy_Code,Dummy_Stat,Dummy_Set_51,Dummy_Set_52,SID,ClientId,URI,Code,Stat) :=
 state_openidprovider(OP,RP,TE,Dummy_ClientId,Dummy_URI,ROKey,AuthReq,AuthRes,0,Dummy_Code,Dummy_Stat,Dummy_Set_51,Dummy_Set_52,SID).
 iknows(scrypt(ROKey,pair(AuthReq,pair(ClientId,pair(Stat,URI)))))
=[exists Code]=>
 state_openidprovider(OP,RP,TE,ClientId,URI,ROKey,AuthReq,AuthRes,1,Code,Stat,Dummy_Set_51,Dummy_Set_52,SID).
 witness(OP,RP,auth_1,ClientId).
 witness(OP,RP,auth_2,URI).
 secret(Stat,sec_1,Dummy_Set_51).
 secret(Code,sec_2,Dummy_Set_52).
 iknows(scrypt(ROKey,pair(AuthRes,pair(Code,Stat)))).
 contains(RP,Dummy_Set_51).
 contains(OP,Dummy_Set_51).
 contains(RP,Dummy_Set_52).
 contains(OP,Dummy_Set_52)

step step_1 (TE,RP,OP,Dummy_URI,RTKey,CSKey,TokenReq,TokenRes,Dummy_Code,Dummy_IdToken,Dummy_Set_67,SID,URI,Code,IdToken) :=
 state_tokenendpoint(TE,RP,OP,Dummy_URI,RTKey,CSKey,TokenReq,TokenRes,0,Dummy_Code,Dummy_IdToken,Dummy_Set_67,SID).
 iknows(scrypt(RTKey,pair(TokenReq,pair(Code,URI))))
=[exists IdToken]=>
 state_tokenendpoint(TE,RP,OP,URI,RTKey,CSKey,TokenReq,TokenRes,1,Code,IdToken,Dummy_Set_67,SID).
 secret(Code,sec_2,Dummy_Set_67).
 witness(TE,RP,auth_3,Code).
 witness(OP,RP,auth_4,URI).
 iknows(scrypt(RTKey,pair(TokenRes,scrypt(CSKey,IdToken)))).
 contains(RP,Dummy_Set_67).
 contains(OP,Dummy_Set_67)


section properties:

property authentication_on_auth_1 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth_1,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth_1,MGoal))
     /\ ((request(A1Goal,A2Goal,auth_1,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth_1,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_auth_2 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth_2,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth_2,MGoal))
     /\ ((request(A1Goal,A2Goal,auth_2,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth_2,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_auth_3 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth_3,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth_3,MGoal))
     /\ ((request(A1Goal,A2Goal,auth_3,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth_3,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_auth_4 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth_4,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth_4,MGoal))
     /\ ((request(A1Goal,A2Goal,auth_4,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth_4,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property secrecy_of_sec_1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state authentication_on_auth_1 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth_1,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_1,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth_1 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth_1,MGoal,SID1).
 request(A1Goal,A2Goal,auth_1,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_auth_2 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth_2,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_2,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth_2 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth_2,MGoal,SID1).
 request(A1Goal,A2Goal,auth_2,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_auth_3 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth_3,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_3,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth_3 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth_3,MGoal,SID1).
 request(A1Goal,A2Goal,auth_3,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_auth_4 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth_4,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_4,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth_4 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth_4,MGoal,SID1).
 request(A1Goal,A2Goal,auth_4,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state secrecy_of_sec_1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_2,ASGoal) &
 not(contains(i,ASGoal))


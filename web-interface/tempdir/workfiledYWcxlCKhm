role alice( A,S,B 						:agent,
			Ka,Kb     					:symmetric_key,
			SND_AS,RCV_AS,SND_AB,RCV_AB :channel(dy))
	played_by A def=
		local State 	: nat,
				Na,Ns,Nb:text,
				K		:message
		init State:=0
		transition
			1. State=0 /\ RCV(start)=|>
				State':=2/\ Na':=new()
						/\SND_AS(A.B.{Na'}_Ka)
			2. State=2 /\RCV_AS(A.B.{K'.Na.Ns'}_Ka.{K'.Na.Ns'}_Kb)=|>
				State':=4/\SND_AB(A.B.{K'.Na.Ns'}_Kb.{Na.Ns}_K')
			3. State=4/\ RCV_AB(A.B.{Ns.Na}_K')=|>
				State':=6/\request(A,B,alice_bob_na,Na)
end role

role server( A,S,B 		  :agent,
			Ka,Kb     	  :symmetric_key,
			SND_AS,RCV_AS :channel(dy))
	played_by S def=
		local State 	: nat,
			  Na,Ns,Nb:text,
			  K		:message
		init State:=1
		transition
			1. State=1/\RCV_AS(A.B.{Na'}_K)=|>
				State':=3/\K':=new()
						/\SND_AS(A.B.{K'.Na'.Ns'}_Ka.{K'.Na'.Ns'}_Kb)
						/\secret(K',k,{A,S,B})
end role

role bob( A,S,B 		  :agent,
			Ka,Kb     	  :symmetric_key,
			SND_AB,RCV_AB :channel(dy))
	played_by B def=
		local State 	: nat,
				Na,Ns,Nb:text,
				K		:message
		init State:=5
		transition
			1. State=5/\RCV_AB(A.B.{K'.Na'.Ns'}_Kb.{Na'.Ns'}_K')=|>
				State':=7/\SND_AB(A.B.{Ns'.Na'}_K')
						/\witness(B,A,alice_bob_na,Na')

end role

role session(A,S,B: agent,
			 Ka,Kb: symmetric_key)
	def=
		local SAB,RAB,SAS,RAS,SBA,RBA,SSA,RSA:channel(dy)
		composition alice(A,S,B,Ka,Kb,SAS,RAS,SAB,RAB)
					/\server(A,S,B,Ka,Kb,SSA,RSA)
					/\bob(A,S,B,Kb,SBA,RBA)
end role

role environment()
	def=
	const 	a,b,s :agent,
			alice_bob_na,k:protocol_id,
			ka,kb,ki: symmetric_key
	intuder_knowledge={a,b,s,ki}
	composition session(a,s,b,ka,kb)
				/\session(a,s,i,ka,ki)
				/\session(i,s,b,ki,kb)
end role

goal
	secrecy_of k
	authentication_on alice_bob_na
end goal

environment()
						
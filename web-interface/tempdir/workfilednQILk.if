%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilednQILk

section signature:

state_responder: agent * agent * hash_func * hash_func * nat * text * text * text * text * text * text * text * text * text * set(text) * nat -> fact
state_initiator: agent * agent * hash_func * hash_func * nat * text * text * text * text * text * text * text * text * set(text) * nat -> fact


section types:

ASGoal: set(agent)
MGoal, start: message
s1, s2, s3: protocol_id
Dummy_MACTEXT, TC, R, T, Dummy_V, U, Dummy_T, TPrime, IPrime, V, MACTEXT, V2, dummy_nonce, tc, r, t, u, tprime, iprime, v, macval, v2: text
HSH, MAC, h, mac: hash_func
4, SID, Dummy_State, 3, State, SID2, SID1, 2, 1, 0, 7, 6: nat
A2Goal, A1Goal, Client, AP, client, ap, i: agent
set_96, set_89, set_103, set_101: set
Set_47, Dummy_Set_26, Set_26, Dummy_Set_47: set(text)


section inits:

initial_state init1 := 
 iknows(start).
 iknows(i).
 state_initiator(client,ap,h,mac,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_89,3).
 state_responder(ap,client,h,mac,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_96,4).
 state_initiator(client,ap,h,mac,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_101,6).
 state_responder(ap,client,h,mac,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_103,7)


section rules:

step step_0 (Client,AP,HSH,MAC,TC,R,Dummy_T,U,TPrime,IPrime,Dummy_V,MACTEXT,Dummy_Set_26,SID,T) :=
 state_initiator(Client,AP,HSH,MAC,0,TC,R,Dummy_T,U,TPrime,IPrime,Dummy_V,MACTEXT,Dummy_Set_26,SID).
 iknows(start)
=[exists T]=>
 state_initiator(Client,AP,HSH,MAC,1,TC,R,T,U,TPrime,IPrime,apply(HSH,pair(pair(TC,R),Dummy_T)),MACTEXT,Dummy_Set_26,SID).
 iknows(pair(Dummy_V,pair(U,pair(TC,pair(TPrime,IPrime))))).
 secret(Dummy_Set_26,s2,Client).
 contains(T,Dummy_Set_26)

step step_1 (Client,AP,HSH,MAC,TC,R,T,U,TPrime,IPrime,V,MACTEXT,Set_26,SID) :=
 state_initiator(Client,AP,HSH,MAC,1,TC,R,T,U,TPrime,IPrime,V,MACTEXT,Set_26,SID).
 iknows(MACTEXT)
 =>
 state_initiator(Client,AP,HSH,MAC,2,TC,R,T,U,TPrime,IPrime,V,MACTEXT,Set_26,SID).
 request(AP,Client,s3,MACTEXT,SID)

step step_2 (AP,Client,HSH,MAC,TC,R,Dummy_T,U,TPrime,IPrime,Dummy_V,Dummy_MACTEXT,V2,Dummy_Set_47,SID,T,V) :=
 state_responder(AP,Client,HSH,MAC,0,TC,R,Dummy_T,U,TPrime,IPrime,Dummy_V,Dummy_MACTEXT,V2,Dummy_Set_47,SID).
 iknows(pair(Dummy_V,pair(U,pair(TC,pair(TPrime,IPrime)))))
=[exists T,V]=>
 state_responder(AP,Client,HSH,MAC,1,TC,R,T,U,TPrime,IPrime,V,apply(MAC,Dummy_V),V2,Dummy_Set_47,SID).
 secret(Dummy_Set_47,s1,AP).
 iknows(Dummy_MACTEXT).
 witness(Client,AP,s3,Dummy_MACTEXT).
 contains(T,Dummy_Set_47)


section properties:

property secrecy_of_s1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,s1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_s2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,s2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_s3 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,s3,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,s3,MGoal))
     /\ ((request(A1Goal,A2Goal,s3,MGoal,SID1)
           /\ request(A1Goal,A2Goal,s3,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_s1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,s1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_s2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,s2,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_s3 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,s3,MGoal,SID) &
 not(witness(A2Goal,A1Goal,s3,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_s3 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,s3,MGoal,SID1).
 request(A1Goal,A2Goal,s3,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


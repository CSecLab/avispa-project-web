role reader ( R,T: agent, 
              ID,Rold, Rnew: text, 
              Fg,Phi : hash_func,
	          KG: public_key, 
              Snd,Rec: channel(dy))
    played_by R
    def=
      local  State  : nat,
             Nr, X, RN : text,
			 E: hash(text),
             DID,DNew : {text.text}_public_key      
      init State := 0 
      transition
       1. State = 0
          /\ Rec(start)  =|>  State' := 1 /\ Nr' := new() 
          /\ Snd(Nr') /\ witness(R,T,aut_reader,Nr')
	   % if CR= CRnew
       2. State = 1
          /\ Rec({DID}_E'.Fg(Nr.X'.DID)) =|> State' := 2 /\ RN':=new() 
		  /\ DNew':={ID.RN'}_KG  
		  /\ Snd(xor(DNew',E').Fg(Nr.DNew'.X')) /\ secret({DNew'},sec_did2, {R,T})        
          /\ request(R,T,aut_tag,X') /\ Rold':=Rnew /\ Rnew':=RN'
       % if CR= CRold
	   3. State = 1
          /\ Rec({DID}_E'.Fg(Nr.X'.DID)) =|> State' := 2 
		  /\ DNew':={ID.Rnew}_KG  
		  /\ Snd(xor(DNew',E').Fg(Nr.DNew'.X')) /\ secret({DNew'},sec_did2, {R,T})        
          /\ request(R,T,aut_tag,X')
end role

role tag ( T,R: agent, DID: {text.text}_public_key,
	       Fg,Phi : hash_func,
	       Snd,Rec: channel(dy))
    played_by T
    def=
      local  State  : nat,
             Nr, X, RN : text,
             E: hash(text),
			 DNew: {text.text}_public_key         
    init State := 0       
    transition
     1. State = 0 /\ Rec(Nr') =|> State' := 1
        /\ X' := new()  /\ E':=Phi(X')
        /\ Snd({DID}_E'.Fg(Nr'.X'.DID))
        /\ witness(T,R,aut_tag,X') /\ secret({DID},sec_did1, {T,R})        
     2. State = 1 /\ Rec(xor(DNew',E).Fg(Nr.DNew'.X'))
          =|> State' := 2       
        /\ request(T,R,aut_reader,Nr) /\ DID' := DNew'
end role

role session(R,T: agent, ID,Rinit: text, 
             Fg, Phi : hash_func, KG: public_key) 
def=
local Se,Re,Sf,Rf : channel(dy)
const aut_reader, aut_tag, sec_did1, sec_did2 : protocol_id
composition
tag(T,R,{ID.Rinit}_KG,Fg,Phi,Se,Re)
/\ reader(R,T,ID,Rinit,Rinit,Fg,Phi,KG, Sf,Rf)    
end role

role environment() def=
const t,r,i : agent, id,rinit,idit,idri: text,   
      g,phi : hash_func,
      kG,kGti,kGri: public_key
 
intruder_knowledge = {t,r,i,g,kG,phi,kGti,kGri,idit,idri}
composition
% To detection a replay attack: 
session(r,t,id,rinit,g,phi,kG)
/\ session(r,t,id,rinit,g,phi,kG)
/\ session(i,t,idit,rinit,g,phi,kGti)
/\ session(r,i,idri,rinit,g,phi,kGri)
end role

    goal
	 secrecy_of sec_did1 % confidentiality of DID
	 secrecy_of sec_did2 % confidentiality of DNew
	 authentication_on aut_reader % Reader's authentication 
     authentication_on aut_tag % Tag's authentication
    end goal

    environment()

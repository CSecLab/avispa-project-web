%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfile83i1f6

section signature:

state_role_Pa: agent * agent * agent * public_key * public_key * public_key * nat * text * text * nat -> fact
state_role_Pb: agent * agent * public_key * nat * public_key * text * nat -> fact
state_role_Pc: agent * agent * public_key * nat * public_key * text * nat -> fact


section types:

auth_2, auth_1: protocol_id
start, MGoal: message
Nc, Nb, Dummy_Nb, Dummy_Nc, dummy_nonce: text
State, 5, SID, 4, Dummy_State, 3, 1, 0, SID2, SID1: nat
S, Sc, Sb, Dummy_S, dummy_pk, secretc, secretb, secret: public_key
Pa, Pc, Pb, A2Goal, A1Goal, noeudc, noeudb, noeuda, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(i).
 state_role_Pc(noeudc,noeuda,secretc,0,dummy_pk,dummy_nonce,3).
 state_role_Pb(noeudb,noeuda,secretb,0,dummy_pk,dummy_nonce,4).
 state_role_Pa(noeuda,noeudb,noeudc,secret,secretb,secretc,0,dummy_nonce,dummy_nonce,5)


section rules:

step step_0 (Pc,Pa,Sc,Dummy_S,Dummy_Nc,SID,S,Nc) :=
 state_role_Pc(Pc,Pa,Sc,0,Dummy_S,Dummy_Nc,SID).
 iknows(crypt(S,pair(Nc,Pa)))
 =>
 state_role_Pc(Pc,Pa,Sc,1,S,Nc,SID)

step step_1 (Pb,Pa,Sb,Dummy_S,Dummy_Nb,SID,S,Nb) :=
 state_role_Pb(Pb,Pa,Sb,0,Dummy_S,Dummy_Nb,SID).
 iknows(crypt(S,pair(Nb,Pa)))
 =>
 state_role_Pb(Pb,Pa,Sb,1,S,Nb,SID).
 request(Pb,Pa,auth_1,Nb,SID)

step step_2 (Pa,Pb,Pc,S,Sb,Sc,Dummy_Nb,Dummy_Nc,SID,Nb,Nc) :=
 state_role_Pa(Pa,Pb,Pc,S,Sb,Sc,0,Dummy_Nb,Dummy_Nc,SID).
 iknows(start)
=[exists Nc,Nb]=>
 state_role_Pa(Pa,Pb,Pc,S,Sb,Sc,1,Nb,Nc,SID).
 witness(Pa,Pb,auth_1,Nb).
 iknows(crypt(S,pair(Nb,Pa))).
 witness(Pa,Pc,auth_2,Nc).
 iknows(crypt(S,pair(Nc,Pa)))


section properties:

property authentication_on_auth_1 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth_1,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth_1,MGoal))
     /\ ((request(A1Goal,A2Goal,auth_1,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth_1,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_auth_2 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth_2,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth_2,MGoal))
     /\ ((request(A1Goal,A2Goal,auth_2,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth_2,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state authentication_on_auth_1 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth_1,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_1,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth_1 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth_1,MGoal,SID1).
 request(A1Goal,A2Goal,auth_1,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_auth_2 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth_2,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_2,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth_2 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth_2,MGoal,SID1).
 request(A1Goal,A2Goal,auth_2,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


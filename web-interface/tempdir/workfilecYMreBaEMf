role alice(
		A,B			: agent,
		KAB			: public_key,
		KBA			: public_key,
		Hash			: hash_func,
		SND,RCV			: channel(dy) )
	played_by A
	def=
		local
			State			: nat,
			Data,Rb,Ra		: text,
			Rqu			: text,
			
			KS			:message
		init
			State :=0
		transition
		1.	State  = 0  /\  RCV(start) =|>
			State':= 2  /\  Ra' := new()
				    /\  SND({Ra'}_inv(KBA))

		2.	State  = 2  /\  RCV({Ra.Rb'}_inv(KAB)) =|>
			State':= 4  /\  KS' := Hash (Ra.Rb')
				    /\	SND({Rqu}_KS')
				    
		3.	State  = 4  /\  RCV({Data}_KS) =|>
			State':= 6  /\  request(B,A,bob_alice_rb,Rb)
end role
%————————————————————————————————————————————————
role bob(
		A,B			: agent,
		KAB			: public_key,
		KBA			:public_key,
		Hash			: hash_func,
		SND,RCV			: channel(dy) )
	played_by B
	def=
		local
			State			:nat,
			Rqu,Data,Rb,Ra		:text,
			KS			:message
		init
			State :=1
		transition
		1.	State  = 1  /\  RCV({Ra'}_inv(KBA)) =|>
			State':= 3  /\  Rb' := new()
				    /\  SND({Ra'.Rb'}_inv(KAB))
				    /\  KS' := Hash (Ra'.Rb')
				    /\	secret(KS',ks,{A,B})

		2.	State  = 3  /\  RCV({Rqu.Rb}_KS') =|>
			State':= 5  /\  SND({Data'}_KS)  
				    /\  witness(A,B,bob_alice_rb,Rb)	
end role
%————————————————————————————————————————————————
role session(
			A,B		:agent,
			KAB			: public_key,
			KBA			:public_key,
			Hash			: hash_func)
	def=
		local
			SA, SB, RA, RB : channel (dy)
		composition
			alice(A,B,KAB,KBA,Hash,SA,RA)
		/\	bob (A,B,KAB,KBA,Hash,SB,RB)
end role
%————————————————————————————————————————————————
role environment()
	def=
		const
			bob_alice_rb,
			ks			: protocol_id,
			kab,kba			: public_key,
			a,b			: agent,
			h			: hash_func
		intruder_knowledge = {a,b,h}
		composition
				session(a,b,kab,kba,h)
end role
%————————————————————————————————————————————————
goal
	secrecy_of 			ks
	authentication_on	bob_alice_rb
end goal
%————————————————————————————————————————————————
environment()
role userA(
        A,B    :agent,
        H    :hash_func,
        
        Snd,Rcv    :channel(dy),
        Pub_a,Pub_b:public_key)
played_by A def=

local
    State    :nat,
    TS,TK,SK,SIDB,UIDA , Msg   :text

init
    State := 0

transition
1. State = 0 /\ Rcv(start) =|>
   State':= 1/\ TK':=h(UIDA)
         /\ TS':=new()
         /\ Snd({TS'.TK'.UIDA}_inv(Pub_a))
         /\ witness(A,B,a_b,UIDA)
2. State = 1 /\ Rcv({SIDB}_inv(Pub_b)) =|>
   State':=2 /\ request(B,A,b_a,SIDB)
         /\ SK':= new()
         /\ secret(SK',k1,{A,B})
         /\ Snd(SK')
3. State = 2 /\ Rcv({SIDB}_inv(Pub_b)) =|>
   State':=3 /\ Msg':=new()
			 /\ Snd({Msg'}_SK)
end role

role sensornodeB(
            A,B    :agent,
            H    :hash_func,
            Snd,Rcv    :channel(dy),
            Pub_a,Pub_b:public_key)
played_by B def=

local
    State    :nat,
    UIDA,SIDB,TS,TK,Msg1,SK	:text

init
    State:=0
transition
1. State = 0 /\ Rcv({TS'.TK'.UIDA}_inv(Pub_a)) =|>
   State':=1 /\ request(A,B,a_b,UIDA)
         /\ Snd({SIDB}_inv(Pub_b))
         /\ witness(B,A,b_a,SIDB)
2. State = 1 /\ Rcv({Msg'}_SK) =|>
   State':=2 /\ Msg1':=new()
			 /\ Snd({Msg1'}_SK)

end role

role session(
        A,B    :agent,
        H    :hash_func,
        Pub_a,Pub_b :public_key)
def=
local SA,SB,RA,RB    :channel(dy)

composition
    userA(A,B,h,SA,RA,Pub_a,Pub_b)
    /\sensornodeB(A,B,h,SB,RB,Pub_a,Pub_b)

end role

role environment()
def=
const
    a,b            :agent,
    k1,a_b,b_a        :protocol_id,
    pub_a,pub_b :public_key,
    h            :hash_func,
    sidb,uida,sk,tk,r    :text

intruder_knowledge = {a,b,h,pub_a,pub_b}
composition
    session(a,b,h,pub_a,pub_b)
end role

goal
    secrecy_of k1
    authentication_on a_b
    authentication_on b_a
end goal
environment()

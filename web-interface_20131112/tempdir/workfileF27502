role mN(
		M,CP,NP:	agent,
		PanaAuthKey:	symmetric_key,
		SesIden,KeyID : text,
		DeriveAAAKeyInt : text,text,text -> symmetric_key,
		DeriveNewAAAKey : symmetric_key,text,text -> symmetric_key,
		DeriveBit : text -> text,
		SMNcP,RCV
		SMNnP,RMNnP:	channel(dy))

	played_by M def=

		local
			State : nat,
			newMNID,nPaaID,PaaNonce,
			Sbit,nPaanonce,Pbit,newKeyID,AlgID,Cbit,MNnonce : text,
			PAR,PCI,PAN: messege
			DeriveFunc : text -> text,
			newPanaAuthKey : symmetric_key

		init
			State := 0

		transition
		1. State = 0 /\ RCV(start) =|>
		   State’:= 1 	/\ newMNID':= DeriveFunc(nPaaID)
				/\ SMNcP({newMNID'.nPaaID}_PCI')

		2. State = 1 /\ RMNnP({SesIden'.Sbit'.nPaaNonce'}_PAR') =|>
		   State’:= 8 	/\ MNnonce':= new()
				/\ SMNnP({{SesIden'.Sbit'.MNnonce’}_PAN’}_PanaAuthKey)

		3. State = 8 /\ RMNnP({{Pbit'.newKeyID'}_newPanaAuthKey'.{AlgID}_newAaaKey'}_PAR')
		   State':= 12 /\ newPanaAuthKey':= DeriveNewPanaAuth(AlgID)			%--Same Question as below ?
				/\ ikAAA':= DeriveAAAKeyInt(SesIden',newMNID',KeyID)
				/\ newAaaKey':= DeriveNewAAAKey(ikAAA',nPaaNonce',MNnonce’)
				/\ Cbit':= DeriveBit(Cbit)
				/\ SMNnP({{Cbit'.newKeyID'}_PAN'}_newPanaAuthKey')
				/\ witness(M,nP,m_np_newpanaauthkey,newPanaAuthKey)

end role
%——————————————————————————————————————————
role cPAA(
		CP,CA,NP,M : agent,
		PKnPaa,SKnAaa,PKnAaa : symmetric_key,
		KeyID : text,
		DeriveAAAKeyInt : text,text,text -> symmetric_key,
		ScPcA,RcPcA,
		ScPnP,RcPnP,
		RMNcP : channel(dy))

	played_by CP def=

		local
			State : nat,
			nPaaID,newMNID : text,
			DTR,DTA,CTR,CTD : message
			PAN,PCI: text.text
			ikAAA : symmetric_key

		init
			State := 1

		transition
		1. State = 1 /\ RMNcP({newMNID'.nPaaID}_PCI') =|>
		   State’:= 2 /\ ScPcA({nPaaID}_DTR')
				/\ request(cP,cA,npaaid,nPaaID)

		2. State = 3 /\ RcPcA({PKnAaa}_DTA') =|>
		   State’:= 4 /\ ScPnP(PCI')
		
		3. State = 4 /\ RcPnP({{SesIden'.Sbit'.nPaaNonce'}_PAR'.{nPaaID.PKnPaa}_SKnAaa}_CTR')
		   State':= 10 /\ ikAAA':= DeriveAAAKeyInt(SesIden',newMNID',KeyID)
				/\ ScPnP({{ikAAA'}_PKnPaa}_CTD')
end role
%--------------------------------------------
role cAAA(
		CP,CA : agent,
		RcPcA,ScPcA : channel(dy))

	played_by CA def=

		local
			State : nat,
			nPaaID : text,
			DTA,DTR : message

		init
			State := 2

		transition
		1. State = 2 /\ RcPcA({nPaaID}_DTR') =|>
		   State’:= 3 /\ ScPcA({PKnAaa}_DTA')
				/\ witness(cP,cA,npaaid,nPaaID)

end role
%——————————————————————————————————————————
role nPAA(
		NA,NP,M,CP : agent,
		PKnPaa,PKcAaa,PanaAuthKey,SKnAaa: symmetric_key,
		... : hash_func,
		DeriveBit : text -> text,
		DeriveNewPanaAuth : text -> symmetric_key,
		DeriveNewAAAKey : symmetric_key,text,text -> symmetric_key,
		SesIden : text,
		ScPnP,
		SMNnP,RMNnP,
		SnPnA,RnPnA : channel(dy))

	played_by NP def=

		local
			State : nat,
			cPaaID,newMNID,
			Sbit,nPaaNonce,MNnonce,nPaaID,AlgID,newKeyID,Pbit : text,
			PCI,DTR,DTA,PAR,CTR,CTD : message,
			PAN: text.text,
			newPanaAuthKey,ikAAA,newAaaKey : symmetric_key

		init
			State := 4

		transition
		1. State = 4 /\ RMNnP({newMNID'.nPaaID}_PCI') =|>
		   State’:= 5 /\ SnPnA({cPaaID}_DTR')
				/\ request(nP,nA,cpaaid,cPaaID)
		2. State = 5 /\ RnPnA({PKcAaa}_DTA') =|>
		   State’:= 7 /\ Sbit':=Derive(Sbit) /\ PaaNonce':= new() /\ SesIden':= new()
				/\ SMNnP({SesIden'.Sbit'.nPaaNonce'}_PAR')
				/\ request(M,nP,m_np_newpanaauthkey,newPanaAuthKey)
		3. State = 7 /\ RMNnP({{SesIden'.Sbit'.MNnonce’}_PAN’}_PanaAuthKey)			%-----PAN'? / {...}_PAN'?
		   State':= 9 /\ScPnP({{SesIden'.Sbit'.nPaaNonce'}_PAR'.{nPaaID.PKnPaa}_SKnAaa}_CTR')
		4. State = 9 /\ RcPnP({{ikAAA'}_PKnPaa}_CTD')
		   State':= 11 /\ newAaaKey':= DeriveNewAAAKey(ikAAA',nPaaNonce',MNnonce’)
				/\ newPanaAuthKey':= DeriveNewPanaAuth(AlgID)					%-----Need more info about
				/\ newKeyID':= new() /\ Pbit':= DeriveBit(Pbit)
				/\ SMNnP({{Pbit'.newKeyID'}_newPanaAuthKey'.{AlgID}_newAaaKey'}_PAR')
				/\ secret(newPanaAuthKey,newpanaauthkey,{nP,M})
end role
%-----------------------------------------------------
role nAAA(
		NA,NP : agent,
		RnPnA,SnPnA : channel(dy))

	played_by NA def=

		local
			state : nat,
			cPaaID : text,
			DTA,DTR : messege			

		init
			State := 5

		transition
		1. State = 5 /\ RnPnA({cPaaID}_DTR') =|>
		   State’:= 6 /\ SnPnA({PKcAaa}_DTA')
				/\ witness(NP,NA,cpaaid,cPaaID)

end role
%——————————————————————————————————————————
role session(
		M,CP,CA,NA,NP : agent,
		PKnPaa,SKnAaa,PKnAaa,PKcAaa,PanaAuthKey : symmetric_key,
		... : hash_func)

	def=

		local
			ScPcA,RcPcA,SnPnA,RnPnA,
			ScPnP,RcPnP,SMNnP,RMNnP,
			SMNcP,RMNcP : channel (dy)

		composition
			MN(M,cP,nP,PanaAuthKey,
			SMNcP,RCV,SMNnP,RMNnP)
			/\ cVD (CP,CA,NP,PKnPaa,SKnAaa,PKnAaa,
			   ...,ScPcA,RcPcA,ScPnP,RcPnP,RMNcP)
			/\ nVD (NA,NP,CP,M,PKnPaa,PKcAaa,PanaAuthKey,
			   SKnAaa,...,ScPnP,SMNnP,RMNnP,SnPnA,RnPnA)
end role
%——————————————————————————————————————————
role environment()
	def=

		const
			sKnAaa,panaAuthKey : symmetric_key,
			M,CP,NP,CA,NP : agent,
			... : hash_func
		
		intruder_knowledge = {M,CP,NP,CA,NP,.,panaAuthKey}

		composition
			session(M,cP)
			/\ session(M,NP,panaAuthKey)
			/\ session(NP,CP,sKnAaa)
			/\ session(M,CP)
			/\ session(M,CP)
			/\ session(NP,i,sKnAaa)
			/\ session(i,CP,sKnAaa)
			/\ session(M,i,panaAuthKey)
			session(i,NP,panaAuthKey)
end role
%——————————————————————————————————————————
goal
	secrecy_of newpanaauthkey
	authentication_on m_np_newpanaauthkey
	authentication_on npaaid
	authentication_on cpaaid
end goal
%——————————————————————————————————————————
environment()

%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileAu6yiVh9tx

section signature:

state_server: agent * agent * agent * public_key * nat * text * text * text * symmetric_key * set(agent) * nat -> fact
state_bob: agent * agent * agent * public_key * symmetric_key * nat * text * text * text * set(agent) * nat -> fact
state_alice: agent * agent * agent * public_key * symmetric_key * nat * text * text * text * set(agent) * nat -> fact


section types:

MGoal, start: message
bob_server_sb, alice_bob_nb, nb, ca, alice_server_sa, na, bob_alice_na, kab: protocol_id
Dummy_Nb, Dummy_Na, Na, dummy_nonce, Nb, C: text
Dummy_Set_42, Dummy_Set_22, Set_42, ASGoal, Set_22, Set_66, Dummy_Set_66: set(agent)
4, SID, 10, Dummy_State, 7, 3, State, 9, 6, 0, 8, 5, 2, 1: nat
S, A, B, a, b, s, i: agent
Dummy_K, k, K, dummy_sk: symmetric_key
ks, Ks, ki: public_key
set_95, set_87, set_100: set


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(ks).
 iknows(ki).
 iknows(inv(ki)).
 iknows(i).
 state_alice(a,b,s,ks,k,0,dummy_nonce,dummy_nonce,dummy_nonce,set_87,3).
 state_bob(b,a,s,ks,k,3,dummy_nonce,dummy_nonce,dummy_nonce,set_95,4).
 state_server(s,a,b,ks,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,set_100,5)


section rules:

step step_0 (A,B,S,Ks,K,Dummy_Na,Nb,C,Dummy_Set_22,SID,Na) :=
 state_alice(A,B,S,Ks,K,0,Dummy_Na,Nb,C,Dummy_Set_22,SID).
 iknows(start)
=[exists Na]=>
 state_alice(A,B,S,Ks,K,6,Na,Nb,C,Dummy_Set_22,SID).
 iknows(pair(A,pair(B,xor(crypt(Ks,Na),crypt(Ks,A))))).
 iknows(pair(xor(crypt(Ks,Na),crypt(Ks,B)),xor(crypt(Ks,Na),crypt(Ks,C)))).
 contains(A,Dummy_Set_22).
 contains(B,Dummy_Set_22).
 contains(S,Dummy_Set_22)

step step_1 (A,B,S,Ks,Dummy_K,Na,Nb,C,Set_22,SID,K) :=
 state_alice(A,B,S,Ks,Dummy_K,6,Na,Nb,C,Set_22,SID).
 iknows(xor(K,crypt(Ks,Na)))
 =>
 state_alice(A,B,S,Ks,K,9,Na,Nb,C,Set_22,SID)

step step_2 (B,A,S,Ks,K,Na,Dummy_Nb,C,Dummy_Set_42,SID,Nb) :=
 state_bob(B,A,S,Ks,K,3,Na,Dummy_Nb,C,Dummy_Set_42,SID).
 iknows(start)
=[exists Nb]=>
 state_bob(B,A,S,Ks,K,7,Na,Nb,C,Dummy_Set_42,SID).
 iknows(pair(B,pair(A,xor(crypt(Ks,B),crypt(Ks,Nb))))).
 iknows(pair(xor(crypt(Ks,A),crypt(Ks,Nb)),xor(crypt(Ks,C),crypt(Ks,Nb)))).
 contains(A,Dummy_Set_42).
 contains(B,Dummy_Set_42).
 contains(S,Dummy_Set_42)

step step_3 (B,A,S,Ks,Dummy_K,Na,Nb,C,Set_42,SID,K) :=
 state_bob(B,A,S,Ks,Dummy_K,7,Na,Nb,C,Set_42,SID).
 iknows(xor(K,crypt(Ks,Nb)))
 =>
 state_bob(B,A,S,Ks,K,10,Na,Nb,C,Set_42,SID)

step step_4 (S,A,B,Ks,Nb,Dummy_Na,C,K,Set_66,SID,Na) :=
 state_server(S,A,B,Ks,1,Nb,Dummy_Na,C,K,Set_66,SID).
 iknows(pair(A,pair(B,xor(A,crypt(Ks,Na)))))
 =>
 state_server(S,A,B,Ks,2,Nb,Na,C,K,Set_66,SID)

step step_5 (S,A,B,Ks,Nb,Na,C,K,Set_66,SID) :=
 state_server(S,A,B,Ks,2,Nb,Na,C,K,Set_66,SID).
 iknows(pair(xor(crypt(Ks,Na),crypt(Ks,B)),xor(crypt(Ks,Na),crypt(Ks,C))))
 =>
 state_server(S,A,B,Ks,4,Nb,Na,C,K,Set_66,SID)

step step_6 (S,A,B,Ks,Dummy_Nb,Na,C,K,Set_66,SID,Nb) :=
 state_server(S,A,B,Ks,4,Dummy_Nb,Na,C,K,Set_66,SID).
 iknows(pair(B,pair(A,xor(crypt(Ks,Nb),crypt(Ks,B)))))
 =>
 state_server(S,A,B,Ks,5,Nb,Na,C,K,Set_66,SID)

step step_7 (S,A,B,Ks,Nb,Na,C,Dummy_K,Dummy_Set_66,SID,K) :=
 state_server(S,A,B,Ks,5,Nb,Na,C,Dummy_K,Dummy_Set_66,SID).
 iknows(pair(xor(crypt(Ks,Nb),crypt(Ks,A)),xor(crypt(Ks,Nb),crypt(Ks,C))))
=[exists K]=>
 state_server(S,A,B,Ks,8,Nb,Na,C,K,Dummy_Set_66,SID).
 iknows(xor(K,crypt(Ks,Nb))).
 iknows(xor(K,crypt(Ks,Na))).
 secret(K,kab,Dummy_Set_66).
 contains(A,Dummy_Set_66).
 contains(B,Dummy_Set_66)


section properties:

property secrecy_of_kab (MGoal,ASGoal) :=
 [] ((secret(MGoal,kab,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state secrecy_of_kab (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,kab,ASGoal) &
 not(contains(i,ASGoal))


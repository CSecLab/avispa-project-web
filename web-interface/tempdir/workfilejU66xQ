%% PROTOCOL: UMTS-AKA
%% PURPOSE: 
%% Authentication and Key Agreement
%% REFERENCE:
%% \url{http://www.3gpp.org/ftp/tsg_sa/WG3_Security/_Specs/33902-310.pdf}
%% MODELER:
%% \begin{itemize}
%%  \item Haykal Tej, Siemens CT IC 3, 2003
%%  \item Sebastian M{\"o}dersheim, ETH Z{\"u}rich, December 2003
%% \end{itemize}
%%
%% ALICE_BOB:
%% S is the server, M is the mobile set, they share a secret key k(M).
%% 
%% Both S and M have an own version of a sequence number,
%% that they try to maintain synchonized.
%% 
%% Using k(M), a random number (nonce) r, his sequence number seq,
%% when S receives a request from M (or whenever he wishes
%% this part is not modelled here), S generates:
%% \begin{verbatim}
%%   res = F2(k(M); r)   where F2 hash
%%   CK =  F3(k(M); r)   where F3 one-way
%%   IK =  F4(k(M); r)   where F4 one-way
%%   Ka =  F5(k(M); r)   where F5 one-way
%%   AUTN = {seq}Ka; F1(k(M); seq; r)  where F1 hash
%%
%% M -> S : M
%% S -> M : r; {seq}_Ka; F1(k(M); seq; r)
%%
%%      from r M calculates KA, then seq, then checks if F1(k(M); seq; r) OK
%%      if yes, M increments his seq number and responds:
%%
%% M -> S : F2(k(M); r)
%% \end{verbatim}
%% The goal is that at the end both authenticate each other and share
%% the value of \verb|CK| and \verb|IK|.
%%
%%% LIMITATIONS:
%%
%% PROBLEMS: 3
%%
%% CLASSIFICATON: G2 G12 
%%
%% ATTACKS: None
%%
%%% NOTES:
%%
%%HLPSL:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role mobile(M,S,E:agent,
            Snd_ME,Rec_ME,Snd_MS: channel(dy),
            Kmb, Kms,IK,CK : symmetric_key,
            Imsi: text,
            F1,F2,F3,F4,F5,Secrethash : hash_func)
played_by M
def=

  local State :nat, 
	Sqn,Rnd,Rnd_mme,Res    :text,
        KK ,AK      :symmetric_key

  init  State := 1

  transition

    1.  State = 1 /\ Rec_ME(start) =|> 
        State':=2 /\ KK' := Secrethash(Kms)
                  /\ Rnd' := new()
                  /\ Snd_MS({Imsi}_KK'.Rnd'.F1({Imsi.Rnd'}_KK')) 
                  /\ secret(Secrethash,secrethash_id,{M.S}) 
                  /\ secret(Imsi,imsi_id,{M.S})
                  /\ secret(KK',k_id,{M,S})

    2.  State = 2 /\ Rec_ME(xor(Sqn',AK').Mac'.Rnd_mme') =|>  
        State':=3 /\ Snd_ME( F4(Rand_mme'.CK.IK))
                  /\ secret(Sqn',sqn_id,{E,M})
                  /\ secret(AK',ak_id,{M,E})
                  /\ request(M,E,mac_id,Mac')
                  /\ witness(M,E,rndmme_id,Res')

 
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



role hss(S,E,M : agent,
	    Snd_MME,Rec_MME,Rec_SM: channel(dy),
            Kms,Kes,IK,CK : symmetric_key,
            Imsi: text,
            F1,F2,F3,F4,F5,Secrethash: hash_func)
played_by S
def=

  local State       : nat,
        KK,Rnd      : text,
  const r1,r2,sseq1 : protocol_id,
        add         : hash_func

  init  State := 31 

  transition

    1.  State   = 31 /\ Rec_SM({Imsi'}_KK'.Rnd'.F1({Imsi'.Rnd'}_KK')) =|> 
        State' := 32 /\ CK' := F1(KK'.Rnd')
                     /\ IK' :=  F2(KK'.Rnd')
                     /\ Snd_MME({CK'.IK'}_Kes)
	 	     /\ secret(KK',k_id,{S,M})
		     /\ secret(Imsi',imsi_id,{S,M})
                     /\ secret(Secrethash,secrethash_id,{M.S})

    2.  State   = 32 /\ Rec(F2(K_M.R))
        =|> 
        State' := 33 /\ Seq' := add(Seq,1) 
		     /\ wrequest(S,M,r2,R)
        
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role mme(E,M,B:agent,
            Snd_M,Rec_M,Snd_S,Rec_S: channel(dy),
            Kes,Keb: symmetric_key,
            F3,F4,F5: hash_func)
played_by E
def=

  local State :nat, 
	Sqn,Rnd_mme,Mac,AK, :text,
        CK,IK :sysmmetric_key  
 
  init  State := 11

  transition

    1.  State = 11 /\ Rec_S({CK'.IK'}_Kes) =|> 
        State':=12 /\ Sqn'      := new()  
                   /\ Rnd-mme'  := new()
                   / Mac'       := F3({Sqn'Rnd_mme'}_IK')
                   /\ AK'       := F5(Rnd_mme.CK'.IK')
                   /\ Snd_M(xor(Sqn',AK').Mac'.Rnd_mme')
                   /\ secret(Sqn',sqn_id,{E,M})
                   /\ secret(AK',ak_id,{E,M})
                   /\ witness(E,M,mac_id,Mac')

    2.  State = 12 /\ Rec_M(F4(Rand_mme'.CK.IK)) =|>  
        State':=13 /\ Sqn' := add(Sqn,1)
		   /\ request(M,S,rnd_mme,Rnd_mme') 
		  
 
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role session(M,S,E: agent,
	     Kms,Kes,IK,CK,Kmb,Keb: symmetric_key,
	     Imsi: text,
             F1,F2,F3,F4,F5: hash_func,
             Snd_ME,Rec_ME,Snd_MS,Snd_MME,Rec_MME,Rec_SM,Snd_M,Rec_M,Snd_S,Rec_S: channel(dy)) def=

   composition

	  mobile(M,S,E,Snd_ME,Rec_ME,Snd_MS,Kmb, Kms,IK,CK,Imsi,F1,F2,F3,F4,F5,Secrethash )
       /\ server(S,E,M ,Snd_MME,Rec_MME,Rec_SM,Kms,Kes,IK,CK,Imsi,F1,F2,F3,F4,F5,Secrethash)
       /\ mme(E,M,B,Snd_M,Rec_M,Snd_S,Rec_S,Kes,Keb,F3,F4,F5}
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role environment() 
def=

 local
      Snd_me,Rec_me,Snd_ms,Snd_mme,Rec_mme,Rec_sm,Snd_m,Rec_m,Snd_s,Rec_s : channel (dy)

      const secrethash_id,imsi_id,k_id,ak_id,sqn_id,mac_id,rnd_mme  : protocol_id,
       m, i, s,e                                               : agent,
       kms,kes,ik,ck,kmb,keb,kib,kis,kmi,kei,kib,kis           : symmetric_key,
       f1, f2,f3,f4, f5 ,secrethash                            : hash_func,
       imsi : text

 intruder_knowledge={m,s,e,i,kms,f1,f2,f3,f4,f5}

 composition
 
	session(m,s,e,kms,kes,ik,ck,kmb,keb,imsi,f1,f2,f3,f4,f5,Snd_me,Rec_me,Snd_ms,Snd_mme,Rec_mme,Rec_sm,Snd_m,Rec_m,Snd_s,Rec_s) 
   /\	session(m,s,i,kms,kis,ik,ck,kmb,kib,imsi,f1,f2,f3,f4,f5,Snd_me,Rec_me,Snd_ms,Snd_mme,Rec_mme,Rec_sm,Snd_m,Rec_m,Snd_s,Rec_s) 
   /\   session(m,i,e,kmi,kei,ik,ck,kmb,keb,imsi,f1,f2,f3,f4,f5,Snd_me,Rec_me,Snd_ms,Snd_mme,Rec_mme,Rec_sm,Snd_m,Rec_m,Snd_s,Rec_s)
   /\   session(i,s,e,kis,kes,ik,ck,kib,keb,imsi,f1,f2,f3,f4,f5,Snd_me,Rec_me,Snd_ms,Snd_mme,Rec_mme,Rec_sm,Snd_m,Rec_m,Snd_s,Rec_s)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal

  % Confidentiality (G12)
  secrecy_of ak_id,sqn_id,secrethash_id,imsi_id,k_id

  % Message Authentication (G2)
  % Mobile weakly authenticates Server on r1  % the nonce R
  authentication_on mac_id

  % Message Authentication (G2)
  % Server weakly authenticates Mobile on r2  % the nonce R
  authentication_on rnd_mme

end goal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

environment()


role alice(A,B: agent,
           F: hash_func,
           PSK: symmetric_key,
           SND, RCV: channel (dy))
played_by A
def=

  local IPDATAGRAM: message,
	H, AUTH_A: hash(message),
        State: nat
  
 
  init  State := 0
   
  transition

  
  1. State = 0  /\ RCV(start) =|>
     State':= 2 /\ IPDATAGRAM':= new()
                /\ AUTH_A':= F(IPDATAGRAM')
                /\ SND({A.IPDATAGRAM'.AUTH_A'}_PSK)
                /\ witness(A,B,auth_a,AUTH_A')

end role




role bob(B,A:agent,
         F: hash_func,
         PSK: symmetric_key,
         SND, RCV: channel (dy))
played_by B
def=

  local IPDATAGRAM: message,
	H, AUTH_A: hash(message),
        State: nat

 

  init  State := 1


  transition

  1. State = 1 /\ RCV({A.IPDATAGRAM'.AUTH_A'}_PSK) =|>
     State':=3 %%/\ AUTH_A':= F(IPDATAGRAM') 
	       /\ request(B,A,auth_a,AUTH_A')
              

end role



role session(A, B: agent,
             PSK: symmetric_key,
             F: hash_func)
def=

  local SA, RA, SB, RB: channel (dy)

  composition

           alice(A,B,F,PSK,SA,RA)
        /\ bob(B,A,F,PSK,SB,RB)

end role



role environment()
def=
 
  const h, auth_a     : protocol_id,
        a, b          : agent,
        psk	      : symmetric_key,
        f             : hash_func

 
  intruder_knowledge = {f,a,b,i}

  composition

        session(a,b,psk,f)
     /\ session(a,i,psk,f)
     /\ session(i,b,psk,f)

end role



goal    
 
  secrecy_of psk
  %%weak_authentication_on auth_a
  authentication_on auth_a

end goal



environment()                 
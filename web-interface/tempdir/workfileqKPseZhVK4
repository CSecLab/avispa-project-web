role alice (Ui, Sj : agent,
SKuisj : symmetric_key,
% H is hash function
H : hash_func,
Snd, Rcv: channel(dy))
played_by Ui
def=
local State : nat,
RPWi, PWi, Bi, Xs, K, IDi, NIDi,
TDi, Di, Fi, Ri, Ei, Rc, Rs: text,
M1, M2, M3, M4, M5, M6, M7, M8,
M9: message,
Inc : hash_func
const alice_bob_rc, bob_alice_rs,
subs1, subs2, subs3 : protocol_id
init State :=0
transition
1. State = 0 /\ Rcv(start) =|>
State’ := 1 /\ Fi’ := H(IDi.K.Bi)
/\ RPWi’ := H(IDi.K.PWi)
/\ Snd({IDi.Fi’.RPWi’}_SKuisj)
/\ secret({PWi, Bi, K}, subs2, Ui)
/\ secret({IDi}, subs3, {Ui,Sj})
2. State = 1 /\ Rcv({xor(NIDi’,H(IDi)). xor(NIDi’,H(IDi)).
H.H(IDi.K.Bi).H(H(IDi.K.PWi).H(IDi.K.Bi.))
xor(H(IDi.Xs),H(H(IDi.K.PW.i)
H(IDi.K.Bi)))}_SKuisj) =|>
State’ := 2 /\ Rc’ := new()
/\ TDi’ := xor(NIDi’,H(IDi))
/\ M1’ := H(IDi.Xs)
/\ M2’ := xor(M1’,Rc’)
/\ Snd(xor(H(IDi),TDi’).M2’.H(IDi.Rc’))
/\ witness(Ui, Sj, alice_bob_rc, Rc’)
3. State = 2 /\ Rcv(xor(H(IDi.Xs),Rs’). xor(H(Rs’.Rc’), NIDi’).
H(H(IDi.Xs).Rc’.Rs’.IDi.NIDi’).
H(IDi.Inc(Rc’.1).Rs’)) =|>
State’ := 3 /\ M8’ := Rs’
/\ M9’ := H(Inc(M8’.1).IDi.NIDi’.Inc(Rc’.1))
/\ Snd(M9’)
/\ request(Sj, Ui, bob_alice_rs, Rs’)
end role

%%%%%%%

role bob (Ui, Sj : agent,
SKuisj : symmetric_key,
% H is hash function
H : hash_func,
Snd, Rcv: channel(dy) )
played_by Sj
def=
local State : nat,
RPWi, PWi, Bi, Xs, K, IDi, NIDi,
TDi, Di, Fi, Ri, Ei, Rc, Rs: text,
M1, M2, M3, M4, M5, M6, M7, M8, M9: message,
Inc : hash_func
const alice_bob_rc, bob_alice_rs,
subs1, subs2, subs3 : protocol_id
init State := 0
transition
1. State = 0 /\ Rcv({IDi.H(IDi.K.Bi).
H(IDi.K.PWi)}_SKuisj) =|>
State’ := 1 /\ secret({Xs}, subs1, Sj)
/\ secret({PWi, Bi, K}, subs2, Ui)
/\ secret({IDi}, subs3, {Ui,Sj})
/\ NIDi’ := new()
/\ Snd({xor(NIDi’,H(IDi)). xor(NIDi’,H(IDi)).
H.H(IDi.K.Bi).H(H(IDi.K.PWi).H(IDi.K.Bi)).
xor(H(IDi.Xs),H(H(IDi.K.PWi).H(IDi.K.
Bi)))}_SKuisj)
2. State = 1 /\ Rcv(xor(H(IDi), xor(NIDi’,H(IDi)).
xor(H(IDi.Xs), Rc’).
H(IDi.Rc’))) =|>
State’ := 2 /\ M2’ := xor(H(IDi.Xs).Rc’)
/\ M3’ := H(IDi.Xs)
/\ M4’ := xor(M2’, M3’)
/\ Rs’ := new()
/\ M5’ := xor(M3’, Rs’)
/\ M6’ := xor(H(Rs’.M4’), NIDi’)
/\ M7’ := H(M3’.M4’.Rs’.IDi.NIDi’)
/\ Snd (M5’.M6’.M7’.H(IDi.Inc(M4’.1).Rs’))
/\ witness(Sj, Ui, bob_alice_rs, Rs’)
3. State = 2 /\ Rcv(H(Inc(Rs’.1).IDi.NIDi’.Inc(Rc’.1))) =|>
State’ := 3 /\ request(Ui, Sj, alice_bob_rc, Rc’)
end role

%%%%%%

role session(Ui, Sj: agent,
SKuisj : symmetric_key,
H : hash_func)
def=
local SI, SJ, RI, RJ: channel (dy)
composition
alice(Ui, Sj, SKuisj, H, SI, RI)
/\ bob(Ui, Sj, SKuisj, H, SJ, RJ)
end role

%%%%%%%

role environment()
def=
const ui, sj: agent,
skuisj : symmetric_key,
h : hash_func,
pwi, bi, xs, k, idi, nidi, rc, rs: text,
alice_bob_rc, bob_alice_rs,
subs1, subs2, subs3: protocol_id
intruder_knowledge = {ui, sj, h}
composition
session(ui, sj, skuisj, h)
/\ session(ui, sj, skuisj, h)
end role
goal
secrecy_of subs1
secrecy_of subs2
secrecy_of subs3
authentication_on alice_bob_rc
authentication_on bob_alice_rs
end goal
environment()
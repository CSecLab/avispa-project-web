%% PROTOCOL: UMTS-AKA
%% PURPOSE: 
%% Authentication and Key Agreement
%% REFERENCE:
%% \url{http://www.3gpp.org/ftp/tsg_sa/WG3_Security/_Specs/33902-310.pdf}
%% MODELER:
%% \begin{itemize}
%%  \item Haykal Tej, Siemens CT IC 3, 2003
%%  \item Sebastian M{\"o}dersheim, ETH Z{\"u}rich, December 2003
%% \end{itemize}
%%
%% ALICE_BOB:
%% S is the server, M is the mobile set, they share a secret key k(M).
%% 
%% Both S and M have an own version of a sequence number,
%% that they try to maintain synchonized.
%% 
%% Using k(M), a random number (nonce) r, his sequence number seq,
%% when S receives a request from M (or whenever he wishes
%% this part is not modelled here), S generates:
%% \begin{verbatim}
%%   res = F2(k(M); r)   where F2 hash
%%   CK =  F3(k(M); r)   where F3 one-way
%%   IK =  F4(k(M); r)   where F4 one-way
%%   Ka =  F5(k(M); r)   where F5 one-way
%%   AUTN = {seq}Ka; F1(k(M); seq; r)  where F1 hash
%%
%% M -> S : M
%% S -> M : r; {seq}_Ka; F1(k(M); seq; r)
%%
%%      from r M calculates KA, then seq, then checks if F1(k(M); seq; r) OK
%%      if yes, M increments his seq number and responds:
%%
%% M -> S : F2(k(M); r)
%% \end{verbatim}
%% The goal is that at the end both authenticate each other and share
%% the value of \verb|CK| and \verb|IK|.
%%
%%% LIMITATIONS:
%%
%% PROBLEMS: 3
%%
%% CLASSIFICATON: G2 G12 
%%
%% ATTACKS: None
%%
%%% NOTES:
%%
%%HLPSL:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%50

role server(S,M           : agent,
	    Snd, Rec   : channel(dy),
                  Kms           : symmetric_key,
            Seq,Imsi          : text,
            F1,F2,F4,F3,F5: hash_func)
played_by S
def=

  local State                 : nat,
        Rnd,Rnd_s          : text,
        KK                     :symmetric_key

  const 
        add        : hash_func

  init  State := 1 

  transition

    1.  State   = 1           /\ Rec({Imsi}_KK'.Rnd'.F1({Imsi.Rnd'}_KK'))  =|> 
        State' := 2          /\ Rnd_s' := new()
                                 /\ Snd(Rnd_s'.{Seq}_F5(Rnd_s.F3(KK'.Rnd')).F1(F4(KK'.Rnd').Seq.Rnd_s')) 
	 	    /\ secret(Seq,sseq1,{S,M})
                                /\ secret(Imsi,imsi_id, {S,M})
                                /\ secret(KK',k_id,{S,M})
		    /\ witness(S,M,r1,Rnd')

    2.  State   = 2 /\ Rec(F2( Rnd'.F4(KK'.Rnd'))) =|> 
        State' := 3 /\ Seq' := add(Seq,1) 
		    /\  request(S,M,r2,Rnd')
        
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role mobile(M,S:agent,
            Snd, Rec: channel(dy),
            Kms: symmetric_key,
            Seq,Imsi: text,
            F1,F2,F3,F4,F5: hash_func)
played_by M
def=

  local State :nat, 
	Rnd,Rnd_s     :text,
             KK                   : symmetric_key

  const 
        sec_fun               : hash_func    

  init  State := 1

  transition

    1.  State = 1          /\ Rec(start) =|> 
        State':=2          /\ Rnd':=  new() /\ KK' := sec_fun(Kms)
                               /\ Snd({Imsi}_KK'.Rnd'.F1({Imsi.Rnd'}_KK'))  

    2.  State = 2        /\ Rec(Rnd_s'.{Seq}_F5(Rnd_s.F3(KK'.Rnd')).F1(F4(KK'.Rnd').Seq.Rnd_s'))  =|>  
        State':=3         /\ Snd(F2( Rnd'.F4(KK'.Rnd'))) 
		  /\ secret(Seq,sseq2,{M,S})
                               /\ secret(Imsi,imsi_id, {M,S})
		  /\ request(M,S,r1,Rnd_s') 
		  /\ witness(M,S,r2,Rnd')
 
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role session(M,S           : agent,
	     Kms            : symmetric_key,
	     Seq,Imsi     : text,
             F1,F2,F3,F4,F5   : hash_func,
             SA,RA,SB,RB    : channel(dy)) def=

   composition

	 mobile(M,S,SA,RA,Kms,Seq,Imsi,F1,F2,F3,F4,F5)
      /\ server(S,M,SB,RB,Kms,Seq,Imsi,F1,F2,F3,F4,F5)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role environment() def=

 local Sm1,Rm1,Ss1,Rs1 : channel (dy)

 const r1, r2 ,sseq1,sseq2,imsi_id ,k_id              : protocol_id,
       m, i, s                : agent,
       k_ms, k_is, kmi        : symmetric_key,
       f1, f2, f3,f4,f5             : hash_func,
       seq_ms, seq_is, seq_mi,imsi_ms,imsi_is,imsi_mi : text

 intruder_knowledge={m,s,i,k_ms,f1,f2,f3,f4,f5}

 composition
 
	session(m,s,k_ms,seq_ms,imsi_ms,f1,f2,f3,f4,f5,Sm1,Rm1,Ss1,Rs1) 
% /\	session(i,s,k_is,seq_is,imsi_is,f1,f2,f3,f4,f5,si1,ri1,ss2,rs2) 
% /\	session(m,i,k_mi,seq_mi,imsi_mi,f1,f2,f3,f4,f5,sm2,rm2,si2,ri2)


end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal

  % Confidentiality (G12)
  secrecy_of sseq1,sseq2,imsi_id,k_id

  % Message Authentication (G2)
  % Mobile weakly authenticates Server on r1  % the nonce R
  authentication_on r1

  % Message Authentication (G2)
  % Server weakly authenticates Mobile on r2  % the nonce R
  authentication_on r2

end goal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

environment()


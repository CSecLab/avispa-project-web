%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilepkhE3TNuXM

section signature:

state_server: agent * agent * symmetric_key * hash_func * text * nat * nat * nat * nat * text * text * text * text * text * text * text * message * message * message * message * message * message * message * message * message * message * message * message * message * nat -> fact
state_client: agent * agent * symmetric_key * hash_func * text * nat * nat * nat * nat * text * text * text * text * text * text * message * message * message * message * message * message * message * message * message * message * message * message * nat -> fact


section types:

u_s_aui, u_s_aus, u_s_ti, u_s_sk: protocol_id
9, 7, 5, State, R, X, S, 6, 3, 4, 10, 2, 1, 0, SID, Dummy_S, Dummy_X, Dummy_R, Dummy_State, dummy_nat, SID2, SID1: nat
ASGoal: set(agent)
Ti, Ti1, R1, Tr, Ki, Sk, Ri, AUi, AUs, Aui1, C1, C2, C3, Dummy_Aui1, start, Dummy_Ti1, Dummy_C2, Ts, Dummy_AUs, Dummy_C3, Dummy_AUi, Dummy_Sk, Dummy_C1, Dummy_Ri, Dummy_Ki, Dummy_R1, Dummy_Ti, dummy_msg, MGoal: message
V, Regi, Randi, Pwi, Sn, Rt, Ni1, Ni, Dummy_Rt, Dummy_Ni1, Dummy_Ni, Dummy_Regi, Dummy_V, dummy_nonce, ni, nb: text
u, Srvr, U, srvr, A2Goal, A1Goal, i: agent
H, h: hash_func
ki, kj, Ks, ks: symmetric_key


section inits:

initial_state init1 := 
 iknows(start).
 iknows(srvr).
 iknows(u).
 iknows(h).
 iknows(i).
 state_client(u,srvr,ks,h,dummy_nonce,0,dummy_nat,dummy_nat,dummy_nat,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,3).
 state_server(srvr,u,ks,h,dummy_nonce,1,dummy_nat,dummy_nat,dummy_nat,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,4).
 state_server(srvr,i,ki,h,dummy_nonce,1,dummy_nat,dummy_nat,dummy_nat,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,7).
 state_server(u,i,kj,h,dummy_nonce,1,dummy_nat,dummy_nat,dummy_nat,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,10)


section rules:

step step_0 (U,Srvr,Ks,H,Ni,Dummy_R,Dummy_X,S,Dummy_V,Dummy_Regi,Randi,Pwi,Sn,Rt,Dummy_Ti,Dummy_R1,Ts,Tr,Dummy_Ki,Sk,Dummy_Ri,AUi,AUs,Dummy_C1,C2,C3,SID,R,X,V,Ri) :=
 state_client(U,Srvr,Ks,H,Ni,0,Dummy_R,Dummy_X,S,Dummy_V,Dummy_Regi,Randi,Pwi,Sn,Rt,Dummy_Ti,Dummy_R1,Ts,Tr,Dummy_Ki,Sk,Dummy_Ri,AUi,AUs,Dummy_C1,C2,C3,SID).
 iknows(start)
=[exists R,X,Ri,V]=>
 state_client(U,Srvr,Ks,H,Ni,2,R,X,S,V,xor(apply(H,pair(U,apply(H,Pwi))),apply(H,xor(Ks,apply(H,pair(U,Randi))))),Randi,Pwi,Sn,Rt,pair(apply(H,scrypt(R,Dummy_X)),scrypt(R,Dummy_X)),xor(Dummy_Regi,apply(H,V)),Ts,Tr,xor(apply(H,pair(U,apply(H,Pwi))),apply(H,v)),Sk,Ri,AUi,AUs,scrypt(xor(apply(H,pair(U,apply(H,Pwi))),apply(H,v)),pair(U,pair(Ri,pair(apply(H,scrypt(R,Dummy_X)),scrypt(R,Dummy_X))))),C2,C3,SID).
 iknows(pair(Sn,pair(X,pair(Randi,pair(Ni,pair(xor(Dummy_Regi,apply(H,V)),scrypt(xor(apply(H,pair(U,apply(H,Pwi))),apply(H,v)),pair(U,pair(Ri,pair(apply(H,scrypt(R,Dummy_X)),scrypt(R,Dummy_X))))))))))).
 request(U,srvr,u_s_ti,pair(apply(H,scrypt(R,Dummy_X)),scrypt(R,Dummy_X)),SID)

step step_1 (U,Srvr,Ks,H,Ni,R,X,Dummy_S,V,Regi,Randi,Pwi,Sn,Rt,Ti,R1,Ts,Tr,Ki,Dummy_Sk,Dummy_Ri,Dummy_AUi,AUs,C1,C2,Dummy_C3,SID,S,Ri) :=
 state_client(U,Srvr,Ks,H,Ni,2,R,X,Dummy_S,V,Regi,Randi,Pwi,Sn,Rt,Ti,R1,Ts,Tr,Ki,Dummy_Sk,Dummy_Ri,Dummy_AUi,AUs,C1,C2,Dummy_C3,SID).
 iknows(pair(Sn,pair(Srvr,scrypt(Ki,pair(U,pair(Ri,scrypt(S,X)))))))
 =>
 state_client(U,Srvr,Ks,H,Ni,4,R,X,S,V,Regi,Randi,Pwi,Sn,Rt,Ti,R1,Ts,Tr,Ki,scrypt(R,scrypt(S,X)),Ri,apply(H,pair(Srvr,pair(Ri,pair(Rt,scrypt(R,scrypt(S,X)))))),AUs,C1,C2,scrypt(Ki,pair(U,pair(Ri,scrypt(R,X)))),SID).
 iknows(pair(Sn,pair(apply(H,pair(Srvr,pair(Ri,pair(Rt,scrypt(R,scrypt(S,X)))))),scrypt(Ki,pair(U,pair(Ri,scrypt(R,X)))))))

step step_2 (U,Srvr,Ks,H,Ni,R,X,S,V,Regi,Randi,Pwi,Sn,Rt,Ti,R1,Ts,Tr,Ki,Sk,Ri,AUi,Dummy_AUs,C1,C2,C3,SID,AUs) :=
 state_client(U,Srvr,Ks,H,Ni,4,R,X,S,V,Regi,Randi,Pwi,Sn,Rt,Ti,R1,Ts,Tr,Ki,Sk,Ri,AUi,Dummy_AUs,C1,C2,C3,SID).
 iknows(pair(Sn,AUs))
 =>
 state_client(U,Srvr,Ks,H,Ni,6,R,X,S,V,Regi,Randi,Pwi,Sn,Rt,Ti,R1,Ts,Tr,Ki,Sk,Ri,AUi,AUs,C1,C2,C3,SID).
 witness(U,Srvr,u_s_aus,AUs)

step step_3 (Srvr,U,Ks,H,Dummy_Ni,R,Dummy_X,S,V,Regi,Randi,Pwi,Sn,Rt,Dummy_Ni1,Dummy_Ti,Ti1,Dummy_R1,Tr,Dummy_Ki,Sk,Dummy_Ri,AUi,AUs,Aui1,C1,C2,C3,SID,Ni,X,Ti,R1,Ri) :=
 state_server(Srvr,U,Ks,H,Dummy_Ni,1,R,Dummy_X,S,V,Regi,Randi,Pwi,Sn,Rt,Dummy_Ni1,Dummy_Ti,Ti1,Dummy_R1,Tr,Dummy_Ki,Sk,Dummy_Ri,AUi,AUs,Aui1,C1,C2,C3,SID).
 iknows(pair(Sn,pair(X,pair(Randi,pair(Ni,pair(R1,scrypt(Ki,pair(U,pair(Ri,Ti)))))))))
 =>
 state_server(Srvr,U,Ks,H,Ni,3,R,X,S,V,Regi,Randi,Pwi,Sn,Rt,apply(H,pair(U,Randi)),Ti,Ti1,R1,Tr,xor(R1,apply(H,xor(Ks,Ni))),Sk,Ri,AUi,AUs,Aui1,C1,C2,C3,SID)

step step_4 (Srvr,U,Ks,H,Ni1,R,X,Dummy_S,V,Regi,Randi,Pwi,Sn,Dummy_Rt,Ti,Ti1,R1,Tr,Ki,Sk,Ri,AUi,AUs,Aui1,C1,Dummy_C2,C3,SID,S,Rt) :=
 state_server(Srvr,U,Ks,H,Ni1,3,R,X,Dummy_S,V,Regi,Randi,Pwi,Sn,Dummy_Rt,Ni1,Ti,Ti1,R1,Tr,Ki,Sk,Ri,AUi,AUs,Aui1,C1,Dummy_C2,C3,SID)
=[exists Rt,S]=>
 state_server(Srvr,U,Ks,H,Ni1,5,R,X,S,V,Regi,Randi,Pwi,Sn,Rt,Ni1,Ti,Ti1,R1,Tr,Ki,Sk,Ri,AUi,AUs,Aui1,C1,scrypt(Ki,pair(U,pair(Rt,scrypt(Dummy_S,X)))),C3,SID).
 iknows(pair(Sn,pair(srvr,scrypt(Ki,pair(U,pair(Rt,scrypt(Dummy_S,X)))))))

step step_5 (Srvr,U,Ks,H,Ni,R,X,S,V,Regi,Randi,Pwi,Sn,Rt,Ni1,Ti,Dummy_Ti1,R1,Tr,Dummy_Ki,Dummy_Sk,Ri,Dummy_AUi,AUs,Dummy_Aui1,C1,C2,C3,SID,Ki,AUi) :=
 state_server(Srvr,U,Ks,H,Ni,5,R,X,S,V,Regi,Randi,Pwi,Sn,Rt,Ni1,Ti,Dummy_Ti1,R1,Tr,Dummy_Ki,Dummy_Sk,Ri,Dummy_AUi,AUs,Dummy_Aui1,C1,C2,C3,SID).
 iknows(pair(Sn,pair(AUi,scrypt(Ki,pair(U,pair(Ri,scrypt(R,X)))))))
 =>
 state_server(Srvr,U,Ks,H,Ni,7,R,X,S,V,Regi,Randi,Pwi,Sn,Rt,Ni1,Ti,apply(H,scrypt(R,X)),R1,Tr,Ki,scrypt(R,scrypt(S,X)),Ri,AUi,AUs,apply(H,pair(Srvr,pair(Ri,pair(Rt,scrypt(R,scrypt(S,X)))))),C1,C2,C3,SID).
 witness(Srvr,U,u_s_ti,apply(H,scrypt(R,X))).
 witness(Srvr,U,u_s_aui,apply(H,pair(Srvr,pair(Ri,pair(Rt,scrypt(R,scrypt(S,X)))))))

step step_6 (Srvr,U,Ks,H,Ni,R,X,S,V,Regi,Randi,Pwi,Sn,Rt,Ni1,Ti1,Dummy_Ti1,R1,Tr,Ki,Sk,Ri,Dummy_AUi,Dummy_AUs,Dummy_Aui1,C1,C2,C3,SID,AUi) :=
 state_server(Srvr,U,Ks,H,Ni,7,R,X,S,V,Regi,Randi,Pwi,Sn,Rt,Ni1,Ti1,Dummy_Ti1,R1,Tr,Ki,Sk,Ri,Dummy_AUi,Dummy_AUs,Dummy_Aui1,C1,C2,C3,SID)
 =>
 state_server(Srvr,U,Ks,H,Ni,9,R,X,S,V,Regi,Randi,Pwi,Sn,Rt,Ni1,Ti1,Ti1,R1,Tr,Ki,Sk,Ri,AUi,apply(H,pair(U,pair(Ri,pair(Rt,Sk)))),AUi,C1,C2,C3,SID).
 iknows(pair(Sn,apply(H,pair(U,pair(Ri,pair(Rt,Sk)))))).
 request(srvr,U,u_s_aus,apply(H,pair(U,pair(Ri,pair(Rt,Sk)))),SID)


section properties:

property secrecy_of_u_s_sk (MGoal,ASGoal) :=
 [] ((secret(MGoal,u_s_sk,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_u_s_aus (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,u_s_aus,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,u_s_aus,MGoal))
     /\ ((request(A1Goal,A2Goal,u_s_aus,MGoal,SID1)
           /\ request(A1Goal,A2Goal,u_s_aus,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_u_s_aui (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,u_s_aui,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,u_s_aui,MGoal))
     /\ ((request(A1Goal,A2Goal,u_s_aui,MGoal,SID1)
           /\ request(A1Goal,A2Goal,u_s_aui,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_u_s_ti (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,u_s_ti,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,u_s_ti,MGoal))
     /\ ((request(A1Goal,A2Goal,u_s_ti,MGoal,SID1)
           /\ request(A1Goal,A2Goal,u_s_ti,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_u_s_sk (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,u_s_sk,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_u_s_aus (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,u_s_aus,MGoal,SID) &
 not(witness(A2Goal,A1Goal,u_s_aus,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_u_s_aus (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,u_s_aus,MGoal,SID1).
 request(A1Goal,A2Goal,u_s_aus,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_u_s_aui (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,u_s_aui,MGoal,SID) &
 not(witness(A2Goal,A1Goal,u_s_aui,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_u_s_aui (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,u_s_aui,MGoal,SID1).
 request(A1Goal,A2Goal,u_s_aui,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_u_s_ti (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,u_s_ti,MGoal,SID) &
 not(witness(A2Goal,A1Goal,u_s_ti,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_u_s_ti (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,u_s_ti,MGoal,SID1).
 request(A1Goal,A2Goal,u_s_ti,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilemaHwew

section signature:

state_cn: agent * agent * agent * agent * agent * agent * public_key * public_key * symmetric_key * hash_func * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * nat * nat -> fact
state_cnmag: agent * agent * agent * agent * agent * agent * public_key * public_key * symmetric_key * hash_func * nat * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * nat -> fact
state_mag2: agent * agent * agent * agent * agent * agent * public_key * public_key * symmetric_key * hash_func * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * nat * nat -> fact
state_mag1: agent * agent * agent * agent * agent * agent * public_key * public_key * symmetric_key * hash_func * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * nat * nat -> fact
state_mnmag: agent * agent * agent * agent * agent * agent * public_key * public_key * symmetric_key * hash_func * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * nat * set(agent) * nat -> fact
state_mn: agent * agent * agent * agent * agent * agent * public_key * public_key * symmetric_key * hash_func * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * nat * nat -> fact


section types:

token: protocol_id
set_274: set
Set_80, Dummy_Set_80, ASGoal: set(agent)
MGoal, start: message
12, 10, 8, 4, State, 16, 3, 15, 2, SID, 7, 13, 11, 6, 5, 1, Dummy_State, 17, 14, 0, 9: nat
KCN, KMN, kcn, kmn: public_key
BDATA, CONN, C, DATA1, MNMAGADDR, N1MN, CNMAGDEST, HOA, PCOAMN, TOKEN, TOKENRES, PCOACN, NMNMAG, NMN, R0, MSG, MNMAGREQ, PCOAMNREQ, CNMAGADDR, NCNMAG, Dummy_R0, Dummy_NMNMAG, Dummy_TOKEN, Dummy_PCOAMN, Dummy_MSG, Dummy_NCNMAG, Dummy_TOKENRES, Dummy_CONN, dummy_nonce, MAGDEST: text
MN, MNMAG, MAG1, MAG2, CNMAG, CN, mn1, mnmag1, mag11, mag22, cnmag1, cn1, i: agent
HASHE, hashe: hash_func
SK, sk: symmetric_key


section inits:

initial_state init1 := 
 iknows(start).
 iknows(i).
 state_mn(mn1,mnmag1,mag11,mag22,cnmag1,cn1,kcn,kmn,sk,hashe,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,0,3).
 state_mnmag(mnmag1,mn1,mag11,mag22,cnmag1,cn1,kcn,kmn,sk,hashe,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,1,set_274,4).
 state_mag1(mag11,mn1,mnmag1,mag22,cnmag1,cn1,kcn,kmn,sk,hashe,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,2,5).
 state_mag2(mag22,mn1,mnmag1,mag11,cnmag1,cn1,kcn,kmn,sk,hashe,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,3,6).
 state_cnmag(mag22,mn1,mnmag1,cnmag1,mag11,cn1,kcn,kmn,sk,hashe,4,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,7).
 state_cn(cn1,mn1,mnmag1,mag11,mag22,cnmag1,kcn,kmn,sk,hashe,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,5,8)


section rules:

step step_0 (MN,MNMAG,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,Dummy_CONN,C,DATA1,MNMAGADDR,N1MN,MAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,SID,CONN) :=
 state_mn(MN,MNMAG,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,Dummy_CONN,C,DATA1,MNMAGADDR,N1MN,MAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,0,SID).
 iknows(start)
=[exists CONN]=>
 state_mn(MN,MNMAG,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,MAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,6,SID).
 iknows(CONN)

step step_1 (MN,MNMAG,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,MAGDEST,HOA,PCOAMN,TOKEN,Dummy_TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,Dummy_NCNMAG,SID,TOKENRES,NCNMAG) :=
 state_mn(MN,MNMAG,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,MAGDEST,HOA,PCOAMN,TOKEN,Dummy_TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,Dummy_NCNMAG,6,SID).
 iknows(apply(HASHE,pair(TOKENRES,NCNMAG)))
 =>
 state_mn(MN,MNMAG,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,MAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,14,SID)

step step_2 (MN,MNMAG,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,MAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,Dummy_MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,SID,MSG) :=
 state_mn(MN,MNMAG,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,MAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,Dummy_MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,14,SID).
 iknows(pair(apply(HASHE,MSG),scrypt(SK,crypt(KCN,MSG))))
 =>
 state_mn(MN,MNMAG,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,MAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,17,SID)

step step_3 (MNMAG,MN,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,Dummy_CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,Dummy_PCOAMN,Dummy_TOKEN,TOKENRES,PCOACN,Dummy_NMNMAG,NMN,Dummy_R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,Dummy_Set_80,SID,CONN,PCOAMN,TOKEN,NMNMAG,R0) :=
 state_mnmag(MNMAG,MN,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,Dummy_CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,Dummy_PCOAMN,Dummy_TOKEN,TOKENRES,PCOACN,Dummy_NMNMAG,NMN,Dummy_R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,1,Dummy_Set_80,SID).
 iknows(CONN)
=[exists NMNMAG,PCOAMN,R0,TOKEN]=>
 state_mnmag(MNMAG,MN,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,7,Dummy_Set_80,SID).
 iknows(pair(crypt(KCN,pair(TOKEN,PCOAMN)),xor(R0,NMNMAG))).
 secret(TOKEN,token,Dummy_Set_80).
 contains(MNMAG,Dummy_Set_80).
 contains(CNMAG,Dummy_Set_80)

step step_4 (MNMAG,MN,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,Dummy_TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,Dummy_NCNMAG,Set_80,SID,TOKENRES,NCNMAG) :=
 state_mnmag(MNMAG,MN,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,Dummy_TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,Dummy_NCNMAG,7,Set_80,SID).
 iknows(apply(HASHE,pair(TOKENRES,NCNMAG)))
 =>
 state_mnmag(MNMAG,MN,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,11,Set_80,SID).
 iknows(apply(HASHE,pair(TOKENRES,NCNMAG)))

step step_5 (MNMAG,MN,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,Dummy_MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,Set_80,SID,MSG) :=
 state_mnmag(MNMAG,MN,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,Dummy_MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,11,Set_80,SID).
 iknows(pair(apply(HASHE,MSG),scrypt(SK,crypt(KCN,MSG))))
 =>
 state_mnmag(MNMAG,MN,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,13,Set_80,SID).
 iknows(pair(apply(HASHE,MSG),scrypt(SK,crypt(KCN,MSG))))

step step_6 (MAG1,MN,MNMAG,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,Dummy_PCOAMN,Dummy_TOKEN,TOKENRES,PCOACN,Dummy_NMNMAG,NMN,Dummy_R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,SID,PCOAMN,TOKEN,NMNMAG,R0) :=
 state_mag1(MAG1,MN,MNMAG,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,Dummy_PCOAMN,Dummy_TOKEN,TOKENRES,PCOACN,Dummy_NMNMAG,NMN,Dummy_R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,2,SID).
 iknows(pair(crypt(KCN,pair(TOKEN,PCOAMN)),xor(R0,NMNMAG)))
 =>
 state_mag1(MAG1,MN,MNMAG,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,15,SID)

step step_7 (MAG2,MN,MNMAG,MAG1,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,Dummy_PCOAMN,Dummy_TOKEN,TOKENRES,PCOACN,Dummy_NMNMAG,NMN,Dummy_R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,SID,PCOAMN,TOKEN,NMNMAG,R0) :=
 state_mag2(MAG2,MN,MNMAG,MAG1,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,Dummy_PCOAMN,Dummy_TOKEN,TOKENRES,PCOACN,Dummy_NMNMAG,NMN,Dummy_R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,3,SID).
 iknows(pair(crypt(KCN,pair(TOKEN,PCOAMN)),xor(R0,NMNMAG)))
 =>
 state_mag2(MAG2,MN,MNMAG,MAG1,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,16,SID)

step step_8 (CNMAG,MN,MNMAG,MAG1,MAG2,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,Dummy_PCOAMN,Dummy_TOKEN,TOKENRES,PCOACN,Dummy_NMNMAG,NMN,Dummy_R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,SID,PCOAMN,TOKEN,NMNMAG,R0) :=
 state_cnmag(CNMAG,MN,MNMAG,MAG1,MAG2,CN,KCN,KMN,SK,HASHE,4,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,Dummy_PCOAMN,Dummy_TOKEN,TOKENRES,PCOACN,Dummy_NMNMAG,NMN,Dummy_R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,SID).
 iknows(pair(crypt(KCN,pair(TOKEN,PCOAMN)),xor(R0,NMNMAG)))
 =>
 state_cnmag(CNMAG,MN,MNMAG,MAG1,MAG2,CN,KCN,KMN,SK,HASHE,8,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,SID).
 iknows(pair(crypt(KCN,pair(TOKEN,PCOAMN)),xor(R0,NMNMAG)))

step step_9 (CNMAG,MN,MNMAG,MAG1,MAG2,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,Dummy_TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,Dummy_NCNMAG,SID,TOKENRES,NCNMAG) :=
 state_cnmag(CNMAG,MN,MNMAG,MAG1,MAG2,CN,KCN,KMN,SK,HASHE,8,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,Dummy_TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,Dummy_NCNMAG,SID).
 iknows(apply(HASHE,pair(TOKENRES,NCNMAG)))
 =>
 state_cnmag(CNMAG,MN,MNMAG,MAG1,MAG2,CN,KCN,KMN,SK,HASHE,10,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,SID).
 iknows(apply(HASHE,pair(TOKENRES,NCNMAG)))

step step_10 (CNMAG,MN,MNMAG,MAG1,MAG2,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,Dummy_MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,SID,MSG) :=
 state_cnmag(CNMAG,MN,MNMAG,MAG1,MAG2,CN,KCN,KMN,SK,HASHE,10,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,Dummy_MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,SID).
 iknows(pair(apply(HASHE,MSG),scrypt(SK,crypt(KCN,MSG))))
 =>
 state_cnmag(CNMAG,MN,MNMAG,MAG1,MAG2,CN,KCN,KMN,SK,HASHE,12,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,SID).
 iknows(pair(apply(HASHE,MSG),scrypt(SK,crypt(KCN,MSG))))

step step_11 (CN,MN,MNMAG,MAG1,MAG2,CNMAG,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,Dummy_PCOAMN,Dummy_TOKEN,Dummy_TOKENRES,PCOACN,Dummy_NMNMAG,NMN,Dummy_R0,Dummy_MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,Dummy_NCNMAG,SID,PCOAMN,TOKEN,TOKENRES,NMNMAG,R0,MSG,NCNMAG) :=
 state_cn(CN,MN,MNMAG,MAG1,MAG2,CNMAG,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,Dummy_PCOAMN,Dummy_TOKEN,Dummy_TOKENRES,PCOACN,Dummy_NMNMAG,NMN,Dummy_R0,Dummy_MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,Dummy_NCNMAG,5,SID).
 iknows(pair(crypt(KCN,pair(TOKEN,PCOAMN)),xor(R0,NMNMAG)))
=[exists MSG,NCNMAG,TOKENRES]=>
 state_cn(CN,MN,MNMAG,MAG1,MAG2,CNMAG,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,9,SID).
 iknows(apply(HASHE,pair(TOKENRES,NCNMAG))).
 iknows(pair(apply(HASHE,MSG),scrypt(SK,crypt(KCN,MSG))))


section properties:

property secrecy_of_token (MGoal,ASGoal) :=
 [] ((secret(MGoal,token,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state secrecy_of_token (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,token,ASGoal) &
 not(contains(i,ASGoal))


%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilexhp4tk

section signature:

state_bob: agent * agent * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * hash_func * hash_func * hash_func * hash_func * hash_func * hash_func * hash_func * nat * public_key * public_key * public_key * public_key * public_key * public_key * public_key * text * text * message * message * message * message * message * message * message * message * message * message * set * nat -> fact
state_alice: agent * agent * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * symmetric_key * hash_func * hash_func * hash_func * hash_func * hash_func * hash_func * hash_func * nat * public_key * public_key * public_key * public_key * public_key * public_key * public_key * text * text * message * message * message * message * message * message * message * message * message * message * set * nat -> fact


section types:

Set_100, set_180, set_179, set_178, set_176, Dummy_Set_100, set_167, Dummy_Set_53, Set_53, set_150: set
key_id2, key2, key1, key_id1: protocol_id
ASGoal: set(agent)
Ha, Hb, Ya, Yb, Ua, Ub, Va, Vb, Kab, Kba, Dummy_Kba, Dummy_Va, Dummy_Ub, Dummy_Yb, Dummy_Kab, Dummy_Vb, Dummy_Hb, Dummy_Ua, Dummy_Ya, Dummy_Ha, dummy_msg, start, MGoal: message
P1, P2, Dummy_P2, Dummy_P1, dummy_nonce: text
Ta, Tb, PKG, Qa, Qb, IDa, IDb, Dummy_Tb, Dummy_Ta, dummy_pk: public_key
5, 3, 10, State, 6, 4, SID, Dummy_State, 2, SID2, SID1, 1, 0: nat
H, Minus, Union, Pred, Conc, Expr, Ebilinear, h, minus, union, pred, conc, expr, ebilinear: hash_func
Ra1, Ra2, Rb1, Rb2, Ro1, Ro2, Sa, Sb, ra1, ra2, rb1, rb2, ro1, ro2, sa, sb, ri1, ri2, roi, si: symmetric_key
B, A, b, a, A2Goal, A1Goal, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(h).
 iknows(minus).
 iknows(union).
 iknows(pred).
 iknows(conc).
 iknows(expr).
 iknows(ebilinear).
 iknows(i).
 state_alice(a,b,ra1,ra2,rb1,rb2,ro1,ro2,sa,sb,h,minus,union,pred,conc,expr,ebilinear,0,dummy_pk,dummy_pk,dummy_pk,dummy_pk,dummy_pk,dummy_pk,dummy_pk,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_150,3).
 state_bob(b,a,ra1,ra2,rb1,rb2,ro1,ro2,sa,sb,h,minus,union,pred,conc,expr,ebilinear,1,dummy_pk,dummy_pk,dummy_pk,dummy_pk,dummy_pk,dummy_pk,dummy_pk,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_167,4).
 state_alice(a,i,ra1,ra1,ri1,ri2,ro1,ro2,sa,sb,h,minus,union,pred,conc,expr,ebilinear,0,dummy_pk,dummy_pk,dummy_pk,dummy_pk,dummy_pk,dummy_pk,dummy_pk,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_176,6).
 state_bob(b,i,ri1,ri2,rb1,rb2,ro1,ro2,sa,sb,h,minus,union,pred,conc,expr,ebilinear,1,dummy_pk,dummy_pk,dummy_pk,dummy_pk,dummy_pk,dummy_pk,dummy_pk,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,set_180,10)


section rules:

step step_0 (A,B,Ra1,Ra2,Rb1,Rb2,Ro1,Ro2,Sa,Sb,H,Minus,Union,Pred,Conc,Expr,Ebilinear,Dummy_Ta,Tb,PKG,Qa,Qb,IDa,IDb,Dummy_P1,Dummy_P2,Dummy_Ha,Hb,Dummy_Ya,Yb,Dummy_Ua,Ub,Va,Vb,Kab,Kba,Set_53,SID,P1,P2) :=
 state_alice(A,B,Ra1,Ra2,Rb1,Rb2,Ro1,Ro2,Sa,Sb,H,Minus,Union,Pred,Conc,Expr,Ebilinear,0,Dummy_Ta,Tb,PKG,Qa,Qb,IDa,IDb,Dummy_P1,Dummy_P2,Dummy_Ha,Hb,Dummy_Ya,Yb,Dummy_Ua,Ub,Va,Vb,Kab,Kba,Set_53,SID).
 iknows(start)
=[exists P2,P1]=>
 state_alice(A,B,Ra1,Ra2,Rb1,Rb2,Ro1,Ro2,Sa,Sb,H,Minus,Union,Pred,Conc,Expr,Ebilinear,2,apply(Union,pair(apply(Pred,pair(Ra1,Dummy_P1)),apply(Pred,pair(Ra2,Dummy_P2)))),Tb,PKG,Qa,Qb,IDa,IDb,P1,P2,apply(H,Dummy_Ta),Hb,apply(Minus,pair(apply(Pred,pair(Dummy_Ha,Ra1)),Ra2)),Yb,apply(Pred,pair(apply(Expr,pair(apply(Ebilinear,pair(Dummy_P1,Dummy_P2)),Dummy_Ya)),apply(Ebilinear,pair(Qa,apply(Minus,PKG))))),Ub,Va,Vb,Kab,Kba,Set_53,SID).
 iknows(Dummy_Ta)

step step_1 (A,B,Ra1,Ra2,Rb1,Rb2,Ro1,Ro2,Sa,Sb,H,Minus,Union,Pred,Conc,Expr,Ebilinear,Ta,Tb,PKG,Qa,Qb,IDa,IDb,P1,P2,Ha,Dummy_Hb,Ya,Yb,Ua,Ub,Va,Dummy_Vb,Dummy_Kab,Kba,Dummy_Set_53,SID) :=
 state_alice(A,B,Ra1,Ra2,Rb1,Rb2,Ro1,Ro2,Sa,Sb,H,Minus,Union,Pred,Conc,Expr,Ebilinear,2,Ta,Tb,PKG,Qa,Qb,IDa,IDb,P1,P2,Ha,Dummy_Hb,Ya,Yb,Ua,Ub,Va,Dummy_Vb,Dummy_Kab,Kba,Dummy_Set_53,SID).
 iknows(Tb)
 =>
 state_alice(A,B,Ra1,Ra2,Rb1,Rb2,Ro1,Ro2,Sa,Sb,H,Minus,Union,Pred,Conc,Expr,Ebilinear,4,Ta,Tb,PKG,Qa,Qb,IDa,IDb,P1,P2,Ha,apply(H,Tb),Ya,Yb,Ua,Ub,Va,apply(Pred,pair(apply(Expr,pair(apply(Ebilinear,pair(P1,P2)),Dummy_Hb)),apply(Ebilinear,pair(apply(Minus,pair(Tb,Sb)),P1)))),apply(Ebilinear,pair(apply(Minus,pair(apply(Pred,pair(Ra1,P1)),apply(Pred,pair(Rb1,P2)))),Tb)),Kba,Dummy_Set_53,SID).
 secret(key1,key_id1,Dummy_Set_53).
 request(A,B,key1,key2,SID).
 contains(a,Dummy_Set_53).
 contains(b,Dummy_Set_53)

step step_2 (A,B,Ra1,Ra2,Rb1,Rb2,Ro1,Ro2,Sa,Sb,H,Minus,Union,Pred,Conc,Expr,Ebilinear,Ta,Dummy_Tb,PKG,Qa,Qb,IDa,IDb,Dummy_P1,Dummy_P2,Ha,Dummy_Hb,Ya,Dummy_Yb,Ua,Dummy_Ub,Va,Vb,Kab,Kba,Set_100,SID,P1,P2) :=
 state_bob(A,B,Ra1,Ra2,Rb1,Rb2,Ro1,Ro2,Sa,Sb,H,Minus,Union,Pred,Conc,Expr,Ebilinear,1,Ta,Dummy_Tb,PKG,Qa,Qb,IDa,IDb,Dummy_P1,Dummy_P2,Ha,Dummy_Hb,Ya,Dummy_Yb,Ua,Dummy_Ub,Va,Vb,Kab,Kba,Set_100,SID).
 iknows(Ta)
=[exists P2,P1]=>
 state_bob(A,B,Ra1,Ra2,Rb1,Rb2,Ro1,Ro2,Sa,Sb,H,Minus,Union,Pred,Conc,Expr,Ebilinear,3,Ta,apply(Union,pair(apply(Pred,pair(Rb1,Dummy_P1)),apply(Pred,pair(Rb2,Dummy_P2)))),PKG,Qa,Qb,IDa,IDb,P1,P2,Ha,apply(H,Dummy_Tb),Ya,apply(Minus,pair(apply(Pred,pair(Ha,Rb1)),Rb2)),Ua,apply(Pred,pair(apply(Expr,pair(apply(Ebilinear,pair(Dummy_P1,Dummy_P2)),Dummy_Yb)),apply(Ebilinear,pair(Qb,apply(Minus,PKG))))),Va,Vb,Kab,Kba,Set_100,SID).
 iknows(Dummy_Tb)

step step_3 (A,B,Ra1,Ra2,Rb1,Rb2,Ro1,Ro2,Sa,Sb,H,Minus,Union,Pred,Conc,Expr,Ebilinear,Ta,Tb,PKG,Qa,Qb,IDa,IDb,P1,P2,Dummy_Ha,Hb,Ya,Yb,Ua,Ub,Dummy_Va,Vb,Kab,Dummy_Kba,Dummy_Set_100,SID) :=
 state_bob(A,B,Ra1,Ra2,Rb1,Rb2,Ro1,Ro2,Sa,Sb,H,Minus,Union,Pred,Conc,Expr,Ebilinear,3,Ta,Tb,PKG,Qa,Qb,IDa,IDb,P1,P2,Dummy_Ha,Hb,Ya,Yb,Ua,Ub,Dummy_Va,Vb,Kab,Dummy_Kba,Dummy_Set_100,SID).
 iknows(Ta)
 =>
 state_bob(A,B,Ra1,Ra2,Rb1,Rb2,Ro1,Ro2,Sa,Sb,H,Minus,Union,Pred,Conc,Expr,Ebilinear,5,Ta,Tb,PKG,Qa,Qb,IDa,IDb,P1,P2,apply(H,Ta),Hb,Ya,Yb,Ua,Ub,apply(Pred,pair(apply(Expr,pair(apply(Ebilinear,pair(P1,P2)),Dummy_Ha)),apply(Ebilinear,pair(apply(Minus,pair(Ta,Sa)),P1)))),Vb,Kab,apply(Ebilinear,pair(apply(Minus,pair(apply(Pred,pair(Rb2,P2)),apply(Pred,pair(Rb1,P1)))),Ta)),Dummy_Set_100,SID).
 secret(key2,key_id2,Dummy_Set_100).
 request(B,A,key2,key1,SID).
 contains(b,Dummy_Set_100).
 contains(a,Dummy_Set_100)


section properties:

property secrecy_of_key_id1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,key_id1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_key_id2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,key_id2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_key1 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,key1,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,key1,MGoal))
     /\ ((request(A1Goal,A2Goal,key1,MGoal,SID1)
           /\ request(A1Goal,A2Goal,key1,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_key2 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,key2,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,key2,MGoal))
     /\ ((request(A1Goal,A2Goal,key2,MGoal,SID1)
           /\ request(A1Goal,A2Goal,key2,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_key_id1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,key_id1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_key_id2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,key_id2,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_key1 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,key1,MGoal,SID) &
 not(witness(A2Goal,A1Goal,key1,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_key1 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,key1,MGoal,SID1).
 request(A1Goal,A2Goal,key1,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_key2 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,key2,MGoal,SID) &
 not(witness(A2Goal,A1Goal,key2,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_key2 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,key2,MGoal,SID1).
 request(A1Goal,A2Goal,key2,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


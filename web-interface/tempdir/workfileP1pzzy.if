%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileP1pzzy

section signature:

state_sensorNode: agent * agent * nat * text * text * text * text * nat -> fact
state_user: agent * agent * hash_func * text * nat * text * text * text * text * text * set(text) * set(text) * set(agent) * nat -> fact


section types:

h, H: hash_func
Set_41, Set_37, Dummy_Set_41, Dummy_Set_37: set(text)
sub1, sub3, alice_bob, bob_alice, sub2: protocol_id
set_80, set_79, set_78, set_65, set_64, set_63: set
2, 7, 6, State, 4, SID, 1, Dummy_State, 0, 3, SID2, SID1: nat
Set_42, Dummy_Set_42, ASGoal: set(agent)
start, MGoal: message
TK, R, TS, UIDA, KAB, UAID, Dummy_KAB, Dummy_TS, Dummy_R, Dummy_TK, dummy_nonce, uaid: text
User, SNode, user, A2Goal, A1Goal, sn, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(user).
 iknows(sn).
 iknows(h).
 iknows(uaid).
 iknows(i).
 state_user(user,sn,h,dummy_nonce,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_63,set_64,set_65,3).
 state_sensorNode(sn,user,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,4).
 state_user(user,sn,h,dummy_nonce,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_78,set_79,set_80,6).
 state_sensorNode(sn,user,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,7)


section rules:

step step_0 (User,SNode,H,UAID,Dummy_TK,Dummy_R,Dummy_TS,UIDA,KAB,Dummy_Set_37,Set_41,Set_42,SID,R,TS) :=
 state_user(User,SNode,H,UAID,0,Dummy_TK,Dummy_R,Dummy_TS,UIDA,KAB,Dummy_Set_37,Set_41,Set_42,SID).
 iknows(start)
=[exists TS,R]=>
 state_user(User,SNode,H,UAID,1,pair(R,apply(h,UIDA)),R,TS,UIDA,KAB,Dummy_Set_37,Set_41,Set_42,SID).
 secret(Dummy_Set_37,sub1,User).
 iknows(pair(TS,pair(pair(R,apply(h,UIDA)),UIDA))).
 witness(User,SNode,alice_bob,pair(R,apply(h,UIDA))).
 contains(R,Dummy_Set_37)

step step_1 (User,SNode,H,UAID,TK,R,Dummy_TS,UIDA,Dummy_KAB,Set_37,Dummy_Set_41,Dummy_Set_42,SID,TS,KAB) :=
 state_user(User,SNode,H,UAID,1,TK,R,Dummy_TS,UIDA,Dummy_KAB,Set_37,Dummy_Set_41,Dummy_Set_42,SID).
 iknows(pair(KAB,TS))
 =>
 state_user(User,SNode,H,UAID,2,TK,R,TS,UIDA,KAB,Set_37,Dummy_Set_41,Dummy_Set_42,SID).
 request(SNode,User,bob_alice,KAB,SID).
 secret(Dummy_Set_41,sub3,Dummy_Set_42).
 contains(KAB,Dummy_Set_41).
 contains(User,Dummy_Set_42).
 contains(SNode,Dummy_Set_42)

step step_2 (SNode,User,Dummy_KAB,Dummy_TS,Dummy_TK,UIDA,SID,KAB,TS,TK) :=
 state_sensorNode(SNode,User,0,Dummy_KAB,Dummy_TS,Dummy_TK,UIDA,SID).
 iknows(pair(TS,pair(TK,UIDA)))
=[exists KAB]=>
 state_sensorNode(SNode,User,1,KAB,TS,TK,UIDA,SID).
 iknows(pair(KAB,TS)).
 witness(SNode,User,bob_alice,KAB).
 request(User,SNode,alice_bob,TK,SID)


section properties:

property secrecy_of_sub1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sub1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sub2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sub2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sub3 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sub3,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_alice_bob (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,alice_bob,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,alice_bob,MGoal))
     /\ ((request(A1Goal,A2Goal,alice_bob,MGoal,SID1)
           /\ request(A1Goal,A2Goal,alice_bob,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_bob_alice (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,bob_alice,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,bob_alice,MGoal))
     /\ ((request(A1Goal,A2Goal,bob_alice,MGoal,SID1)
           /\ request(A1Goal,A2Goal,bob_alice,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sub1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sub1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sub2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sub2,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sub3 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sub3,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_alice_bob (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,alice_bob,MGoal,SID) &
 not(witness(A2Goal,A1Goal,alice_bob,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_alice_bob (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,alice_bob,MGoal,SID1).
 request(A1Goal,A2Goal,alice_bob,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_bob_alice (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,bob_alice,MGoal,SID) &
 not(witness(A2Goal,A1Goal,bob_alice,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_bob_alice (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,bob_alice,MGoal,SID1).
 request(A1Goal,A2Goal,bob_alice,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


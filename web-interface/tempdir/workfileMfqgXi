role userA(
        A,B    :agent,
        UIDA    :text,
        H    :hash_func,
        SA,RA    :channel(dy))
played_by A def=

local
    State    :nat,
    TS    :text
init
    State := 0

transition
1. State = 0 /\ RCV(start) =|>
   State':= 1/\ TK':=h(UIDA)
         /\ TS':=new()
         /\ SND(TS'.TK'.UIDA)
         /\ witness(A,B,a_b,UIDA)
2. State = 1 /\ RCV(SIDB) =|>
   State':=2 /\ request(B,A,b_a,SIDB)
         /\ SK':= new()
         /\ secret(SK',k1,{A,B})
         /\ SND(SK')

end role

role sensornodeB(
            A,B    :agent,
            UIDA    :text,
            H    :hash_func,
            SA,RA    :channel(dy))
played_by B def=

local
    State    :nat

init
    State:=0
transition
1. State = 0 /\ RCV(TS'.TK'.UIDA) =|>
   State':=1 /\ request(A,B,a_b,UIDA)
         /\ SND(SIDB)
         /\ witness(B,A,b_a,SIDB)

end role

role session(
        A,B    :agent,
        UIDA    :text,
        H    :hash_func)
def=
local SA,SB,RA,RB    :channel(dy)

composition
    userA(A,B,UIDA,h,SA,RA)
    /\sensornodeB(A,B,SIDB,h,SB,RB)

end role

role environment()
def=
const
    a,b            :agent,
    k1,a_b,b_a        :protocol_id,
    h            :hash_func,
    sidb,uida,sk,tk,r    :text

intruder_knowledge = {a,b,h}
composition
    session(a,b,uida,h)
    /\session(a,b,sidb,h)
end role

goal
    secrecy_of k1
    authentication_on a_b
    authentication_on b_a
end goal
environment()

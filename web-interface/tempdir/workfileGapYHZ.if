%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileGapYHZ

section signature:

state_bank: agent * agent * symmetric_key * text * text * text * hash_func * nat * text * text * text * text * public_key * public_key * message * message * set(protocol_id) * set(protocol_id) * set(protocol_id) * set(protocol_id) * nat -> fact
state_payer: agent * agent * symmetric_key * text * text * text * hash_func * nat * text * text * text * text * public_key * public_key * message * message * set(protocol_id) * set(protocol_id) * set(protocol_id) * set(protocol_id) * set(protocol_id) * nat -> fact


section types:

ASGoal: set(agent)
Set_67, Set_66, Set_64, Set_63, Set_39, Set_38, Set_37, Set_34, Set_32, Dummy_Set_67, Dummy_Set_66, Dummy_Set_64, Dummy_Set_63, Dummy_Set_39, Dummy_Set_38, Dummy_Set_37, Dummy_Set_34, Dummy_Set_32: set(protocol_id)
dummy_hash, Hash: hash_func
SID2, SID1, SID, 7, 5, State, 6, 3, 4, 2, 1, 0, Dummy_State: nat
skbb, Skb: symmetric_key
MGoal, Amount, Payment_success, start, dummy_msg: message
KB, KPr, dummy_pk: public_key
idp, bi1, paye_id, NPr, NB, Alpha, Beta, Id, Bi, Payee_id, Dummy_Beta, Dummy_Alpha, Dummy_NB, Dummy_NPr, dummy_nonce: text
payer_bank_NPr, payer_bank_Skb, bank_payer_NB, bank_payer_Skb, nb, bank_payer_nb, bank_payer_skb, bank, npr, skb, payer_bank_npr, payer_bank_skb, payer: protocol_id
A2Goal, A1Goal, prr, ba, Pr, B, i: agent
set_124, set_123, set_122, set_121, set_105, set_104, set_103, set_102, set_101: set


section inits:

initial_state init1 := 
 iknows(start).
 iknows(prr).
 iknows(ba).
 iknows(skbb).
 iknows(idp).
 iknows(bi1).
 iknows(i).
 state_payer(prr,ba,skbb,idp,bi1,paye_id,dummy_hash,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_pk,dummy_pk,dummy_msg,dummy_msg,set_101,set_102,set_103,set_104,set_105,3).
 state_bank(ba,prr,skbb,idp,bi1,paye_id,dummy_hash,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_pk,dummy_pk,dummy_msg,dummy_msg,set_121,set_122,set_123,set_124,4)


section rules:

step step_0 (Pr,B,Skb,Id,Bi,Payee_id,Hash,Dummy_NPr,NB,Alpha,Beta,KB,KPr,Amount,Payment_success,Dummy_Set_32,Dummy_Set_34,Set_37,Set_38,Set_39,SID,NPr) :=
 state_payer(Pr,B,Skb,Id,Bi,Payee_id,Hash,0,Dummy_NPr,NB,Alpha,Beta,KB,KPr,Amount,Payment_success,Dummy_Set_32,Dummy_Set_34,Set_37,Set_38,Set_39,SID).
 iknows(start)
=[exists NPr]=>
 state_payer(Pr,B,Skb,Id,Bi,Payee_id,Hash,2,NPr,NB,Alpha,Beta,KB,KPr,Amount,Payment_success,Dummy_Set_32,Dummy_Set_34,Set_37,Set_38,Set_39,SID).
 iknows(crypt(KB,pair(Id,pair(Bi,NPr)))).
 witness(Pr,B,payer_bank_npr,Dummy_Set_34).
 contains(payer,Dummy_Set_32).
 contains(bank,Dummy_Set_32).
 contains(npr,Dummy_Set_34)

step step_1 (Pr,B,Skb,Id,Bi,Payee_id,Hash,Dummy_NPr,Dummy_NB,Dummy_Alpha,Beta,KB,KPr,Amount,Payment_success,Set_32,Set_34,Dummy_Set_37,Dummy_Set_38,Dummy_Set_39,SID,NPr,NB) :=
 state_payer(Pr,B,Skb,Id,Bi,Payee_id,Hash,2,Dummy_NPr,Dummy_NB,Dummy_Alpha,Beta,KB,KPr,Amount,Payment_success,Set_32,Set_34,Dummy_Set_37,Dummy_Set_38,Dummy_Set_39,SID).
 iknows(crypt(KPr,pair(Skb,NB)))
=[exists NPr]=>
 state_payer(Pr,B,Skb,Id,Bi,Payee_id,Hash,4,NPr,NB,apply(Hash,pair(Skb,pair(Amount,pair(Payee_id,NPr)))),Beta,KB,KPr,Amount,Payment_success,Set_32,Set_34,Dummy_Set_37,Dummy_Set_38,Dummy_Set_39,SID).
 iknows(scrypt(Skb,pair(Amount,pair(Payee_id,pair(NPr,apply(Hash,pair(Skb,pair(Amount,pair(Payee_id,NPr))))))))).
 witness(Pr,B,payer_bank_npr,payer_bank_skb,Dummy_Set_38,Dummy_Set_39).
 contains(payer,Dummy_Set_37).
 contains(bank,Dummy_Set_37).
 contains(npr,Dummy_Set_38).
 contains(skb,Dummy_Set_39)

step step_2 (Pr,B,Skb,Id,Bi,Payee_id,Hash,NPr,NB,Alpha,Dummy_Beta,KB,KPr,Amount,Payment_success,Set_32,Set_34,Set_37,Set_38,Set_39,SID) :=
 state_payer(Pr,B,Skb,Id,Bi,Payee_id,Hash,4,NPr,NB,Alpha,Dummy_Beta,KB,KPr,Amount,Payment_success,Set_32,Set_34,Set_37,Set_38,Set_39,SID).
 iknows(scrypt(Skb,pair(Payment_success,pair(Amount,pair(Payee_id,pair(NPr,pair(NB,Dummy_Beta)))))))
 =>
 state_payer(Pr,B,Skb,Id,Bi,Payee_id,Hash,6,NPr,NB,Alpha,apply(Hash,pair(Skb,pair(Payment_success,pair(Amount,pair(Payee_id,pair(NPr,NB)))))),KB,KPr,Amount,Payment_success,Set_32,Set_34,Set_37,Set_38,Set_39,SID)

step step_3 (B,Pr,Skb,Id,Bi,Payee_id,Hash,NPr,Dummy_NB,Alpha,Beta,KB,KPr,Amount,Payment_success,Dummy_Set_63,Dummy_Set_64,Set_66,Set_67,SID,NB) :=
 state_bank(B,Pr,Skb,Id,Bi,Payee_id,Hash,1,NPr,Dummy_NB,Alpha,Beta,KB,KPr,Amount,Payment_success,Dummy_Set_63,Dummy_Set_64,Set_66,Set_67,SID).
 iknows(start)
=[exists NB]=>
 state_bank(B,Pr,Skb,Id,Bi,Payee_id,Hash,3,NPr,NB,Alpha,Beta,KB,KPr,Amount,Payment_success,Dummy_Set_63,Dummy_Set_64,Set_66,Set_67,SID).
 iknows(crypt(KPr,pair(Skb,NB))).
 witness(Pr,B,bank_payer_nb,Dummy_Set_64).
 contains(payer,Dummy_Set_63).
 contains(bank,Dummy_Set_63).
 contains(nb,Dummy_Set_64)

step step_4 (B,Pr,Skb,Id,Bi,Payee_id,Hash,Dummy_NPr,Dummy_NB,Alpha,Dummy_Beta,KB,KPr,Amount,Payment_success,Set_63,Set_64,Dummy_Set_66,Dummy_Set_67,SID,NPr,NB) :=
 state_bank(B,Pr,Skb,Id,Bi,Payee_id,Hash,3,Dummy_NPr,Dummy_NB,Alpha,Dummy_Beta,KB,KPr,Amount,Payment_success,Set_63,Set_64,Dummy_Set_66,Dummy_Set_67,SID).
 iknows(crypt(KB,pair(Id,pair(Bi,Dummy_NPr))))
=[exists NB,NPr]=>
 state_bank(B,Pr,Skb,Id,Bi,Payee_id,Hash,5,NPr,NB,Alpha,apply(Hash,pair(Skb,pair(Payment_success,pair(Amount,pair(Payee_id,pair(NPr,NB)))))),KB,KPr,Amount,Payment_success,Set_63,Set_64,Dummy_Set_66,Dummy_Set_67,SID).
 iknows(scrypt(Skb,pair(Payment_success,pair(Amount,pair(Payee_id,pair(NPr,pair(NB,apply(Hash,pair(Skb,pair(Payment_success,pair(Amount,pair(Payee_id,pair(NPr,NB))))))))))))).
 witness(Pr,B,bank_payer_nb,payer_bank_npr).
 witness(Pr,B,bank_payer_skb,payer_bank_skb,Dummy_Set_67).
 contains(payer,Dummy_Set_66).
 contains(bank,Dummy_Set_66).
 contains(skb,Dummy_Set_67)

step step_5 (B,Pr,Skb,Id,Bi,Payee_id,Hash,NPr,NB,Dummy_Alpha,Beta,KB,KPr,Amount,Payment_success,Set_63,Set_64,Set_66,Set_67,SID) :=
 state_bank(B,Pr,Skb,Id,Bi,Payee_id,Hash,5,NPr,NB,Dummy_Alpha,Beta,KB,KPr,Amount,Payment_success,Set_63,Set_64,Set_66,Set_67,SID).
 iknows(scrypt(Skb,pair(Amount,pair(Payee_id,pair(NPr,Dummy_Alpha)))))
 =>
 state_bank(B,Pr,Skb,Id,Bi,Payee_id,Hash,7,NPr,NB,apply(Hash,pair(Skb,pair(Amount,pair(Payee_id,NPr)))),Beta,KB,KPr,Amount,Payment_success,Set_63,Set_64,Set_66,Set_67,SID)


section properties:

property secrecy_of_nb (MGoal,ASGoal) :=
 [] ((secret(MGoal,nb,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_npr (MGoal,ASGoal) :=
 [] ((secret(MGoal,npr,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_skb (MGoal,ASGoal) :=
 [] ((secret(MGoal,skb,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_bank_payer_nb (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,bank_payer_nb,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,bank_payer_nb,MGoal))
     /\ ((request(A1Goal,A2Goal,bank_payer_nb,MGoal,SID1)
           /\ request(A1Goal,A2Goal,bank_payer_nb,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_bank_payer_skb (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,bank_payer_skb,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,bank_payer_skb,MGoal))
     /\ ((request(A1Goal,A2Goal,bank_payer_skb,MGoal,SID1)
           /\ request(A1Goal,A2Goal,bank_payer_skb,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_payer_bank_skb (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,payer_bank_skb,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,payer_bank_skb,MGoal))
     /\ ((request(A1Goal,A2Goal,payer_bank_skb,MGoal,SID1)
           /\ request(A1Goal,A2Goal,payer_bank_skb,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_payer_bank_npr (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,payer_bank_npr,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,payer_bank_npr,MGoal))
     /\ ((request(A1Goal,A2Goal,payer_bank_npr,MGoal,SID1)
           /\ request(A1Goal,A2Goal,payer_bank_npr,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_nb (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,nb,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_npr (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,npr,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_skb (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,skb,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_bank_payer_nb (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,bank_payer_nb,MGoal,SID) &
 not(witness(A2Goal,A1Goal,bank_payer_nb,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_bank_payer_nb (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,bank_payer_nb,MGoal,SID1).
 request(A1Goal,A2Goal,bank_payer_nb,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_bank_payer_skb (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,bank_payer_skb,MGoal,SID) &
 not(witness(A2Goal,A1Goal,bank_payer_skb,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_bank_payer_skb (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,bank_payer_skb,MGoal,SID1).
 request(A1Goal,A2Goal,bank_payer_skb,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_payer_bank_skb (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,payer_bank_skb,MGoal,SID) &
 not(witness(A2Goal,A1Goal,payer_bank_skb,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_payer_bank_skb (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,payer_bank_skb,MGoal,SID1).
 request(A1Goal,A2Goal,payer_bank_skb,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_payer_bank_npr (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,payer_bank_npr,MGoal,SID) &
 not(witness(A2Goal,A1Goal,payer_bank_npr,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_payer_bank_npr (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,payer_bank_npr,MGoal,SID1).
 request(A1Goal,A2Goal,payer_bank_npr,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfile2ioAKM

section signature:

state_server: agent * agent * apply(hash_func,pair(agent,agent)) * hash_func * hash_func * hash_func * nat * text * text * text * text * apply(hash_func,pair(apply(hash_func,pair(agent,agent)),pair(agent,pair(text,text)))) * apply(hash_func,pair(apply(hash_func,pair(apply(hash_func,pair(agent,agent)),pair(agent,pair(text,text)))),text)) * set(agent) * set(agent) * nat -> fact
state_client: agent * agent * apply(hash_func,pair(agent,agent)) * hash_func * hash_func * hash_func * nat * text * text * text * text * apply(hash_func,pair(apply(hash_func,pair(agent,agent)),pair(agent,pair(text,text)))) * apply(hash_func,pair(apply(hash_func,pair(apply(hash_func,pair(agent,agent)),pair(agent,pair(text,text)))),text)) * set(agent) * set(agent) * nat -> fact


section types:

Dummy_Set_51, Dummy_Set_50, Dummy_Set_30, Dummy_Set_28, ASGoal, Set_51, Set_50, Set_30, Set_28: set(agent)
dummy_msg, MGoal, start: message
auths, autha, sec_PSK, sec_AK: protocol_id
Dummy_AuthA, Dummy_AuthS, AuthA, AuthS: apply(hash_func,pair(apply(hash_func,pair(apply(hash_func,pair(agent,agent)),pair(agent,pair(text,text)))),text))
Dummy_AK, AK: apply(hash_func,pair(apply(hash_func,pair(agent,agent)),pair(agent,pair(text,text))))
Dummy_ID, Dummy_Nc, Dummy_Ns, Dummy_T, dummy_nonce, T, Ns, Nc, ID: text
prf, mica, mics, PRF, MICA, MICS: hash_func
PSK: apply(hash_func,pair(agent,agent))
4, SID, Dummy_State, 3, SID2, SID1, State, 2, 1, 0, 10, 9, 7: nat
Dummy_A, A2Goal, A1Goal, a, s, A, S, i: agent
set_100, set_99, set_92, set_91, set_77, set_76, set_108, set_107, set_105, set_104, set_102, set_101: set


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(s).
 iknows(mica).
 iknows(mics).
 iknows(i).
 state_client(a,s,apply(prf,pair(a,s)),prf,mica,mics,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_76,set_77,3).
 state_server(s,a,apply(prf,pair(a,s)),prf,mica,mics,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_91,set_92,4).
 state_server(s,i,apply(prf,pair(i,s)),prf,mica,mics,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_101,set_102,7).
 state_client(a,s,apply(prf,pair(a,s)),prf,mica,mics,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_104,set_105,9).
 state_server(s,a,apply(prf,pair(a,s)),prf,mica,mics,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_107,set_108,10)


section rules:

step step_0 (A,S,PSK,PRF,MICA,MICS,T,Ns,Nc,ID,AK,AuthS,Set_28,Set_30,SID) :=
 state_client(A,S,PSK,PRF,MICA,MICS,0,T,Ns,Nc,ID,AK,AuthS,Set_28,Set_30,SID).
 iknows(start)
 =>
 state_client(A,S,PSK,PRF,MICA,MICS,1,T,Ns,Nc,ID,AK,AuthS,Set_28,Set_30,SID).
 iknows(A)

step step_1 (A,S,PSK,PRF,MICA,MICS,Dummy_T,Dummy_Ns,Dummy_Nc,ID,Dummy_AK,AuthS,Dummy_Set_28,Dummy_Set_30,SID,T,Ns,Nc) :=
 state_client(A,S,PSK,PRF,MICA,MICS,1,Dummy_T,Dummy_Ns,Dummy_Nc,ID,Dummy_AK,AuthS,Dummy_Set_28,Dummy_Set_30,SID).
 iknows(pair(Ns,pair(T,S)))
=[exists Nc]=>
 state_client(A,S,PSK,PRF,MICA,MICS,2,T,Ns,Nc,ID,apply(PRF,pair(PSK,pair(S,pair(Nc,T)))),AuthS,Dummy_Set_28,Dummy_Set_30,SID).
 iknows(pair(Nc,apply(MICA,pair(apply(PRF,pair(PSK,pair(S,pair(Nc,T)))),Ns)))).
 witness(A,S,autha,apply(MICA,pair(apply(PRF,pair(PSK,pair(S,pair(Nc,T)))),Ns))).
 secret(PSK,sec_PSK,Dummy_Set_28).
 contains(A,Dummy_Set_28).
 contains(S,Dummy_Set_28).
 contains(A,Dummy_Set_30).
 contains(S,Dummy_Set_30)

step step_2 (A,S,PSK,PRF,MICA,MICS,T,Ns,Dummy_Nc,Dummy_ID,Dummy_AK,Dummy_AuthS,Set_28,Set_30,SID,Nc,ID,AK) :=
 state_client(A,S,PSK,PRF,MICA,MICS,2,T,Ns,Dummy_Nc,Dummy_ID,Dummy_AK,Dummy_AuthS,Set_28,Set_30,SID).
 iknows(pair(ID,apply(MICS,pair(AK,Nc))))
 =>
 state_client(A,S,PSK,PRF,MICA,MICS,3,T,Ns,Nc,ID,AK,apply(MICS,pair(AK,Nc)),Set_28,Set_30,SID).
 request(S,A,auths,apply(MICS,pair(AK,Nc)),SID)

step step_3 (S,Dummy_A,PSK,PRF,MICA,MICS,Dummy_T,Dummy_Ns,Nc,ID,AK,AuthA,Set_50,Set_51,SID,A,T,Ns) :=
 state_server(S,Dummy_A,PSK,PRF,MICA,MICS,0,Dummy_T,Dummy_Ns,Nc,ID,AK,AuthA,Set_50,Set_51,SID).
 iknows(A)
=[exists T,Ns]=>
 state_server(S,A,PSK,PRF,MICA,MICS,1,T,Ns,Nc,ID,AK,AuthA,Set_50,Set_51,SID).
 iknows(pair(Ns,pair(T,S)))

step step_4 (S,A,PSK,PRF,MICA,MICS,T,Dummy_Ns,Dummy_Nc,Dummy_ID,Dummy_AK,Dummy_AuthA,Dummy_Set_50,Dummy_Set_51,SID,Ns,Nc,ID,AK) :=
 state_server(S,A,PSK,PRF,MICA,MICS,1,T,Dummy_Ns,Dummy_Nc,Dummy_ID,Dummy_AK,Dummy_AuthA,Dummy_Set_50,Dummy_Set_51,SID).
 iknows(pair(Nc,apply(MICA,pair(AK,Ns))))
=[exists ID]=>
 state_server(S,A,PSK,PRF,MICA,MICS,2,T,Ns,Nc,ID,AK,apply(MICA,pair(AK,Ns)),Dummy_Set_50,Dummy_Set_51,SID).
 request(S,A,autha,apply(MICA,pair(AK,Ns)),SID).
 iknows(pair(ID,apply(MICS,pair(AK,Nc)))).
 witness(S,A,auths,apply(MICS,pair(AK,Nc))).
 secret(PSK,sec_PSK,Dummy_Set_50).
 contains(A,Dummy_Set_50).
 contains(S,Dummy_Set_50).
 contains(A,Dummy_Set_51).
 contains(S,Dummy_Set_51)


section properties:

property secrecy_of_sec_PSK (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_PSK,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_autha (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,autha,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,autha,MGoal))
     /\ ((request(A1Goal,A2Goal,autha,MGoal,SID1)
           /\ request(A1Goal,A2Goal,autha,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_auths (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auths,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auths,MGoal))
     /\ ((request(A1Goal,A2Goal,auths,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auths,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sec_PSK (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_PSK,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_autha (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,autha,MGoal,SID) &
 not(witness(A2Goal,A1Goal,autha,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_autha (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,autha,MGoal,SID1).
 request(A1Goal,A2Goal,autha,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_auths (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auths,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auths,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auths (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auths,MGoal,SID1).
 request(A1Goal,A2Goal,auths,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


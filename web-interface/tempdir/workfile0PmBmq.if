%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfile0PmBmq

section signature:

state_server: agent * agent * hash_func * text * text * text * text * nat * text * text * text * text * set(agent) * nat -> fact
state_client: agent * agent * hash_func * text * text * text * text * nat * text * text * text * text * nat -> fact


section types:

set_85, set_84, set_77: set
sec_token, auth_token: protocol_id
3, 1, 10, State, 6, 4, SID, Dummy_State, 2, 0, SID2, SID1: nat
Set_44, Dummy_Set_44, ASGoal: set(agent)
start, MGoal: message
Finished, Random, Seed, Token, Na1, Na2, Dummy_Seed, Nab, Dummy_Random, Time, Dummy_Token, Dummy_Na2, Dummy_Na1, dummy_nonce, nab, nib, time: text
H, h: hash_func
A, B, A2Goal, A1Goal, a, b, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(nib).
 iknows(time).
 iknows(i).
 state_client(a,b,h,nab,time,dummy_nonce,dummy_nonce,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,3).
 state_server(b,a,h,nab,time,dummy_nonce,dummy_nonce,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_77,4).
 state_client(a,i,h,nib,time,dummy_nonce,dummy_nonce,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,6).
 state_server(b,i,h,nib,time,dummy_nonce,dummy_nonce,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_85,10)


section rules:

step step_0 (A,B,H,Nab,Time,Dummy_Na1,Dummy_Na2,Random,Seed,Token,Finished,SID) :=
 state_client(A,B,H,Nab,Time,Dummy_Na1,Dummy_Na2,0,Random,Seed,Token,Finished,SID).
 iknows(start)
 =>
 state_client(A,B,H,Nab,Time,apply(H,Nab),apply(H,pair(Time,pair(apply(H,Nab),apply(H,Nab)))),2,Random,Seed,Token,Finished,SID).
 iknows(pair(A,pair(apply(H,Nab),apply(H,pair(Time,pair(apply(H,Nab),apply(H,Nab)))))))

step step_1 (A,B,H,Nab,Time,Na1,Na2,Random,Seed,Dummy_Token,Finished,SID) :=
 state_client(A,B,H,Nab,Time,Na1,Na2,2,Random,Seed,Dummy_Token,Finished,SID).
 iknows(pair(A,pair(B,pair(Seed,Dummy_Token))))
 =>
 state_client(A,B,H,Nab,Time,Na1,Na2,4,Random,Seed,apply(H,pair(Seed,Na2)),Finished,SID).
 request(A,B,auth_token,Random,SID)

step step_2 (B,A,H,Nab,Time,Dummy_Na1,Dummy_Na2,Dummy_Random,Dummy_Seed,Dummy_Token,Finished,Dummy_Set_44,SID,Random) :=
 state_server(B,A,H,Nab,Time,Dummy_Na1,Dummy_Na2,1,Dummy_Random,Dummy_Seed,Dummy_Token,Finished,Dummy_Set_44,SID).
 iknows(pair(A,pair(Na1,Na2)))
=[exists Random]=>
 state_server(B,A,H,Nab,Time,apply(H,Nab),apply(H,pair(Time,pair(apply(H,Nab),apply(H,Nab)))),3,Random,apply(H,Random),apply(H,pair(apply(H,Random),apply(H,pair(Time,pair(apply(H,Nab),apply(H,Nab)))))),Finished,Dummy_Set_44,SID).
 iknows(pair(A,pair(B,apply(H,Random)))).
 witness(B,A,auth_token,Random).
 secret(Random,sec_token,Dummy_Set_44).
 contains(A,Dummy_Set_44).
 contains(B,Dummy_Set_44)


section properties:

property secrecy_of_sec_token (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_token,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_auth_token (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth_token,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth_token,MGoal))
     /\ ((request(A1Goal,A2Goal,auth_token,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth_token,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sec_token (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_token,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_auth_token (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth_token,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_token,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth_token (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth_token,MGoal,SID1).
 request(A1Goal,A2Goal,auth_token,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


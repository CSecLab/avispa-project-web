%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilelkMFmG

section signature:

state_gateway: agent * agent * hash_func * hash_func * hash_func * hash_func * hash_func * public_key * public_key * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * nat * apply(hash_func,pair(apply(hash_func,pair(text,pair(text,text))),pair(agent,pair(agent,pair(text,pair(text,text)))))) * apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text))))))) * apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text))))))) * apply(hash_func,pair(apply(hash_func,pair(apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text))))))),pair(text,pair(text,text)))),text)) * public_key * set(agent) * set(agent) * set(agent) * nat -> fact
state_client: agent * agent * hash_func * hash_func * hash_func * hash_func * hash_func * public_key * public_key * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * nat * apply(hash_func,pair(apply(hash_func,pair(text,pair(text,text))),pair(agent,pair(agent,pair(text,pair(text,text)))))) * apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text))))))) * apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text))))))) * apply(hash_func,pair(apply(hash_func,pair(apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text))))))),pair(text,pair(text,text)))),text)) * public_key * nat -> fact


section types:

set_173, set_172, set_171, set_162, set_161, set_160: set
s_mac, sec_clientK, sec_serverK, nps1, nps2: protocol_id
Mac, Dummy_Mac: apply(hash_func,pair(apply(hash_func,pair(apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text))))))),pair(text,pair(text,text)))),text))
ClientK, ServerK, Dummy_ServerK, Dummy_ClientK: apply(hash_func,pair(agent,pair(text,pair(text,apply(hash_func,pair(text,pair(text,text)))))))
Finished, Dummy_Finished: apply(hash_func,pair(apply(hash_func,pair(text,pair(text,text))),pair(agent,pair(agent,pair(text,pair(text,text))))))
Dummy_Set_58, Dummy_Set_57, Dummy_Set_55, Set_58, Set_57, Set_55, ASGoal: set(agent)
start, dummy_msg, MGoal: message
Pmsg, Kid, Result, Npc, Nps, Ccs, Pcertreq, Phellodone, Ns, Csus, VerNo, Csu, Pke, PMS, Np, SessID, Dummy_Pkeyexchange, Dummy_Cciphspec, Dummy_Ccs, Dummy_PMS, Dummy_Phellodone, Dummy_Pcertreq, Dummy_Pke, Dummy_Csu, start_eap_fast, Dummy_VerNo, respond_id, Dummy_Csus, request_id, Dummy_Ns, sid0, Dummy_SessID, Dummy_Np, Dummy_Nps, Dummy_Npc, dummy_nonce, Pkeyexchange, Cciphspec: text
Ks, Kp, Kar, Dummy_Kp, Dummy_Ks, dummy_pk, kp, ks, ki, kar: public_key
H, KeyGen, PRF, PRF1, INT, prf, prf1, int, h, keygen: hash_func
C, S, A2Goal, A1Goal, c, s, i: agent
11, 9, 7, 5, 3, 1, State, 4, SID, 10, 8, 6, 2, 0, Dummy_State, SID2, SID1, 13: nat


section inits:

initial_state init1 := 
 iknows(start).
 iknows(c).
 iknows(s).
 iknows(h).
 iknows(keygen).
 iknows(prf).
 iknows(prf1).
 iknows(int).
 iknows(kp).
 iknows(ks).
 iknows(kar).
 iknows(ki).
 iknows(inv(ki)).
 iknows(crypt(inv(kar),pair(i,ki))).
 iknows(i).
 state_client(c,s,h,keygen,prf,prf1,int,kp,kar,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,1,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_pk,3).
 state_gateway(s,c,h,keygen,prf,prf1,int,ks,kar,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,0,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_pk,set_160,set_161,set_162,4).
 state_gateway(s,i,h,keygen,prf,prf1,int,ks,kar,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,0,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_pk,set_171,set_172,set_173,7)


section rules:

step step_0 (C,S,H,KeyGen,PRF,PRF1,INT,Kp,Kar,Np,SessID,PMS,Ns,Csus,VerNo,Csu,Pke,Ccs,Pcertreq,Phellodone,Npc,Nps,Result,Kid,Pmsg,Finished,ClientK,ServerK,Mac,Ks,SID) :=
 state_client(C,S,H,KeyGen,PRF,PRF1,INT,Kp,Kar,Np,SessID,PMS,Ns,Csus,VerNo,Csu,Pke,Ccs,Pcertreq,Phellodone,Npc,Nps,Result,Kid,Pmsg,1,Finished,ClientK,ServerK,Mac,Ks,SID).
 iknows(start)
 =>
 state_client(C,S,H,KeyGen,PRF,PRF1,INT,Kp,Kar,Np,SessID,PMS,Ns,Csus,VerNo,Csu,Pke,Ccs,Pcertreq,Phellodone,Npc,Nps,Result,Kid,Pmsg,3,Finished,ClientK,ServerK,Mac,Ks,SID).
 iknows(0)

step step_1 (C,S,H,KeyGen,PRF,PRF1,INT,Kp,Kar,Np,SessID,PMS,Ns,Csus,VerNo,Csu,Pke,Ccs,Pcertreq,Phellodone,Dummy_Npc,Dummy_Nps,Result,Kid,Pmsg,Finished,ClientK,ServerK,Mac,Ks,SID,Npc,Nps) :=
 state_client(C,S,H,KeyGen,PRF,PRF1,INT,Kp,Kar,Np,SessID,PMS,Ns,Csus,VerNo,Csu,Pke,Ccs,Pcertreq,Phellodone,Dummy_Npc,Dummy_Nps,Result,Kid,Pmsg,3,Finished,ClientK,ServerK,Mac,Ks,SID).
 iknows(Nps)
=[exists Npc]=>
 state_client(C,S,H,KeyGen,PRF,PRF1,INT,Kp,Kar,Np,SessID,PMS,Ns,Csus,VerNo,Csu,Pke,Ccs,Pcertreq,Phellodone,Npc,Nps,Result,Kid,Pmsg,5,Finished,ClientK,ServerK,Mac,Ks,SID).
 iknows(Npc)

step step_2 (C,S,H,KeyGen,PRF,PRF1,INT,Kp,Kar,Np,SessID,PMS,Ns,Csus,VerNo,Csu,Pke,Ccs,Pcertreq,Phellodone,Npc,Nps,Result,Kid,Pmsg,Finished,ClientK,ServerK,Mac,Ks,SID) :=
 state_client(C,S,H,KeyGen,PRF,PRF1,INT,Kp,Kar,Np,SessID,PMS,Ns,Csus,VerNo,Csu,Pke,Ccs,Pcertreq,Phellodone,Npc,Nps,Result,Kid,Pmsg,5,Finished,ClientK,ServerK,Mac,Ks,SID).
 iknows(pair(respond_id,S))
 =>
 state_client(C,S,H,KeyGen,PRF,PRF1,INT,Kp,Kar,Np,SessID,PMS,Ns,Csus,VerNo,Csu,Pke,Ccs,Pcertreq,Phellodone,Npc,Nps,Result,Kid,Pmsg,7,Finished,ClientK,ServerK,Mac,Ks,SID).
 iknows(start_eap_fast)

step step_3 (C,S,H,KeyGen,PRF,PRF1,INT,Kp,Kar,Dummy_Np,Dummy_SessID,PMS,Dummy_Ns,Dummy_Csus,Dummy_VerNo,Dummy_Csu,Dummy_Pke,Ccs,Dummy_Pcertreq,Dummy_Phellodone,Npc,Nps,Result,Kid,Pmsg,Finished,ClientK,ServerK,Mac,Ks,SID,Np,SessID,Ns,Csus,VerNo,Csu,Pke,Pcertreq,Phellodone) :=
 state_client(C,S,H,KeyGen,PRF,PRF1,INT,Kp,Kar,Dummy_Np,Dummy_SessID,PMS,Dummy_Ns,Dummy_Csus,Dummy_VerNo,Dummy_Csu,Dummy_Pke,Ccs,Dummy_Pcertreq,Dummy_Phellodone,Npc,Nps,Result,Kid,Pmsg,7,Finished,ClientK,ServerK,Mac,Ks,SID).
 iknows(pair(VerNo,pair(sid0,pair(Ns,Csus))))
=[exists Csu,Pke,Pcertreq,Phellodone,SessID,Np]=>
 state_client(C,S,H,KeyGen,PRF,PRF1,INT,Kp,Kar,Np,SessID,PMS,Ns,Csus,VerNo,Csu,Pke,Ccs,Pcertreq,Phellodone,Npc,Nps,Result,Kid,Pmsg,9,Finished,ClientK,ServerK,Mac,Ks,SID).
 iknows(pair(VerNo,pair(SessID,pair(Np,pair(Csu,pair(crypt(inv(Kar),pair(C,Kp)),pair(Pke,pair(Pcertreq,Phellodone)))))))).
 witness(C,S,nps1,pair(Ns,Np))

step step_4 (C,S,H,KeyGen,PRF,PRF1,INT,Kp,Kar,Np,SessID,Dummy_PMS,Ns,Csus,VerNo,Csu,Pke,Dummy_Ccs,Pcertreq,Phellodone,Npc,Nps,Result,Kid,Pmsg,Dummy_Finished,Dummy_ClientK,Dummy_ServerK,Mac,Dummy_Ks,SID,PMS,Ccs,Ks) :=
 state_client(C,S,H,KeyGen,PRF,PRF1,INT,Kp,Kar,Np,SessID,Dummy_PMS,Ns,Csus,VerNo,Csu,Pke,Dummy_Ccs,Pcertreq,Phellodone,Npc,Nps,Result,Kid,Pmsg,9,Dummy_Finished,Dummy_ClientK,Dummy_ServerK,Mac,Dummy_Ks,SID).
 iknows(pair(crypt(inv(Kar),pair(S,Ks)),pair(crypt(Kp,PMS),pair(crypt(inv(Ks),apply(H,pair(Ns,pair(Np,pair(C,PMS))))),pair(Ccs,scrypt(apply(KeyGen,pair(S,pair(Ns,pair(Np,apply(PRF,pair(PMS,pair(Ns,Np))))))),apply(H,pair(apply(PRF,pair(PMS,pair(Ns,Np))),pair(S,pair(C,pair(Ns,pair(Csu,SessID))))))))))))
 =>
 state_client(C,S,H,KeyGen,PRF,PRF1,INT,Kp,Kar,Np,SessID,PMS,Ns,Csus,VerNo,Csu,Pke,Ccs,Pcertreq,Phellodone,Npc,Nps,Result,Kid,Pmsg,11,apply(H,pair(apply(PRF,pair(PMS,pair(Ns,Np))),pair(S,pair(C,pair(Ns,pair(Csu,SessID)))))),apply(KeyGen,pair(C,pair(Ns,pair(Np,apply(PRF,pair(PMS,pair(Ns,Np))))))),apply(KeyGen,pair(S,pair(Ns,pair(Np,apply(PRF,pair(PMS,pair(Ns,Np))))))),Mac,Ks,SID).
 iknows(pair(Ccs,scrypt(apply(KeyGen,pair(C,pair(Ns,pair(Np,apply(PRF,pair(PMS,pair(Ns,Np))))))),apply(H,pair(apply(PRF,pair(PMS,pair(Ns,Np))),pair(S,pair(C,pair(Ns,pair(Csu,SessID))))))))).
 request(C,S,nps2,pair(Ns,Np),SID)

step step_5 (C,S,H,KeyGen,PRF,PRF1,INT,Kp,Kar,Dummy_Np,SessID,Dummy_PMS,Ns,Csus,VerNo,Csu,Pke,Ccs,Pcertreq,Phellodone,Dummy_Npc,Nps,Result,Kid,Pmsg,Finished,ClientK,ServerK,Dummy_Mac,Ks,SID,Np,PMS,Npc) :=
 state_client(C,S,H,KeyGen,PRF,PRF1,INT,Kp,Kar,Dummy_Np,SessID,Dummy_PMS,Ns,Csus,VerNo,Csu,Pke,Ccs,Pcertreq,Phellodone,Dummy_Npc,Nps,Result,Kid,Pmsg,11,Finished,ClientK,ServerK,Dummy_Mac,Ks,SID).
 iknows(apply(INT,pair(apply(PRF1,pair(apply(KeyGen,pair(C,pair(Ns,pair(Np,apply(PRF,pair(PMS,pair(Ns,Np))))))),pair(Nps,pair(Npc,Kid)))),Pmsg)))
 =>
 state_client(C,S,H,KeyGen,PRF,PRF1,INT,Kp,Kar,Np,SessID,PMS,Ns,Csus,VerNo,Csu,Pke,Ccs,Pcertreq,Phellodone,Npc,Nps,Result,Kid,Pmsg,13,Finished,ClientK,ServerK,apply(INT,pair(apply(PRF1,pair(apply(KeyGen,pair(C,pair(Ns,pair(Np,apply(PRF,pair(PMS,pair(Ns,Np))))))),pair(Nps,pair(Npc,Kid)))),Pmsg)),Ks,SID).
 iknows(apply(INT,pair(apply(PRF1,pair(apply(KeyGen,pair(C,pair(Ns,pair(Np,apply(PRF,pair(PMS,pair(Ns,Np))))))),pair(Nps,pair(Npc,Kid)))),Pmsg)))

step step_6 (S,C,H,KeyGen,PRF,PRF1,INT,Kar,Ks,Ns,Csus,PMS,SessID,Np,VerNo,Csu,Ccs,Pcertreq,Pkeyexchange,Phellodone,Cciphspec,Npc,Dummy_Nps,Result,Kid,Pmsg,Finished,ClientK,ServerK,Mac,Kp,Set_55,Set_57,Set_58,SID,Nps) :=
 state_gateway(S,C,H,KeyGen,PRF,PRF1,INT,Kar,Ks,Ns,Csus,PMS,SessID,Np,VerNo,Csu,Ccs,Pcertreq,Pkeyexchange,Phellodone,Cciphspec,Npc,Dummy_Nps,Result,Kid,Pmsg,0,Finished,ClientK,ServerK,Mac,Kp,Set_55,Set_57,Set_58,SID).
 iknows(0)
=[exists Nps]=>
 state_gateway(S,C,H,KeyGen,PRF,PRF1,INT,Kar,Ks,Ns,Csus,PMS,SessID,Np,VerNo,Csu,Ccs,Pcertreq,Pkeyexchange,Phellodone,Cciphspec,Npc,Nps,Result,Kid,Pmsg,2,Finished,ClientK,ServerK,Mac,Kp,Set_55,Set_57,Set_58,SID).
 iknows(Nps)

step step_7 (S,C,H,KeyGen,PRF,PRF1,INT,Kar,Ks,Ns,Csus,PMS,SessID,Np,VerNo,Csu,Ccs,Pcertreq,Pkeyexchange,Phellodone,Cciphspec,Dummy_Npc,Nps,Result,Kid,Pmsg,Finished,ClientK,ServerK,Mac,Kp,Set_55,Set_57,Set_58,SID,Npc) :=
 state_gateway(S,C,H,KeyGen,PRF,PRF1,INT,Kar,Ks,Ns,Csus,PMS,SessID,Np,VerNo,Csu,Ccs,Pcertreq,Pkeyexchange,Phellodone,Cciphspec,Dummy_Npc,Nps,Result,Kid,Pmsg,2,Finished,ClientK,ServerK,Mac,Kp,Set_55,Set_57,Set_58,SID).
 iknows(Npc)
 =>
 state_gateway(S,C,H,KeyGen,PRF,PRF1,INT,Kar,Ks,Ns,Csus,PMS,SessID,Np,VerNo,Csu,Ccs,Pcertreq,Pkeyexchange,Phellodone,Cciphspec,Npc,Nps,Result,Kid,Pmsg,4,Finished,ClientK,ServerK,Mac,Kp,Set_55,Set_57,Set_58,SID).
 iknows(pair(respond_id,S))

step step_8 (S,C,H,KeyGen,PRF,PRF1,INT,Kar,Ks,Dummy_Ns,Csus,PMS,SessID,Np,Dummy_VerNo,Csu,Ccs,Pcertreq,Pkeyexchange,Phellodone,Dummy_Cciphspec,Npc,Nps,Result,Kid,Pmsg,Finished,ClientK,ServerK,Mac,Kp,Set_55,Set_57,Set_58,SID,Ns,VerNo,Cciphspec) :=
 state_gateway(S,C,H,KeyGen,PRF,PRF1,INT,Kar,Ks,Dummy_Ns,Csus,PMS,SessID,Np,Dummy_VerNo,Csu,Ccs,Pcertreq,Pkeyexchange,Phellodone,Dummy_Cciphspec,Npc,Nps,Result,Kid,Pmsg,4,Finished,ClientK,ServerK,Mac,Kp,Set_55,Set_57,Set_58,SID).
 iknows(start_eap_fast)
=[exists VerNo,Cciphspec,Ns]=>
 state_gateway(S,C,H,KeyGen,PRF,PRF1,INT,Kar,Ks,Ns,Csus,PMS,SessID,Np,VerNo,Csu,Ccs,Pcertreq,Pkeyexchange,Phellodone,Cciphspec,Npc,Nps,Result,Kid,Pmsg,6,Finished,ClientK,ServerK,Mac,Kp,Set_55,Set_57,Set_58,SID).
 iknows(pair(VerNo,pair(sid0,pair(Ns,Cciphspec))))

step step_9 (S,C,H,KeyGen,PRF,PRF1,INT,Kar,Ks,Ns,Csus,Dummy_PMS,Dummy_SessID,Dummy_Np,VerNo,Dummy_Csu,Ccs,Dummy_Pcertreq,Dummy_Pkeyexchange,Dummy_Phellodone,Dummy_Cciphspec,Npc,Nps,Result,Kid,Pmsg,Dummy_Finished,Dummy_ClientK,Dummy_ServerK,Mac,Dummy_Kp,Set_55,Set_57,Set_58,SID,PMS,SessID,Np,Csu,Pcertreq,Pkeyexchange,Phellodone,Cciphspec,Kp) :=
 state_gateway(S,C,H,KeyGen,PRF,PRF1,INT,Kar,Ks,Ns,Csus,Dummy_PMS,Dummy_SessID,Dummy_Np,VerNo,Dummy_Csu,Ccs,Dummy_Pcertreq,Dummy_Pkeyexchange,Dummy_Phellodone,Dummy_Cciphspec,Npc,Nps,Result,Kid,Pmsg,6,Dummy_Finished,Dummy_ClientK,Dummy_ServerK,Mac,Dummy_Kp,Set_55,Set_57,Set_58,SID).
 iknows(pair(VerNo,pair(SessID,pair(Np,pair(Csu,pair(crypt(inv(Kar),pair(C,Kp)),pair(Pkeyexchange,pair(Pcertreq,Phellodone))))))))
=[exists Cciphspec,PMS]=>
 state_gateway(S,C,H,KeyGen,PRF,PRF1,INT,Kar,Ks,Ns,Csus,PMS,SessID,Np,VerNo,Csu,Ccs,Pcertreq,Pkeyexchange,Phellodone,Cciphspec,Npc,Nps,Result,Kid,Pmsg,8,apply(H,pair(apply(PRF,pair(PMS,pair(Ns,Np))),pair(S,pair(C,pair(Ns,pair(Csu,SessID)))))),apply(KeyGen,pair(C,pair(Ns,pair(Np,apply(PRF,pair(PMS,pair(Ns,Np))))))),apply(KeyGen,pair(S,pair(Ns,pair(Np,apply(PRF,pair(PMS,pair(Ns,Np))))))),Mac,Kp,Set_55,Set_57,Set_58,SID).
 iknows(pair(crypt(inv(Kar),pair(S,Ks)),pair(crypt(Kp,PMS),pair(crypt(inv(Ks),apply(H,pair(Ns,pair(Np,pair(C,PMS))))),pair(Cciphspec,scrypt(apply(KeyGen,pair(S,pair(Ns,pair(Np,apply(PRF,pair(PMS,pair(Ns,Np))))))),apply(H,pair(apply(PRF,pair(PMS,pair(Ns,Np))),pair(S,pair(C,pair(Ns,pair(Csu,SessID)))))))))))).
 witness(S,C,nps2,pair(Ns,Np))

step step_10 (S,C,H,KeyGen,PRF,PRF1,INT,Kar,Ks,Ns,Csus,PMS,SessID,Np,VerNo,Csu,Ccs,Pcertreq,Pkeyexchange,Phellodone,Cciphspec,Npc,Nps,Result,Kid,Pmsg,Finished,ClientK,ServerK,Dummy_Mac,Kp,Dummy_Set_55,Dummy_Set_57,Dummy_Set_58,SID) :=
 state_gateway(S,C,H,KeyGen,PRF,PRF1,INT,Kar,Ks,Ns,Csus,PMS,SessID,Np,VerNo,Csu,Ccs,Pcertreq,Pkeyexchange,Phellodone,Cciphspec,Npc,Nps,Result,Kid,Pmsg,8,Finished,ClientK,ServerK,Dummy_Mac,Kp,Dummy_Set_55,Dummy_Set_57,Dummy_Set_58,SID).
 iknows(pair(Ccs,scrypt(ClientK,Finished)))
 =>
 state_gateway(S,C,H,KeyGen,PRF,PRF1,INT,Kar,Ks,Ns,Csus,PMS,SessID,Np,VerNo,Csu,Ccs,Pcertreq,Pkeyexchange,Phellodone,Cciphspec,Npc,Nps,Result,Kid,Pmsg,10,Finished,ClientK,ServerK,apply(INT,pair(apply(PRF1,pair(apply(KeyGen,pair(S,pair(Ns,pair(Np,apply(PRF,pair(PMS,pair(Ns,Np))))))),pair(Nps,pair(Npc,Kid)))),Pmsg)),Kp,Dummy_Set_55,Dummy_Set_57,Dummy_Set_58,SID).
 iknows(apply(INT,pair(apply(PRF1,pair(apply(KeyGen,pair(S,pair(Ns,pair(Np,apply(PRF,pair(PMS,pair(Ns,Np))))))),pair(Nps,pair(Npc,Kid)))),Pmsg))).
 secret(ServerK,sec_serverK,Dummy_Set_55).
 secret(ClientK,sec_clientK,Dummy_Set_57).
 secret(Dummy_Mac,s_mac,Dummy_Set_58).
 request(S,C,nps1,pair(Ns,Np),SID).
 contains(C,Dummy_Set_55).
 contains(S,Dummy_Set_55).
 contains(C,Dummy_Set_57).
 contains(S,Dummy_Set_57).
 contains(C,Dummy_Set_58).
 contains(S,Dummy_Set_58)


section properties:

property secrecy_of_sec_clientK (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_clientK,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_serverK (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_serverK,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_s_mac (MGoal,ASGoal) :=
 [] ((secret(MGoal,s_mac,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_nps1 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,nps1,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,nps1,MGoal))
     /\ ((request(A1Goal,A2Goal,nps1,MGoal,SID1)
           /\ request(A1Goal,A2Goal,nps1,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_nps2 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,nps2,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,nps2,MGoal))
     /\ ((request(A1Goal,A2Goal,nps2,MGoal,SID1)
           /\ request(A1Goal,A2Goal,nps2,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sec_clientK (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_clientK,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_serverK (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_serverK,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_s_mac (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,s_mac,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_nps1 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,nps1,MGoal,SID) &
 not(witness(A2Goal,A1Goal,nps1,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_nps1 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,nps1,MGoal,SID1).
 request(A1Goal,A2Goal,nps1,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_nps2 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,nps2,MGoal,SID) &
 not(witness(A2Goal,A1Goal,nps2,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_nps2 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,nps2,MGoal,SID1).
 request(A1Goal,A2Goal,nps2,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


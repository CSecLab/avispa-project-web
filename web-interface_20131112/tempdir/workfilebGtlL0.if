%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilebGtlL0

section signature:

state_ra: agent * agent * agent * agent * message * message * message * message * message * symmetric_key * nat * text * set(agent) * nat -> fact
state_hsp: agent * agent * agent * agent * message * message * message * message * message * symmetric_key * symmetric_key * nat * text * nat -> fact
state_doc: agent * agent * agent * agent * message * message * message * message * message * symmetric_key * nat * text * text * text * set(agent) * nat -> fact
state_patient: agent * agent * agent * agent * message * message * message * message * message * symmetric_key * nat * text * text * text * set(agent) * nat -> fact


section types:

set_149, set_142, set_134: set
Set_94, Set_53, Dummy_Set_94, Dummy_Set_53, Dummy_Set_25, ASGoal, Set_25: set(agent)
p, ra_hsp_a1, f1, patient_doc_f1, doc_patient_f, f: protocol_id
PHI, F, F1, Dummy_PHI, Dummy_F1, Dummy_F, dummy_nonce: text
12, 5, State, 11, 6, 4, 10, 7, 3, 1, SID, Dummy_State, 9, SID2, SID1, 8, 2, 0: nat
MS_HSP, Sk, sk, ms: symmetric_key
ID_A, ID_B, ID_C, ID_D, SERVUT, MGoal, id_A, id_B, id_C, start, id_D, servut: message
A, B, C, D, A2Goal, A1Goal, a, b, c, d, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(c).
 iknows(d).
 iknows(id_A).
 iknows(id_B).
 iknows(id_C).
 iknows(id_D).
 iknows(servut).
 iknows(i).
 state_patient(a,b,c,d,id_A,id_B,id_C,id_D,servut,sk,0,dummy_nonce,dummy_nonce,dummy_nonce,set_134,3).
 state_doc(b,a,c,d,id_A,id_B,id_C,id_D,servut,sk,1,dummy_nonce,dummy_nonce,dummy_nonce,set_142,4).
 state_hsp(c,a,b,d,id_A,id_B,id_C,id_D,servut,sk,ms,4,dummy_nonce,5).
 state_ra(d,a,b,c,id_A,id_B,id_C,id_D,servut,ms,5,dummy_nonce,set_149,6)


section rules:

step step_0 (A,B,C,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,Dummy_F,F1,PHI,Dummy_Set_25,SID,F) :=
 state_patient(A,B,C,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,0,Dummy_F,F1,PHI,Dummy_Set_25,SID).
 iknows(start)
=[exists F]=>
 state_patient(A,B,C,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,2,F,F1,PHI,Dummy_Set_25,SID).
 iknows(pair(ID_A,pair(SERVUT,scrypt(Sk,F)))).
 secret(F,f,Dummy_Set_25).
 witness(A,B,doc_patient_f,F).
 contains(A,Dummy_Set_25).
 contains(B,Dummy_Set_25)

step step_1 (A,B,C,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,F,Dummy_F1,PHI,Set_25,SID,F1) :=
 state_patient(A,B,C,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,2,F,Dummy_F1,PHI,Set_25,SID).
 iknows(scrypt(Sk,pair(F,F1)))
 =>
 state_patient(A,B,C,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,8,F,F1,PHI,Set_25,SID).
 iknows(scrypt(Sk,F1)).
 request(A,B,patient_doc_f1,F1,SID)

step step_2 (A,B,C,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,F,F1,PHI,Set_25,SID) :=
 state_patient(A,B,C,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,8,F,F1,PHI,Set_25,SID).
 iknows(scrypt(Sk,PHI))
 =>
 state_patient(A,B,C,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,9,F,F1,PHI,Set_25,SID)

step step_3 (B,A,C,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,Dummy_F,Dummy_F1,PHI,Dummy_Set_53,SID,F,F1) :=
 state_doc(B,A,C,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,1,Dummy_F,Dummy_F1,PHI,Dummy_Set_53,SID).
 iknows(pair(ID_A,scrypt(Sk,pair(SERVUT,F))))
=[exists F1]=>
 state_doc(B,A,C,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,3,F,F1,PHI,Dummy_Set_53,SID).
 iknows(scrypt(Sk,pair(Dummy_F,F1))).
 secret(F1,f1,Dummy_Set_53).
 witness(B,A,patient_doc_f1,F1).
 contains(A,Dummy_Set_53).
 contains(B,Dummy_Set_53)

step step_4 (B,A,C,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,F,Dummy_F1,PHI,Set_53,SID,F1) :=
 state_doc(B,A,C,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,3,F,Dummy_F1,PHI,Set_53,SID).
 iknows(scrypt(Sk,F1))
 =>
 state_doc(B,A,C,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,7,F,F1,PHI,Set_53,SID).
 request(B,A,doc_patient_f,F,SID).
 iknows(ID_B)

step step_5 (B,A,C,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,F,F1,Dummy_PHI,Set_53,SID,PHI) :=
 state_doc(B,A,C,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,7,F,F1,Dummy_PHI,Set_53,SID).
 iknows(scrypt(Sk,pair(ID_A,PHI)))
 =>
 state_doc(B,A,C,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,10,F,F1,PHI,Set_53,SID).
 iknows(scrypt(Sk,Dummy_PHI))

step step_6 (C,A,B,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,MS_HSP,PHI,SID) :=
 state_hsp(C,A,B,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,MS_HSP,4,PHI,SID).
 iknows(ID_B)
 =>
 state_hsp(C,A,B,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,MS_HSP,6,PHI,SID).
 iknows(pair(ID_C,scrypt(MS_HSP,ID_A))).
 witness(C,D,ra_hsp_a1,ID_A)

step step_7 (C,A,B,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,MS_HSP,Dummy_PHI,SID,PHI) :=
 state_hsp(C,A,B,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,MS_HSP,6,Dummy_PHI,SID).
 iknows(scrypt(MS_HSP,pair(ID_A,PHI)))
 =>
 state_hsp(C,A,B,D,ID_A,ID_B,ID_C,ID_D,SERVUT,Sk,MS_HSP,11,PHI,SID).
 iknows(scrypt(Sk,pair(ID_A,PHI)))

step step_8 (D,A,B,C,ID_A,ID_B,ID_C,ID_D,SERVUT,MS_HSP,Dummy_PHI,Dummy_Set_94,SID,PHI) :=
 state_ra(D,A,B,C,ID_A,ID_B,ID_C,ID_D,SERVUT,MS_HSP,5,Dummy_PHI,Dummy_Set_94,SID).
 iknows(pair(ID_C,scrypt(MS_HSP,ID_A)))
=[exists PHI]=>
 state_ra(D,A,B,C,ID_A,ID_B,ID_C,ID_D,SERVUT,MS_HSP,12,PHI,Dummy_Set_94,SID).
 iknows(scrypt(MS_HSP,pair(ID_A,PHI))).
 secret(PHI,p,Dummy_Set_94).
 request(D,C,ra_hsp_a1,ID_A,SID).
 contains(A,Dummy_Set_94).
 contains(B,Dummy_Set_94).
 contains(C,Dummy_Set_94).
 contains(D,Dummy_Set_94)


section properties:

property secrecy_of_f (MGoal,ASGoal) :=
 [] ((secret(MGoal,f,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_f1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,f1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_p (MGoal,ASGoal) :=
 [] ((secret(MGoal,p,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_doc_patient_f (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,doc_patient_f,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,doc_patient_f,MGoal))
     /\ ((request(A1Goal,A2Goal,doc_patient_f,MGoal,SID1)
           /\ request(A1Goal,A2Goal,doc_patient_f,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_patient_doc_f1 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,patient_doc_f1,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,patient_doc_f1,MGoal))
     /\ ((request(A1Goal,A2Goal,patient_doc_f1,MGoal,SID1)
           /\ request(A1Goal,A2Goal,patient_doc_f1,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_ra_hsp_a1 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,ra_hsp_a1,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,ra_hsp_a1,MGoal))
     /\ ((request(A1Goal,A2Goal,ra_hsp_a1,MGoal,SID1)
           /\ request(A1Goal,A2Goal,ra_hsp_a1,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_f (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,f,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_f1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,f1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_p (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,p,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_doc_patient_f (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,doc_patient_f,MGoal,SID) &
 not(witness(A2Goal,A1Goal,doc_patient_f,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_doc_patient_f (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,doc_patient_f,MGoal,SID1).
 request(A1Goal,A2Goal,doc_patient_f,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_patient_doc_f1 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,patient_doc_f1,MGoal,SID) &
 not(witness(A2Goal,A1Goal,patient_doc_f1,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_patient_doc_f1 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,patient_doc_f1,MGoal,SID1).
 request(A1Goal,A2Goal,patient_doc_f1,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_ra_hsp_a1 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,ra_hsp_a1,MGoal,SID) &
 not(witness(A2Goal,A1Goal,ra_hsp_a1,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_ra_hsp_a1 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,ra_hsp_a1,MGoal,SID1).
 request(A1Goal,A2Goal,ra_hsp_a1,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


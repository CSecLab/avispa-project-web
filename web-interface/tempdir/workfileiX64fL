role alice(
A,B,S : agent,
Kas: symmetric_key,
Kab : protocol_id,
SND,RCV: channel(dy))
played_by  A def=
local
Kab : protocol_id,
State,Ta:nat,
M,Mb:text,
Kab:message
init 
State := 0
transition
1.State = 0 
/\RCV(start) =|> State' := 2 
/\ Kab':= new() 
/\ Ta':= new() 
/\ SND(A,{Kab'.Ta'.B}_Kas) 
/\ secret(Kab',Kab,{A,B,S})
/\request(A,S,alice_server_Kas,Kas)
2.State = 2 
/\( M':= new() )
/\ SND(A,{M'}_Kab') =|> State' := 6 
/\ request(A,B,alice_bob_m,M')
3.State = 6 
/\ RCV({Mb'}_Kab') =|> State' := 12 
end role
role bob(
A,B,S : agent,
Kbs : symmetric_key,
Kab : protocol_id,
SND,RCV: channel(dy))
played_by B def=
local
kab : protocol_id,
State,Ts:nat,
Mb,Na:text,
Kab:message
init 
State:=5
transition
1.State= 5 
/\ RCV({A.kab'.Ts'}_Kbs) =|> State':= 7/\ witness(B,S,server_bob_Kbs,Kbs)
2.State= 7 /\ RCV(A,{Na'}_kab') =|> State':= 9
3.State= 9 /\ Mb':=xor(Na',1) /\ SND({Mb'}_kab') =|> State':= 11 /\ witness(B,A,alice_bob_na,Na')
end role
role server(
A,B,S : agent,
Kas,kbs: symmetric_key,
Kab : protocol_id,
SND,RCV: channel(dy))
played_by s def=
local
kab : protocol_id,
State,Ts,Ta: nat, 
Kab:message
init 
State:=1
transition
1.State=1 /\ RCV(A,{B.kab'.Ta'}_kas) =|> state':=3/\witness(S,A,alice_server_Kas,Kas)
2.State=3 /\ Ts':= new() /\ SND({A.kab'.Ts'}_kbs) =|> state':= 5/\request(S,B,server_bob_Kbs,Kbs)
end role
role session(A,B,S :agent,
Kas,kbs  :symmetric_key) def=
Local 
Composition
alice( A,B,S,kas,s_a,r_a)
/\ bob(B,A,S,kbs,s_b,r_b)
/\ server(S,A,B,kas,kbs,s_s,r_s)
end role
role environment()
def=
const 
A,B,S :agent,
Kab,server_bob_Kbs, alice_bob_na, alice_server_Kas:protocol_id
Kas,kbs,kab : symmetric_key
intruder_knowledge:= {A,B,S,kab}
composition
session(A,B,S,kas,kbs,Kab)
/\ session(i,B,S,kis,kib,Kbs)
/\ session(A,i,S,kis,kai,Kas)
/\ Session(A,B,i,kai,kbi,Kab)
end role
goal
secrecy_of Kab
authentication_on server_bob_Kbs
authentication_on alice_bob_na
authentication_on alice_server_Kas
end goal
environment()

role reader (R, T, S: agent,IDr,IDt :text,Ki : symmetric_key,H : hash_func,
Snd, Rcv: channel(dy))
played_by R
def=    
local State : nat,
Nr,Nt,D : text,
Ks : symmetric_key
const sec_k : protocol_id

init State := 0
transition
0. State = 0    /\ Rcv(start) =|>
   State':= 1   /\ Nr' := new()
                /\ Snd(Nr')
                /\ witness(R,T,aut_reader,Nr')

1. State = 1    /\ Rcv(xor(H(xor(IDt,Ki)),Nr)) =|>
   State':= 2   /\ Snd(xor(H(xor(IDt,Ki)),Nr).H(IDr).Nr)

2. State = 2    /\ Rcv({xor(D.H(Ki),xor(Nt',Nr))}_Ks) =|>
   State':= 3   /\ Snd(xor(H(Ki),xor(Nt',Nr)))
                /\ request(R,S,aut_server,Nt')
                /\ secret(Ki,sec_k,{R,T,S})

end role

role tag (T, R, S: agent,IDt :text,Ki : symmetric_key,H : hash_func,
 Snd, Rcv: channel(dy))
played_by T
def=
local State : nat,
Nr,Nt,D : text
%Ks : symmetric_key
const sec_k2 : protocol_id
init State := 0
transition
0. State = 0  /\ Rcv(Nr') =|>
   State':= 1 /\ Snd(xor(H(xor(IDt,Ki)),Nr'))

1. State = 1   /\ Rcv(xor(H(Ki),xor(Nt',Nr))) =|>
   State':= 2  /\ request(T,R,aut_reader,Nr)
               /\ secret(Ki,sec_k2,{R,T,S})
end role
 
role server (S, R, T: agent,IDr,IDt :text,Ki : symmetric_key,H : hash_func,
 Snd, Rcv: channel(dy))
played_by S
def=
local State : nat,
Nr,Nt,D : text,
Ks : symmetric_key
const sec_k3 : protocol_id

init State := 0
transition

0. State = 0    /\ Rcv(xor(H(xor(IDt,Ki)),Nr').H(IDr).Nr') =|>
   State':= 1   /\ Nt' := new()
                /\ Snd({xor(D.H(Ki),xor(Nt',Nr'))}_Ks)
                /\ witness(S,R,aut_server,Nt')
                /\ secret(Ki,sec_k3,{R,T,S})
               
end role  

role session(T, R, S : agent,IDr,IDt :text,Ki : symmetric_key,H : hash_func)
def= local  St,Rt , Sr,Rr , Ss, Rs : channel (dy)
const aut_reader,aut_server : protocol_id
composition
   tag (T, R, S,IDt,Ki,H, St,Rt) 
/\ reader (R, T, S,IDr,IDt, Ki,H, Sr,Rr ) 
/\ server(S, R, T,IDr,IDt, Ki,H,Ss, Rs) 
 
end role

 role environment() def=
const t,r,s: agent,
      idt,idr: text ,
      ki : symmetric_key, 
      h: hash_func,
      aut_reader,aut_server :protocol_id 
     
intruder_knowledge = {t,r,s,h}
composition
   session(t,r,s,idr,idt,ki,h) %/\ session(t1,r,s,idr,idt,ki,h)

end role

goal
secrecy_of sec_k,sec_k2,sec_k3
authentication_on aut_server
authentication_on aut_reader
end goal

environment()    

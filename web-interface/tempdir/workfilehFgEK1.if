%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfilehFgEK1

section signature:

state_host: agent * agent * agent * hash_func * public_key * public_key * public_key * nat * nat * nat * nat * text * text * text * text * crypt(public_key,crypt(inv(public_key),pair(nat,nat))) * set(agent) * set(agent) * set(agent) * nat -> fact
state_board: agent * agent * agent * hash_func * public_key * public_key * public_key * nat * nat * nat * nat * text * text * crypt(public_key,crypt(inv(public_key),pair(text,nat))) * nat -> fact
state_user: agent * agent * agent * hash_func * public_key * public_key * public_key * nat * nat * nat * nat * text * text * text * text * text * crypt(public_key,crypt(inv(public_key),pair(text,pair(nat,nat)))) * set(agent) * set(agent) * set(agent) * set(agent) * set(agent) * nat -> fact


section types:

Reqr, Dummy_Reqr: crypt(public_key,crypt(inv(public_key),pair(nat,nat)))
Left, Dummy_Left: crypt(public_key,crypt(inv(public_key),pair(text,nat)))
nhb, m, t, c, nub, nuh, n, r: protocol_id
Dummy_Resr, Resr: crypt(public_key,crypt(inv(public_key),pair(text,pair(nat,nat))))
set_189, set_188, set_187, set_185, set_184, set_183, set_182, set_181, set_180, set_179, set_178, set_175, set_174, set_173, set_172, set_171, set_169, set_168, set_167, set_165, set_164, set_163, set_162, set_161, set_154, set_153, set_152, set_127, set_126, set_125, set_124, set_123: set
Set_91, Set_89, Set_87, Dummy_Set_91, Dummy_Set_89, Dummy_Set_87, Dummy_Set_40, Set_40, Dummy_Set_37, Dummy_Set_35, Dummy_Set_33, Set_37, Dummy_Set_30, Set_35, Set_33, Set_30, ASGoal: set(agent)
R, T, M, C, Dummy_C, Dummy_X, Dummy_M, Dummy_T, Dummy_R, dummy_nonce, X: text
start, MGoal: message
17, 9, 15, 46, State, N, Nhb, 12, Nuh, 11, 8, 5, 2, SID, Nub, Dummy_Nhb, 4, 0, Dummy_Nub, Dummy_Nuh, Dummy_N, Dummy_State, 3, 79, dummy_nat, 13: nat
Ku, Kh, Kb, dummy_pk, ku, kh, kb, ki: public_key
D, d: hash_func
U, H, B, u, h, b, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(u).
 iknows(h).
 iknows(b).
 iknows(d).
 iknows(ku).
 iknows(kh).
 iknows(kb).
 iknows(ki).
 iknows(inv(ki)).
 iknows(i).
 state_user(u,h,b,d,ku,kh,kb,13,dummy_nat,dummy_nat,dummy_nat,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,pair(dummy_nat,dummy_nat)))),set_123,set_124,set_125,set_126,set_127,3).
 state_board(b,u,h,d,ku,kh,kb,2,dummy_nat,dummy_nat,dummy_nat,dummy_nonce,dummy_nonce,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nat))),4).
 state_host(h,u,b,d,ku,kh,kb,46,dummy_nat,dummy_nat,dummy_nat,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nat,dummy_nat))),set_152,set_153,set_154,5).
 state_board(b,i,h,d,ki,kh,kb,2,dummy_nat,dummy_nat,dummy_nat,dummy_nonce,dummy_nonce,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nat))),8).
 state_host(h,i,b,d,ki,kh,kb,46,dummy_nat,dummy_nat,dummy_nat,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nat,dummy_nat))),set_167,set_168,set_169,9).
 state_user(u,i,b,d,ku,ki,kb,13,dummy_nat,dummy_nat,dummy_nat,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,pair(dummy_nat,dummy_nat)))),set_171,set_172,set_173,set_174,set_175,11).
 state_board(b,u,i,d,ku,ki,kb,2,dummy_nat,dummy_nat,dummy_nat,dummy_nonce,dummy_nonce,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,dummy_nat))),12).
 state_user(u,h,i,d,ku,kh,ki,13,dummy_nat,dummy_nat,dummy_nat,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nonce,pair(dummy_nat,dummy_nat)))),set_181,set_182,set_183,set_184,set_185,15).
 state_host(h,u,i,d,ku,kh,ki,46,dummy_nat,dummy_nat,dummy_nat,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,crypt(dummy_pk,crypt(inv(dummy_pk),pair(dummy_nat,dummy_nat))),set_187,set_188,set_189,17)


section rules:

step step_0 (U,H,B,D,Ku,Kh,Kb,Dummy_N,Dummy_Nuh,Dummy_Nub,Dummy_R,T,M,X,C,Resr,Dummy_Set_30,Dummy_Set_33,Dummy_Set_35,Dummy_Set_37,Set_40,SID,N,Nuh,Nub,R) :=
 state_user(U,H,B,D,Ku,Kh,Kb,13,Dummy_N,Dummy_Nuh,Dummy_Nub,Dummy_R,T,M,X,C,Resr,Dummy_Set_30,Dummy_Set_33,Dummy_Set_35,Dummy_Set_37,Set_40,SID).
 iknows(start)
=[exists Nub,Nuh,N,R]=>
 state_user(U,H,B,D,Ku,Kh,Kb,79,N,Nuh,Nub,R,T,M,X,C,Resr,Dummy_Set_30,Dummy_Set_33,Dummy_Set_35,Dummy_Set_37,Set_40,SID).
 secret(R,r,Dummy_Set_30).
 secret(N,n,Dummy_Set_33).
 secret(Nuh,nuh,Dummy_Set_35).
 secret(Nub,nub,Dummy_Set_37).
 iknows(pair(crypt(Kh,crypt(inv(Ku),pair(R,Nuh))),crypt(Kb,crypt(inv(Ku),pair(N,Nub))))).
 iknows(crypt(Kh,crypt(inv(Ku),pair(N,Nuh)))).
 contains(U,Dummy_Set_30).
 contains(H,Dummy_Set_30).
 contains(U,Dummy_Set_33).
 contains(H,Dummy_Set_33).
 contains(B,Dummy_Set_33).
 contains(U,Dummy_Set_35).
 contains(H,Dummy_Set_35).
 contains(U,Dummy_Set_37).
 contains(B,Dummy_Set_37)

step step_1 (U,H,B,D,Ku,Kh,Kb,N,Nuh,Nub,R,Dummy_T,Dummy_M,Dummy_X,Dummy_C,Dummy_Resr,Set_30,Set_33,Set_35,Set_37,Dummy_Set_40,SID,M,X,C,Resr) :=
 state_user(U,H,B,D,Ku,Kh,Kb,79,N,Nuh,Nub,R,Dummy_T,Dummy_M,Dummy_X,Dummy_C,Dummy_Resr,Set_30,Set_33,Set_35,Set_37,Dummy_Set_40,SID).
 iknows(crypt(Ku,crypt(inv(Kh),M))).
 iknows(pair(crypt(Ku,crypt(inv(Kh),pair(X,Nuh))),Resr))
=[exists C]=>
 state_user(U,H,B,D,Ku,Kh,Kb,0,N,Nuh,Nub,R,xor(X,M),M,X,C,Resr,Set_30,Set_33,Set_35,Set_37,Dummy_Set_40,SID).
 secret(C,c,Dummy_Set_40).
 iknows(crypt(Kb,crypt(inv(Ku),pair(C,Nub)))).
 iknows(crypt(Kh,crypt(inv(Ku),pair(C,Nuh)))).
 contains(U,Dummy_Set_40).
 contains(H,Dummy_Set_40).
 contains(B,Dummy_Set_40)

step step_2 (B,U,H,D,Ku,Kh,Kb,Dummy_N,Nhb,Dummy_Nub,M,C,Dummy_Left,SID,N,Nub,Left) :=
 state_board(B,U,H,D,Ku,Kh,Kb,2,Dummy_N,Nhb,Dummy_Nub,M,C,Dummy_Left,SID).
 iknows(pair(Left,crypt(Kb,crypt(inv(Ku),pair(N,Nub)))))
 =>
 state_board(B,U,H,D,Ku,Kh,Kb,5,N,Nhb,Nub,M,C,Left,SID).
 iknows(pair(Left,crypt(Kb,crypt(inv(Ku),pair(N,Nub)))))

step step_3 (B,U,H,D,Ku,Kh,Kb,Dummy_N,Dummy_Nhb,Nub,Dummy_M,C,Dummy_Left,SID,N,Nhb,M,Left) :=
 state_board(B,U,H,D,Ku,Kh,Kb,5,Dummy_N,Dummy_Nhb,Nub,Dummy_M,C,Dummy_Left,SID).
 iknows(pair(Left,crypt(Kb,crypt(inv(Kh),pair(M,pair(N,Nhb))))))
 =>
 state_board(B,U,H,D,Ku,Kh,Kb,8,N,Nhb,Nub,M,C,Left,SID).
 iknows(pair(Left,crypt(Kb,crypt(inv(Kh),pair(M,pair(N,Nhb))))))

step step_4 (B,U,H,D,Ku,Kh,Kb,N,Nhb,Dummy_Nub,M,Dummy_C,Left,SID,Nub,C) :=
 state_board(B,U,H,D,Ku,Kh,Kb,8,N,Nhb,Dummy_Nub,M,Dummy_C,Left,SID).
 iknows(crypt(Kb,crypt(inv(Ku),pair(C,Nub))))
 =>
 state_board(B,U,H,D,Ku,Kh,Kb,0,N,Nhb,Nub,M,C,Left,SID)

step step_5 (H,U,B,D,Ku,Kh,Kb,Dummy_N,Dummy_Nhb,Dummy_Nuh,Dummy_R,Dummy_T,Dummy_M,C,Dummy_Reqr,Dummy_Set_87,Dummy_Set_89,Dummy_Set_91,SID,N,Nhb,Nuh,R,T,M,Reqr) :=
 state_host(H,U,B,D,Ku,Kh,Kb,46,Dummy_N,Dummy_Nhb,Dummy_Nuh,Dummy_R,Dummy_T,Dummy_M,C,Dummy_Reqr,Dummy_Set_87,Dummy_Set_89,Dummy_Set_91,SID).
 iknows(pair(crypt(Kh,crypt(inv(Ku),pair(R,Nuh))),Reqr)).
 iknows(crypt(Kh,crypt(inv(Ku),pair(N,Nuh))))
=[exists Nhb,M,T]=>
 state_host(H,U,B,D,Ku,Kh,Kb,9,N,Nhb,Nuh,R,T,M,C,Reqr,Dummy_Set_87,Dummy_Set_89,Dummy_Set_91,SID).
 secret(T,t,Dummy_Set_87).
 secret(M,m,Dummy_Set_89).
 secret(Nhb,nhb,Dummy_Set_91).
 iknows(pair(crypt(Ku,crypt(inv(Kh),pair(xor(T,M),Dummy_Nuh))),crypt(Kb,crypt(inv(Kh),pair(M,pair(Dummy_N,Nhb)))))).
 iknows(crypt(Ku,crypt(inv(Kh),M))).
 contains(U,Dummy_Set_87).
 contains(H,Dummy_Set_87).
 contains(U,Dummy_Set_89).
 contains(H,Dummy_Set_89).
 contains(B,Dummy_Set_89).
 contains(H,Dummy_Set_91).
 contains(B,Dummy_Set_91)

step step_6 (H,U,B,D,Ku,Kh,Kb,N,Nhb,Dummy_Nuh,R,T,M,Dummy_C,Reqr,Set_87,Set_89,Set_91,SID,Nuh,C) :=
 state_host(H,U,B,D,Ku,Kh,Kb,9,N,Nhb,Dummy_Nuh,R,T,M,Dummy_C,Reqr,Set_87,Set_89,Set_91,SID).
 iknows(crypt(Kh,crypt(inv(Ku),pair(C,Nuh))))
 =>
 state_host(H,U,B,D,Ku,Kh,Kb,0,N,Nhb,Nuh,R,T,M,C,Reqr,Set_87,Set_89,Set_91,SID)


section properties:

property secrecy_of_r (MGoal,ASGoal) :=
 [] ((secret(MGoal,r,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_t (MGoal,ASGoal) :=
 [] ((secret(MGoal,t,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_m (MGoal,ASGoal) :=
 [] ((secret(MGoal,m,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_n (MGoal,ASGoal) :=
 [] ((secret(MGoal,n,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_c (MGoal,ASGoal) :=
 [] ((secret(MGoal,c,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_nuh (MGoal,ASGoal) :=
 [] ((secret(MGoal,nuh,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_nub (MGoal,ASGoal) :=
 [] ((secret(MGoal,nub,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_nhb (MGoal,ASGoal) :=
 [] ((secret(MGoal,nhb,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state secrecy_of_r (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,r,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_t (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,t,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_m (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,m,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_n (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,n,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_c (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,c,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_nuh (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,nuh,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_nub (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,nub,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_nhb (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,nhb,ASGoal) &
 not(contains(i,ASGoal))


%%%%%%% Role for mobile user MU %%%%%

role mobileuser (MU, HA, FA : agent,
            SKmuha : symmetric_key,
            % H is one-way hash function
            H: hash_func,
            Send, Recv: channel(dy))
% Player: the mobile user MU
played_by MU
def=
local State  : nat,
  IDmu, PWmu, B, Amu, PIDmu, MSK : text,
  P, Z, X, Rm, Rmm, AIDmu, K, M1  : text,
  IDha, IDfa, Y, SK, M4 : text, F : hash_func
const mu_fa_x, fa_ha_y, s1, s2, s3, s4: protocol_id
init  State := 0
transition
% Mobile user registration phase
1. State = 0 /\ Recv(start) =|>
State' := 2  /\ B' := new() /\ PIDmu' := H(IDmu.B')
% Send registration request  to HA securely
     /\ Send({PIDmu'}_SKmuha)
     /\ secret({IDmu}, s1, {MU,HA}) /\ secret({PWmu,B'}, s2, {MU})
% Receive smart card SC from HA securely
2. State = 2 /\ Recv({IDha.H(H(IDmu.B').MSK).H(H(IDmu.B').
                      H(H(IDmu.B').MSK).P.F(Z'.P).H}_SKmuha)=|>
 State' := 4 /\ secret({MSK}, s3, {HA}) /\ secret({FSK}, s4, {FA})
% Login phase 
     /\ X' := new() /\ Rm' := F(X'.P)
     /\ Rmm' := F(X'.F(Z'.P)) /\ AIDmu' := xor(H(IDmu.B'), Rmm')
     /\ K' := H(H(H(IDmu.B').MSK).Rmm')
     /\ M1' := H(K'.IDfa.H(IDmu.B'))
% Send login request Mmh =  to FA via open channel
     /\ Send(IDha.AIDmu'.M1'.P.Rm') 
% MU has freshly generated random x for FA
     /\ witness(MU, FA, mu_fa_x, X')
% Authentcation phase
% Receive message  from FA via open channel
3. State = 4 /\ Recv(H(IDha.IDfa.H(H(IDmu.B').MSK).F(Y'.P)).
                H(H(F(Y'.F(X'.P)).IDha.IDfa).H(IDha.IDfa.
                H(H(IDmu.B').MSK).F(Y'.P)))) =|>
State' := 8 /\ SK' := H(F(Y'.F(X'.P)).IDha.IDfa)
            /\ M6' := H(SK'.IDfa.IDha)
% Send message  to FA via open channel           
            /\ Send(M6')
end role



%%%%%%% Role for HA %%%%%

role homeagent (MU, HA, FA : agent,
            SKmuha : symmetric_key,
            % H is one-way hash function
            H: hash_func,
            Send, Recv: channel(dy))
% Player: the home agent HA
played_by HA
def=
 local State  : nat,
       IDmu, PWmu, B, Mbu, Cmu, Rl, MSK : text,
       P, Z, IDha, IDfa, Bmu, X, Y, M3, M4, ACK: text, 
       F : hash_func
  const mu_fa_x, fa_ha_y, s1, s2, s3, s4: protocol_id
init  State := 0
transition
% Mobile user registration phase
% Receive registration request  to from MU securely
1. State = 0 /\ Recv({H(IDmu.B')}_SKmuha) =|>
State' := 3 /\ secret({IDmu}, s1, {MU,HA}) /\ secret({PWmu,B'}, s2, {MU})
   /\ Bmu' := H(H(IDmu.B').MSK) /\ Cmu' := H(H(IDmu.B').H(IDmu.B').Bmu')
   /\ Z' := new() /\ Rl' := F(Z'.P) /\ secret({MSK}, s3, {HA})
   /\ secret({FSK}, s4, {FA})
% Send smart card SC to MU securely
          /\ Send({IDha.Bmu'.Cmu'.P.Rl'.H}_SKmuha)
% Authentication phase 
% Receive message Mfh =  from FA via open channel
2. State = 3 /\ Recv(IDha. xor(H(IDmu.B'), F(X'.F(Z'.P))).
                   H(H(H(H(IDmu.B').MSK).F(X'.F(Z'.P))).
                   IDfa.H(IDmu.B')).P. F(X'.P). F(Y'.P).IDfa. 
                   H(H(IDfa.FSK).F(Y'.P).IDha. xor(H(IDmu.B'), F(X'.F(Z'.P))).
                   H(H(H(H(IDmu.B').MSK).F(X'.F(Z'.P))).
                   IDfa.H(IDmu.B')).P.F(X'.P)))=|>
% Send message  to FA via open channel 
State' := 5  /\ M3' := H(IDha.H(IDfa.FSK).F(X'.F(Z'.P)))
             /\ M4' := H(IDha.IDfa.H(H(IDmu.B').MSK).F(Y'.P))
             /\ Send(M3'.M4')
% HA's acceptance of the value y generated for HA by FA  
            /\ request(FA, HA, fa_ha_y, Y')
end role



%%%%%%% Role for FA %%%%%

role foreignagent (MU, HA, FA : agent,
            % H is one-way hash function
            H: hash_func,
            Send, Recv: channel(dy))
% Player: the foreign agent FA
played_by FA
def=
 local State  : nat,
       IDmu, PWmu, B, Mbu, Cmu, Rl, MSK : text,
       P, Z, IDha, X, Y, IDfa, SK, ACK : text,
       Rb, M2, M3, FSK : text, F : hash_func
 const fa_ha_y, mu_fa_x,
       s1, s2, s3, s4 : protocol_id
init  State := 0
transition
% Login phase 
% Receive login request Mmh=  from MU via open channel
1. State = 0 /\ Recv(IDha. xor(H(IDmu.B'), F(X'.F(Z'.P))).
                     H(H(H(H(IDmu.B').MSK).F(X'.F(Z'.P))).
                     IDfa.H(IDmu.B')).P. F(X'.P)) =|>
% Authentication phase
State' := 1 /\ Y' := new() /\ Rb' := F(Y'.P) 
   /\ M2' := H(H(IDfa.FSK).Rb'.IDha. xor(H(IDmu.B'), F(X'.F(Z'.P))).
             H(H(H(H(IDmu.B').MSK).F(X'.F(Z'.P))).
             IDfa.H(IDmu.B')).P.Rm')
   /\ secret({IDmu}, s1, {MU,HA}) /\ secret({PWmu,B'}, s2, {MU})
   /\ secret({MSK}, s3, {HA}) /\ secret({FSK}, s4, {FA})
% Send message Mfh =  to HA via open channel
           /\ Send(IDha. xor(H(IDmu.B'), F(X'.F(Z'.P))).
                   H(H(H(H(IDmu.B').MSK).F(X'.F(Z'.P))).
                   IDfa.H(IDmu.B')).P. F(X'.P). Rb'.IDfa. M2')
% FA has freshly generated random y for HA
           /\ witness(FA, HA, fa_ha_y, Y')
% Receive message   from HA via open channel
2. State = 1 /\ Recv(H(IDha.H(IDfa.FSK).F(X'.F(Z'.P))).
                     H(IDha.IDfa.H(H(IDmu.B').MSK).F(Y'.P))) =|>
State' := 2 /\  SK' := H(F(Y'.F(X'.P)).IDha.IDfa)
  /\ M5' := H(SK'.H(IDha.IDfa.H(H(IDmu.B').MSK).F(Y'.P)))
% Send message  to MU via open channel
  /\ Send(H(IDha.IDfa.H(H(IDmu.B').MSK).F(Y'.P)).M5'.F(Y'.P))
% Receive message  from MU via open channel
3. State = 2 
     /\ Recv(H(H(F(Y'.F(X'.P)).IDha.IDfa).IDfa.IDha)) =|>
% FA's acceptance of the value x generated for FA by MU  
State' := 3 /\ request(MU, FA, mu_fa_x, X')
end role


%%%%%%%%%%%%%%%%%%%%%%%%%

role session (MU, HA, FA : agent,
            SKmuha : symmetric_key,
            % H is one-way hash function
            H: hash_func)
def=
  local  SD1, SD2, SD3, RV1, RV2, RV3 : channel (dy)
  composition
      mobileuser (MU, HA, FA, SKmuha, H, SD1, RV1)
   /\ homeagent (MU, HA, FA, SKmuha, H, SD2, RV2)
   /\ foreignagent (MU, HA, FA, H, SD3, RV3)
end role 

%%%%%%%%%%%%%%%%%%%%%%%%%%%


role environment()
def=
  const mu, ha, fa: agent,
        skmuha: symmetric_key,
        h, f : hash_func,
        idha, idfa, aidmu, rm, rb, p : text,
        mu_fa_x, fa_ha_y: protocol_id,
        s1, s2, s3, s4: protocol_id
  intruder_knowledge = {mu, ha, fa, h, f, idha, 
                        idfa, aidmu, rm, rb, p}
  composition
	   session(mu, ha, fa, skmuha, h) 
	/\ session(i, ha, fa, skmuha, h)
        /\ session(mu, i, fa, skmuha, h)
        /\ session(mu, ha, i, skmuha, h)
end role
goal
  secrecy_of s1
  secrecy_of s2
  secrecy_of s3
  secrecy_of s4
  authentication_on mu_fa_x
  authentication_on fa_ha_y
end goal
environment()


role obu (OBU, AR:agent,
           F1,F2,F3: hash_func,
           KDF,PRF: hash_func,
           Snd,Rcv: channel(dy))

played_by OBU def=

  local 
        State   : nat,
        IDobu,IDar: text,
        Nobu,Nar : text,
        Success : text,
        HAK : hash(text.text),
        HEK,HEK_mac1, HEK_mac2,HAK_mac1 : message,
        MK, Add_obu, Add_ar : text
        
  const sec_hak_obu : protocol_id,
            success : text

  init  State := 0

  transition

   1. State = 0
      /\ Rcv(start)
      =|> 
      State' := 1
      /\ Nobu' := new()
      /\ HEK_mac1' := F1(IDobu.IDar.Nobu')
      /\ HEK' := KDF(MK,Add_obu,Add_ar)
      /\ Snd(HEK_mac1.{IDobu.IDar.Nobu'}_HEK')
      /\ witness(OBU,AR,nobu,Noub') 

   2. State = 1
      /\ Rcv(HEK_mac2'.{IDobu.IDar.Nar'}_HEK)
      /\ HEK_mac2=F2(IDobu.IDar.Nar')
      =|> 
      State' := 2
      /\ HAK' := PRF(Nobu.Nar')
      /\ HAK_mac1' :=F3(HAK'.HEK)
      /\ Snd(HAK_mac1'.{HAK'}_HEK) 
      /\ witness(OBU,AR,hak2,HAK')
      /\ request(OBU,AR,nar,Nar')

   3. State = 2
      /\ Rcv(success) 
      =|> 
      State' := 3
      /\ secret(HAK,sec_hak_obu,{OBU,AR})
      /\ request(AR,OBU,hak1,HAK)
  

end role

%--------------------------------------------------------------------------------

role ar (AR, OBU: agent,
           F1,F2,F3: hash_func,
           PRF: hash_func,
           Snd,Rcv: channel(dy))

played_by AR def=

  local 
        State   : nat,
        IDobu,IDar: text,
        Nobu,Nar : text,
        Success : text,
        HAK : hash(text.text),
        HEK,HEK_mac1, HEK_mac2,HAK_mac1 : message,
        Add_obu, Add_ar : text

  const sec_hak_ar : protocol_id,
            success : text
            
  init  State := 0

  transition

   1. State = 0 /\ Rcv(HEK_mac1'.{IDobu.IDar.Nobu'}_HEK')
   						/\ HEK_mac1' =F1(IDobu.IDar.Nobu')

      =|> 
      State' := 1
      /\ Nar' := new()
      /\ HEK_mac2':=F2(IDobu.IDar.Nar')
      /\ Snd(HEK_mac2'.{IDobu.IDar.Nar'}_HEK) 
      /\ request(AR,OBU,nobu,Nobu')
      /\ witness(AR,OBU,nar,Nar')


   2. State = 1 /\ Rcv(HAK_mac1'.{HAK'}_HEK)
   							/\ HAK_mac1' =F3(HAK'.HEK)
   							/\ HAK' =PRF(Nobu.Nar)
   							
      =|> 
      State' := 2
      /\ Snd(success)
      /\ secret(HAK',sec_hak_ar,{AR,OBU})
      /\ witness(AR,OBU,hak1,HAK')
      /\ request(AR,OBU,hak2,HAK)

end role

%--------------------------------------------------------------------------------

role session(OBU,AR: agent,
%            HEK: symmetric_key,
						F1,F2,F3 : hash_func,
            KDF,PRF: hash_func)
def=
  local SND, RCV : channel (dy)

  composition
     obu(OBU,AR,F1,F2,F3,KDF,PRF,SND,RCV)
  /\ ar(AR,OBU,F2,F3,KDF,PRF,SND,RCV)

end role

%--------------------------------------------------------------------------------


role environment()
def=

  const obu, ar   : agent,
				f1,f2,f3 : hash_func,
        kdf, prf : hash_func,
        hak1, hak2 : protocol_id, 
        nobu, nar : protocol_id
     

  intruder_knowledge={obu,ar,kdf,prf,i}

  composition
      session(obu,ar,f1,f2,f3,kdf,prf)
   /\ session(obu,ar,f1,f2,f3,kdf,prf)
   /\ session(i,ar,f1,f2,f3,kdf,prf)
  /\ session(obu,i,f1,f2,f3,kdf,prf)
 
end role

%--------------------------------------------------------------------------------

goal

 % Confidentiality 
 secrecy_of sec_hak_obu, sec_hak_ar

 % Message authentication 
 authentication_on hak1

 % Message authentication 
 authentication_on hak2
 
  authentication_on nar
   authentication_on nobu

end goal

%--------------------------------------------------------------------------------

environment()


%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileGk8UEZ

section signature:

state_ue: agent * agent * agent * text * text * text * text * text * text * text * text * text * symmetric_key * symmetric_key * hash_func * hash_func * hash_func * hash_func * hash_func * hash_func * nat * text * text * text * pair(symmetric_key,pair(text,pair(text,text))) * set(agent) * nat -> fact
state_mme: agent * agent * agent * text * text * text * text * text * symmetric_key * symmetric_key * hash_func * hash_func * hash_func * hash_func * hash_func * nat * text * text * set(text) * pair(symmetric_key,text) * pair(symmetric_key,text) * pair(symmetric_key,text) * pair(symmetric_key,text) * pair(symmetric_key,pair(text,pair(text,text))) * nat -> fact
state_hss: agent * agent * agent * text * text * text * text * text * text * text * text * symmetric_key * symmetric_key * hash_func * hash_func * hash_func * hash_func * hash_func * hash_func * nat * text * text * nat -> fact


section types:

set_177: set
dummy_set: set(message)
Dummy_X5, Dummy_X4, Dummy_X3, X2, X3, X4, X5: pair(symmetric_key,text)
KeySet: set(text)
ue_hss_mac, mme_ue_res: protocol_id
Dummy_Set_36, ASGoal, Set_36: set(agent)
MGoal, start: message
Dummy_X1, X1: pair(symmetric_key,pair(text,pair(text,text)))
State, 5, SID, 3, 4, Dummy_State, SID2, SID1, 2, 1, 0: nat
F1, F2, F3, F4, F5, KDF, f1, f2, f3, f4, f5, kdf: hash_func
K, KASME, dummy_sk, Dummy_KASME, k, ki, kasme: symmetric_key
SQN, RAND, IMSI, AMF, MAC, Dummy_XSQN, XRES, Dummy_XMAC, CK, Dummy_AMF, IK, AK, SNID, Dummy_RES, Dummy_RAND, Dummy_SQN, Dummy_SNID, Dummy_AK, Dummy_IK, Dummy_CK, Dummy_XRES, Dummy_MAC, Dummy_IMSI, dummy_nonce, RES, rand, mac, xmac, res, xres, ck, ik, ak, imsi, snid, amf, XSQN, XMAC: text
H, M, U, hss, A2Goal, A1Goal, mme, ue, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(ki).
 iknows(f1).
 iknows(f2).
 iknows(f3).
 iknows(f4).
 iknows(f5).
 iknows(i).
 state_hss(hss,mme,ue,imsi,amf,mac,xres,ck,ik,ak,snid,k,kasme,f1,f2,f3,f4,f5,kdf,0,dummy_nonce,dummy_nonce,3).
 state_mme(mme,hss,ue,imsi,amf,res,xres,snid,k,kasme,f1,f2,f3,f4,f5,0,dummy_nonce,dummy_nonce,dummy_set,pair(dummy_sk,dummy_nonce),pair(dummy_sk,dummy_nonce),pair(dummy_sk,dummy_nonce),pair(dummy_sk,dummy_nonce),pair(dummy_sk,pair(dummy_nonce,pair(dummy_nonce,dummy_nonce))),4).
 state_ue(ue,hss,mme,imsi,amf,mac,xmac,res,ck,ik,ak,snid,k,kasme,f1,f2,f3,f4,f5,kdf,0,dummy_nonce,dummy_nonce,dummy_nonce,pair(dummy_sk,pair(dummy_nonce,pair(dummy_nonce,dummy_nonce))),set_177,5)


section rules:

step step_0 (H,M,U,Dummy_IMSI,AMF,Dummy_MAC,Dummy_XRES,Dummy_CK,Dummy_IK,Dummy_AK,Dummy_SNID,K,Dummy_KASME,F1,F2,F3,F4,F5,KDF,Dummy_SQN,Dummy_RAND,SID,IMSI,SNID,SQN,RAND) :=
 state_hss(H,M,U,Dummy_IMSI,AMF,Dummy_MAC,Dummy_XRES,Dummy_CK,Dummy_IK,Dummy_AK,Dummy_SNID,K,Dummy_KASME,F1,F2,F3,F4,F5,KDF,0,Dummy_SQN,Dummy_RAND,SID).
 iknows(pair(IMSI,SNID))
=[exists RAND,SQN]=>
 state_hss(H,M,U,IMSI,AMF,apply(F1,pair(K,pair(SQN,pair(RAND,AMF)))),apply(F2,pair(K,RAND)),apply(F3,pair(K,RAND)),apply(F4,pair(K,RAND)),apply(F5,pair(K,RAND)),SNID,K,apply(KDF,pair(xor(Dummy_SQN,Dummy_AK),pair(Dummy_SNID,pair(apply(F3,pair(K,RAND)),apply(F4,pair(K,RAND)))))),F1,F2,F3,F4,F5,KDF,1,SQN,RAND,SID).
 iknows(pair(RAND,pair(apply(F2,pair(K,RAND)),pair(apply(KDF,pair(xor(Dummy_SQN,Dummy_AK),pair(Dummy_SNID,pair(apply(F3,pair(K,RAND)),apply(F4,pair(K,RAND)))))),pair(apply(F3,pair(K,RAND)),pair(apply(F4,pair(K,RAND)),pair(xor(SQN,apply(F5,pair(K,RAND))),pair(AMF,apply(F1,pair(K,pair(SQN,pair(RAND,AMF)))))))))))).
 witness(U,H,ue_hss_mac,apply(F1,pair(K,pair(SQN,pair(RAND,AMF)))))

step step_1 (M,H,U,IMSI,AMF,RES,XRES,SNID,K,KASME,F1,F2,F3,F4,F5,SQN,RAND,KeySet,X2,X3,X4,X5,X1,SID) :=
 state_mme(M,H,U,IMSI,AMF,RES,XRES,SNID,K,KASME,F1,F2,F3,F4,F5,0,SQN,RAND,KeySet,X2,X3,X4,X5,X1,SID).
 iknows(IMSI)
 =>
 state_mme(M,H,U,IMSI,AMF,RES,XRES,SNID,K,KASME,F1,F2,F3,F4,F5,1,SQN,RAND,KeySet,X2,X3,X4,X5,X1,SID).
 iknows(pair(IMSI,SNID))

step step_2 (M,H,U,IMSI,AMF,RES,Dummy_XRES,SNID,K,Dummy_KASME,F1,F2,F3,F4,F5,Dummy_SQN,Dummy_RAND,KeySet,X2,Dummy_X3,Dummy_X4,Dummy_X5,Dummy_X1,SID,KASME,SQN,RAND,X3,X4,X5,X1) :=
 state_mme(M,H,U,IMSI,AMF,RES,Dummy_XRES,SNID,K,Dummy_KASME,F1,F2,F3,F4,F5,1,Dummy_SQN,Dummy_RAND,KeySet,X2,Dummy_X3,Dummy_X4,Dummy_X5,Dummy_X1,SID).
 iknows(pair(RAND,pair(apply(F2,apply(F2,pair(K,RAND))),pair(KASME,pair(apply(F3,X3),pair(apply(F4,X4),pair(xor(SQN,apply(F5,X5)),pair(AMF,apply(F1,X1)))))))))
 =>
 state_mme(M,H,U,IMSI,AMF,RES,apply(F2,pair(K,RAND)),SNID,K,KASME,F1,F2,F3,F4,F5,2,SQN,RAND,KeySet,X2,X3,X4,X5,X1,SID).
 iknows(pair(RAND,pair(xor(SQN,apply(F5,X5)),pair(AMF,apply(F1,X1)))))

step step_3 (M,H,U,IMSI,AMF,Dummy_RES,XRES,SNID,K,KASME,F1,F2,F3,F4,F5,SQN,RAND,KeySet,X2,X3,X4,X5,X1,SID,RES) :=
 state_mme(M,H,U,IMSI,AMF,Dummy_RES,XRES,SNID,K,KASME,F1,F2,F3,F4,F5,2,SQN,RAND,KeySet,X2,X3,X4,X5,X1,SID).
 iknows(RES)
 =>
 state_mme(M,H,U,IMSI,AMF,RES,XRES,SNID,K,KASME,F1,F2,F3,F4,F5,3,SQN,RAND,KeySet,X2,X3,X4,X5,X1,SID).
 request(M,U,mme_ue_res,XRES,SID)

step step_4 (U,H,M,IMSI,AMF,MAC,XMAC,RES,CK,IK,AK,SNID,K,KASME,F1,F2,F3,F4,F5,KDF,SQN,RAND,XSQN,X1,Dummy_Set_36,SID) :=
 state_ue(U,H,M,IMSI,AMF,MAC,XMAC,RES,CK,IK,AK,SNID,K,KASME,F1,F2,F3,F4,F5,KDF,0,SQN,RAND,XSQN,X1,Dummy_Set_36,SID).
 iknows(start)
 =>
 state_ue(U,H,M,IMSI,AMF,MAC,XMAC,RES,CK,IK,AK,SNID,K,KASME,F1,F2,F3,F4,F5,KDF,1,SQN,RAND,XSQN,X1,Dummy_Set_36,SID).
 iknows(IMSI).
 secret(IMSI,imsi,Dummy_Set_36).
 contains(U,Dummy_Set_36).
 contains(H,Dummy_Set_36)

step step_5 (U,H,M,IMSI,Dummy_AMF,Dummy_MAC,Dummy_XMAC,Dummy_RES,Dummy_CK,Dummy_IK,Dummy_AK,SNID,K,Dummy_KASME,F1,F2,F3,F4,F5,KDF,Dummy_SQN,Dummy_RAND,Dummy_XSQN,Dummy_X1,Set_36,SID,AMF,RAND,XSQN,X1) :=
 state_ue(U,H,M,IMSI,Dummy_AMF,Dummy_MAC,Dummy_XMAC,Dummy_RES,Dummy_CK,Dummy_IK,Dummy_AK,SNID,K,Dummy_KASME,F1,F2,F3,F4,F5,KDF,1,Dummy_SQN,Dummy_RAND,Dummy_XSQN,Dummy_X1,Set_36,SID).
 iknows(pair(RAND,pair(XSQN,pair(AMF,apply(F1,X1)))))
 =>
 state_ue(U,H,M,IMSI,AMF,apply(F1,X1),apply(F1,pair(K,pair(xor(XSQN,apply(F5,pair(K,RAND))),pair(RAND,AMF)))),apply(F2,pair(K,RAND)),apply(F3,pair(K,RAND)),apply(F4,pair(K,RAND)),apply(F5,pair(K,RAND)),SNID,K,apply(KDF,pair(xor(xor(XSQN,apply(F5,pair(K,RAND))),apply(F5,pair(K,RAND))),pair(SNID,pair(apply(F3,pair(K,RAND)),apply(F4,pair(K,RAND)))))),F1,F2,F3,F4,F5,KDF,2,xor(XSQN,apply(F5,pair(K,RAND))),RAND,XSQN,X1,Set_36,SID).
 iknows(apply(F2,pair(K,RAND))).
 witness(U,M,mme_ue_res,apply(F2,pair(K,RAND))).
 request(U,M,ue_hss_mac,apply(F1,pair(K,pair(xor(XSQN,apply(F5,pair(K,RAND))),pair(RAND,AMF)))),SID)


section properties:

property authentication_on_mme_ue_res (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,mme_ue_res,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,mme_ue_res,MGoal))
     /\ ((request(A1Goal,A2Goal,mme_ue_res,MGoal,SID1)
           /\ request(A1Goal,A2Goal,mme_ue_res,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_ue_hss_mac (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,ue_hss_mac,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,ue_hss_mac,MGoal))
     /\ ((request(A1Goal,A2Goal,ue_hss_mac,MGoal,SID1)
           /\ request(A1Goal,A2Goal,ue_hss_mac,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property secrecy_of_imsi (MGoal,ASGoal) :=
 [] ((secret(MGoal,imsi,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state authentication_on_mme_ue_res (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,mme_ue_res,MGoal,SID) &
 not(witness(A2Goal,A1Goal,mme_ue_res,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_mme_ue_res (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,mme_ue_res,MGoal,SID1).
 request(A1Goal,A2Goal,mme_ue_res,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_ue_hss_mac (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,ue_hss_mac,MGoal,SID) &
 not(witness(A2Goal,A1Goal,ue_hss_mac,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_ue_hss_mac (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,ue_hss_mac,MGoal,SID1).
 request(A1Goal,A2Goal,ue_hss_mac,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state secrecy_of_imsi (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,imsi,ASGoal) &
 not(contains(i,ASGoal))


%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileGpNPJt

section signature:

state_privatekeygenerator: agent * agent * agent * agent * hash_func * nat * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * nat -> fact
state_correspondingnode: agent * agent * agent * agent * public_key * hash_func * nat * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * nat -> fact
state_homeagent: agent * agent * agent * agent * public_key * public_key * hash_func * nat * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * nat -> fact
state_mobilenode: agent * agent * agent * agent * public_key * public_key * hash_func * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * nat * nat -> fact


section types:

start: message
Kcn, kcn, kha, Kha: public_key
CoA, HAA, HoA, OldCoA, CNA, Rep, RP, PKGA, Blt, R0, Msglen, Type, Req, SIDCN, K1, R1, R2, Dummy_R2, Dummy_R1, Dummy_R0, dummy_nonce: text
9, 7, 5, 2, State, 3, 1, 6, SID, 4, Dummy_State, 10, 8, 0: nat
Hashv, has: hash_func
MN, CN, HA, PKG, mn, cn, ha, pkg, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(i).
 state_mobilenode(mn,cn,ha,pkg,kcn,kha,has,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,0,3).
 state_homeagent(pkg,mn,cn,ha,kcn,kha,has,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,4).
 state_correspondingnode(cn,mn,ha,pkg,kcn,has,2,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,5).
 state_privatekeygenerator(pkg,mn,cn,ha,has,4,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,6)


section rules:

step step_0 (MN,PKG,CN,HA,Kcn,Kha,Hashv,CoA,HAA,HoA,OldCoA,CNA,RP,PKGA,Blt,Dummy_R0,Msglen,Type,Req,SIDCN,K1,R1,R2,SID,R0) :=
 state_mobilenode(MN,PKG,CN,HA,Kcn,Kha,Hashv,CoA,HAA,HoA,OldCoA,CNA,RP,PKGA,Blt,Dummy_R0,Msglen,Type,Req,SIDCN,K1,R1,R2,0,SID).
 iknows(start)
=[exists R0]=>
 state_mobilenode(MN,PKG,CN,HA,Kcn,Kha,Hashv,CoA,HAA,HoA,OldCoA,CNA,RP,PKGA,Blt,R0,Msglen,Type,Req,SIDCN,K1,R1,R2,6,SID).
 iknows(pair(CoA,pair(HAA,pair(HoA,pair(OldCoA,pair(CNA,pair(crypt(Kha,pair(CoA,pair(HoA,pair(Blt,pair(OldCoA,pair(R0,pair(Msglen,Type))))))),pair(RP,PKGA)))))))).
 iknows(pair(CoA,pair(CNA,pair(OldCoA,pair(crypt(Kcn,pair(CoA,pair(HoA,pair(Blt,pair(OldCoA,pair(R0,pair(Msglen,Type))))))),pair(RP,PKGA))))))

step step_1 (MN,PKG,CN,HA,Kcn,Kha,Hashv,CoA,HAA,HoA,OldCoA,CNA,RP,PKGA,Blt,R0,Msglen,Type,Req,SIDCN,K1,Dummy_R1,Dummy_R2,SID,R1,R2) :=
 state_mobilenode(MN,PKG,CN,HA,Kcn,Kha,Hashv,CoA,HAA,HoA,OldCoA,CNA,RP,PKGA,Blt,R0,Msglen,Type,Req,SIDCN,K1,Dummy_R1,Dummy_R2,6,SID).
 iknows(pair(CNA,pair(CoA,xor(R0,R1))))
=[exists R2]=>
 state_mobilenode(MN,PKG,CN,HA,Kcn,Kha,Hashv,CoA,HAA,HoA,OldCoA,CNA,RP,PKGA,Blt,R0,Msglen,Type,Req,SIDCN,K1,R1,R2,8,SID).
 iknows(pair(CoA,pair(CNA,pair(crypt(Kcn,pair(Dummy_R1,R2)),RP))))

step step_2 (MN,PKG,CN,HA,Kcn,Kha,Hashv,CoA,HAA,HoA,OldCoA,CNA,RP,PKGA,Blt,R0,Msglen,Type,Req,SIDCN,K1,R1,R2,SID) :=
 state_mobilenode(MN,PKG,CN,HA,Kcn,Kha,Hashv,CoA,HAA,HoA,OldCoA,CNA,RP,PKGA,Blt,R0,Msglen,Type,Req,SIDCN,K1,R1,R2,8,SID).
 iknows(pair(CNA,pair(CoA,apply(Hashv,R2))))
 =>
 state_mobilenode(MN,PKG,CN,HA,Kcn,Kha,Hashv,CoA,HAA,HoA,OldCoA,CNA,RP,PKGA,Blt,R0,Msglen,Type,Req,SIDCN,K1,R1,R2,10,SID).
 iknows(pair(CNA,CoA))

step step_3 (HA,MN,PKG,CN,Kcn,Kha,Hashv,CoA,HAA,HoA,OldCoA,CNA,RP,PKGA,Blt,Dummy_R0,Msglen,Type,Req,SIDCN,K1,R1,R2,SID,R0) :=
 state_homeagent(HA,MN,PKG,CN,Kcn,Kha,Hashv,1,CoA,HAA,HoA,OldCoA,CNA,RP,PKGA,Blt,Dummy_R0,Msglen,Type,Req,SIDCN,K1,R1,R2,SID).
 iknows(pair(CoA,pair(HAA,pair(HoA,pair(OldCoA,pair(CNA,pair(crypt(Kha,pair(CoA,pair(HoA,pair(Blt,pair(OldCoA,pair(R0,pair(Msglen,Type))))))),pair(RP,PKGA))))))))
 =>
 state_homeagent(HA,MN,PKG,CN,Kcn,Kha,Hashv,3,CoA,HAA,HoA,OldCoA,CNA,RP,PKGA,Blt,R0,Msglen,Type,Req,SIDCN,K1,R1,R2,SID).
 iknows(pair(HoA,pair(CNA,pair(OldCoA,pair(crypt(Kcn,pair(CoA,pair(HoA,pair(Blt,pair(OldCoA,pair(Dummy_R0,pair(Msglen,Type))))))),pair(RP,PKGA))))))

step step_4 (CN,MN,HA,PKG,Kcn,Hashv,CoA,HAA,HoA,OldCoA,CNA,Rep,RP,PKGA,Blt,Dummy_R0,Msglen,Type,Req,SIDCN,K1,R1,R2,SID,R0) :=
 state_correspondingnode(CN,MN,HA,PKG,Kcn,Hashv,2,CoA,HAA,HoA,OldCoA,CNA,Rep,RP,PKGA,Blt,Dummy_R0,Msglen,Type,Req,SIDCN,K1,R1,R2,SID).
 iknows(pair(HoA,pair(CNA,pair(OldCoA,pair(crypt(Kcn,pair(CoA,pair(HoA,pair(Blt,pair(OldCoA,pair(R0,pair(Msglen,Type))))))),pair(RP,PKGA))))))
 =>
 state_correspondingnode(CN,MN,HA,PKG,Kcn,Hashv,3,CoA,HAA,HoA,OldCoA,CNA,Rep,RP,PKGA,Blt,R0,Msglen,Type,Req,SIDCN,K1,R1,R2,SID)

step step_5 (CN,MN,HA,PKG,Kcn,Hashv,CoA,HAA,HoA,OldCoA,CNA,Rep,RP,PKGA,Blt,Dummy_R0,Msglen,Type,Req,SIDCN,K1,R1,R2,SID,R0) :=
 state_correspondingnode(CN,MN,HA,PKG,Kcn,Hashv,3,CoA,HAA,HoA,OldCoA,CNA,Rep,RP,PKGA,Blt,Dummy_R0,Msglen,Type,Req,SIDCN,K1,R1,R2,SID).
 iknows(pair(CoA,pair(CNA,pair(OldCoA,pair(crypt(Kcn,pair(CoA,pair(HoA,pair(Blt,pair(OldCoA,pair(R0,pair(Msglen,Type))))))),pair(RP,PKGA))))))
 =>
 state_correspondingnode(CN,MN,HA,PKG,Kcn,Hashv,5,CoA,HAA,HoA,OldCoA,CNA,Rep,RP,PKGA,Blt,R0,Msglen,Type,Req,SIDCN,K1,R1,R2,SID).
 iknows(pair(CNA,pair(PKGA,Req)))

step step_6 (CN,MN,HA,PKG,Kcn,Hashv,CoA,HAA,HoA,OldCoA,CNA,Rep,RP,PKGA,Blt,R0,Msglen,Type,Req,SIDCN,K1,Dummy_R1,R2,SID,R1) :=
 state_correspondingnode(CN,MN,HA,PKG,Kcn,Hashv,5,CoA,HAA,HoA,OldCoA,CNA,Rep,RP,PKGA,Blt,R0,Msglen,Type,Req,SIDCN,K1,Dummy_R1,R2,SID).
 iknows(pair(PKGA,pair(CNA,pair(Rep,pair(SIDCN,K1)))))
=[exists R1]=>
 state_correspondingnode(CN,MN,HA,PKG,Kcn,Hashv,7,CoA,HAA,HoA,OldCoA,CNA,Rep,RP,PKGA,Blt,R0,Msglen,Type,Req,SIDCN,K1,R1,R2,SID).
 iknows(pair(CNA,pair(CoA,xor(R0,R1))))

step step_7 (CN,MN,HA,PKG,Kcn,Hashv,CoA,HAA,HoA,OldCoA,CNA,Rep,RP,PKGA,Blt,R0,Msglen,Type,Req,SIDCN,K1,R1,Dummy_R2,SID,R2) :=
 state_correspondingnode(CN,MN,HA,PKG,Kcn,Hashv,7,CoA,HAA,HoA,OldCoA,CNA,Rep,RP,PKGA,Blt,R0,Msglen,Type,Req,SIDCN,K1,R1,Dummy_R2,SID).
 iknows(pair(CoA,pair(CNA,pair(crypt(Kcn,pair(R1,R2)),RP))))
 =>
 state_correspondingnode(CN,MN,HA,PKG,Kcn,Hashv,9,CoA,HAA,HoA,OldCoA,CNA,Rep,RP,PKGA,Blt,R0,Msglen,Type,Req,SIDCN,K1,R1,R2,SID).
 iknows(pair(CNA,pair(CoA,apply(Hashv,Dummy_R2))))

step step_8 (PKG,MN,CN,HA,Hashv,CoA,HAA,HoA,Rep,OldCoA,CNA,RP,PKGA,Blt,R0,Msglen,Type,Req,SIDCN,K1,R1,R2,SID) :=
 state_privatekeygenerator(PKG,MN,CN,HA,Hashv,4,CoA,HAA,HoA,Rep,OldCoA,CNA,RP,PKGA,Blt,R0,Msglen,Type,Req,SIDCN,K1,R1,R2,SID).
 iknows(pair(CNA,pair(PKGA,Req)))
 =>
 state_privatekeygenerator(PKG,MN,CN,HA,Hashv,6,CoA,HAA,HoA,Rep,OldCoA,CNA,RP,PKGA,Blt,R0,Msglen,Type,Req,SIDCN,K1,R1,R2,SID).
 iknows(pair(PKGA,pair(CNA,pair(Rep,pair(SIDCN,K1)))))



role user(
		U, H, B			: agent,
		Ku, Kh, Kb		: public_key,
		Hash			: hash_func,
		U2h, H2u, U2b, B2u	: channel(dy)
	)
	played_by U
	def=
	local
		State			: nat,
		Req_host		: {{text.text}_inv(public_key)}_public_key,
		Req_board		: {{text.text}_inv(public_key)}_public_key,
		Req_all			: {{text.text}_inv(public_key)}_public_key.{{text.text}_inv(public_key)}_public_key,
		Hashed_req		: hash_func,
		UHOA, Nuh, Nuhb, Nub	: text
	init
		State := 1
	transition
	1.	State = 1 /\ B2u(start) =|>
		State' :=     3	/\ UHOA' := new()
				/\ Nuh' := new()
				/\ Nuhb' := new()
				/\ Nub' := new()
				/\ secret(UHOA', uhoa, {U, H})
				/\ secret(Nuh', nuh, {U, H})
				/\ secret(Nuhb', nuhb, {U, B})			%%% UHB
				/\ secret(Nub', nub, {U, B})
				/\ Req_host' := {{UHOA'.Nuh'}_inv(Ku)}_Kh
				/\ Req_board' := {{Nuhb'.Nub'}_inv(Ku)}_Kb
				/\ Req_all' := Req_host'.Req_board'
				/\ U2b(Req_all')
				/\ U2h({{Nuh'.Nuhb'}_inv(Ku)}_Kh)
	3.	State = 3 /\ B2u(Req_all'.{Hashed_req'}_inv(Kb)) =|>
		State' :=     9 /\ request(U,B,board_user_sign,Hashed_req')	%%%% 9?
		
end role

role board(
		U, H, B			: agent,
		Ku, Kh, Kb		: public_key,
		Hash			: hash_func,
		B2h, H2b, U2b, B2u	: channel(dy)
	)
	played_by B
	def=
	local
		State			: nat,
		Req_host		: {{text.text}_inv(public_key)}_public_key,
		Req_board		: {{text.text}_inv(public_key)}_public_key,
		Req_all			: {{text.text}_inv(public_key)}_public_key.{{text.text}_inv(public_key)}_public_key,
		Hashed_req		: hash_func,
		Nuhb, Nub, Nhb, M	: text,
		Res_user		: {{text.text}_inv(public_key)}_public_key,
		Res_board		: {{text.text.text}_inv(public_key)}_public_key,
		Res_all			: {{text.text}_inv(public_key)}_public_key.{{text.text.text}_inv(public_key)}_public_key,
		Sig			: {hash_func}_inv(public_key)
	init
		State := 2
	transition
	2.	State = 2 /\ U2b(Req_host'.{{Nuhb'.Nub'}_inv(Ku)}_Kb) =|>
		State' :=     5	/\ Req_all' := Req_host'.{{Nuhb'.Nub'}_inv(Ku)}_Kb
				/\ Hashed_req' := Hash(Req_all')
				/\ witness(B,U,board_user_sign,Hashed_req')
				/\ Sig' := {Hashed_req'}_inv(Kb)
				/\ B2u(Req_all'.Sig')
				/\ B2h(Req_all'.Sig')
	5.	State = 5 /\ H2b(Res_user'.{{M'.Nuhb_'.Nhb'}_inv(Kh)}_Kb) =|>
		State' :=     6 /\ request(B,H,host_board_nuhb,Nuhb')
end role

role host(
		U, H, B			: agent,
		Ku, Kh, Kb		: public_key,
		Hash			: hash_func,
		B2h, H2b, U2h, H2u	: channel(dy)
	)
	played_by H
	def=
	local
		State			: nat,
		Req_host		: {{text.text}_inv(public_key)}_public_key,
		Req_board		: {{text.text}_inv(public_key)}_public_key,
		Req_all			: {{text.text}_inv(public_key)}_public_key.{{text.text}_inv(public_key)}_public_key,
		Res_user		: {{text.text}_inv(public_key)}_public_key,
		Res_board		: {{text.text.text}_inv(public_key)}_public_key,
		Res_all			: {{text.text}_inv(public_key)}_public_key.{{text.text.text}_inv(public_key)}_public_key,
		UHOA, Nuh, Nuh_, Nuhb, Nhb, T, M	: text
		
	init
		State := 3
	transition
	3.	State = 3 /\ B2h({{UHOA'.Nuh'}_inv(Ku)}_Kh.Req_board.{Hash(Req_all)}_inv(Kb)) /\ U2h({{Nuh_'.Nuhb'}_inv(Ku)}_Kh) =|>
		State' :=     4 /\ witness(H,B,host_board_nuhb,Nuhb')
				/\ T' := new()
				/\ M' := new()
				/\ Nhb' := new()
				/\ H2b({{xor(T',M').Nuh'}_inv(Kh)}_Ku.{{M'.Nuhb'.Nhb'}_inv(Kh)}_Kb)
end role

role session(
		U, H, B				: agent,
		Ku, Kh, Kb			: public_key,
		Hash				: hash_func
	)
	def=
	local
		U2b, B2u, U2h, H2u, H2b, B2h	: channel(dy)		
	composition
		user(U, H, B, Ku, Kh, Kb, Hash, U2h, H2u, U2b, B2u) /\
		board(U, H, B, Ku, Kh, Kb, Hash, B2h, H2b, U2b, B2u) /\
		host(U, H, B, Ku, Kh, Kb, Hash, B2h, H2b, U2h, H2u)
end role

role environment()
	def=	
	const
		u, h, b, i		:	agent,
		hf			:	hash_func,
		ku, kh, kb, ki		:	public_key,
		uhoa			:	protocol_id,
		nuh			:	protocol_id,
		nuhb			:	protocol_id,
		nub			:	protocol_id,
		n4			:	protocol_id,
		host_board_nuhb		:	protocol_id,
		board_user_reqall	:	protocol_id
	intruder_knowledge	=	{u, h, b, i, hf, ku, kh, kb, ki}
	composition
		session(u, h, b, ku, kh, kb, hf)
		/\
		session(u, i, b, ku, ki, kb, hf) /\
		session(u, h, i, ku, kh, ki, hf) /\
		session(i, h, b, ki, kh, kb, hf)
end role

goal
	secrecy_of uhoa
	secrecy_of nuh
	secrecy_of nuhb
	secrecy_of nub
end goal


environment()
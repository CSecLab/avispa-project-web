


role alice (A, B: agent,             
            Ka, Kb: public_key,      
            SND, RCV: channel (dy)) 
played_by A def=

  local State : nat, 
        Na : text (fresh),
        X  : symmetric_key

 const  x : protocol_id

  init State := 0

  transition  
   
    0.  State  = 0 / RCV(start) =|> 
        State':= 2 / Na' := new() / SND({Na'.A.X}_Kb)
                   / secret(Na',na,{A,B}) 
                   / secret(X,x,{A,B}) 
                   

    2.  State  = 2 / RCV({Na}_X) =|> 
        State':= 4 / request(A,B,alice_na,Na')

end role




role bob(A, B: agent,      
         Ka, Kb: public_key,      
         SND, RCV: channel (dy)) 
played_by B def=

  local State : nat, 
        Na: text
 const  sexx : protocol_id
  init State := 1

  transition 

    1.  State  = 1 / RCV({Na'.A.X}_Kb) =|> 
        State':= 3 / SND({Na'}_X)
                   / secret(X,secx,{A,B}) 
                   / witness(B,A,alice_na,Na')

 
end role





role session(A, B: agent, Ka, Kb: public_key) def=

  local SA, RA, SB, RB: channel (dy)

  composition 

        alice(A,B,Ka,SA,RA)
     / bob  (A,B,Ka,SB,RB)

end role


role environment() def=

    const a, b         : agent,
          ka, kb, ki   : public_key,
          na, nb,
          alice_na : protocol_id

    intruder_knowledge = {a, b, ka, kb, ki, inv(ki)}

    composition

        session(a,b,ka,kb)
     / session(a,i,ka,ki)
     / session(i,b,ki,kb)

end role



goal

  secrecy_of x
  secrecy_of secx 
  authentication_on alice_na

end goal



environment()

 
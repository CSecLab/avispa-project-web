role reader ( R,T: agent, ID, S: text, H,G: function, Snd,Rec: channel(dy))
    played_by R
    def=
    local  State         : nat,
    Nr, Nt            : text
    const sec_id, sec_s : protocol_id      
    init State := 0
    transition
    1. State = 0  /\ Rec(start)   =|> State' := 1 /\ Nr' := new()  /\ Snd(Nr') /\ witness(R,T,aut_reader,Nr')
    3. State = 1  /\ Rec(H(ID).G(xor(xor(S,Nr),Nt')).Nt')
    =|> State' := 2   /\ Snd(G(G(S.Nr))) /\ secret(ID,sec_id,{R,T}) /\ secret(S,sec_s,{R,T})
    /\ request(R,T,aut_tag,Nt') 
end role

role tag ( T,R: agent, ID,S: text, H,G : function,Snd,Rec: channel(dy))
    played_by T
    def=
    local  State               : nat,
    Nt, Nr                  : text
 %const sec_k2 : protocol_id
    init State := 0  
    transition
    2. State = 0 /\ Rec(Nr')   =|>   State' := 1   /\ Nt' := new() 
    /\ Snd(H(ID).G(xor(xor(S,Nr'),Nt')).Nt') /\ witness(T,R,aut_tag,Nt')
    
    4. State = 1 /\ Rec(G(G(S.Nr)))
    =|> State' := 2 /\ request(T,R,aut_reader,Nr)
end role

role session(R,T : agent,ID,S : text, H,G: function)
def=
  local Sa,Ra,Sb,Rb : channel(dy)
    composition
    reader(R,T,ID,S,H,G,Sa,Ra) 
	/\  tag(T,R,ID,S,H,G,Sb,Rb)
end role

role environment() def=
const r,t : agent,
      id,s,id1,s1: text,
      h,g: function,
      aut_reader, aut_tag : protocol_id 
      intruder_knowledge = {r,t,h,g}
    composition
    session(r,t,id,s,h,g)
%    /\  session(r,t1,id1,s1,h)
%/\  session(r,t,id,rid,s,h)
end role


goal
secrecy_of sec_id,  sec_s
authentication_on aut_tag   
authentication_on aut_reader 
  
end goal

environment()


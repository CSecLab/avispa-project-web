%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileyv8o6D

section signature:

state_server: agent * agent * symmetric_key * hash_func * hash_func * hash_func * nat * text * text * text * text * apply(hash_func,pair(symmetric_key,pair(agent,pair(text,text)))) * apply(hash_func,pair(apply(hash_func,pair(symmetric_key,pair(agent,pair(text,text)))),text)) * set(agent) * nat -> fact
state_client: agent * agent * symmetric_key * hash_func * hash_func * hash_func * nat * text * text * text * text * apply(hash_func,pair(symmetric_key,pair(agent,pair(text,text)))) * apply(hash_func,pair(apply(hash_func,pair(symmetric_key,pair(agent,pair(text,text)))),text)) * set(agent) * nat -> fact


section types:

Set_49, Dummy_Set_49, Dummy_Set_28, Set_28, ASGoal: set(agent)
auths, autha, sec_PSK, sec_AK: protocol_id
dummy_msg, start, MGoal: message
AuthA, Dummy_AuthA, Dummy_AuthS, AuthS: apply(hash_func,pair(apply(hash_func,pair(symmetric_key,pair(agent,pair(text,text)))),text))
AK, Dummy_AK: apply(hash_func,pair(symmetric_key,pair(agent,pair(text,text))))
T, Ns, Nc, ID, Dummy_ID, Dummy_Nc, Dummy_Ns, Dummy_T, dummy_nonce: text
PRF, MICA, MICS, prf, mica, mics: hash_func
PSK, psk_ps, psk_pi, psk_is: symmetric_key
Dummy_A, A, S, A2Goal, A1Goal, a, s, i: agent
6, State, 4, SID, Dummy_State, 3, SID2, 2, SID1, 1, 0, 10: nat
set_99, set_98, set_96, set_90, set_77, set_100: set


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(s).
 iknows(mica).
 iknows(mics).
 iknows(prf).
 iknows(psk_pi).
 iknows(psk_is).
 iknows(i).
 state_client(a,s,psk_ps,prf,mica,mics,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_77,3).
 state_server(s,a,psk_ps,prf,mica,mics,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_90,4).
 state_client(a,i,psk_pi,prf,mica,mics,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_96,6).
 state_server(s,i,psk_is,prf,mica,mics,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,set_100,10)


section rules:

step step_0 (A,S,PSK,PRF,MICA,MICS,T,Ns,Nc,ID,AK,AuthS,Set_28,SID) :=
 state_client(A,S,PSK,PRF,MICA,MICS,0,T,Ns,Nc,ID,AK,AuthS,Set_28,SID).
 iknows(start)
 =>
 state_client(A,S,PSK,PRF,MICA,MICS,1,T,Ns,Nc,ID,AK,AuthS,Set_28,SID).
 iknows(A)

step step_1 (A,S,PSK,PRF,MICA,MICS,Dummy_T,Dummy_Ns,Dummy_Nc,ID,Dummy_AK,AuthS,Dummy_Set_28,SID,T,Ns,Nc) :=
 state_client(A,S,PSK,PRF,MICA,MICS,1,Dummy_T,Dummy_Ns,Dummy_Nc,ID,Dummy_AK,AuthS,Dummy_Set_28,SID).
 iknows(pair(Ns,pair(T,S)))
=[exists Nc]=>
 state_client(A,S,PSK,PRF,MICA,MICS,2,T,Ns,Nc,ID,apply(PRF,pair(PSK,pair(S,T))),AuthS,Dummy_Set_28,SID).
 iknows(pair(Nc,apply(MICA,pair(apply(PRF,pair(PSK,pair(S,T))),Ns)))).
 witness(A,S,autha,apply(MICA,pair(apply(PRF,pair(PSK,pair(S,T))),Ns))).
 secret(apply(PRF,pair(PSK,pair(S,T))),sec_AK,Dummy_Set_28).
 contains(A,Dummy_Set_28).
 contains(S,Dummy_Set_28)

step step_2 (A,S,PSK,PRF,MICA,MICS,T,Ns,Dummy_Nc,Dummy_ID,Dummy_AK,Dummy_AuthS,Set_28,SID,Nc,ID,AK) :=
 state_client(A,S,PSK,PRF,MICA,MICS,2,T,Ns,Dummy_Nc,Dummy_ID,Dummy_AK,Dummy_AuthS,Set_28,SID).
 iknows(pair(ID,apply(MICS,pair(AK,Nc))))
 =>
 state_client(A,S,PSK,PRF,MICA,MICS,3,T,Ns,Nc,ID,AK,apply(MICS,pair(AK,Nc)),Set_28,SID).
 request(S,A,auths,apply(MICS,pair(AK,Nc)),SID)

step step_3 (S,Dummy_A,PSK,PRF,MICA,MICS,Dummy_T,Dummy_Ns,Nc,ID,Dummy_AK,AuthA,Set_49,SID,A,T,Ns) :=
 state_server(S,Dummy_A,PSK,PRF,MICA,MICS,0,Dummy_T,Dummy_Ns,Nc,ID,Dummy_AK,AuthA,Set_49,SID).
 iknows(A)
=[exists T,Ns]=>
 state_server(S,A,PSK,PRF,MICA,MICS,1,T,Ns,Nc,ID,apply(PRF,pair(PSK,pair(S,T))),AuthA,Set_49,SID).
 iknows(pair(Ns,pair(T,S)))

step step_4 (S,A,PSK,PRF,MICA,MICS,T,Dummy_Ns,Dummy_Nc,Dummy_ID,Dummy_AK,Dummy_AuthA,Dummy_Set_49,SID,Ns,Nc,ID,AK) :=
 state_server(S,A,PSK,PRF,MICA,MICS,1,T,Dummy_Ns,Dummy_Nc,Dummy_ID,Dummy_AK,Dummy_AuthA,Dummy_Set_49,SID).
 iknows(pair(Nc,apply(MICA,pair(AK,Ns))))
=[exists ID]=>
 state_server(S,A,PSK,PRF,MICA,MICS,2,T,Ns,Nc,ID,AK,apply(MICA,pair(AK,Ns)),Dummy_Set_49,SID).
 request(S,A,autha,apply(MICA,pair(AK,Ns)),SID).
 iknows(pair(ID,apply(MICS,pair(AK,Nc)))).
 witness(S,A,auths,apply(MICS,pair(AK,Nc))).
 secret(AK,sec_AK,Dummy_Set_49).
 contains(A,Dummy_Set_49).
 contains(S,Dummy_Set_49)


section properties:

property secrecy_of_sec_AK (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_AK,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_autha (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,autha,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,autha,MGoal))
     /\ ((request(A1Goal,A2Goal,autha,MGoal,SID1)
           /\ request(A1Goal,A2Goal,autha,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_auths (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auths,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auths,MGoal))
     /\ ((request(A1Goal,A2Goal,auths,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auths,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sec_AK (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_AK,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_autha (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,autha,MGoal,SID) &
 not(witness(A2Goal,A1Goal,autha,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_autha (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,autha,MGoal,SID1).
 request(A1Goal,A2Goal,autha,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_auths (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auths,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auths,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auths (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auths,MGoal,SID1).
 request(A1Goal,A2Goal,auths,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


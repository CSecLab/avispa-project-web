role srp_Init (A,B : agent,  Password : symmetric_key,  H : function,
	       G : text,   Snd,Rcv:channel(dy))
played_by A
def=
  local State : nat,  	Na    :text,   Salt  : message,
	DHY, V, K,M : message
  const sec_i_K : protocol_id
  init  State := 0
  transition
  1. State = 0  /\ Rcv(start) =|>
      State':= 1 /\ Na' := new()
%%                     /\ MA' := H(H(G).H(A).H(Password).H(exp(G,Na))) 
                   /\ Snd(A.exp(G,Na').H(H(G).H(A).H(Password).H(exp(G,Na))))
 %% change MA  2. State = 1  /\ Rcv(H(exp(G,Na).MA.K).Salt'.{DHY'}_(exp(G,H(Salt'.H(A.Password)))))   =|> 
2. State = 1  /\ Rcv(H(exp(G,Na).H(H(G).H(A).H(Password).H(exp(G,Na))).K).Salt'.{DHY'}_(exp(G,H(Salt'.H(A.Password)))))   =|> 
     State':= 2   /\ V' := exp(G,H(Salt'.H(A.Password)))
                 /\ K' := H( V'.exp(DHY',Na) )
                /\ M' := H(H(G).H(A).Salt'.exp(G,Na).{DHY'}_V'.K' )
               /\ Snd( M' )
               /\ witness(A,B,k1,K')
                /\ secret(K',sec_i_K,{A,B})
                /\ request(A,B,k2,K)
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role srp_Resp (B,A : agent,   Password : symmetric_key,     Salt : message,
	       H: function,      G: text,       Snd, Rcv:channel(dy))
played_by B
def=
  local State : nat,   Na,Nb    : text,  M,K, DHX, V: message
  const sec_r_K : protocol_id
  init  State := 0
  transition
1. State = 0  /\ Rcv(A.DHX'.H(H(G).H(A).H(Password).H(exp(G,Na)))) =|>
   State':= 1 /\ Nb' := new()    
                   /\ V' := exp(G,H(Salt'.H(A.Password)))
                   /\ K' := H( V'.exp(DHX',Nb) )
 %% chnge ma = /\ Snd(H(exp(G,Nb).MA.K).Salt.{exp(G,Nb')}_(exp(G,H(Salt.H(A.Password)))))
                  /\ Snd(H(exp(G,Nb). H(H(G).H(A).H(Password).H(exp(G,Na))).K).Salt.{exp(G,Nb')}_(exp(G,H(Salt.H(A.Password)))))
                 /\ witness(B,A,k2,K')
               /\ secret(K',sec_r_K,{A,B})
2. State = 1  /\ Rcv(M) =|>
    State':= 2  /\ request(B,A,k1,K)
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role session(A,B: agent,      Password: symmetric_key,
	     Salt: message,       H: function,        G: text)
def=
   local SA,RA,SB,RB: channel (dy)
   composition
           srp_Init(A,B,Password,H,G,SA,RA)  /\
           srp_Resp(B,A,Password,Salt,H,G,SB,RB)
end role
%%%%%%%%%%%%%%%%
role environment()
def=
  const k1,k2 : protocol_id,   a,b,i: agent,  kab,kai,kbi: symmetric_key,
	s_ab,s_ai,s_bi: message,  h:function,    g:text
	
  intruder_knowledge = {i, kai, kbi, s_ai, s_bi}
  composition
	   session(a,b,kab,s_ab,h,g)
	/\ session(a,i,kai,s_ai,h,g)
	/\ session(b,i,kbi,s_bi,h,g)
end role
%%%%%%%%%%%%%%%%%%%%%  
goal
    %secrecy_of K
    secrecy_of sec_i_K, sec_r_K
    %SRP_Init authenticates SRP_Resp on k
    authentication_on k2
    %SRP_Resp authenticates SRP_Init on k
    authentication_on k1
end goal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

environment()


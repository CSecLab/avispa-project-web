%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileEeb7Ip

section signature:

state_deviceB: agent * agent * public_key * hash_func * nat * text * text * text * text * symmetric_key * symmetric_key * public_key * set(agent) * set(agent) * nat -> fact
state_deviceA: agent * agent * public_key * hash_func * nat * text * text * text * text * symmetric_key * symmetric_key * public_key * set(agent) * set(agent) * set(agent) * nat -> fact


section types:

MGoal, start: message
a_b_hasz, b_a_rarb, ra, rb, rc: protocol_id
Dummy_K56, Dummy_K24, dummy_sk, k2, K24, K56, k5: symmetric_key
hasz, Hash: hash_func
dummy_pk, certa, certb, certi, CertA, CertB: public_key
Dummy_State, 3, SID, SID2, SID1, 1, State, 5, 4, 2, 13, 0, 9, 7, 6: nat
set_88, set_87, set_86, set_127, set_126, set_125, set_124, set_123, set_122, set_121, set_119, set_118, set_117, set_115, set_114, set_112, set_111, set_110, set_105, set_104: set
A2Goal, A1Goal, a, b, IDa, IDb, i: agent
Dummy_Set_32, ASGoal, Set_60, Set_59, Set_40, Set_39, Set_32, Dummy_Set_60, Dummy_Set_59, Dummy_Set_40, Dummy_Set_39: set(agent)
Dummy_Rc, Dummy_Rb, Dummy_Ra, dummy_nonce, Ra, Rc, Rb, Ssid, Dummy_Ssid: text


section inits:

initial_state init1 := 
 iknows(start).
 iknows(certa).
 iknows(certb).
 iknows(inv(certa)).
 iknows(a).
 iknows(b).
 iknows(certi).
 iknows(inv(certi)).
 iknows(i).
 state_deviceA(a,b,certa,hasz,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,dummy_sk,dummy_pk,set_86,set_87,set_88,3).
 state_deviceB(b,a,certb,hasz,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,dummy_sk,dummy_pk,set_104,set_105,4).
 state_deviceA(b,a,certb,hasz,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,dummy_sk,dummy_pk,set_110,set_111,set_112,6).
 state_deviceB(a,b,certa,hasz,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,dummy_sk,dummy_pk,set_114,set_115,7).
 state_deviceA(a,i,certa,hasz,0,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,dummy_sk,dummy_pk,set_117,set_118,set_119,9).
 state_deviceB(b,i,certb,hasz,1,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_sk,dummy_sk,dummy_pk,set_126,set_127,13)


section rules:

step step_0 (IDa,IDb,CertA,Hash,Ssid,Dummy_Ra,Rb,Rc,K24,K56,CertB,Set_32,Set_39,Set_40,SID,Ra) :=
 state_deviceA(IDa,IDb,CertA,Hash,0,Ssid,Dummy_Ra,Rb,Rc,K24,K56,CertB,Set_32,Set_39,Set_40,SID).
 iknows(start)
=[exists Ra]=>
 state_deviceA(IDa,IDb,CertA,Hash,2,Ssid,Ra,Rb,Rc,K24,K56,CertB,Set_32,Set_39,Set_40,SID).
 iknows(pair(Ra,IDa))

step step_1 (IDa,IDb,CertA,Hash,Ssid,Ra,Dummy_Rb,Dummy_Rc,Dummy_K24,Dummy_K56,CertB,Dummy_Set_32,Set_39,Set_40,SID,Rb,Rc,K24,K56) :=
 state_deviceA(IDa,IDb,CertA,Hash,2,Ssid,Ra,Dummy_Rb,Dummy_Rc,Dummy_K24,Dummy_K56,CertB,Dummy_Set_32,Set_39,Set_40,SID).
 iknows(pair(Rb,pair(IDb,pair(crypt(inv(CertB),apply(Hash,pair(Rb,pair(Ra,IDa)))),CertB))))
=[exists Rc,K56,K24]=>
 state_deviceA(IDa,IDb,CertA,Hash,3,Ssid,Ra,Rb,Rc,K24,K56,CertB,Dummy_Set_32,Set_39,Set_40,SID).
 iknows(pair(IDb,pair(scrypt(K24,pair(K56,pair(Ra,pair(Rb,pair(Rc,pair(IDb,crypt(inv(CertA),apply(Hash,pair(Ra,pair(Rb,K56)))))))))),pair(crypt(CertB,pair(K24,IDb)),CertA)))).
 witness(IDa,IDb,a_b_hasz,apply(Hash,pair(Rb,pair(Ra,IDa)))).
 secret(K56,k5,Dummy_Set_32).
 contains(IDa,Dummy_Set_32).
 contains(IDb,Dummy_Set_32)

step step_2 (IDa,IDb,CertA,Hash,Dummy_Ssid,Ra,Rb,Rc,K24,K56,CertB,Set_32,Dummy_Set_39,Dummy_Set_40,SID,Ssid) :=
 state_deviceA(IDa,IDb,CertA,Hash,4,Dummy_Ssid,Ra,Rb,Rc,K24,K56,CertB,Set_32,Dummy_Set_39,Dummy_Set_40,SID).
 iknows(scrypt(K56,pair(Rc,pair(Ssid,IDa))))
 =>
 state_deviceA(IDa,IDb,CertA,Hash,5,Ssid,Ra,Rb,Rc,K24,K56,CertB,Set_32,Dummy_Set_39,Dummy_Set_40,SID).
 request(IDa,IDb,rc,Rc,SID).
 secret(Ssid,sid,Dummy_Set_39).
 secret(K56,k5,Dummy_Set_40).
 contains(IDa,Dummy_Set_39).
 contains(IDb,Dummy_Set_39).
 contains(IDa,Dummy_Set_40).
 contains(IDb,Dummy_Set_40)

step step_3 (IDb,IDa,CertB,Hash,Dummy_Ra,Rc,Dummy_Rb,Ssid,K24,K56,CertA,Set_59,Set_60,SID,Ra,Rb) :=
 state_deviceB(IDb,IDa,CertB,Hash,1,Dummy_Ra,Rc,Dummy_Rb,Ssid,K24,K56,CertA,Set_59,Set_60,SID).
 iknows(pair(Ra,IDa))
=[exists Rb]=>
 state_deviceB(IDb,IDa,CertB,Hash,3,Ra,Rc,Rb,Ssid,K24,K56,CertA,Set_59,Set_60,SID).
 iknows(pair(Rb,pair(IDb,pair(crypt(inv(CertB),apply(Hash,pair(Ra,pair(Rb,IDa)))),CertB)))).
 witness(IDb,IDa,ra,Ra)

step step_4 (IDb,IDa,CertB,Hash,Ra,Rc,Rb,Dummy_Ssid,Dummy_K24,Dummy_K56,CertA,Dummy_Set_59,Dummy_Set_60,SID,Ssid,K24,K56) :=
 state_deviceB(IDb,IDa,CertB,Hash,3,Ra,Rc,Rb,Dummy_Ssid,Dummy_K24,Dummy_K56,CertA,Dummy_Set_59,Dummy_Set_60,SID).
 iknows(pair(IDb,pair(scrypt(K24,pair(K56,pair(Ra,pair(Rb,pair(Rc,pair(IDb,crypt(inv(CertA),apply(Hash,pair(Ra,pair(Rb,K56)))))))))),pair(crypt(CertB,pair(K24,IDb)),CertA))))
=[exists Ssid]=>
 state_deviceB(IDb,IDa,CertB,Hash,5,Ra,Rc,Rb,Ssid,K24,K56,CertA,Dummy_Set_59,Dummy_Set_60,SID).
 iknows(scrypt(K56,pair(Rc,pair(Ssid,IDa)))).
 secret(Ssid,sid,Dummy_Set_59).
 secret(Dummy_K56,k5,Dummy_Set_60).
 witness(IDb,IDa,b_a_rarb,pair(Ra,Rb)).
 request(IDb,IDa,rb,Rb,SID).
 contains(IDa,Dummy_Set_59).
 contains(IDb,Dummy_Set_59).
 contains(IDa,Dummy_Set_60).
 contains(IDb,Dummy_Set_60)


section properties:

property secrecy_of_k5 (MGoal,ASGoal) :=
 [] ((secret(MGoal,k5,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sid (MGoal,ASGoal) :=
 [] ((secret(MGoal,sid,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_ra (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,ra,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,ra,MGoal))
     /\ ((request(A1Goal,A2Goal,ra,MGoal,SID1)
           /\ request(A1Goal,A2Goal,ra,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_rb (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,rb,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,rb,MGoal))
     /\ ((request(A1Goal,A2Goal,rb,MGoal,SID1)
           /\ request(A1Goal,A2Goal,rb,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_rc (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,rc,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,rc,MGoal))
     /\ ((request(A1Goal,A2Goal,rc,MGoal,SID1)
           /\ request(A1Goal,A2Goal,rc,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_a_b_hasz (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,a_b_hasz,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,a_b_hasz,MGoal))
     /\ ((request(A1Goal,A2Goal,a_b_hasz,MGoal,SID1)
           /\ request(A1Goal,A2Goal,a_b_hasz,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_b_a_rarb (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,b_a_rarb,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,b_a_rarb,MGoal))
     /\ ((request(A1Goal,A2Goal,b_a_rarb,MGoal,SID1)
           /\ request(A1Goal,A2Goal,b_a_rarb,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_k5 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,k5,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sid (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sid,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_ra (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,ra,MGoal,SID) &
 not(witness(A2Goal,A1Goal,ra,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_ra (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,ra,MGoal,SID1).
 request(A1Goal,A2Goal,ra,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_rb (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,rb,MGoal,SID) &
 not(witness(A2Goal,A1Goal,rb,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_rb (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,rb,MGoal,SID1).
 request(A1Goal,A2Goal,rb,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_rc (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,rc,MGoal,SID) &
 not(witness(A2Goal,A1Goal,rc,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_rc (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,rc,MGoal,SID1).
 request(A1Goal,A2Goal,rc,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_a_b_hasz (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,a_b_hasz,MGoal,SID) &
 not(witness(A2Goal,A1Goal,a_b_hasz,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_a_b_hasz (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,a_b_hasz,MGoal,SID1).
 request(A1Goal,A2Goal,a_b_hasz,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_b_a_rarb (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,b_a_rarb,MGoal,SID) &
 not(witness(A2Goal,A1Goal,b_a_rarb,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_b_a_rarb (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,b_a_rarb,MGoal,SID1).
 request(A1Goal,A2Goal,b_a_rarb,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


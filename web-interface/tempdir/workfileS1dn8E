%% PROTOCOLE: IMS-AKA+
%% BUT: 
%% Authentication and Key Agreement (authentification et établissement des clés)
%% Terminal_Serveur:
%% S est le serveur (HSS), UE est le terminal, ils se partagent une clé secète Sk.
%% S publie une équation de courbe elliptique , un point de base B sur la courbe , une fonction de hachage H
%%  * : symbole de la multiplication scalaire dans les courbes élliptiques , || : symbole de concaténation
%% UE ---> S : V=x*B 
%%             UE génère aléatoirement sa clé privée x et calcule clé publique V=x*B
%%
%% S ---> UE : W= c*B , Auths= H(W || Sk*c*V)
%%             A la réception de V; 
%%	   S génère sa clé privée c ,  calcule sa clé publique : W=c*B ,  la clé AICK= c*V
%%             et  calcule son jeton d'authentification Auths=H(W||Sk*AICK)
%% 
%% UE ---> S : Authu= H(V || Sk*x*W)
%%            A la réception de Auths, UE calcule la clé AICK= x*W
%%            et vérifie Auths, si ok , il envoie son jeton d'authentification:  Authu= H(V || Sk*x*W)
%% S ---> UE : 200OK
%%            S vérifie si Authu est correcte 
%%            Si oui, S envoie 200OK au terminal
%%
%% Le but est qu'à la fin, les deux entités(serveur et terminal) s'authentifient mutuellement et arrivent à calculer localement 
%% le meme point AICK
%%
%% HLPSL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Premier role: 
                %role user_equipement: représente le terminal 

role user_equipement ( 
              UE,S: agent,
              Sk: symmetric_key,  % Clé secrète partagée entre le terminal et serveur
              B: public_key,  % Clé publique (point sur la courbe)
              H: hash_func,  % fonction de hachage
              SND,RCV: channel(dy) % Canal de communication avec le serveur
                     ) played_by UE  % L'agent UE joue le role du terminal
def=
% Décalaration des variables locales
local 
     State: nat,
     X,C: text %  clé privée du terminal, du serveur respectivement.
     
const 
     sec_X, sec_aick, sec_sk: protocol_id  % identificateurs des propriétés de sécurité
init State:=1
% Définition des échanges
transition
1. State = 1 /\ RCV(start) =|>
   State':=2 /\ X':= new() % clé privée
             /\ SND(sipregister.{X'}_B) 
             /\ secret(X', sec_X ,UE)
 
2. State=2   /\ RCV (sip401.{C'}_B.H({C'}_B.{Sk}_({C'.X}_B))) =|>
   State':=3
             /\ SND(sipregister.H({X}_B.({Sk}_({X.C}_B))))
             /\ witness (UE,S,nx, H({X}_B.({Sk}_({X.C}_B))))
             /\ request (UE,S,nc, H({C}_B.({Sk}_({C.X}_B)))) 
             /\ secret ({X.C}_B,sec_aick,{UE,S})
             /\ secret (Sk,sec_sk,{UE,S})

3. State = 3 /\ RCV(sip200) =|> State':= 4
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%Deuxième role:
                 % role hss: représente HSS 
role hss ( 
              S,UE: agent,  
              Sk  : symmetric_key, % Clé secrète partagée entre serveur et terminal
              B   : public_key, % Clé publique (point sur la courbe)
              H   : hash_func, % Foncion de hachage
              SND,RCV: channel(dy) % Canal de communication avec le terminal
          ) played_by S %% L'agent S joue le role du HSS
def=
local 
     State: nat,
     X,C,Aick: text % respectivement: clé privée du terminal, du serveur, clé de session
     
const 
     sec_C, sec_aick, sec_sk : protocol_id % identificateurs de propriétés de sécurité à vérifier
init State := 1
% Définition des échanges
transition 
0. State = 1   /\  RCV (sipregister.{X'}_B) =|>
   State':=2   /\  C':=new() 
               /\  SND (sip401.{C'}_B.H({C'}_B.({Sk}_({C'.X}_B)))) 
               /\  witness (S, UE, nc, H({C'}_B.({Sk}_({C'.X}_B)))) 
               /\  secret (C', sec_C, S) 
               /\  secret ({C'.X}_B, sec_aick, {S,UE})
               /\  secret (Sk, sec_sk, {S,UE})
                                 
1. State = 2   /\ RCV (sipregister.H({X}_B.({Sk}_({X.C}_B)))) =|>  
   State' :=3  /\ request (S ,UE, nx , H({X}_B.({Sk}_({X.C}_B))))
               /\ SND(sip200)    
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% role session: Ce role représente une session du protocole 
role session        ( UE, S  : agent , 
                      Sk: symmetric_key,
                      B : public_key ,
                      H : hash_func 
                    ) 
def= 
local SND, RCV : channel(dy)
composition
      
   user_equipement (UE, S,Sk,B,H, SND, RCV)
   /\ hss (S, UE,Sk, B, H,SND, RCV)  
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Role principal
role environment ( ) 
def= 
const  
ue,s,i   : agent , 
nx, nc   : protocol_id ,
sip401,sip200,sipregister: protocol_id,        
sk, suei,sis: symmetric_key,
b,buei,bis  : public_key,
h: hash_func  
 %% définir les connaissances initiales de l’intrus 
intruder_knowledge={i,ue,s, h, b,sip401,sip200,sipregister,nx,nc} 

composition 
                session (ue, s, sk,b,h) 

              /\ session (ue,i,sk,b,h)
             /\  session (i,s,sk,b,h)
      
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
goal 
%Vérification de la confidentialité des clés privées et de la clé secrète établie entre le HSS et le terminal
secrecy_of  sec_C,   sec_X ,sec_aick, sec_sk
%Authentification mutuelle:
        %1- Le terminal cherche à authentifier le réseau grâce à son nc 
authentication_on nc 
        %2- Le réseau cherche à authentifier la terminal grâce à son nx
authentication_on nx 
end goal 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
environment ()

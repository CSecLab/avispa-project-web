role mme(MME, MTCD : agent, GK:symmetric_key,
F2,F3,F4: hash_func,
Sqn :text,
SND, RCV: channel (dy))

played_by MME def=
local
 Tmme :text,
 Amf, Rhss, Rg :text,
 State : nat
const
mme_mtcd, mtcd_mme :protocol_id
init State :=0
transition
1. State =0 /\ RCV(MTCD)=|>
State' :=2
/\Tmme' := new()
/\SND(Rhss.Rg.Tmme' .{F2(Sqn.Tmme')}_F4(GK.Rg.Rhss.Amf) .Amf)
/\witness(MME,MTCD,mtcd_mme,Tmme')
2. State =2
/\ RCV({F3(Sqn.Rg)}_F4(GK.Rg.Rhss.Amf))
=|>
State' :=4/\request(MME,MTCD,mme_mtcd,Tmme')
end role

role mtcd(MME, MTCD : agent, GK:symmetric_key,
Sqn :text,
F2,F3,F4: hash_func,
SND, RCV: channel (dy))

played_by MTCD def=
local
 Tmme :text,
 Amf, Rhss, Rg :text,
 State : nat
const
mme_mtcd, mtcd_mme :protocol_id
init State :=1
transition
1. State =1 /\ RCV(start)=|>
State' :=2  /\ SND(MTCD)

2. State =2
/\ RCV(Rhss.Rg.Tmme'.{F2(Sqn.Tmme')}_F4(GK.Rg.Rhss.Amf).Amf)
=|>
State' :=3
/\ SND({F3(Sqn.Rg)}_F4(GK.Rg.Rhss.Amf))
/\request(MTCD,MME,mtcd_mme,Tmme')
/\witness(MTCD,MME,mme_mtcd,Tmme')
end role

role session (
MTCD,MME: agent,
Sqn :text,
F2,F3,F4: hash_func,
GK: symmetric_key,
Smme,Rmme,Smtcd,Rmtcd : channel (dy))
def=
  
composition
mme(MME,MTCD,F2,F3,F4,GK,Sqn,Smme,Rmme)
/\ mtcd(MTCD,MME,F2,F3,F4,GK,Sqn,Smtcd,Rmtcd)

end role

role environment()
def=

local Smm1,Rmm1,Sm1,Rm1 : channel (dy)

  const 
    mme_mtcd, mtcd_mme         :protocol_id
    mme,i,mtcd                   : agent,
    f2,f3,f4                   : hash_func,
    gk                         : symmetric_key,
    gk_mmi,gk_im               : symmetric_key
	sqn, sqn_mi, sqn_imm       : text
    


  intruder_knowledge = {mme,mtcd,i,f2,f3,f4}

  composition

     session(mme,mtcd,f2,f3,f4,gk,smm1,rmm1,sm1,rm1)
  /\ session(i,mtcd,f2,f3,f4,gk_imm,si2,ri2,sm2,rm2)
  /\   session(mme,i,f2,f3,f4,gk_mi,smm3,rmm3,si3,ri3)
end role

goal
authentication_on mme_mtcd
authentication_on mtcd_mme
end goal

environment()


%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfile3VMJgf

section signature:

state_server: agent * agent * hash_func * hash_func * hash_func * hash_func * hash_func * hash_func * hash_func * symmetric_key * text * text * text * apply(hash_func,pair(apply(hash_func,pair(text,pair(apply(hash_func,pair(symmetric_key,text)),apply(hash_func,pair(symmetric_key,text))))),pair(text,message))) * apply(hash_func,pair(apply(hash_func,pair(text,pair(apply(hash_func,pair(symmetric_key,text)),apply(hash_func,pair(symmetric_key,text))))),apply(hash_func,pair(symmetric_key,text)))) * message * apply(hash_func,pair(symmetric_key,text)) * apply(hash_func,pair(symmetric_key,text)) * apply(hash_func,pair(symmetric_key,text)) * nat * set(agent) * set(agent) * nat -> fact
state_peer: agent * agent * hash_func * hash_func * hash_func * hash_func * hash_func * hash_func * hash_func * symmetric_key * text * text * text * apply(hash_func,pair(apply(hash_func,pair(text,pair(apply(hash_func,pair(symmetric_key,text)),apply(hash_func,pair(symmetric_key,text))))),pair(text,message))) * apply(hash_func,pair(apply(hash_func,pair(text,pair(apply(hash_func,pair(symmetric_key,text)),apply(hash_func,pair(symmetric_key,text))))),apply(hash_func,pair(symmetric_key,text)))) * message * apply(hash_func,pair(symmetric_key,text)) * apply(hash_func,pair(symmetric_key,text)) * apply(hash_func,pair(symmetric_key,text)) * nat * set(agent) * set(agent) * nat -> fact


section types:

sec_ck2, sec_ik2, sec_ck1, sec_ik1, at_rand, at_rand2: protocol_id
AT_RES, IK, CK, Dummy_CK, Dummy_IK, Dummy_AT_RES: apply(hash_func,pair(symmetric_key,text))
AT_MAC2, Dummy_AT_MAC2: apply(hash_func,pair(apply(hash_func,pair(text,pair(apply(hash_func,pair(symmetric_key,text)),apply(hash_func,pair(symmetric_key,text))))),apply(hash_func,pair(symmetric_key,text))))
AT_MAC1, Dummy_AT_MAC1: apply(hash_func,pair(apply(hash_func,pair(text,pair(apply(hash_func,pair(symmetric_key,text)),apply(hash_func,pair(symmetric_key,text))))),pair(text,message)))
kps, kis, SK: symmetric_key
sqnp1, sqnp2, sqni, NAI, AT_RAND, SQN, request_id, respond_id, success, Dummy_AT_RAND, Dummy_NAI, dummy_nonce: text
set_131, set_130, set_114, set_113: set
7, 5, State, 6, 3, 4, 2, 1, 0, SID, Dummy_State, SID2, SID1: nat
Set_73, Set_72, Set_42, Set_40, Dummy_Set_73, Dummy_Set_72, Dummy_Set_42, Dummy_Set_40, ASGoal: set(agent)
start, AT_AUTN, Dummy_AT_AUTN, dummy_msg, MGoal: message
p, s, P, S, A2Goal, A1Goal, i: agent
f4, f5, HMAC, PRF_SHA1, F1, F2, F3, F4, F5, hmac, prf_sha1, f1, f2, f3: hash_func


section inits:

initial_state init1 := 
 iknows(start).
 iknows(p).
 iknows(s).
 iknows(f1).
 iknows(f2).
 iknows(f3).
 iknows(f4).
 iknows(f5).
 iknows(prf_sha1).
 iknows(hmac).
 iknows(i).
 state_peer(p,s,f1,f2,f3,f4,f5,prf_sha1,hmac,kps,sqnp1,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,0,set_113,set_114,3).
 state_server(s,p,f1,f2,f3,f4,f5,prf_sha1,hmac,kps,sqnp1,dummy_nonce,dummy_nonce,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,dummy_msg,1,set_130,set_131,4)


section rules:

step step_0 (P,S,F1,F2,F3,F4,F5,PRF_SHA1,HMAC,SK,SQN,AT_RAND,Dummy_NAI,AT_MAC1,AT_MAC2,AT_AUTN,AT_RES,IK,CK,Set_40,Set_42,SID,NAI) :=
 state_peer(P,S,F1,F2,F3,F4,F5,PRF_SHA1,HMAC,SK,SQN,AT_RAND,Dummy_NAI,AT_MAC1,AT_MAC2,AT_AUTN,AT_RES,IK,CK,0,Set_40,Set_42,SID).
 iknows(request_id)
=[exists NAI]=>
 state_peer(P,S,F1,F2,F3,F4,F5,PRF_SHA1,HMAC,SK,SQN,AT_RAND,NAI,AT_MAC1,AT_MAC2,AT_AUTN,AT_RES,IK,CK,2,Set_40,Set_42,SID).
 iknows(pair(respond_id,NAI))

step step_1 (P,S,F1,F2,F3,F4,F5,PRF_SHA1,HMAC,SK,SQN,Dummy_AT_RAND,NAI,Dummy_AT_MAC1,Dummy_AT_MAC2,Dummy_AT_AUTN,Dummy_AT_RES,Dummy_IK,Dummy_CK,Dummy_Set_40,Dummy_Set_42,SID,AT_RAND) :=
 state_peer(P,S,F1,F2,F3,F4,F5,PRF_SHA1,HMAC,SK,SQN,Dummy_AT_RAND,NAI,Dummy_AT_MAC1,Dummy_AT_MAC2,Dummy_AT_AUTN,Dummy_AT_RES,Dummy_IK,Dummy_CK,2,Dummy_Set_40,Dummy_Set_42,SID).
 iknows(pair(AT_RAND,pair(pair(scrypt(apply(F5,pair(SK,AT_RAND)),SQN),apply(F1,pair(SK,pair(SQN,AT_RAND)))),apply(HMAC,pair(apply(PRF_SHA1,pair(NAI,pair(apply(F4,pair(SK,AT_RAND)),apply(F3,pair(SK,AT_RAND))))),pair(AT_RAND,pair(scrypt(apply(F5,pair(SK,AT_RAND)),SQN),apply(F1,pair(SK,pair(SQN,AT_RAND))))))))))
 =>
 state_peer(P,S,F1,F2,F3,F4,F5,PRF_SHA1,HMAC,SK,SQN,AT_RAND,NAI,apply(HMAC,pair(apply(PRF_SHA1,pair(NAI,pair(apply(F4,pair(SK,AT_RAND)),apply(F3,pair(SK,AT_RAND))))),pair(AT_RAND,pair(scrypt(apply(F5,pair(SK,AT_RAND)),SQN),apply(F1,pair(SK,pair(SQN,AT_RAND))))))),apply(HMAC,pair(apply(PRF_SHA1,pair(NAI,pair(apply(F4,pair(SK,AT_RAND)),apply(F3,pair(SK,AT_RAND))))),apply(F2,pair(SK,AT_RAND)))),pair(scrypt(apply(F5,pair(SK,AT_RAND)),SQN),apply(F1,pair(SK,pair(SQN,AT_RAND)))),apply(F2,pair(SK,AT_RAND)),apply(F4,pair(SK,AT_RAND)),apply(F3,pair(SK,AT_RAND)),4,Dummy_Set_40,Dummy_Set_42,SID).
 iknows(pair(apply(F2,pair(SK,AT_RAND)),apply(HMAC,pair(apply(PRF_SHA1,pair(NAI,pair(apply(F4,pair(SK,AT_RAND)),apply(F3,pair(SK,AT_RAND))))),apply(F2,pair(SK,AT_RAND)))))).
 request(P,S,at_rand,AT_RAND,SID).
 witness(P,S,at_rand2,AT_RAND).
 secret(apply(F3,pair(SK,AT_RAND)),sec_ck1,Dummy_Set_40).
 secret(apply(F4,pair(SK,AT_RAND)),sec_ik1,Dummy_Set_42).
 contains(S,Dummy_Set_40).
 contains(P,Dummy_Set_40).
 contains(S,Dummy_Set_42).
 contains(P,Dummy_Set_42)

step step_2 (P,S,F1,F2,F3,F4,F5,PRF_SHA1,HMAC,SK,SQN,AT_RAND,NAI,AT_MAC1,AT_MAC2,AT_AUTN,AT_RES,IK,CK,Set_40,Set_42,SID) :=
 state_peer(P,S,F1,F2,F3,F4,F5,PRF_SHA1,HMAC,SK,SQN,AT_RAND,NAI,AT_MAC1,AT_MAC2,AT_AUTN,AT_RES,IK,CK,4,Set_40,Set_42,SID).
 iknows(success)
 =>
 state_peer(P,S,F1,F2,F3,F4,F5,PRF_SHA1,HMAC,SK,SQN,AT_RAND,NAI,AT_MAC1,AT_MAC2,AT_AUTN,AT_RES,IK,CK,6,Set_40,Set_42,SID)

step step_3 (S,P,F1,F2,F3,F4,F5,PRF_SHA1,HMAC,SK,SQN,AT_RAND,NAI,AT_MAC1,AT_MAC2,AT_AUTN,AT_RES,IK,CK,Set_72,Set_73,SID) :=
 state_server(S,P,F1,F2,F3,F4,F5,PRF_SHA1,HMAC,SK,SQN,AT_RAND,NAI,AT_MAC1,AT_MAC2,AT_AUTN,AT_RES,IK,CK,1,Set_72,Set_73,SID).
 iknows(start)
 =>
 state_server(S,P,F1,F2,F3,F4,F5,PRF_SHA1,HMAC,SK,SQN,AT_RAND,NAI,AT_MAC1,AT_MAC2,AT_AUTN,AT_RES,IK,CK,3,Set_72,Set_73,SID).
 iknows(request_id)

step step_4 (S,P,F1,F2,F3,F4,F5,PRF_SHA1,HMAC,SK,SQN,Dummy_AT_RAND,Dummy_NAI,Dummy_AT_MAC1,AT_MAC2,Dummy_AT_AUTN,AT_RES,Dummy_IK,Dummy_CK,Dummy_Set_72,Dummy_Set_73,SID,AT_RAND,NAI) :=
 state_server(S,P,F1,F2,F3,F4,F5,PRF_SHA1,HMAC,SK,SQN,Dummy_AT_RAND,Dummy_NAI,Dummy_AT_MAC1,AT_MAC2,Dummy_AT_AUTN,AT_RES,Dummy_IK,Dummy_CK,3,Dummy_Set_72,Dummy_Set_73,SID).
 iknows(pair(respond_id,NAI))
=[exists AT_RAND]=>
 state_server(S,P,F1,F2,F3,F4,F5,PRF_SHA1,HMAC,SK,SQN,AT_RAND,NAI,apply(HMAC,pair(apply(PRF_SHA1,pair(NAI,pair(apply(F4,pair(SK,AT_RAND)),apply(F3,pair(SK,AT_RAND))))),pair(AT_RAND,pair(scrypt(apply(F5,pair(SK,AT_RAND)),SQN),apply(F1,pair(SK,pair(SQN,AT_RAND))))))),AT_MAC2,pair(scrypt(apply(F5,pair(SK,AT_RAND)),SQN),apply(F1,pair(SK,pair(SQN,AT_RAND)))),AT_RES,apply(F4,pair(SK,AT_RAND)),apply(F3,pair(SK,AT_RAND)),5,Dummy_Set_72,Dummy_Set_73,SID).
 iknows(pair(AT_RAND,pair(pair(scrypt(apply(F5,pair(SK,AT_RAND)),SQN),apply(F1,pair(SK,pair(SQN,AT_RAND)))),apply(HMAC,pair(apply(PRF_SHA1,pair(NAI,pair(apply(F4,pair(SK,AT_RAND)),apply(F3,pair(SK,AT_RAND))))),pair(AT_RAND,pair(scrypt(apply(F5,pair(SK,AT_RAND)),SQN),apply(F1,pair(SK,pair(SQN,AT_RAND)))))))))).
 witness(S,P,at_rand,AT_RAND).
 secret(apply(F3,pair(SK,AT_RAND)),sec_ck2,Dummy_Set_72).
 secret(apply(F4,pair(SK,AT_RAND)),sec_ik2,Dummy_Set_73).
 contains(S,Dummy_Set_72).
 contains(P,Dummy_Set_72).
 contains(S,Dummy_Set_73).
 contains(P,Dummy_Set_73)

step step_5 (S,P,F1,F2,F3,F4,F5,PRF_SHA1,HMAC,SK,SQN,AT_RAND,NAI,AT_MAC1,Dummy_AT_MAC2,AT_AUTN,Dummy_AT_RES,IK,CK,Set_72,Set_73,SID) :=
 state_server(S,P,F1,F2,F3,F4,F5,PRF_SHA1,HMAC,SK,SQN,AT_RAND,NAI,AT_MAC1,Dummy_AT_MAC2,AT_AUTN,Dummy_AT_RES,IK,CK,5,Set_72,Set_73,SID).
 iknows(pair(apply(F2,pair(SK,AT_RAND)),apply(HMAC,pair(apply(PRF_SHA1,pair(NAI,pair(IK,CK))),apply(F2,pair(SK,AT_RAND))))))
 =>
 state_server(S,P,F1,F2,F3,F4,F5,PRF_SHA1,HMAC,SK,SQN,AT_RAND,NAI,AT_MAC1,apply(HMAC,pair(apply(PRF_SHA1,pair(NAI,pair(IK,CK))),apply(F2,pair(SK,AT_RAND)))),AT_AUTN,apply(F2,pair(SK,AT_RAND)),IK,CK,7,Set_72,Set_73,SID).
 iknows(success).
 request(S,P,at_rand2,AT_RAND,SID)


section properties:

property secrecy_of_sec_ck1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_ck1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_ck2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_ck2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_ik1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_ik1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_ik2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_ik2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_at_rand (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,at_rand,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,at_rand,MGoal))
     /\ ((request(A1Goal,A2Goal,at_rand,MGoal,SID1)
           /\ request(A1Goal,A2Goal,at_rand,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_at_rand2 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,at_rand2,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,at_rand2,MGoal))
     /\ ((request(A1Goal,A2Goal,at_rand2,MGoal,SID1)
           /\ request(A1Goal,A2Goal,at_rand2,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sec_ck1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_ck1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_ck2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_ck2,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_ik1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_ik1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_ik2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_ik2,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_at_rand (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,at_rand,MGoal,SID) &
 not(witness(A2Goal,A1Goal,at_rand,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_at_rand (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,at_rand,MGoal,SID1).
 request(A1Goal,A2Goal,at_rand,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_at_rand2 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,at_rand2,MGoal,SID) &
 not(witness(A2Goal,A1Goal,at_rand2,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_at_rand2 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,at_rand2,MGoal,SID1).
 request(A1Goal,A2Goal,at_rand2,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


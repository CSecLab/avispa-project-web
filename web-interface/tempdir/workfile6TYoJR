%EAP-FAST
%HLPSL: Mutual Auth. & Key (Tunnel) Establishment
% Server Auth (certificate) is optional
%Once the clients connect to the network, he can have the 'Kar'. So, option of the PAC is %OR, the client receives a 'Kar' in his token from the MR.
%Request/Response
%Start EAP-FAST, Establish TLS
%Hello (1)
%Hello (2)
%Certificate (1) =|> Peer Authentication
%Certificate (2) : Optional =|> Server Authentication
%Key exchange (1)
%Key exchange (2)
%Change Cipher (1) , (2)
%Finished

role server (C,S                          : agent,
                  H, KeyGen, PRF,PRF1,INT : hash_func,
                  Kar, Ks                 : public_key,
                  SRS, RRS                : channel (dy))
played_by S def=
  local 
     Ns, Csus, PMS : text,
     SessID        : text,
     Np, VerNo, Csu, Ccs,Pcertreq : text,
     Pkeyexchange, Phellodone, Cciphspec : text,
     Npc,Nps     :text,
     Result      :text,
     Kid         :text,
     Pmsg        :text,
     State       : nat,
Finished         : hash(hash(text.text.text).agent.agent.text.text.text),
ClientK, ServerK : hash(agent.text.text.hash(text.text.text)),
Mac              : hash(hash((hash(agent.text.text.hash(text.text.text))).text.text.text).text),
Kp : public_key

const s_mac,sec_clientK, sec_serverK,nps1, nps2 : protocol_id,
      sid0                                : text,
      request_id                          : text,
      respond_id                          : text,
      start_eap_fast                      : text

init State := 0

transition
0.State =0    /\ RRS(0)=|>
  State':=2   /\ Nps':= new()
              /\ SRS(Nps')
2. State = 2  /\ RRS(Npc',request_id) =|>
   State':= 4 /\ SRS(respond_id.S)

4. State = 4  /\ RRS(start_eap_fast) =|>
   State':= 6 /\ Ns' := new()
              /\ Cciphspec' := new()
              /\ VerNo' := new()
              /\ SRS( VerNo'.sid0.Ns'.Cciphspec' ) 

% including option of the server auth
6. State = 6  /\ RRS(VerNo.SessID'.Np'.Csu'.{C.Kp'}_inv(Kar).
Pkeyexchange'.Pcertreq'. Phellodone') =|>
State':= 8    /\ PMS' := new()
              /\ Cciphspec' := new()
              /\ Finished' := H(PRF(PMS'.Ns.Np').S.C.Ns.Csu'.SessID')
              /\ ServerK' := KeyGen(S.Ns.Np'.PRF(PMS'.Ns.Np'))
              /\ ClientK' := KeyGen(C.Ns.Np'.PRF(PMS'.Ns.Np'))
              /\ SRS({S.Ks}_inv(Kar).{PMS'}_Kp'. {H(Ns.Np'.P.PMS')}_inv(Ks). Cciphspec'.{Finished'}_ServerK')
              /\ witness(S,C,nps2,Ns.Np')

8. State = 8  /\ RRS(Ccs.{Finished}_ClientK) =|>
State':= 10   /\ Mac' := INT(PRF1((KeyGen(S.Ns.Np'.PRF(PMS'.Ns.Np'))).Nps.Npc'.Kid).Pmsg)
              /\ SRS(Mac',Kid,Result)
	      /\ secret(ServerK,sec_serverK,{C,S})
              /\ secret(ClientK,sec_clientK,{C,S})
              /\ secret(Mac,s_mac,{C,S})
              /\ request(S,P,nps1,Ns.Np)
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role client (C,S                      : agent,
           H, KeyGen, PRF, PRF1, INT  : hash_func,
           Kp, Kar        : public_key,
           SCG, RCG   : channel (dy))

played_by C def=
  local 
     Np, SessID : text,
     PMS        : text,
     Ns, Csus, VerNo, Csu, Pke : text,
     Ccs, Pcertreq, Phellodone : text,
     Npc,Nps    :text,
     Result     :text,
     Kid        :text,
     Pmsg       :text,
     State      : nat,
Finished : hash(hash(text.text.text).agent.agent.text.text.text),
ClientK, ServerK : hash(agent.text.text.hash(text.text.text)),
Mac              : hash(hash((hash(agent.text.text.hash(text.text.text))).text.text.text).text),
      Ks         : public_key

const  nps1, nps2       : protocol_id,
      sid0              : text, % session id = 0
      request_id        : text,
      respond_id        : text,
      start_eap_fast    : text

init State := 1

transition
1. State = 1  /\ RCG(start) =|>
   State':= 3 /\ SCG(0)
3. State = 3  /\ RCG(Nps') =|>
   State':= 5 /\ Npc' :=new()
              /\SCG(Npc',request_id)
5. State =5   /\ RCG(respond_id.S)=|> 
   State':=7  /\ SCG(start_eap_fast)
7. State = 7  /\ RCG(VerNo'.sid0.Ns'.Csus')=|>
   State':=9  /\ Np' := new()
              /\ SessID' := new()
              /\ Phellodone' := new()
              /\ Pcertreq' := new()
              /\ Pke' := new()
              /\ Csu' := new()
              /\ SCG(VerNo'.SessID'.Np'.Csu'.{C.Kp}_inv(Kar).Pke'. Pcertreq'.Phellodone') 
              /\ witness(C,S,nps1,Ns'.Np')

% with the option of server auth
9. State = 9  /\ RCG({S.Ks'}_inv(Kar).{PMS'}_Kp. {H(Ns.Np.C.PMS')}_inv(Ks').Ccs'.{Finished'}_ServerK')
              /\ Finished' = H(PRF(PMS'.Ns.Np).S.C.Ns.Csu.SessID)
              /\ ServerK' = KeyGen(S.Ns.Np.PRF(PMS'.Ns.Np))=|>
  State' :=11 /\ ClientK' := KeyGen(C.Ns.Np.PRF(PMS'.Ns.Np))
              /\ SCG(Ccs'.{Finished'}_ClientK')
              /\ request(C,S,nps2,Ns.Np)
11.State =11  /\ RCG(Mac',Kid,Result)
              /\ Mac' =INT(PRF1((KeyGen(S.Ns.Np'.PRF(PMS'.Ns.Np'))).Nps.Npc'.Kid).Pmsg)=|>
   State':=13 /\ SCG(Mac',Kid)
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role session(C, S : agent,
Kp, Ks, Kar : public_key,
H, KeyGen : hash_func,
PRF, PRF1,INT : hash_func)
def=
local SCG, SRS, RCG, RRS : channel (dy)
composition
peer(C,S,H,KeyGen,PRF,PRF1,INT,Kp,Kar,SCG,RCG)
/\ auth_server(C,S,H,KeyGen,PRF,PRF1,INT,Ks,Kar,SRS,RRS)
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role environment()
def=
const c,s : agent,
kp, ks, ki, kar : public_key,
h, keygen : hash_func,
prf,prf1,int: hash_func
intruder_knowledge = {p,s, h,keygen,prf, prf1,int,kp,ks,kar,ki,inv(ki),
{i.ki}_inv(kar)
}
composition
session(c,s,kp,ks,kar,h,keygen,prf,prf1,int)
% /\ session(c,i,kp,ki,kar,h,keygen,prf,prf1,int)
/\ session(i,s,ki,ks,kar,h,keygen,prf,prf1,int)
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
goal
%secrecy_of ClientK, ServerK
secrecy_of sec_clientK, sec_serverK, s_mac
%Peer authenticates Server on nps1
authentication_on nps1
%Server authenticates Peer on nps2
authentication_on nps2
end goal
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
environment()
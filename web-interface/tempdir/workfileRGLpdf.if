%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileRGLpdf

section signature:

state_tokenendpoint: agent * agent * agent * text * symmetric_key * symmetric_key * protocol_id * protocol_id * nat * text * text * set(agent) * set(agent) * nat -> fact
state_openidprovider: agent * agent * agent * text * text * symmetric_key * symmetric_key * protocol_id * protocol_id * nat * text * text * set(agent) * set(agent) * nat -> fact
state_relyingparty: agent * agent * agent * text * text * symmetric_key * symmetric_key * symmetric_key * protocol_id * protocol_id * protocol_id * protocol_id * nat * text * text * text * set(agent) * set(agent) * set(agent) * set(agent) * nat -> fact


section types:

set_171, set_170, set_168, set_167, set_165, set_164, set_163, set_162, set_160, set_159, set_158, set_157, set_155, set_154, set_153, set_152, set_150, set_149, set_147, set_146, set_145, set_144, set_143, set_142, set_137, set_136, set_131, set_130, set_118, set_117, set_116, set_115: set
Set_73, Set_70, Set_55, Set_54, Dummy_Set_73, Dummy_Set_70, Set_35, Dummy_Set_55, Dummy_Set_54, Set_32, Set_30, Dummy_Set_35, Set_27, Dummy_Set_32, Dummy_Set_30, Dummy_Set_27, ASGoal: set(agent)
start, MGoal: message
16, State, 15, 13, 11, 9, 8, 5, SID, 3, 4, 2, 1, 0, Dummy_State, SID2, SID1: nat
clientid, uri, Code, IdToken, URI, Stat, ClientId, Dummy_IdToken, Dummy_Code, Dummy_Stat, dummy_nonce: text
auth_4, auth_3, TokenReq, TokenRes, auth_2, auth_1, AuthReq, AuthRes, sec_3, sec_2, sec_1, threq, authreq, authres, tokenreq, tokenres: protocol_id
rp, op, te, TE, RP, OP, A2Goal, A1Goal, i: agent
rikey, cskey, RTKey, CSKey, ROKey, rokey, rtkey: symmetric_key


section inits:

initial_state init1 := 
 iknows(start).
 iknows(rp).
 iknows(op).
 iknows(te).
 iknows(rikey).
 iknows(i).
 state_relyingparty(rp,op,te,clientid,uri,rokey,rtkey,cskey,threq,authres,tokenreq,tokenres,0,dummy_nonce,dummy_nonce,dummy_nonce,set_115,set_116,set_117,set_118,3).
 state_openidprovider(op,rp,te,clientid,uri,rokey,cskey,threq,authres,0,dummy_nonce,dummy_nonce,set_130,set_131,4).
 state_tokenendpoint(te,rp,op,uri,rtkey,cskey,tokenreq,tokenres,0,dummy_nonce,dummy_nonce,set_136,set_137,5).
 state_openidprovider(op,i,te,clientid,uri,rikey,cskey,threq,authres,0,dummy_nonce,dummy_nonce,set_146,set_147,8).
 state_tokenendpoint(te,i,op,uri,rikey,cskey,tokenreq,tokenres,0,dummy_nonce,dummy_nonce,set_149,set_150,9).
 state_relyingparty(rp,i,te,clientid,uri,rikey,rtkey,cskey,authreq,authres,tokenreq,tokenres,0,dummy_nonce,dummy_nonce,dummy_nonce,set_152,set_153,set_154,set_155,11).
 state_tokenendpoint(te,rp,i,uri,rtkey,cskey,tokenreq,tokenres,0,dummy_nonce,dummy_nonce,set_159,set_160,13).
 state_relyingparty(rp,op,i,clientid,uri,rokey,rikey,cskey,authreq,authres,tokenreq,tokenres,0,dummy_nonce,dummy_nonce,dummy_nonce,set_162,set_163,set_164,set_165,15).
 state_openidprovider(op,rp,i,clientid,uri,rokey,cskey,authreq,authres,0,dummy_nonce,dummy_nonce,set_167,set_168,16)


section rules:

step step_0 (RP,OP,TE,ClientId,URI,ROKey,RTKey,CSKey,AuthReq,AuthRes,TokenReq,TokenRes,Dummy_Stat,Code,IdToken,Dummy_Set_27,Set_30,Set_32,Set_35,SID,Stat) :=
 state_relyingparty(RP,OP,TE,ClientId,URI,ROKey,RTKey,CSKey,AuthReq,AuthRes,TokenReq,TokenRes,0,Dummy_Stat,Code,IdToken,Dummy_Set_27,Set_30,Set_32,Set_35,SID).
 iknows(start)
=[exists Stat]=>
 state_relyingparty(RP,OP,TE,ClientId,URI,ROKey,RTKey,CSKey,AuthReq,AuthRes,TokenReq,TokenRes,1,Stat,Code,IdToken,Dummy_Set_27,Set_30,Set_32,Set_35,SID).
 secret(Stat,sec_1,Dummy_Set_27).
 iknows(scrypt(ROKey,pair(AuthReq,pair(ClientId,pair(Stat,URI))))).
 contains(RP,Dummy_Set_27).
 contains(OP,Dummy_Set_27)

step step_1 (RP,OP,TE,ClientId,URI,ROKey,RTKey,CSKey,AuthReq,AuthRes,TokenReq,TokenRes,Dummy_Stat,Dummy_Code,IdToken,Set_27,Dummy_Set_30,Dummy_Set_32,Set_35,SID,Stat,Code) :=
 state_relyingparty(RP,OP,TE,ClientId,URI,ROKey,RTKey,CSKey,AuthReq,AuthRes,TokenReq,TokenRes,1,Dummy_Stat,Dummy_Code,IdToken,Set_27,Dummy_Set_30,Dummy_Set_32,Set_35,SID).
 iknows(scrypt(ROKey,scrypt(CSKey,pair(AuthRes,pair(Code,Stat)))))
 =>
 state_relyingparty(RP,OP,TE,ClientId,URI,ROKey,RTKey,CSKey,AuthReq,AuthRes,TokenReq,TokenRes,2,Stat,Code,IdToken,Set_27,Dummy_Set_30,Dummy_Set_32,Set_35,SID).
 secret(Stat,sec_1,Dummy_Set_30).
 secret(Code,sec_2,Dummy_Set_32).
 iknows(scrypt(RTKey,scrypt(CSKey,pair(TokenReq,pair(Code,URI))))).
 contains(RP,Dummy_Set_30).
 contains(OP,Dummy_Set_30).
 contains(RP,Dummy_Set_32).
 contains(OP,Dummy_Set_32)

step step_2 (RP,OP,TE,ClientId,URI,ROKey,RTKey,CSKey,AuthReq,AuthRes,TokenReq,TokenRes,Stat,Code,Dummy_IdToken,Set_27,Set_30,Set_32,Dummy_Set_35,SID,IdToken) :=
 state_relyingparty(RP,OP,TE,ClientId,URI,ROKey,RTKey,CSKey,AuthReq,AuthRes,TokenReq,TokenRes,2,Stat,Code,Dummy_IdToken,Set_27,Set_30,Set_32,Dummy_Set_35,SID).
 iknows(scrypt(RTKey,pair(TokenRes,scrypt(CSKey,IdToken))))
 =>
 state_relyingparty(RP,OP,TE,ClientId,URI,ROKey,RTKey,CSKey,AuthReq,AuthRes,TokenReq,TokenRes,3,Stat,Code,IdToken,Set_27,Set_30,Set_32,Dummy_Set_35,SID).
 secret(IdToken,sec_3,Dummy_Set_35).
 contains(RP,Dummy_Set_35).
 contains(TE,Dummy_Set_35)

step step_3 (OP,RP,TE,ClientId,URI,ROKey,CSKey,AuthReq,AuthRes,Dummy_Code,Dummy_Stat,Dummy_Set_54,Dummy_Set_55,SID,Code,Stat) :=
 state_openidprovider(OP,RP,TE,ClientId,URI,ROKey,CSKey,AuthReq,AuthRes,0,Dummy_Code,Dummy_Stat,Dummy_Set_54,Dummy_Set_55,SID).
 iknows(scrypt(ROKey,pair(AuthReq,pair(ClientId,pair(Stat,URI)))))
=[exists Code]=>
 state_openidprovider(OP,RP,TE,ClientId,URI,ROKey,CSKey,AuthReq,AuthRes,1,Code,Stat,Dummy_Set_54,Dummy_Set_55,SID).
 witness(OP,RP,auth_1,ClientId).
 witness(OP,RP,auth_2,URI).
 secret(Stat,sec_1,Dummy_Set_54).
 secret(Code,sec_2,Dummy_Set_55).
 iknows(scrypt(ROKey,scrypt(CSKey,pair(AuthRes,pair(Code,Stat))))).
 contains(RP,Dummy_Set_54).
 contains(OP,Dummy_Set_54).
 contains(RP,Dummy_Set_55).
 contains(OP,Dummy_Set_55)

step step_4 (TE,RP,OP,URI,RTKey,CSKey,TokenReq,TokenRes,Dummy_Code,Dummy_IdToken,Dummy_Set_70,Dummy_Set_73,SID,Code,IdToken) :=
 state_tokenendpoint(TE,RP,OP,URI,RTKey,CSKey,TokenReq,TokenRes,0,Dummy_Code,Dummy_IdToken,Dummy_Set_70,Dummy_Set_73,SID).
 iknows(scrypt(RTKey,scrypt(CSKey,pair(TokenReq,pair(Code,URI)))))
=[exists IdToken]=>
 state_tokenendpoint(TE,RP,OP,URI,RTKey,CSKey,TokenReq,TokenRes,1,Code,IdToken,Dummy_Set_70,Dummy_Set_73,SID).
 secret(Code,sec_2,Dummy_Set_70).
 witness(TE,RP,auth_3,Code).
 witness(OP,RP,auth_4,URI).
 secret(IdToken,sec_3,Dummy_Set_73).
 iknows(scrypt(RTKey,pair(TokenRes,scrypt(CSKey,IdToken)))).
 contains(RP,Dummy_Set_70).
 contains(OP,Dummy_Set_70).
 contains(RP,Dummy_Set_73).
 contains(TE,Dummy_Set_73)


section properties:

property authentication_on_auth_1 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth_1,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth_1,MGoal))
     /\ ((request(A1Goal,A2Goal,auth_1,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth_1,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_auth_2 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth_2,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth_2,MGoal))
     /\ ((request(A1Goal,A2Goal,auth_2,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth_2,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_auth_3 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth_3,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth_3,MGoal))
     /\ ((request(A1Goal,A2Goal,auth_3,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth_3,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_auth_4 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth_4,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth_4,MGoal))
     /\ ((request(A1Goal,A2Goal,auth_4,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth_4,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property secrecy_of_sec_1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_3 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_3,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))


section attack_states:

attack_state authentication_on_auth_1 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth_1,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_1,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth_1 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth_1,MGoal,SID1).
 request(A1Goal,A2Goal,auth_1,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_auth_2 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth_2,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_2,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth_2 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth_2,MGoal,SID1).
 request(A1Goal,A2Goal,auth_2,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_auth_3 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth_3,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_3,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth_3 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth_3,MGoal,SID1).
 request(A1Goal,A2Goal,auth_3,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_auth_4 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth_4,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_4,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth_4 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth_4,MGoal,SID1).
 request(A1Goal,A2Goal,auth_4,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state secrecy_of_sec_1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_2,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_3 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_3,ASGoal) &
 not(contains(i,ASGoal))


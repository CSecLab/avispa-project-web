%NSPKxor Protocol

role alice (A,S,B     : agent, 
            Kas   : symmetric_key,  
            SndSa,RcvSa,SndBa,RcvBa : channel (dy)) played_by A def=

  local 
     State  : nat,
     Kab    : symmetric_key,  
     Na     : message, 
     X       :  {text.symmetric_key}_symmetric_key
	
  init 
     State:=0

  transition 
    1. State=0 /\ RcvBa(start) =|>
          State':=2
       /\ Na':=new()
       /\ SndSa({A.Na'.B}_Kas)
  %    /\ secret(Na',na,{A,B})
  %     /\ witness(A,B,alice_bob_nb,Na')


    2. State=2 /\ RcvSa({A.Kab'.Na}_Kas.X') =|>
          State':=7
       /\ SndBa(X'.{Na}_Kab')

   3. State=7 /\ RcvBa({Na.B}_Kab') =|>
          State':=9
 %      /\ request (A,B,alice_bob_na,Na')
       
end role


 
role bob (A,S,B     : agent,  
          Kbs   : symmetric_key,  
          SndAb,RcvAb,SndSb,RcvSb : channel (dy)) played_by B def=

  local 
     State : nat, 
     Kab   : symmetric_key,
     Na    : message 
%  Nb    : text

  init 
     State:=4
 
  transition 
    1. State=4 /\ RcvSb(A) =|> 
          State':=5 
  %     /\ Nb':=new()
       /\ SndSb({B.A}_Kbs)
  %     /\ witness(B,A,alice_bob_nb,Nb')
      
  
    2. State=5 /\ RcvAb({B.Kab'}_Kbs.{Na}_Kab') =|> 
          State':=8 /\ SndAb({Na.B}_Kab')
  %    /\ request(B,A,alice_bob_nb,Na)
  %       /\ witness(B,A,alice_bob_na,Na')

end role


role server (A,S,B     : agent,  
          Kas,Kbs   : symmetric_key,  
          SndAs,RcvAs,SndBs,RcvBs : channel (dy)) played_by S def=

  local 
     State : nat, 
     Kab   : symmetric_key,
     Na    : message 
%  Nb    : text

  init 
     State:=1
 
  transition 
    1. State=1 /\ RcvAs({A.Na'.B}_Kas) =|> 
          State':=3 
  %     /\ Nb':=new()
       /\ SndBs(A)
  %     /\ witness(B,A,alice_bob_nb,Nb')
      
  
    2. State=3 /\ RcvBs({B.A}_Kbs) =|> 
          State':=6 
  %    /\ request(B,A,alice_bob_nb,Na)
  %    /\ witness(B,A,alice_bob_na,Na')
         /\ SndAs({A.Kab'.Na}_Kas.{B.Kab'}_Kbs)
         /\ secret(Kab',k,{S,A,B})

end role



role session (A,S,B: agent,
              Kas, Kbs: symmetric_key) 
def=

  local
      SSA, RSA, SBA, RBA, SAS, RAS, SAB, RAB, SSB, RSB, SBS, RBS: channel(dy)

  composition
    alice(A, S, B, Kas, SSA, RSA, SBA, RBA) /\ 
    server(A, S, B, Kas, Kbs, SAS, RAS, SBS, RBS) /\
    bob(A, S, B, Kbs, SAB, RAB, SSB, RSB) 
    

end role



role environment() def=

  const
     a, b, s  : agent,
     kas, kbs, kis: symmetric_key,
     alice_bob_na, k: protocol_id

  intruder_knowledge = {a, b, s, kis}

  composition
    session(a,s,b,kas,kbs) 
 %   session(a,i,ka,ki,Snd,Rcv)  
  
end role


goal 
  %   authentication_on alice_bob_na
     secrecy_of k

end goal



environment()



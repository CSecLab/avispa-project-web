role  responder(S, R  : agent,
		Hfunc : hash_func,
           	Snd, Rcv: channel(dy),
	   	IPubKey, RPubKey : public_key)
played_by R

def=
         local State  : nat,
         UIDA,TS,TK,KAB:  text

         const alice_bob,  bob_alice, sub1 : protocol_id

   init  State := 0

  transition
   1. State   = 0 /\ Rcv({TS'.TK'.UIDA}_inv(IPubKey)) =|>  

      State' := 1 /\ KAB' := new()
                  /\ Snd({KAB'.TS'}_inv(RPubKey))
                  /\ witness (R, S, bob_alice, KAB')
                  /\ request (S, R, alice_bob, TK')
                    
end role

role initiator (S,R: agent,
	   	Hfunc : hash_func,
      	Snd, Rcv: channel(dy),
	   	IPubKey, RPubKey : public_key)

played_by S

def=
         local State  : nat,
         UIDA,R, TK, TS, KAB:  text
         const alice_bob,  bob_alice, sub1 : protocol_id

   init  State := 0

  transition
   1. State   = 0 /\ Rcv(start) =|>

      State' := 1 /\ R':=new()
      		  /\ UIDA' := new()
                  /\ TK' := R'.hFunc(UIDA)
                  /\ TS' := new()
                  /\ Snd({TS'.TK'.UIDA}_inv(IPubKey)) 
                  /\ witness (S, R, alice_bob, TK')

   2. State = 1   /\ Rcv({KAB'.TS'}_inv(RPubKey)) =|> 
      State' := 2 /\ request (R, S, bob_alice, KAB')
      		  /\ secret({KAB'},sub1,{S,R})         
 
end role

role session(S,R: agent,
             Hfunc: hash_func
	)
def=

  local  SA, SB, RA, RB : channel (dy),
         IPubKey, RPubKey : public_key
         const alice_bob, bob_alice, sub1 : protocol_id
           
  composition
           initiator(S,R,Hfunc, SA, RA,IPubKey, RPubKey)

       /\  responder(S,R,Hfunc, SB, RB,IPubKey, RPubKey)
end role 

role environment()
def=
  const s,r : agent,
        hFunc   : hash_func,
        uaid :  text,
        pub_keya,pub_keyb :public_key,
        alice_bob,  bob_alice, sub1 : protocol_id

  intruder_knowledge = {s, r,hFunc,uaid,pub_keya,pub_keyb}

  composition
	session(s,r,hFunc)  

end role

goal
  secrecy_of sub1

  authentication_on alice_bob

  authentication_on bob_alice
end goal
 
environment()

%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileaJCtqg

section signature:

state_cn: agent * agent * agent * agent * agent * agent * public_key * public_key * symmetric_key * hash_func * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * nat * nat -> fact
state_cnmag: agent * agent * agent * agent * agent * agent * public_key * public_key * symmetric_key * hash_func * nat * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * set(agent) * nat -> fact
state_mag2: agent * agent * agent * agent * agent * agent * public_key * public_key * symmetric_key * hash_func * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * nat * nat -> fact
state_mag1: agent * agent * agent * agent * agent * agent * public_key * public_key * symmetric_key * hash_func * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * nat * nat -> fact
state_mnmag: agent * agent * agent * agent * agent * agent * public_key * public_key * symmetric_key * hash_func * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * nat * nat -> fact
state_mn: agent * agent * agent * agent * agent * agent * public_key * public_key * symmetric_key * hash_func * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * text * nat * nat -> fact


section types:

set_297: set
Set_192, Dummy_Set_192, ASGoal: set(agent)
tokenres, cnmag_mnmag_tokenres, hoa, pcoamn, msg, mnmag_cnmag_pcoamn, cn_cnmag_msg, mnmag_cnmag_hoa, cnmag_mnmag_msg, r0, token, mnmag_cnmag_token: protocol_id
MGoal, start: message
14, 12, 8, 4, State, 16, 3, 15, 2, SID, 7, 6, 5, Dummy_State, 13, 9, 1, 17, 11, 0, 10: nat
BDATA, CONN, C, DATA1, MNMAGADDR, N1MN, CNMAGDEST, HOA, PCOAMN, TOKEN, TOKENRES, PCOACN, NMNMAG, NMN, R0, MSG, MNMAGREQ, PCOAMNREQ, CNMAGADDR, NCNMAG, Dummy_DATA1, Dummy_TOKENRES, Dummy_TOKEN, Dummy_MSG, Dummy_BDATA, Dummy_CONN, dummy_nonce, MAGDEST: text
HASHE, hashe: hash_func
SK, sk: symmetric_key
KCN, KMN, kcn, kmn: public_key
MNMAG, MAG1, MAG2, CNMAG, CN, MN, A2Goal, A1Goal, mn1, mnmag1, mag11, mag22, cnmag1, cn1, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(i).
 state_mn(mn1,mnmag1,mag11,mag22,cnmag1,cn1,kcn,kmn,sk,hashe,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,0,3).
 state_mnmag(mnmag1,mn1,mag11,mag22,cnmag1,cn1,kcn,kmn,sk,hashe,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,1,4).
 state_mag1(mag11,mn1,mnmag1,mag22,cnmag1,cn1,kcn,kmn,sk,hashe,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,2,5).
 state_mag2(mag22,mn1,mnmag1,mag11,cnmag1,cn1,kcn,kmn,sk,hashe,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,3,6).
 state_cnmag(mag22,mn1,mnmag1,cnmag1,mag11,cn1,kcn,kmn,sk,hashe,4,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,set_297,7).
 state_cn(cn1,mn1,mnmag1,mag11,mag22,cnmag1,kcn,kmn,sk,hashe,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,dummy_nonce,5,8)


section rules:

step step_0 (MN,MNMAG,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,Dummy_CONN,C,DATA1,MNMAGADDR,N1MN,MAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,SID,CONN) :=
 state_mn(MN,MNMAG,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,Dummy_CONN,C,DATA1,MNMAGADDR,N1MN,MAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,0,SID).
 iknows(start)
=[exists CONN]=>
 state_mn(MN,MNMAG,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,MAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,6,SID).
 iknows(CONN)

step step_1 (MN,MNMAG,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,Dummy_BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,MAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,SID,BDATA) :=
 state_mn(MN,MNMAG,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,Dummy_BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,MAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,6,SID).
 iknows(BDATA)
 =>
 state_mn(MN,MNMAG,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,MAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,11,SID)

step step_2 (MN,MNMAG,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,MAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,Dummy_MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,SID,MSG) :=
 state_mn(MN,MNMAG,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,MAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,Dummy_MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,11,SID).
 iknows(pair(apply(HASHE,MSG),scrypt(SK,crypt(KCN,MSG))))
 =>
 state_mn(MN,MNMAG,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,MAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,17,SID)

step step_3 (MNMAG,MN,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,Dummy_CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,Dummy_TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,SID,CONN,TOKEN) :=
 state_mnmag(MNMAG,MN,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,Dummy_CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,Dummy_TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,1,SID).
 iknows(CONN)
=[exists TOKEN]=>
 state_mnmag(MNMAG,MN,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,7,SID).
 iknows(TOKEN)

step step_4 (MNMAG,MN,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,Dummy_BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,Dummy_TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,SID,BDATA,TOKENRES) :=
 state_mnmag(MNMAG,MN,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,Dummy_BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,Dummy_TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,7,SID).
 iknows(apply(HASHE,TOKENRES)).
 iknows(BDATA)
 =>
 state_mnmag(MNMAG,MN,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,9,SID).
 iknows(BDATA).
 wrequest(MNMAG,CNMAG,cnmag_mnmag_tokenres,TOKENRES,SID)

step step_5 (MNMAG,MN,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,Dummy_MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,SID,MSG) :=
 state_mnmag(MNMAG,MN,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,Dummy_MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,9,SID).
 iknows(pair(apply(HASHE,MSG),scrypt(SK,crypt(KCN,MSG))))
 =>
 state_mnmag(MNMAG,MN,MAG1,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,13,SID).
 iknows(pair(apply(HASHE,MSG),scrypt(SK,crypt(KCN,MSG))))

step step_6 (MAG1,MN,MNMAG,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,Dummy_TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,SID,TOKEN) :=
 state_mag1(MAG1,MN,MNMAG,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,Dummy_TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,2,SID).
 iknows(TOKEN)
 =>
 state_mag1(MAG1,MN,MNMAG,MAG2,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,15,SID)

step step_7 (MAG2,MN,MNMAG,MAG1,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,Dummy_TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,SID,TOKEN) :=
 state_mag2(MAG2,MN,MNMAG,MAG1,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,Dummy_TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,3,SID).
 iknows(TOKEN)
 =>
 state_mag2(MAG2,MN,MNMAG,MAG1,CNMAG,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,16,SID)

step step_8 (CNMAG,MN,MNMAG,MAG1,MAG2,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,Dummy_TOKEN,Dummy_TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,Dummy_Set_192,SID,TOKEN,TOKENRES) :=
 state_cnmag(CNMAG,MN,MNMAG,MAG1,MAG2,CN,KCN,KMN,SK,HASHE,4,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,Dummy_TOKEN,Dummy_TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,Dummy_Set_192,SID).
 iknows(TOKEN)
=[exists TOKENRES]=>
 state_cnmag(CNMAG,MN,MNMAG,MAG1,MAG2,CN,KCN,KMN,SK,HASHE,8,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,Dummy_Set_192,SID).
 iknows(apply(HASHE,TOKENRES)).
 secret(TOKENRES,tokenres,Dummy_Set_192).
 witness(CNMAG,MNMAG,cnmag_mnmag_tokenres,TOKENRES).
 contains(CNMAG,Dummy_Set_192).
 contains(MNMAG,Dummy_Set_192)

step step_9 (CNMAG,MN,MNMAG,MAG1,MAG2,CN,KCN,KMN,SK,HASHE,Dummy_BDATA,CONN,C,Dummy_DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,Set_192,SID,BDATA,DATA1) :=
 state_cnmag(CNMAG,MN,MNMAG,MAG1,MAG2,CN,KCN,KMN,SK,HASHE,8,Dummy_BDATA,CONN,C,Dummy_DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,Set_192,SID).
 iknows(DATA1)
=[exists BDATA]=>
 state_cnmag(CNMAG,MN,MNMAG,MAG1,MAG2,CN,KCN,KMN,SK,HASHE,12,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,Set_192,SID).
 iknows(BDATA)

step step_10 (CNMAG,MN,MNMAG,MAG1,MAG2,CN,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,Dummy_MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,Set_192,SID,MSG) :=
 state_cnmag(CNMAG,MN,MNMAG,MAG1,MAG2,CN,KCN,KMN,SK,HASHE,12,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,Dummy_MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,Set_192,SID).
 iknows(pair(apply(HASHE,MSG),scrypt(SK,crypt(KCN,MSG))))
 =>
 state_cnmag(CNMAG,MN,MNMAG,MAG1,MAG2,CN,KCN,KMN,SK,HASHE,14,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,Set_192,SID).
 iknows(pair(apply(HASHE,MSG),scrypt(SK,crypt(KCN,MSG))))

step step_11 (CN,MN,MNMAG,MAG1,MAG2,CNMAG,KCN,KMN,SK,HASHE,BDATA,CONN,C,Dummy_DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,Dummy_MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,SID,DATA1,MSG) :=
 state_cn(CN,MN,MNMAG,MAG1,MAG2,CNMAG,KCN,KMN,SK,HASHE,BDATA,CONN,C,Dummy_DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,Dummy_MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,5,SID).
 iknows(start)
=[exists MSG,DATA1]=>
 state_cn(CN,MN,MNMAG,MAG1,MAG2,CNMAG,KCN,KMN,SK,HASHE,BDATA,CONN,C,DATA1,MNMAGADDR,N1MN,CNMAGDEST,HOA,PCOAMN,TOKEN,TOKENRES,PCOACN,NMNMAG,NMN,R0,MSG,MNMAGREQ,PCOAMNREQ,CNMAGADDR,NCNMAG,10,SID).
 iknows(DATA1).
 iknows(pair(apply(HASHE,MSG),scrypt(SK,crypt(KCN,MSG))))


section properties:

property secrecy_of_tokenres (MGoal,ASGoal) :=
 [] ((secret(MGoal,tokenres,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property weak_authentication_on_cnmag_mnmag_tokenres (A1Goal,A2Goal,MGoal,SID) :=
 [] ((wrequest(A1Goal,A2Goal,cnmag_mnmag_tokenres,MGoal,SID)
      /\ ~ equal(A2Goal,i))
     => witness(A2Goal,A1Goal,cnmag_mnmag_tokenres,MGoal))


section attack_states:

attack_state secrecy_of_tokenres (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,tokenres,ASGoal) &
 not(contains(i,ASGoal))

attack_state weak_authentication_on_cnmag_mnmag_tokenres (A1Goal,A2Goal,MGoal,SID) :=
 wrequest(A1Goal,A2Goal,cnmag_mnmag_tokenres,MGoal,SID) &
 not(witness(A2Goal,A1Goal,cnmag_mnmag_tokenres,MGoal)) &
 not(equal(A2Goal,i))


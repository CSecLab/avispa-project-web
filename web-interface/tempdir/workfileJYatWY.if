%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileJYatWY

section signature:

state_role_R: agent * text * symmetric_key * symmetric_key * symmetric_key * nat * symmetric_key * nat -> fact
state_role_E: agent * text * symmetric_key * nat * text * symmetric_key * symmetric_key * symmetric_key * nat -> fact
state_role_N: agent * symmetric_key * symmetric_key * nat * text * text * nat -> fact
state_role_M: agent * text * symmetric_key * nat * symmetric_key * text * nat -> fact


section types:

start, MGoal: message
auth_1: protocol_id
T, Dummy_IdM, Dummy_T, IdM, dummy_nonce, s, const_1, S: text
5, SID, State, 4, Dummy_State, 3, SID2, SID1, 2, 1, 0, 6: nat
M, A2Goal, A1Goal, N, e, n, r, m, E, R, i: agent
Kn, Krm, Dummy_Kn, dummy_sk, Krn, key3, key1, key2, key4, Ker, Dummy_Krm, Dummy_Krn: symmetric_key


section inits:

initial_state init1 := 
 iknows(start).
 iknows(i).
 state_role_M(m,const_1,key3,0,dummy_sk,dummy_nonce,3).
 state_role_N(n,key4,key2,0,dummy_nonce,dummy_nonce,4).
 state_role_E(e,s,key1,0,dummy_nonce,dummy_sk,dummy_sk,dummy_sk,5).
 state_role_R(r,const_1,key1,key4,key3,0,dummy_sk,6)


section rules:

step step_0 (M,IdM,Krm,Kn,T,SID) :=
 state_role_M(M,IdM,Krm,0,Kn,T,SID).
 iknows(start)
 =>
 state_role_M(M,IdM,Krm,1,Kn,T,SID).
 iknows(IdM)

step step_1 (M,IdM,Krm,Dummy_Kn,Dummy_T,SID,Kn,T) :=
 state_role_M(M,IdM,Krm,1,Dummy_Kn,Dummy_T,SID).
 iknows(scrypt(Krm,Kn))
=[exists T]=>
 state_role_M(M,IdM,Krm,2,Kn,T,SID).
 iknows(scrypt(Kn,T))

step step_2 (N,Krn,Kn,Dummy_IdM,T,SID,IdM) :=
 state_role_N(N,Krn,Kn,0,Dummy_IdM,T,SID).
 iknows(IdM)
 =>
 state_role_N(N,Krn,Kn,1,IdM,T,SID).
 iknows(scrypt(Krn,pair(IdM,Kn)))

step step_3 (N,Krn,Kn,IdM,Dummy_T,SID,T) :=
 state_role_N(N,Krn,Kn,1,IdM,Dummy_T,SID).
 iknows(scrypt(Kn,T))
 =>
 state_role_N(N,Krn,Kn,2,IdM,T,SID)

step step_4 (E,S,Ker,Dummy_IdM,Dummy_Krn,Krm,Dummy_Kn,SID,IdM,Krn,Kn) :=
 state_role_E(E,S,Ker,0,Dummy_IdM,Dummy_Krn,Krm,Dummy_Kn,SID).
 iknows(scrypt(Krn,pair(IdM,Kn)))
 =>
 state_role_E(E,S,Ker,1,IdM,Krn,Krm,Kn,SID).
 iknows(scrypt(Ker,scrypt(Krn,pair(IdM,Kn))))

step step_5 (E,S,Ker,IdM,Krn,Dummy_Krm,Kn,SID,Krm) :=
 state_role_E(E,S,Ker,1,IdM,Krn,Dummy_Krm,Kn,SID).
 iknows(scrypt(Ker,scrypt(Krm,Kn)))
 =>
 state_role_E(E,S,Ker,2,IdM,Krn,Krm,Kn,SID).
 iknows(scrypt(Krm,Kn))

step step_6 (R,IdM,Ker,Krn,Krm,Dummy_Kn,SID,Kn) :=
 state_role_R(R,IdM,Ker,Krn,Krm,0,Dummy_Kn,SID).
 iknows(scrypt(Ker,scrypt(Krn,pair(IdM,Kn))))
 =>
 state_role_R(R,IdM,Ker,Krn,Krm,1,Kn,SID).
 iknows(scrypt(Ker,scrypt(Krm,Kn)))


section properties:

property authentication_on_auth_1 (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,auth_1,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,auth_1,MGoal))
     /\ ((request(A1Goal,A2Goal,auth_1,MGoal,SID1)
           /\ request(A1Goal,A2Goal,auth_1,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state authentication_on_auth_1 (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,auth_1,MGoal,SID) &
 not(witness(A2Goal,A1Goal,auth_1,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_auth_1 (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,auth_1,MGoal,SID1).
 request(A1Goal,A2Goal,auth_1,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


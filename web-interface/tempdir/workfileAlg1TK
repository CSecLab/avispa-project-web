%%%% Protocolul specificat se gaseste aici: http://arxiv.org/ftp/arxiv/papers/1401/1401.6121.pdf


role user (U, S, RC: agent, ID, Sid, TID, N1, N2, S1, Pw,H1 : text, H : hash_func, SND_USP, RCV_USP : channel(dy))

played_by U 

def=


local State : nat,
           A1, A2, SK, NU, Alphau, Betau, Gammau : text


init State := 0

transition

1. State = 0 /\ RCV_USP(start) =|>

   State' := 2 /\ NU' := new()
			 /\ A1' := xor(H(xor(ID.Pw,N1)), xor(S1,N1))
			 /\ A2' := xor(H1, xor(H(NU, xor(H(xor(N1,N2))))))
             /\ SND_USP(TID,A1',A2')
             /\ secret(NU', nu,{U}) 
			 /\ witness(U,RC,rc_u_alpha2,A2')
			 
			 
2.   State = 2 /\ RCV_USP(Alpha',Betau',Gammau') =|>
   
 State' := 4 /\ Alphasec' := xor(Aphau,H(ID.Pw,xor(N1,N2)))
             /\ Betasec' := xor(Betau,H(xor(N1,N2)))
             /\ SK' :=  H(xor(Alphasec',xor(Betasec',NU)))
			 /\ secret(SK',sk,{U,S,RC})

end role


role registrationCenter (U, S, RC: agent, ID, Sid, TID, H1,H2, H3, H4, H5, KRS : text, H : hash_func, SND_SPRC, RCV_SPRC : channel(dy) )

played_by RC 
def=

local State : nat,
          Alpha1,Alpha2, Beta1, Beta2, Nu, Ns, Nr : text
 
          		 
      

init State :=1

transition

1. State = 1 /\ RCV_SPRC(TID.Alpha1'.Alpha2'.SID.Beta1'.Beta2') =|>  

   State' := 3 /\ Nr' := new() 
               /\ Nu':= xor(Alpha1', H1)
			   /\ Ns':= xor(Beta1', H2)
			   /\ SK' := xor(H(Nu'),xor(H(Nr'),H(Ns')))
			   /\ Alphau' := xor(xor(H(Nu'),H(Ns'),xor(H(Nr),H4)))
               /\ Betau' := xor(xor(Nr,Ns'), H(H4))
			   /\ Gammau' := xor(H(xor(SK, H3),H4))
			   /\ Alphas' := xor(xor(H(Nu'),H(Ns'),xor(H(Nr),xor(KRS,H(Ns')))))
			   /\ Betas' := xor(xor(H(Nu'),H(Nr'),xor(H(xor(k1,k2)))))
			   /\ Gammas' := H(xor(SK, xor(k1,k2)))
			   /\ SND_SPRC(Alphau'.Betau'.Gammau'.Alphas'.Betas'.Gammas') 
			   /\ secret(SK', sk, {S,U,RC})
			   /\ secret(Nr', nr, {RC})
			   /\ request(RC,U,rc_u_alpha2,Alpha2')
			   /\ request(RC,S,rc_s_beta2,Beta2')
			  


end role


role server (U, S, RC: agent, ID, Sid, TID, KRS1,KRS2,K1,K2 : text, H : hash_func, SND_RCS, RCV_RCS, SND_US, RCV_US : channel(dy) )

played_by S 
def=

local State : nat,
          Beta1, Beta2, Alpha, Beta, SK : text
          


init State := 5

transition

1. State = 5 /\ RCV_US(TID'.Alpha1'.Alpha2') =|>

   State' := 7 /\ Ns' := new() 
			   /\ Beta1' := xor(KRS1,Ns')
			   /\ Beta2' := xor(KRS2,H(xor(Ns',xor(K1,K2))))
               /\ SND_RCS(TID.Alpha1.Alpha2.Sid.Beta1'.Beta2')
			   /\ witness(S,RC,rc_s_beta2, Beta2')
			   /\ secret(Ns',ns,{S})
			   
2.   State = 7 /\ RCV_RCS(Alphau',Betau',Gammau',Alphas',Betas',Gammas')	=|>   
			   
   State' := 9 /\ Alpha' := xor(Alphas',xor(H(Ns),KRS1))
			   /\ Beta' := xor(Betas',xor(K2,K1))
			   /\ SK' := xor(Alpha',xor(Betas',Ns'))
               /\ SND_US(Alphau,Betau,Gamma)
			   /\ secret(SK',sk,{S,RC,U}) 
               
end role


role session (U, S, RC : agent, ID, Sid, Tid, N1, N2, S1, Pw, H1, H2, H3, H4, H5, Nr, KRS, KRS1, KRS2, K1, K2 : text, H : hash_func) 

def=
			  
local 	S_USP,R_USP, S_SPRC, R_SPRC, S_US, R_US, S_RCS, R_RCS : channel (dy)		  
			  
composition 

     user (U, S, RC, ID, Sid, Tid, N1, N2, S1, Pw,H1, H , S_USP, R_USP)
  /\ registrationCenter (U, S, RC, ID, Sid, Tid, H1,H2, H3, H4, H5, KRS, H, S_SPRC, R_SPRC)
  /\ server (U, S, RC, ID, Sid, Tid, KRS1,KRS2,K1,K2 , H, S_RCS, R_RCS, S_US, R_US)
  
end role


role environment()
def=

	const u, rc, s : agent,
		  id, sid, n1, n2, s1, pw, pwi, h1, h2, h3, h4, h5, nr, krs, krs1, krs2, k1, k2, k1i, k2i, krs1i, krs2i, n1i, n2i : text, 
		  h : hash_func,
		  rc_u_alpha2, rc_s_beta2, nr, ns, nu, sk  : protocol_id
		  

	intruder_knowledge = {u, rc, s, pwi, k1i, k2i, krs1i, krs2i, n1i, n2i}

	composition

	   session(u,rc,s,id, sid, n1, n2, s1, pw,h1, h2, h3, h4, h5, nr, krs, krs1, krs2, k1, k2,h)
	/\ session(i,rc,s,id, sid, n1i, n2i, s1, pwi,h1, h2, h3, h4, h5, nr, krs, krs1, krs2, k1, k2,h)
	/\ session(u,rc,i,id, sid, n1, n2, s1, pw,h1, h2, h3, h4, h5, nr, krs, krs1i, krs2i, k1i, k2i,h)

end role



goal

secrecy_of nr, ns, nu, sk
authentication_on rc_u_alpha2
authentication_on rc_s_beta2


end goal

environment()

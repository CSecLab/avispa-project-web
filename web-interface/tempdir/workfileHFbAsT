role alice (
		A, B	: agent,
		Ka, Kb	: symmetric_key,
		Hash, Succ	: hash_func,
		SND, RCV	: channel(dy))
played_by A def=

	local
		State	: nat,
		T, Nt	: text,
		K1, K2, K3, K4	: message
	init
		State := 0
	transition
		1. State = 0 /\ RCV(start) =|>
			State' := 2 /\ T' := new()
						/\ K1' := new()
						/\ K2' := new()
						/\ Nt' := new()
						/\ SND(B.T'.K1'.K2'.Nt'.{Hash(B.T'.K1'.K2'.Nt')}_Ka)
						/\ witness(A,B,bob_alice_k1_k2, K1'.K2')
		2. State = 2 /\ RCV(T'.Succ(Nt').{Hash(T'.Succ(Nt'))}_Kb) =|>
			State' := 4 /\ SND(T.Nt.Succ(Nt).{Hash(T.Nt.Succ(Nt)}_Ka)
end role

role bob (
		A, B	: agent,
		Ka, Kb	: symmetric_key,
		Hash, Succ	: hash_func,
		SND, RCV	: channel (dy))
played_by B def=

	local
		State	: nat,
		T, Nt	: text,
		K1, K2, K3	: message
	init
		State := 1
	transition
		1. State = 1 /\ RCV(T'.K1'.K2'.Nt'.{Hash(T'.K1'.K2'.Nt')}_Ka) =|>
			State' := 3 /\ SND(T'.Succ(Nt').{Hash(T'.Succ(Nt'))}_Kb)
		2. State = 3 /\ RCV(T.Nt.Succ(Nt).{Hash(T.Nt.Succ(Nt))}_Kb) =|>
			State' := 5 /\ request(B,A,bob_alice_k1_k2,K1.K2)
end role

role session(
		A, B	: agent,
		Hash, Succ	: hash_func,
		Ka, Kb	: symmetric_key)
def=

	local
		SA, SB, RA, RB : channel(dy)
	composition
		alice(A,B,Hash,Succ,Ka,Kb,SA,RA) /\ bob(A,B,Hash,Succ,Ka,Kb,SB,RB)
end role

role environment() def=
	const
		bob_alice_k1_k2	: protocol_id,
		a,b	: agent,
		h,succ	: hash_func,
		ka,kb,ki	: symmetric_key
	
	intruder_knowledge = {a,b,h,succ,ka,kb,ki}
	composition
		session(a,b,h,succ,ka,kb) /\ session(a,i,h,succ,ka,ki) 
								  /\ session(i,b,h,succ,ki,kb)
end role
goal
	authentication_on bob_alice_k1_k2
end goal
environment()
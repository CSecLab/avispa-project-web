%role Alice (A, B: agent)
%played by A def= 
%	local Num:nat
%	init Num:=0 /\ A:=1 /\ B:=2
%transition
%	Num:=0 /\ RCV(start) =|> Num':=1
%end role


role alice(A,B:agent,
G: text,
F: hash_func,
Ka,Kb: public_key,
SND_B, RCV_B: channel (dy))
played_by A
def=
local Ni, SA1, SA2, DHX: text,
Nr: text,
KEr: message, %% more specific: exp(text,text)
SK: hash(text.text.text.message),
State: nat
const sec_a_SK : protocol_id
init State := 0
transition
%% The IKE_SA_INIT exchange:
%% We have abstracted away from the negotiation of cryptographic
%% parameters. Alice sends a nonce SAi1, which is meant to
%% model Alice sending only a single crypto-suite offer. Bob must
%% then respond with the same nonce.
1. State = 0 /\ RCV_B(start) =|>
State’:= 2 /\ SA1’ := new()
/\ DHX’ := new()
/\ Ni’ := new()
/\ SND_B( SA1’.exp(G,DHX’).Ni’ )
%% Alice receives message 2 of IKE_SA_INIT, checks that Bob has
%% indeed sent the same nonce in SAr1, and then sends the first
%% message of IKE_AUTH.
%% As authentication Data, she signs her first message and Bob’s nonce.
2. State = 2 /\ RCV_B(SA1.KEr’.Nr’) =|>
State’:= 4 /\ SA2’ := new()
/\ SK’ := F(Ni.Nr’.SA1.exp(KEr’,DHX))
/\ SND_B( {A.{SA1.exp(G,DHX).Ni.Nr’}_(inv(Ka)).SA2’}_SK’ )
/\ witness(A,B,sk2,F(Ni.Nr’.SA1.exp(KEr’,DHX)))
3. State = 4 /\ RCV_B({B.{SA1.KEr.Nr.Ni}_(inv(Kb)).SA2}_SK) =|>
State’:= 9 /\ secret(SK,sec_a_SK,{A,B})
/\ request(A,B,sk1,SK)
end role

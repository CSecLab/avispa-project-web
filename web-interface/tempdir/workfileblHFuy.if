%% IF specification of /home/avispa/web-interface-computation/./tempdir/workfileblHFuy

section signature:

state_chap_Resp: agent * agent * symmetric_key * hash_func * hash_func * nat * text * text * set(agent) * nat -> fact
state_chap_Init: agent * agent * symmetric_key * hash_func * hash_func * nat * text * text * set(agent) * nat -> fact


section types:

set_84, set_82, set_81, set_79, set_74, set_67: set
sec_pmk2, nb, na, sn, sec_pmk1: protocol_id
Na, Nb, Dummy_Nb, Dummy_Na, dummy_nonce: text
State, 9, 6, 3, 4, SID, 2, Dummy_State, 1, 0, SID2, SID1: nat
Set_42, Dummy_Set_42, Set_25, Dummy_Set_25, ASGoal: set(agent)
start, MGoal: message
H, Succ, succ, h: hash_func
Pmk, pmk, kai, kbi: symmetric_key
B, A, A2Goal, A1Goal, a, b, i: agent


section inits:

initial_state init1 := 
 iknows(start).
 iknows(a).
 iknows(b).
 iknows(h).
 iknows(kai).
 iknows(kbi).
 iknows(i).
 state_chap_Init(a,b,pmk,succ,h,0,dummy_nonce,dummy_nonce,set_67,3).
 state_chap_Resp(b,a,pmk,succ,h,0,dummy_nonce,dummy_nonce,set_74,4).
 state_chap_Init(a,i,pmk,succ,h,0,dummy_nonce,dummy_nonce,set_79,6).
 state_chap_Init(b,i,pmk,succ,h,0,dummy_nonce,dummy_nonce,set_82,9)


section rules:

step step_0 (A,B,Pmk,Succ,H,Dummy_Na,Nb,Set_25,SID,Na) :=
 state_chap_Init(A,B,Pmk,Succ,H,0,Dummy_Na,Nb,Set_25,SID).
 iknows(start)
=[exists Na]=>
 state_chap_Init(A,B,Pmk,Succ,H,1,Na,Nb,Set_25,SID).
 iknows(pair(A,pair(Na,pair(sn,pair(msg1,apply(H,pair(pmk,pair(A,pair(Na,sn)))))))))

step step_1 (A,B,Pmk,Succ,H,Na,Nb,Dummy_Set_25,SID) :=
 state_chap_Init(A,B,Pmk,Succ,H,1,Na,Nb,Dummy_Set_25,SID).
 iknows(pair(B,pair(Nb,apply(H,pair(pmk,pair(B,pair(Nb,pair(sn,apply(H,pair(pmk,pair(Na,Nb)))))))))))
 =>
 state_chap_Init(A,B,Pmk,Succ,H,2,Na,Nb,Dummy_Set_25,SID).
 iknows(pair(A,apply(H,pair(A,pair(Na,pair(apply(Succ,sn),apply(H,pair(pmk,pair(Na,Nb))))))))).
 witness(A,B,na,Na).
 secret(pmk,sec_pmk1,Dummy_Set_25).
 contains(A,Dummy_Set_25).
 contains(B,Dummy_Set_25)

step step_2 (A,B,Pmk,Succ,H,Na,Nb,Set_25,SID) :=
 state_chap_Init(A,B,Pmk,Succ,H,2,Na,Nb,Set_25,SID).
 iknows(pair(B,apply(H,pair(B,pair(Nb,pair(apply(Succ,sn),apply(H,pair(pmk,pair(Na,Nb)))))))))
 =>
 state_chap_Init(A,B,Pmk,Succ,H,3,Na,Nb,Set_25,SID).
 request(A,B,nb,Nb,SID)

step step_3 (B,A,Pmk,Succ,H,Dummy_Na,Dummy_Nb,Set_42,SID,Na,Nb) :=
 state_chap_Resp(B,A,Pmk,Succ,H,0,Dummy_Na,Dummy_Nb,Set_42,SID).
 iknows(pair(A,pair(Na,pair(sn,apply(H,pair(pmk,pair(A,pair(Na,sn))))))))
=[exists Nb]=>
 state_chap_Resp(B,A,Pmk,Succ,H,1,Na,Nb,Set_42,SID).
 iknows(pair(B,pair(Nb,apply(H,pair(pmk,pair(B,pair(Nb,pair(sn,apply(H,pair(pair(pmk,Nb),Na)))))))))).
 witness(B,A,nb,Nb)

step step_4 (B,A,Pmk,Succ,H,Dummy_Na,Dummy_Nb,Dummy_Set_42,SID,Na,Nb) :=
 state_chap_Resp(B,A,Pmk,Succ,H,1,Dummy_Na,Dummy_Nb,Dummy_Set_42,SID).
 iknows(pair(A,apply(H,pair(A,pair(Na,pair(apply(Succ,sn),apply(H,pair(pair(pmk,Nb),Na))))))))
 =>
 state_chap_Resp(B,A,Pmk,Succ,H,2,Na,Nb,Dummy_Set_42,SID).
 iknows(pair(B,apply(H,pair(B,pair(Dummy_Nb,pair(apply(Succ,sn),apply(H,pair(pair(pmk,Nb),Na)))))))).
 request(B,A,na,Na,SID).
 secret(pmk,sec_pmk2,Dummy_Set_42).
 contains(A,Dummy_Set_42).
 contains(B,Dummy_Set_42)


section properties:

property secrecy_of_sec_pmk1 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_pmk1,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property secrecy_of_sec_pmk2 (MGoal,ASGoal) :=
 [] ((secret(MGoal,sec_pmk2,ASGoal) /\ iknows(MGoal))
     => contains(i,ASGoal))

property authentication_on_nb (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,nb,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,nb,MGoal))
     /\ ((request(A1Goal,A2Goal,nb,MGoal,SID1)
           /\ request(A1Goal,A2Goal,nb,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))

property authentication_on_na (A1Goal,A2Goal,MGoal,SID,SID1,SID2) :=
 [] (((request(A1Goal,A2Goal,na,MGoal,SID)
       /\ ~ equal(A2Goal,i))
      => witness(A2Goal,A1Goal,na,MGoal))
     /\ ((request(A1Goal,A2Goal,na,MGoal,SID1)
           /\ request(A1Goal,A2Goal,na,MGoal,SID2)
           /\ ~ equal(A2Goal,i))
          => equal(SID1,SID2)))


section attack_states:

attack_state secrecy_of_sec_pmk1 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_pmk1,ASGoal) &
 not(contains(i,ASGoal))

attack_state secrecy_of_sec_pmk2 (MGoal,ASGoal) :=
 iknows(MGoal).
 secret(MGoal,sec_pmk2,ASGoal) &
 not(contains(i,ASGoal))

attack_state authentication_on_nb (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,nb,MGoal,SID) &
 not(witness(A2Goal,A1Goal,nb,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_nb (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,nb,MGoal,SID1).
 request(A1Goal,A2Goal,nb,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))

attack_state authentication_on_na (A1Goal,A2Goal,MGoal,SID) :=
 request(A1Goal,A2Goal,na,MGoal,SID) &
 not(witness(A2Goal,A1Goal,na,MGoal)) &
 not(equal(A2Goal,i))
attack_state replay_protection_on_na (A2Goal,A1Goal,MGoal,SID1,SID2) :=
 request(A1Goal,A2Goal,na,MGoal,SID1).
 request(A1Goal,A2Goal,na,MGoal,SID2) &
 not(equal(SID1,SID2)) &
 not(equal(A2Goal,i))


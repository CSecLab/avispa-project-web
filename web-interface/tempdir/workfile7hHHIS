%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ECC-based ElGamal Encryption Scheme            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% A : Sender				         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% B : Receiver				         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Designed by SK Hafizul Islam, ISM Dhanbad        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role alice (

A, B: agent, 
            Rb, Ppub, Pb, Qb : public_key,
            Xb, Db : symmetric_key,            
            IDa, IDb, R, P : text,
            C1, C2, Pm : message,
            H, Conc, Add, Sub, Mul: hash_func, 
  SND, RCV : channel (dy)) 


played_by A 

def=
local State : nat
const      alicexxx, bobyyy, temp : protocol_id

init State := 0

transition
         1.State   = 0/\RCV(start) =|>
           State'  := 1/\R' :=  new()
                           /\secret(R, temp, A)    
                           /\C1' :=Mul(R, P)
                           /\C2' := Add(Pm, Mul(R, Add(Pb, Add(Rb, Mul(H(Conc(Conc(IDb, Pb), Rb)), Ppub)))))
                           /\SND(IDa.IDb.C1.C2)
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role bob(
             
B, A : agent, 
            Rb, Ppub, Pb, Qb : public_key,
            Xb, Db : symmetric_key,            
            IDa, IDb, R, P : text,
            C1, C2, Pm : message,
            H, Conc, Add, Sub, Mul: hash_func, 
  SND, RCV : channel (dy)) 

played_by B 

def=
local State : nat
const      alicexxx, bobyyy, temp : protocol_id

init State := 1

transition
        1.State   =1/\ RCV(IDa.IDb.C1.C2) =|>
           State' :=2/\secret (R, temp, A) 
                         /\Pm' :=Sub(C2, Mul(Add(Xb, Db), C1))
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role session(

A, B: agent, 
                Rb, Ppub, Pb, Qb : public_key,
                Xb, Db : symmetric_key,            
                IDa, IDb, R, P : text,
                C1, C2, Pm : message,
                H, Conc, Add, Sub, Mul: hash_func) 

def=
local SA, RA, SB, RB : channel (dy)

composition
        alice(A, B, Rb, Ppub, Pb, Qb, Xb, Db,  IDa, IDb, R, P, C1, C2, Pm, H, Conc, Add, Sub, Mul, SA, RA)
         /\bob(B, A, Rb, Ppub, Pb, Qb, Xb, Db,  IDa, IDb, R, P, C1, C2, Pm, H, Conc, Add, Sub, Mul, SB, RB)
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role environment() 

def=
const  a, b: agent, 
          
          rb, ppub, pb, qb : public_key,
          xb, db : symmetric_key,            
          ida, idb, r, p : text,
          c1, c2, pm : message,
          h, conc, add, sub, mul: hash_func, 
          alicexxx, bobyyy, temp : protocol_id

intruder_knowledge = {a, b, rb, ppub, pb, qb, p}

composition 
         session(a, b, rb, ppub, pb, qb, xb, db,  ida, idb, r, p, c1, c2, pm, h, conc, add, sub, mul)/\
         session(a, b, rb, ppub, pb, qb, xb, db,  ida, idb, r, p, c1, c2, pm, h, conc, add, sub, mul)
end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal
   secrecy_of temp
   authentication_on alicexxx
   authentication_on bobyyy 
end goal

environment()

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

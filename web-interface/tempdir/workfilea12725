%% PROTOCOL: NetBill
%% VARIANT: simplified and altered from Ogata, Futatsugi paper
%% DATE: 3 August 2008
%% UPDATED: 3 August 2008
%% Verbatim:
%% 1. C - M : Request, H(Goods)
%% 2. M - C : EncGoods, EK(Goods), ECM(EPOID)
%% 3. C - M : Payment, ECM(EPO, SC(EPO))
%% 4. M - N : Endorse, EMN(EPO, SC(EPO),Goods,K,
%% 	SM(EMN(EPO), SC(EPO),Goods,K))
%% 5. N - M : Result, EMN(Receipt, SN(Receipt), ECN (EPOID, CAcct))
%% 6. M - C : Forward, ECM(Receipt, SN(Receipt), ECN (EPOID, CAcct))
%% where:
%%	- H : A one-way hash function.
%% 	- EK : Encryption with symmetric key K. K may be denoted as XY , meaning
%% 		the symmetric key shared by principals X and Y .
%% 	- SX : Signature computed with principal X's private key.
%% 
%% 	- K : Symmetric key generated by M to encrypt Goods.
%% 	- Goods : Information goods C purchases.
%% 	- EPOID : Transaction ID that is globally unique.
%% 	- CAcct : C's NetBill account number.
%% 
%% 	- EPO : C,M,H(Goods), EK(Goods), EPOID, ECN (CAcct)
%% 	- Receipt : C,M, K, EPOID

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role customer (	C,M,N : agent,
		Kcm,Kcn : symmetric_key,
		H, S	: hash_func,
		Hgoods  : message,
		Cacct	: text,
		SND, RCV : channel(dy))
played_by C
def= 
local 	State : nat,
	Goods, Epoid : text,
	K : symmetric_key,
	Ekgoods : message,
	Epo : agent.agent.message.message.text.message,
	Receipt : agent.agent.symmetric_key.text

init State := 0

transition
	request. 	State = 0 	/\ RCV(start) =|>

			State' := 1 	/\ SND(Hgoods)

	encGoods_payment.State = 1 	/\ RCV(EkGoods'.{Epoid'}_Kcm) =|>
		
			State' := 2 	/\ Epo' := C.M.Hgoods.Ekgoods'.Epoid'.{Cacct}_Kcn
					/\ SND({Epo'.S(Epo'.C)}_Kcm)
			    		/\ secret(Cacct,cacct_secret,{C,N})		% account number should not be revealed to merchant
					/\ witness(C,M,merchant_customer_epo,Epo')	% all agents should agree on EPO
					/\ witness(C,N,netbill_customer_epo,Epo')

	forward. 	State = 2	/\ RCV({Receipt'.S(Receipt'.N).{Epoid.Cacct}_Kcn}_Kcm)
					/\ Receipt'= C.M.K'.Epoid			% receipt should contain these
					/\ Ekgoods = {Goods'}_K'			% decrypt goods delivered earlier
					/\ H(Goods') = Hgoods =|>			% customer should have desired goods
		
			State' := 3	/\ wrequest(C,N,customer_netbill_receipt,Receipt')	% customer should have same receipt as server
					/\ wrequest(C,M,customer_merchant_goods, Goods')	% customer should have same goods as merchant
					/\ wrequest(C,N,customer_netbill_goods, Goods')		% customer should have same goods as server

end role
 	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role merchant (	C,M,N : agent,
		Kcm,Kmn : symmetric_key,
		H, S	: hash_func,
		Goods  : text,
		SND, RCV : channel(dy))
played_by M
def= 
local 	State : nat,
	Epoid : text,
	K : symmetric_key,
	X : message	% for parts that merchant can't read
	Epo : agent.agent.message.message.text.message,
	Receipt : agent.agent.symmetric_key.text

init State := 0

transition
	request_encGoods. State = 0 	/\ RCV(H(Goods)) =|>

			State' := 1	/\ K' := new()
					/\ Epoid' := new()
					/\ SND({Goods}_K'.{Epoid'}_Kcm)
					/\ secret(Goods,goods_secret,{C,N,M})		% goods should remain secret
					/\ secret(K',k_secret,{C,N,M})			% key should remain secret
					/\ witness(M,C,customer_merchant_goods,Goods)	% merchant and customer should have same goods

	payment_endorse. State = 1	/\ RCV({Epo'.S(Epo'.C)}_Kcm)
					/\ Epo' = C.M.H(Goods).{Goods}_K.Epoid.X'	%note: may find the attack we're looking for w/o the variable
					=|>
			State' := 2	/\ SND({Epo'.S(Epo'.C).Goods.K.S({Epo'}_Kmn.S(Epo'.C).Goods.K}_Kmn.M))
					/\ wrequest(M,C,merchant_customer_epo,Epo')	% all parties should agree on EPO
					/\ witness(M,N,netbill_merchant_k,K)		% netbill should get the key

	result_forward.	State = 2	/\ RCV({Receipt'.S(Receipt'.N).X'}_Kmn)
					/\ Receipt' = C.M.K.Epoid
					=|>

			State' := 3	/\ SND({Receipt'.S(Receipt'.N).X'}_Kcm)
					/\ wrequest(M,N,merchant_netbill_receipt,Receipt')	% merchant has same receipt as server

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role netbill (	C,M,N : agent,
		Kcn,Kmn : symmetric_key,
		H, S	: hash_func,
		Cacct	: text,
		SND, RCV : channel(dy))
played_by N
def= 
local 	State : nat,
	Epoid, Goods : text,
	K : symmetric_key,
	Epo : agent.agent.message.message.text.message,
	Receipt : agent.agent.symmetric_key.text

init State := 0

transition
	endorse_result.	State = 0	/\ RCV({Epo'.S(Epo'.C).Goods'.K.S({Epo'}_Kmn.S(Epo'.C).Goods'.K'}_Kmn.M))
					/\ Epo' = C.M.H(Goods').{Goods'}_K.Epoid'.{Cacct}_Kcn
	
		State' := 1		/\ Receipt' := C.M.K'.Epoid
					/\ SND({Receipt'.S(Receipt'.N).{Epoid.Cacct}_Kcn}_Kmn
					/\ wrequest(N,C,netbill_customer_epo,Epo')	%everyone agrees on EPO
					/\ wrequest(N,M,netbill_merchant_k,K')		% netbill gets the correct key
					/\ witness(N,M,merchant_netbill_receipt,Receipt')	%all agree on receipt
					/\ witness(N,C,customer_netbill_receipt,Receipt')
					/\ witness(N,C,customer_netbill_goods,Goods')		%customer and server get same goods


end role
 	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role session (	C,M,N	: agent,
		Kcn,Kmn,Kcm : symmetric_key,
		H,S	: hash_func,
		Goods,Cacct : text)

def=
	local SN,RN,SM,RM,SC,RC : channel(dy)

composition

netbill (	C,M,N,
		Kcn,Kmn,
		H, S,
		Cacct,
		SN, RN)

/\merchant (	C,M,N ,
		Kcm,Kmn ,
		H, S	,
		Goods  ,
		SM, RM )

/\customer (	C,M,N ,
		Kcm,Kcn,
		H, S,
		H(Goods),
		Cacct,
		SC, RC)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
role environment ()

def=
	local c,m,n	: agent,
		kcn,kmn,kcm : symmetric_key,
		h,s	: hash_func,
		goods,cacct : text,
		customer_netbill_goods, customer_netbill_receipt, 
		merchant_netbill_receipt, netbill_merchant_k,
		netbill_customer_epo, merchant_customer_epo,
		customer_merchant_goods, k_secret, goods_secret,
		cacct_secret		: protocol_id


intruder_knowledge(c,m,n,h,s)

composition
	session(c,m,n,kcn,kmn,kcm,h,s,goods,cacct)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal
	weak_authentication_on customer_netbill_goods
	weak_authentication_on customer_netbill_receipt
	weak_authentication_on merchant_netbill_receipt
	weak_authentication_on netbill_merchant_k
	weak_authentication_on netbill_customer_epo
	weak_authentication_on merchant_customer_epo
	weak_authentication_on customer_merchant_goods
	secrecy_of k_secret
	secrecy_of goods_secret
	secrecy_of cacct_secret

end goal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
environment()        
role alice (A,B     : agent,
            P0,P3   : public_key,  
            SND,RCV : channel(dy) )
played_by A
% as bank
def=
   local  State   : nat,
          Cw      : text,   % encrypted Will
          W       : text,   % Will
          K       : symmetric_key,
          Ki, Zi  : text,
          Ni, N   : text,
          F       : hash_func
const alice_bob_na, bob_alice_nb : protocol_id

init State := 0
transition
1. State   = 0 /\ RCV(start) =|>
   State' := 2 /\ Ki'    := F(K.Ni.N.P0)    %secret sharing function
               /\ Zi'    := {Ki'}_P3 
               /\ SND(Zi')                    %send to beneficiary
               /\ secret(K,bob_alice_nb,A)
               /\ witness(A,B,bob_alice_nb,Zi')
2. State   = 2 /\ RCV({Zi}_inv(P3)) =|>
   State' := 4 /\ K      := {Zi}_inv(P3)
               /\ W      := {{Cw}_K}_inv(P0) 
               /\ witness(A,B,bob_alice_nb,W)
end role 

role bob (A,B     : agent,
          P0,P3   : public_key,  
          SND,RCV : channel(dy) )
played_by B  
% as beneficiary
def=
   local  State   : nat,
          Zi      : text,
          Dlist   : text,
          Clist   : text

init State := 1
transition
1. State   = 1 /\ RCV(Zi) =|>
   State' := 3 /\ SND({Zi}_inv(P3))  
               /\ request(B,A,bob_alice_nb,Zi)
end role

role session (A,  B   : agent,
              P0,P3   : public_key  )
def=  
   local  SA, SB,RA, RB: channel (dy)
composition
       alice(A,B,P0,P3,SA,RA)
       /\bob(A,B,P0,P3,SB,RB)
end role

role environment()
def=
   const a, b ,i       : agent,
         p0,p3,ki      : public_key,
         zi            : text,
         bob_alice_na, 
         alice_bob_nb,
         na, nb        : protocol_id
intruder_knowledge = {a,b,i,p0,p3,zi}

composition
    session(a,b,p0,p3)
 /\ session(a,i,p0,p3)
end role

goal
secrecy_of na, nb
authentication_on alice_bob_nb
authentication_on bob_alice_na
end goal

environment()

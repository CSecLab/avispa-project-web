role alice (A, S, B: agent,
Ka : symmetric_key,
Hash: hash_func,
SND_BA, RCV_BA: channel(dy))
played_by A
def=
local State : nat,
Rc, Ra, Na, Ns : text,

init 
State := 0
transition
1. State = 0 /\ RCV_BA(start) =|>
State’:= 1 /\ Na’ := new() /\
/\ SND_BA(A.B.Na.Hash(xor(xor(Ka, Na), B), Na))


role session(A, S, B : agent,
Ka, Kb : symmetric_key)
def=
local
SSA, RSA,
SBA, RBA,
SAS, RAS,
SAB, RAB : channel (dy)
composition
alice (A, S, B, Ka, SSA, RSA, SBA, RBA)
/\ server(A, S, B, Ka, Kb, SAS, RAS)
/\ bob (A, S, B, Kb, SAB, RAB)
end role

role environment()
def=
const a, b, s : agent,
ka, kb, ki : symmetric_key,
alice_bob_na, k: protocol_id
intruder_knowledge = {a, b, s, ki}

composition
session(a,s,b,ka,kb)
/\ session(a,s,i,ka,ki)
/\ session(i,s,b,ki,kb)
end role

goal
secrecy_of k
authentication_on alice_bob_na
end goal

environment()

 